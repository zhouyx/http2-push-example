self.AMP_CONFIG||(self.AMP_CONFIG={"localDev":true,"allow-doc-opt-in":["amp-date-picker","amp-next-page","ampdoc-shell","disable-amp-story-desktop","linker-meta-opt-in","inabox-viewport-friendly","amp-img-auto-sizes"],"allow-url-opt-in":["pump-early-frame","twitter-default-placeholder","twitter-default-placeholder-pulse","twitter-default-placeholder-fade"],"canary":0,"expAdsenseA4A":0.01,"a4aProfilingRate":0.01,"ad-type-custom":1,"amp-access-iframe":1,"amp-apester-media":1,"amp-ima-video":1,"amp-playbuzz":1,"chunked-amp":1,"amp-auto-ads":1,"amp-auto-ads-adsense-holdout":0.1,"amp-auto-ads-adsense-responsive":0.05,"version-locking":1,"as-use-attr-for-format":0.01,"a4aFastFetchDoubleclickLaunched":0,"a4aFastFetchAdSenseLaunched":0,"pump-early-frame":1,"amp-live-list-sorting":1,"amp-sidebar toolbar":1,"amp-consent":1,"amp-story-responsive-units":1,"amp-story-v1":1,"expAdsenseUnconditionedCanonical":0.01,"expAdsenseCanonical":0.01,"font-display-swap":1,"amp-date-picker":1,"linker-meta-opt-in":1,"user-error-reporting":1,"no-initial-intersection":1,"no-sync-xhr-in-ads":1,"doubleclickSraExp":0.01,"doubleclickSraReportExcludedBlock":0.1,"ampdoc-closest":0.01,"linker-form":1,"scroll-height-bounce":0,"scroll-height-minheight":0,"hidden-mutation-observer":1,"sandbox-ads":1,"fixed-elements-in-lightbox":1,"amp-list-viewport-resize":1,"amp-list-resizable-children":1,"amp-auto-lightbox":0.5,"amp-list-load-more":1,"amp-ad-ff-adx-ady":0.01});/*AMP_CONFIG*/var global=self;self.AMP=self.AMP||[];try{(function(_){
  (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.cssText = void 0;
  var cssText = "html{overflow-x:hidden!important}body,html{height:auto!important}html.i-amphtml-fie{height:100%!important;width:100%!important}body{margin:0!important;-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;-ms-text-size-adjust:100%;text-size-adjust:100%}[hidden]{display:none!important}html.i-amphtml-singledoc.i-amphtml-embedded{-ms-touch-action:pan-y;touch-action:pan-y}html.i-amphtml-fie>body,html.i-amphtml-singledoc>body{overflow:visible!important}html.i-amphtml-fie:not(.i-amphtml-inabox)>body,html.i-amphtml-singledoc:not(.i-amphtml-inabox)>body{position:relative!important}html.i-amphtml-webview>body{overflow-x:hidden!important;overflow-y:visible!important;min-height:100vh!important}html.i-amphtml-ios-embed-legacy>body{overflow-x:hidden!important;overflow-y:auto!important;position:absolute!important}html.i-amphtml-ios-embed{overflow-y:auto!important;position:static}#i-amphtml-wrapper{overflow-x:hidden!important;overflow-y:auto!important;position:absolute!important;top:0!important;left:0!important;right:0!important;bottom:0!important;margin:0!important;display:block!important}html.i-amphtml-ios-embed.i-amphtml-ios-overscroll,html.i-amphtml-ios-embed.i-amphtml-ios-overscroll>#i-amphtml-wrapper{-webkit-overflow-scrolling:touch!important}#i-amphtml-wrapper>body{position:relative!important;border-top:1px solid transparent!important}#i-amphtml-wrapper+body .i-amphtml-lightbox-element,#i-amphtml-wrapper+body[i-amphtml-lightbox]{visibility:hidden}#i-amphtml-wrapper+body[i-amphtml-lightbox] .i-amphtml-lightbox-element{visibility:visible}html.i-amphtml-ios-embed-sd{overflow:hidden!important;position:static!important}html.i-amphtml-ios-embed-sd>body,html.i-amphtml-singledoc.i-amphtml-ios-embed-sd>body{position:absolute!important;top:0!important;left:0!important;right:0!important;bottom:0!important;overflow:hidden!important}.i-amphtml-body-minheight>body{min-height:calc(100vh + 1px)}.i-amphtml-element{display:inline-block}.i-amphtml-blurry-placeholder{-webkit-transition:opacity 0.3s cubic-bezier(0.0,0.0,0.2,1)!important;transition:opacity 0.3s cubic-bezier(0.0,0.0,0.2,1)!important}[layout=nodisplay]:not(.i-amphtml-element){display:none!important}.i-amphtml-layout-fixed,[layout=fixed][width][height]:not(.i-amphtml-layout-fixed){display:inline-block;position:relative}.i-amphtml-layout-responsive,[layout=responsive][width][height]:not(.i-amphtml-layout-responsive),[width][height][sizes]:not(.i-amphtml-layout-responsive){display:block;position:relative}.i-amphtml-layout-intrinsic{display:inline-block;position:relative;max-width:100%}.i-amphtml-intrinsic-sizer{max-width:100%;display:block!important}.i-amphtml-layout-container,.i-amphtml-layout-fixed-height,[layout=container],[layout=fixed-height][height]{display:block;position:relative}.i-amphtml-layout-fill,[layout=fill]:not(.i-amphtml-layout-fill){display:block;overflow:hidden!important;position:absolute;top:0;left:0;bottom:0;right:0}.i-amphtml-layout-flex-item,[layout=flex-item]:not(.i-amphtml-layout-flex-item){display:block;position:relative;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto}.i-amphtml-layout-fluid{position:relative}.i-amphtml-layout-size-defined{overflow:hidden!important}.i-amphtml-layout-awaiting-size{position:absolute!important;top:auto!important;bottom:auto!important}i-amphtml-sizer{display:block!important}.i-amphtml-blurry-placeholder,.i-amphtml-fill-content{display:block;height:0;max-height:100%;max-width:100%;min-height:100%;min-width:100%;width:0;margin:auto}.i-amphtml-layout-size-defined .i-amphtml-fill-content{position:absolute;top:0;left:0;bottom:0;right:0}.i-amphtml-layout-intrinsic .i-amphtml-sizer{max-width:100%}.i-amphtml-replaced-content,.i-amphtml-screen-reader{padding:0!important;border:none!important}.i-amphtml-screen-reader{position:fixed!important;top:0px!important;left:0px!important;width:4px!important;height:4px!important;opacity:0!important;overflow:hidden!important;margin:0!important;display:block!important;visibility:visible!important}.i-amphtml-screen-reader~.i-amphtml-screen-reader{left:8px!important}.i-amphtml-screen-reader~.i-amphtml-screen-reader~.i-amphtml-screen-reader{left:12px!important}.i-amphtml-screen-reader~.i-amphtml-screen-reader~.i-amphtml-screen-reader~.i-amphtml-screen-reader{left:16px!important}.i-amphtml-unresolved{position:relative;overflow:hidden!important}#i-amphtml-wrapper.i-amphtml-scroll-disabled,.i-amphtml-scroll-disabled{overflow-x:hidden!important;overflow-y:hidden!important}.i-amphtml-select-disabled{-webkit-user-select:none!important;-moz-user-select:none!important;-ms-user-select:none!important;user-select:none!important}.i-amphtml-notbuilt,[layout]:not(.i-amphtml-element){position:relative;overflow:hidden!important;color:transparent!important}.i-amphtml-notbuilt:not(.i-amphtml-layout-container)>*,[layout]:not([layout=container]):not(.i-amphtml-element)>*{display:none}.i-amphtml-ghost{visibility:hidden!important}.i-amphtml-element>[placeholder],[layout]:not(.i-amphtml-element)>[placeholder]{display:block}.i-amphtml-element>[placeholder].amp-hidden,.i-amphtml-element>[placeholder].hidden{visibility:hidden}.i-amphtml-element:not(.amp-notsupported)>[fallback],.i-amphtml-layout-container>[placeholder].amp-hidden,.i-amphtml-layout-container>[placeholder].hidden{display:none}.i-amphtml-layout-size-defined>[fallback],.i-amphtml-layout-size-defined>[placeholder]{position:absolute!important;top:0!important;left:0!important;right:0!important;bottom:0!important;z-index:1}.i-amphtml-notbuilt>[placeholder]{display:block!important}.i-amphtml-hidden-by-media-query{display:none!important}.i-amphtml-element-error{background:red!important;color:#fff!important;position:relative!important}.i-amphtml-element-error:before{content:attr(error-message)}i-amp-scroll-container,i-amphtml-scroll-container{position:absolute;top:0;left:0;right:0;bottom:0;display:block}i-amp-scroll-container.amp-active,i-amphtml-scroll-container.amp-active{overflow:auto;-webkit-overflow-scrolling:touch}.i-amphtml-loading-container{display:block!important;pointer-events:none;z-index:1}.i-amphtml-notbuilt>.i-amphtml-loading-container{display:block!important}.i-amphtml-loading-container.amp-hidden{visibility:hidden}.i-amphtml-loader-line{position:absolute;top:0;left:0;right:0;height:1px;overflow:hidden!important;background-color:hsla(0,0%,59.2%,0.2);display:block}.i-amphtml-loader-moving-line{display:block;position:absolute;width:100%;height:100%!important;background-color:hsla(0,0%,59.2%,0.65);z-index:2}@-webkit-keyframes i-amphtml-loader-line-moving{0%{-webkit-transform:translateX(-100%);transform:translateX(-100%)}to{-webkit-transform:translateX(100%);transform:translateX(100%)}}@keyframes i-amphtml-loader-line-moving{0%{-webkit-transform:translateX(-100%);transform:translateX(-100%)}to{-webkit-transform:translateX(100%);transform:translateX(100%)}}.i-amphtml-loader-line.amp-active .i-amphtml-loader-moving-line{-webkit-animation:i-amphtml-loader-line-moving 4s ease infinite;animation:i-amphtml-loader-line-moving 4s ease infinite}.i-amphtml-loader{position:absolute;display:block;height:10px;top:50%;left:50%;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);-webkit-transform-origin:50% 50%;transform-origin:50% 50%;white-space:nowrap}.i-amphtml-loader.amp-active .i-amphtml-loader-dot{-webkit-animation:i-amphtml-loader-dots 2s infinite;animation:i-amphtml-loader-dots 2s infinite}.i-amphtml-loader-dot{position:relative;display:inline-block;height:10px;width:10px;margin:2px;border-radius:100%;background-color:rgba(0,0,0,0.3);box-shadow:2px 2px 2px 1px rgba(0,0,0,0.2);will-change:transform}.i-amphtml-loader .i-amphtml-loader-dot:first-child{-webkit-animation-delay:0s;animation-delay:0s}.i-amphtml-loader .i-amphtml-loader-dot:nth-child(2){-webkit-animation-delay:.1s;animation-delay:.1s}.i-amphtml-loader .i-amphtml-loader-dot:nth-child(3){-webkit-animation-delay:.2s;animation-delay:.2s}@-webkit-keyframes i-amphtml-loader-dots{0%,to{-webkit-transform:scale(.7);transform:scale(.7);background-color:rgba(0,0,0,0.3)}50%{-webkit-transform:scale(.8);transform:scale(.8);background-color:rgba(0,0,0,0.5)}}@keyframes i-amphtml-loader-dots{0%,to{-webkit-transform:scale(.7);transform:scale(.7);background-color:rgba(0,0,0,0.3)}50%{-webkit-transform:scale(.8);transform:scale(.8);background-color:rgba(0,0,0,0.5)}}.i-amphtml-element>[overflow]{cursor:pointer;position:relative;z-index:2;visibility:hidden}.i-amphtml-element>[overflow].amp-visible{visibility:visible}template{display:none!important}.amp-border-box,.amp-border-box *,.amp-border-box :after,.amp-border-box :before{box-sizing:border-box}amp-pixel{display:none!important}amp-instagram{padding:64px 0px 0px!important;background-color:#fff}amp-analytics,amp-story-auto-ads{position:fixed!important;top:0!important;width:1px!important;height:1px!important;overflow:hidden!important;visibility:hidden}html.i-amphtml-fie>amp-analytics{position:initial!important}amp-iframe iframe{box-sizing:border-box!important}[amp-access][amp-access-hide]{display:none}[subscriptions-dialog],body:not(.i-amphtml-subs-ready) [subscriptions-action],body:not(.i-amphtml-subs-ready) [subscriptions-section]{display:none!important}[visible-when-invalid]:not(.visible),amp-experiment,amp-live-list>[update],amp-share-tracking,form [submit-error],form [submit-success],form [submitting]{display:none}.i-amphtml-jank-meter{position:fixed;background-color:rgba(232,72,95,0.5);bottom:0;right:0;color:#fff;font-size:16px;z-index:1000;padding:5px}amp-accordion{display:block!important}amp-accordion>section{float:none!important}amp-accordion>section>*{float:none!important;display:block!important;overflow:hidden!important;position:relative!important}.i-amphtml-accordion-content,.i-amphtml-accordion-header,amp-accordion,amp-accordion>section{margin:0}.i-amphtml-accordion-header{cursor:pointer;background-color:#efefef;padding-right:20px;border:1px solid #dfdfdf}amp-accordion>section>:last-child{display:none!important}amp-accordion>section[expanded]>:last-child{display:block!important}amp-list[resizable-children]>.i-amphtml-loading-container.amp-hidden{display:none!important}amp-list[load-more] [load-more-button],amp-list[load-more] [load-more-end],amp-list[load-more] [load-more-failed],amp-list[load-more] [load-more-loading]{display:none}amp-story-page,amp-story[standalone]{display:block!important;height:100%!important;margin:0!important;padding:0!important;overflow:hidden!important;width:100%!important}amp-story[standalone]{background-color:#202125!important;position:relative!important}amp-story-page{background-color:#757575}amp-story .i-amphtml-loader{display:none!important}amp-story-page:not(:first-of-type):not([distance]):not([active]){-webkit-transform:translateY(1000vh)!important;transform:translateY(1000vh)!important}amp-autocomplete{position:relative!important;display:inline-block!important}amp-autocomplete>input{padding:4px!important}[amp-fx^=fly-in]{visibility:hidden}@media only screen and (max-width:979px){amp-addthis[data-widget-type=floating]{position:fixed!important;width:100%!important;height:50px;bottom:0}}@media only screen and (min-width:980px){amp-addthis[data-widget-type=floating]{display:none}}\n/*# sourceURL=/css/amp.css*/";
  exports.cssText = cssText;

  },{}],2:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installImg = installImg;
  exports.AmpImg = void 0;

  var _baseElement = require("../src/base-element");

  var _layout = require("../src/layout");

  var _log = require("../src/log");

  var _img = require("../src/utils/img");

  var _experiments = require("../src/experiments");

  var _eventHelper = require("../src/event-helper");

  var _customElementRegistry = require("../src/service/custom-element-registry");

  var _style = require("../src/style");

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  /**
   * Attributes to propagate to internal image when changed externally.
   * @type {!Array<string>}
   */
  var ATTRIBUTES_TO_PROPAGATE = ['alt', 'title', 'referrerpolicy', 'aria-label', 'aria-describedby', 'aria-labelledby', 'srcset', 'src', 'sizes'];

  var AmpImg =
  /*#__PURE__*/
  function (_BaseElement) {
    _inheritsLoose(AmpImg, _BaseElement);

    /** @param {!AmpElement} element */
    function AmpImg(element) {
      var _this;

      _this = _BaseElement.call(this, element) || this;
      /** @private {boolean} */

      _this.allowImgLoadFallback_ = true;
      /** @private {boolean} */

      _this.prerenderAllowed_ = true;
      /** @private {?Element} */

      _this.img_ = null;
      /** @private {?UnlistenDef} */

      _this.unlistenLoad_ = null;
      /** @private {?UnlistenDef} */

      _this.unlistenError_ = null;
      /** @private {boolean} */

      _this.autoGenerateSizes_ = (0, _experiments.isExperimentOn)(_this.win, 'amp-img-auto-sizes');
      /**
       * The current width used by the automatically generated sizes attribute
       * @private {number}
       * */

      _this.sizesWidth_ = 0;
      return _this;
    }
    /** @override */


    var _proto = AmpImg.prototype;

    _proto.mutatedAttributesCallback = function mutatedAttributesCallback(mutations) {
      if (this.img_) {
        var attrs = ATTRIBUTES_TO_PROPAGATE.filter(function (value) {
          return mutations[value] !== undefined;
        });
        this.propagateAttributes(attrs, this.img_,
        /* opt_removeMissingAttrs */
        true);
        (0, _img.guaranteeSrcForSrcsetUnsupportedBrowsers)(this.img_);
      }
    }
    /** @override */
    ;

    _proto.onMeasureChanged = function onMeasureChanged() {
      if (this.autoGenerateSizes_) {
        this.maybeGenerateSizes_();
      }
    }
    /** @override */
    ;

    _proto.preconnectCallback = function preconnectCallback(onLayout) {
      // NOTE(@wassgha): since parseSrcset is computationally expensive and can
      // not be inside the `buildCallback`, we went with preconnecting to the
      // `src` url if it exists or the first srcset url.
      var src = this.element.getAttribute('src');

      if (src) {
        this.preconnect.url(src, onLayout);
      } else {
        var srcset = this.element.getAttribute('srcset');

        if (!srcset) {
          return;
        } // We try to find the first url in the srcset


        var srcseturl = /\S+/.exec(srcset); // Connect to the first url if it exists

        if (srcseturl) {
          this.preconnect.url(srcseturl[0], onLayout);
        }
      }
    }
    /** @override */
    ;

    _proto.firstAttachedCallback = function firstAttachedCallback() {
      if (this.element.hasAttribute('noprerender')) {
        this.prerenderAllowed_ = false;
      }
    }
    /** @override */
    ;

    _proto.isLayoutSupported = function isLayoutSupported(layout) {
      return (0, _layout.isLayoutSizeDefined)(layout);
    }
    /**
     * Create the actual image element and set up instance variables.
     * Called lazily in the first `#layoutCallback`.
     */
    ;

    _proto.initialize_ = function initialize_() {
      if (this.img_) {
        return;
      } // If this amp-img IS the fallback then don't allow it to have its own
      // fallback to stop from nested fallback abuse.


      this.allowImgLoadFallback_ = !this.element.hasAttribute('fallback'); // For inabox SSR, image will have been written directly to DOM so no need
      // to recreate.  Calling appendChild again will have no effect.

      if (this.element.hasAttribute('i-amphtml-ssr')) {
        this.img_ = this.element.querySelector('img');
      }

      this.img_ = this.img_ || new Image();
      this.img_.setAttribute('decoding', 'async');

      if (this.element.id) {
        this.img_.setAttribute('amp-img-id', this.element.id);
      } // Remove role=img otherwise this breaks screen-readers focus and
      // only read "Graphic" when using only 'alt'.


      if (this.element.getAttribute('role') == 'img') {
        this.element.removeAttribute('role');
        this.user().error('AMP-IMG', 'Setting role=img on amp-img elements breaks ' + 'screen readers please just set alt or ARIA attributes, they will ' + 'be correctly propagated for the underlying <img> element.');
      }

      this.propagateAttributes(ATTRIBUTES_TO_PROPAGATE, this.img_);
      (0, _img.guaranteeSrcForSrcsetUnsupportedBrowsers)(this.img_);

      if (this.autoGenerateSizes_) {
        this.maybeGenerateSizes_();
      }

      this.applyFillContent(this.img_, true);
      this.element.appendChild(this.img_);
    }
    /**
     * This function automatically generates sizes for amp-imgs without
     * the sizes attribute.
     * @private
     */
    ;

    _proto.maybeGenerateSizes_ = function maybeGenerateSizes_() {
      var _this2 = this;

      if (!this.img_) {
        return;
      } // No need to generate sizes if already present.


      var sizes = this.element.getAttribute('sizes');

      if (sizes) {
        return;
      } // Sizes is useless without the srcset attribute or if the srcset
      // attribute uses the x descriptor.


      var srcset = this.element.getAttribute('srcset');

      if (!srcset || /[0-9]+x(?:,|$)/.test(srcset)) {
        return;
      }

      var width = this.getLayoutWidth();

      if (!this.shouldSetSizes_(width)) {
        return;
      }

      var viewportWidth = this.getViewport().getWidth();
      var entry = "(max-width: " + viewportWidth + "px) " + width + "px, ";
      var defaultSize = width + 'px';

      if (this.getLayout() !== _layout.Layout.FIXED) {
        var ratio = Math.round(width * 100 / viewportWidth);
        defaultSize = Math.max(ratio, 100) + 'vw';
      }

      var generatedSizes = entry + defaultSize;
      this.mutateElement(function () {
        _this2.img_.setAttribute('sizes', generatedSizes);
      });
      this.sizesWidth_ = width;
    }
    /**
     * @param {number} newWidth
     * @private
     */
    ;

    _proto.shouldSetSizes_ = function shouldSetSizes_(newWidth) {
      if (!this.img_.hasAttribute('sizes')) {
        return true;
      }

      return newWidth > this.sizesWidth_;
    }
    /** @override */
    ;

    _proto.prerenderAllowed = function prerenderAllowed() {
      return this.prerenderAllowed_;
    }
    /** @override */
    ;

    _proto.reconstructWhenReparented = function reconstructWhenReparented() {
      return false;
    }
    /** @override */
    ;

    _proto.layoutCallback = function layoutCallback() {
      var _this3 = this;

      this.initialize_();
      var img = (0, _log.dev)().assertElement(this.img_);
      this.unlistenLoad_ = (0, _eventHelper.listen)(img, 'load', function () {
        return _this3.hideFallbackImg_();
      });
      this.unlistenError_ = (0, _eventHelper.listen)(img, 'error', function () {
        return _this3.onImgLoadingError_();
      });

      if (this.getLayoutWidth() <= 0) {
        return Promise.resolve();
      }

      return this.loadPromise(img);
    }
    /** @override */
    ;

    _proto.unlayoutCallback = function unlayoutCallback() {
      if (this.unlistenError_) {
        this.unlistenError_();
        this.unlistenError_ = null;
      }

      if (this.unlistenLoad_) {
        this.unlistenLoad_();
        this.unlistenLoad_ = null;
      }

      return true;
    }
    /** @override **/
    ;

    _proto.firstLayoutCompleted = function firstLayoutCompleted() {
      var placeholder = this.getPlaceholder();

      if (placeholder && placeholder.classList.contains('i-amphtml-blurry-placeholder') && (0, _experiments.isExperimentOn)(this.win, 'blurry-placeholder')) {
        (0, _style.setImportantStyles)(placeholder, {
          'opacity': 0
        });
      } else {
        this.togglePlaceholder(false);
      }
    }
    /**
     * @private
     */
    ;

    _proto.hideFallbackImg_ = function hideFallbackImg_() {
      var _this4 = this;

      if (!this.allowImgLoadFallback_ && this.img_.classList.contains('i-amphtml-ghost')) {
        this.getVsync().mutate(function () {
          _this4.img_.classList.remove('i-amphtml-ghost');

          _this4.toggleFallback(false);
        });
      }
    }
    /**
     * If the image fails to load, show a fallback or placeholder instead.
     * @private
     */
    ;

    _proto.onImgLoadingError_ = function onImgLoadingError_() {
      var _this5 = this;

      if (this.allowImgLoadFallback_) {
        this.getVsync().mutate(function () {
          _this5.img_.classList.add('i-amphtml-ghost');

          _this5.toggleFallback(true); // Hide placeholders, as browsers that don't support webp
          // Would show the placeholder underneath a transparent fallback


          _this5.togglePlaceholder(false);
        });
        this.allowImgLoadFallback_ = false;
      }
    };

    return AmpImg;
  }(_baseElement.BaseElement);
  /**
   * @param {!Window} win Destination window for the new element.
   * @this {undefined}  // Make linter happy
   */


  exports.AmpImg = AmpImg;

  function installImg(win) {
    (0, _customElementRegistry.registerElement)(win, 'amp-img', AmpImg);
  }

  },{"../src/base-element":14,"../src/event-helper":31,"../src/experiments":32,"../src/layout":49,"../src/log":51,"../src/service/custom-element-registry":79,"../src/style":118,"../src/utils/img":128}],3:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installLayout = installLayout;

  var _baseElement = require("../src/base-element");

  var _layout = require("../src/layout");

  var _customElementRegistry = require("../src/service/custom-element-registry");

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  var AmpLayout =
  /*#__PURE__*/
  function (_BaseElement) {
    _inheritsLoose(AmpLayout, _BaseElement);

    function AmpLayout() {
      return _BaseElement.apply(this, arguments) || this;
    }

    var _proto = AmpLayout.prototype;

    /** @override */
    _proto.isLayoutSupported = function isLayoutSupported(layout) {
      return layout == _layout.Layout.CONTAINER || (0, _layout.isLayoutSizeDefined)(layout);
    }
    /** @override */
    ;

    _proto.buildCallback = function buildCallback() {
      if (this.getLayout() == _layout.Layout.CONTAINER) {
        return;
      }

      var container = this.win.document.createElement('div');
      this.applyFillContent(container);
      this.getRealChildNodes().forEach(function (child) {
        container.appendChild(child);
      });
      this.element.appendChild(container);
    }
    /** @override */
    ;

    _proto.prerenderAllowed = function prerenderAllowed() {
      // Allow amp-layout to be built in prerender mode.
      return true;
    };

    return AmpLayout;
  }(_baseElement.BaseElement);
  /**
   * @param {!Window} win Destination window for the new element.
   */


  function installLayout(win) {
    (0, _customElementRegistry.registerElement)(win, 'amp-layout', AmpLayout);
  }

  },{"../src/base-element":14,"../src/layout":49,"../src/service/custom-element-registry":79}],4:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installPixel = installPixel;
  exports.AmpPixel = void 0;

  var _baseElement = require("../src/base-element");

  var _services = require("../src/services");

  var _pixel = require("../src/pixel");

  var _log = require("../src/log");

  var _customElementRegistry = require("../src/service/custom-element-registry");

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  var TAG = 'amp-pixel';
  /**
   * A simple analytics instrument. Fires as an impression signal.
   */

  var AmpPixel =
  /*#__PURE__*/
  function (_BaseElement) {
    _inheritsLoose(AmpPixel, _BaseElement);

    /** @override */
    function AmpPixel(element) {
      var _this;

      _this = _BaseElement.call(this, element) || this;
      /** @private {?Promise<!Image>} */

      _this.triggerPromise_ = null;
      return _this;
    }
    /** @override */


    var _proto = AmpPixel.prototype;

    _proto.isLayoutSupported = function isLayoutSupported(unusedLayout) {
      // No matter what layout is: the pixel is always non-displayed.
      return true;
    }
    /** @override */
    ;

    _proto.buildCallback = function buildCallback() {
      // Element is invisible.
      this.element.setAttribute('aria-hidden', 'true');
      /** @private {?string} */

      this.referrerPolicy_ = this.element.getAttribute('referrerpolicy');

      if (this.referrerPolicy_) {
        // Safari doesn't support referrerPolicy yet. We're using an
        // iframe based trick to remove referrer, which apparently can
        // only do "no-referrer".
        (0, _log.userAssert)(this.referrerPolicy_ == 'no-referrer', TAG + ": invalid \"referrerpolicy\" value \"" + this.referrerPolicy_ + "\"." + ' Only "no-referrer" is supported');
      }

      if (this.element.hasAttribute('i-amphtml-ssr') && this.element.querySelector('img')) {
        (0, _log.dev)().info(TAG, 'inabox img already present');
        return;
      } // Trigger, but only when visible.


      var viewer = _services.Services.viewerForDoc(this.getAmpDoc());

      viewer.whenFirstVisible().then(this.trigger_.bind(this));
    }
    /**
     * Triggers the signal.
     * @private
     */
    ;

    _proto.trigger_ = function trigger_() {
      var _this2 = this;

      if (this.triggerPromise_) {
        // TODO(dvoytenko, #8780): monitor, confirm if there's a bug and remove.
        (0, _log.dev)().error(TAG, 'duplicate pixel');
        return this.triggerPromise_;
      } // Delay(1) provides a rudimentary "idle" signal.
      // TODO(dvoytenko): use an improved idle signal when available.


      this.triggerPromise_ = _services.Services.timerFor(this.win).promise(1).then(function () {
        var src = _this2.element.getAttribute('src');

        if (!src) {
          return;
        }

        return _services.Services.urlReplacementsForDoc(_this2.element).expandUrlAsync(_this2.assertSource_(src)).then(function (src) {
          var pixel = (0, _pixel.createPixel)(_this2.win, src, _this2.referrerPolicy_);
          (0, _log.dev)().info(TAG, 'pixel triggered: ', src);
          return pixel;
        });
      });
    }
    /**
     * @param {?string} src
     * @return {string}
     * @private
     */
    ;

    _proto.assertSource_ = function assertSource_(src) {
      (0, _log.userAssert)(/^(https\:\/\/|\/\/)/i.test(src), 'The <amp-pixel> src attribute must start with ' + '"https://" or "//". Invalid value: ' + src);
      return (
        /** @type {string} */
        src
      );
    };

    return AmpPixel;
  }(_baseElement.BaseElement);
  /**
   * @param {!Window} win Destination window for the new element.
   */


  exports.AmpPixel = AmpPixel;

  function installPixel(win) {
    (0, _customElementRegistry.registerElement)(win, TAG, AmpPixel);
  }

  },{"../src/base-element":14,"../src/log":51,"../src/pixel":56,"../src/service/custom-element-registry":79,"../src/services":112}],5:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installCustomElements = installCustomElements;

  /*!

  Copyright (C) 2014-2016 by Andrea Giammarchi - @WebReflection

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.

  */
  // global window Object
  // optional polyfill info
  //    'auto' used by default, everything is feature detected
  //    'force' use the polyfill even if not fully needed
  function installCustomElements(window, polyfill) {
    'use strict'; // DO NOT USE THIS FILE DIRECTLY, IT WON'T WORK
    // THIS IS A PROJECT BASED ON A BUILD SYSTEM
    // THIS FILE IS JUST WRAPPED UP RESULTING IN
    // build/document-register-element.node.js

    var document = window.document,
        Object = window.Object;

    var htmlClass = function (info) {
      // (C) Andrea Giammarchi - @WebReflection - MIT Style
      var catchClass = /^[A-Z]+[a-z]/,
          filterBy = function filterBy(re) {
        var arr = [],
            tag;

        for (tag in register) {
          if (re.test(tag)) arr.push(tag);
        }

        return arr;
      },
          add = function add(Class, tag) {
        tag = tag.toLowerCase();

        if (!(tag in register)) {
          register[Class] = (register[Class] || []).concat(tag);
          register[tag] = register[tag.toUpperCase()] = Class;
        }
      },
          register = (Object.create || Object)(null),
          htmlClass = {},
          i,
          section,
          tags,
          Class;

      for (section in info) {
        for (Class in info[section]) {
          tags = info[section][Class];
          register[Class] = tags;

          for (i = 0; i < tags.length; i++) {
            register[tags[i].toLowerCase()] = register[tags[i].toUpperCase()] = Class;
          }
        }
      }

      htmlClass.get = function get(tagOrClass) {
        return typeof tagOrClass === 'string' ? register[tagOrClass] || (catchClass.test(tagOrClass) ? [] : '') : filterBy(tagOrClass);
      };

      htmlClass.set = function set(tag, Class) {
        return catchClass.test(tag) ? add(tag, Class) : add(Class, tag), htmlClass;
      };

      return htmlClass;
    }({
      "collections": {
        "HTMLAllCollection": ["all"],
        "HTMLCollection": ["forms"],
        "HTMLFormControlsCollection": ["elements"],
        "HTMLOptionsCollection": ["options"]
      },
      "elements": {
        "Element": ["element"],
        "HTMLAnchorElement": ["a"],
        "HTMLAppletElement": ["applet"],
        "HTMLAreaElement": ["area"],
        "HTMLAttachmentElement": ["attachment"],
        "HTMLAudioElement": ["audio"],
        "HTMLBRElement": ["br"],
        "HTMLBaseElement": ["base"],
        "HTMLBodyElement": ["body"],
        "HTMLButtonElement": ["button"],
        "HTMLCanvasElement": ["canvas"],
        "HTMLContentElement": ["content"],
        "HTMLDListElement": ["dl"],
        "HTMLDataElement": ["data"],
        "HTMLDataListElement": ["datalist"],
        "HTMLDetailsElement": ["details"],
        "HTMLDialogElement": ["dialog"],
        "HTMLDirectoryElement": ["dir"],
        "HTMLDivElement": ["div"],
        "HTMLDocument": ["document"],
        "HTMLElement": ["element", "abbr", "address", "article", "aside", "b", "bdi", "bdo", "cite", "code", "command", "dd", "dfn", "dt", "em", "figcaption", "figure", "footer", "header", "i", "kbd", "mark", "nav", "noscript", "rp", "rt", "ruby", "s", "samp", "section", "small", "strong", "sub", "summary", "sup", "u", "var", "wbr"],
        "HTMLEmbedElement": ["embed"],
        "HTMLFieldSetElement": ["fieldset"],
        "HTMLFontElement": ["font"],
        "HTMLFormElement": ["form"],
        "HTMLFrameElement": ["frame"],
        "HTMLFrameSetElement": ["frameset"],
        "HTMLHRElement": ["hr"],
        "HTMLHeadElement": ["head"],
        "HTMLHeadingElement": ["h1", "h2", "h3", "h4", "h5", "h6"],
        "HTMLHtmlElement": ["html"],
        "HTMLIFrameElement": ["iframe"],
        "HTMLImageElement": ["img"],
        "HTMLInputElement": ["input"],
        "HTMLKeygenElement": ["keygen"],
        "HTMLLIElement": ["li"],
        "HTMLLabelElement": ["label"],
        "HTMLLegendElement": ["legend"],
        "HTMLLinkElement": ["link"],
        "HTMLMapElement": ["map"],
        "HTMLMarqueeElement": ["marquee"],
        "HTMLMediaElement": ["media"],
        "HTMLMenuElement": ["menu"],
        "HTMLMenuItemElement": ["menuitem"],
        "HTMLMetaElement": ["meta"],
        "HTMLMeterElement": ["meter"],
        "HTMLModElement": ["del", "ins"],
        "HTMLOListElement": ["ol"],
        "HTMLObjectElement": ["object"],
        "HTMLOptGroupElement": ["optgroup"],
        "HTMLOptionElement": ["option"],
        "HTMLOutputElement": ["output"],
        "HTMLParagraphElement": ["p"],
        "HTMLParamElement": ["param"],
        "HTMLPictureElement": ["picture"],
        "HTMLPreElement": ["pre"],
        "HTMLProgressElement": ["progress"],
        "HTMLQuoteElement": ["blockquote", "q", "quote"],
        "HTMLScriptElement": ["script"],
        "HTMLSelectElement": ["select"],
        "HTMLShadowElement": ["shadow"],
        "HTMLSlotElement": ["slot"],
        "HTMLSourceElement": ["source"],
        "HTMLSpanElement": ["span"],
        "HTMLStyleElement": ["style"],
        "HTMLTableCaptionElement": ["caption"],
        "HTMLTableCellElement": ["td", "th"],
        "HTMLTableColElement": ["col", "colgroup"],
        "HTMLTableElement": ["table"],
        "HTMLTableRowElement": ["tr"],
        "HTMLTableSectionElement": ["thead", "tbody", "tfoot"],
        "HTMLTemplateElement": ["template"],
        "HTMLTextAreaElement": ["textarea"],
        "HTMLTimeElement": ["time"],
        "HTMLTitleElement": ["title"],
        "HTMLTrackElement": ["track"],
        "HTMLUListElement": ["ul"],
        "HTMLUnknownElement": ["unknown", "vhgroupv", "vkeygen"],
        "HTMLVideoElement": ["video"]
      },
      "nodes": {
        "Attr": ["node"],
        "Audio": ["audio"],
        "CDATASection": ["node"],
        "CharacterData": ["node"],
        "Comment": ["#comment"],
        "Document": ["#document"],
        "DocumentFragment": ["#document-fragment"],
        "DocumentType": ["node"],
        "HTMLDocument": ["#document"],
        "Image": ["img"],
        "Option": ["option"],
        "ProcessingInstruction": ["node"],
        "ShadowRoot": ["#shadow-root"],
        "Text": ["#text"],
        "XMLDocument": ["xml"]
      }
    }); // passed at runtime, configurable
    // via nodejs module


    if (!polyfill) polyfill = 'auto';

    var // V0 polyfill entry
    REGISTER_ELEMENT = 'registerElement',
        // IE < 11 only + old WebKit for attributes + feature detection
    EXPANDO_UID = '__' + REGISTER_ELEMENT + (window.Math.random() * 10e4 >> 0),
        // shortcuts and costants
    ADD_EVENT_LISTENER = 'addEventListener',
        ATTACHED = 'attached',
        CALLBACK = 'Callback',
        DETACHED = 'detached',
        EXTENDS = 'extends',
        ATTRIBUTE_CHANGED_CALLBACK = 'attributeChanged' + CALLBACK,
        ATTACHED_CALLBACK = ATTACHED + CALLBACK,
        CONNECTED_CALLBACK = 'connected' + CALLBACK,
        DISCONNECTED_CALLBACK = 'disconnected' + CALLBACK,
        CREATED_CALLBACK = 'created' + CALLBACK,
        DETACHED_CALLBACK = DETACHED + CALLBACK,
        ADDITION = 'ADDITION',
        MODIFICATION = 'MODIFICATION',
        REMOVAL = 'REMOVAL',
        DOM_ATTR_MODIFIED = 'DOMAttrModified',
        DOM_CONTENT_LOADED = 'DOMContentLoaded',
        DOM_SUBTREE_MODIFIED = 'DOMSubtreeModified',
        PREFIX_TAG = '<',
        PREFIX_IS = '=',
        // valid and invalid node names
    validName = /^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,
        invalidNames = ['ANNOTATION-XML', 'COLOR-PROFILE', 'FONT-FACE', 'FONT-FACE-SRC', 'FONT-FACE-URI', 'FONT-FACE-FORMAT', 'FONT-FACE-NAME', 'MISSING-GLYPH'],
        // registered types and their prototypes
    types = [],
        protos = [],
        // to query subnodes
    query = '',
        // html shortcut used to feature detect
    documentElement = document.documentElement,
        // ES5 inline helpers || basic patches
    indexOf = types.indexOf || function (v) {
      for (var i = this.length; i-- && this[i] !== v;) {}

      return i;
    },
        // other helpers / shortcuts
    OP = Object.prototype,
        hOP = OP.hasOwnProperty,
        iPO = OP.isPrototypeOf,
        defineProperty = Object.defineProperty,
        empty = [],
        gOPD = Object.getOwnPropertyDescriptor,
        gOPN = Object.getOwnPropertyNames,
        gPO = Object.getPrototypeOf,
        sPO = Object.setPrototypeOf,
        // jshint proto: true
    hasProto = !!Object.__proto__,
        // V1 helpers
    fixGetClass = false,
        DRECEV1 = '__dreCEv1',
        customElements = window.customElements,
        usableCustomElements = polyfill !== 'force' && !!(customElements && customElements.define && customElements.get && customElements.whenDefined),
        Dict = Object.create || Object,
        Map = window.Map || function Map() {
      var K = [],
          V = [],
          i;
      return {
        get: function get(k) {
          return V[indexOf.call(K, k)];
        },
        set: function set(k, v) {
          i = indexOf.call(K, k);
          if (i < 0) V[K.push(k) - 1] = v;else V[i] = v;
        }
      };
    },
        Promise = window.Promise || function (fn) {
      var notify = [],
          done = false,
          p = {
        'catch': function _catch() {
          return p;
        },
        'then': function then(cb) {
          notify.push(cb);
          if (done) setTimeout(resolve, 1);
          return p;
        }
      };

      function resolve(value) {
        done = true;

        while (notify.length) {
          notify.shift()(value);
        }
      }

      fn(resolve);
      return p;
    },
        justCreated = false,
        constructors = Dict(null),
        waitingList = Dict(null),
        nodeNames = new Map(),
        secondArgument = function secondArgument(is) {
      return is.toLowerCase();
    },
        // used to create unique instances
    create = Object.create || function Bridge(proto) {
      // silly broken polyfill probably ever used but short enough to work
      return proto ? (Bridge.prototype = proto, new Bridge()) : this;
    },
        // will set the prototype if possible
    // or copy over all properties
    setPrototype = sPO || (hasProto ? function (o, p) {
      o.__proto__ = p;
      return o;
    } : gOPN && gOPD ? function () {
      function setProperties(o, p) {
        for (var key, names = gOPN(p), i = 0, length = names.length; i < length; i++) {
          key = names[i];

          if (!hOP.call(o, key)) {
            defineProperty(o, key, gOPD(p, key));
          }
        }
      }

      return function (o, p) {
        do {
          setProperties(o, p);
        } while ((p = gPO(p)) && !iPO.call(p, o));

        return o;
      };
    }() : function (o, p) {
      for (var key in p) {
        o[key] = p[key];
      }

      return o;
    }),
        // DOM shortcuts and helpers, if any
    MutationObserver = window.MutationObserver || window.WebKitMutationObserver,
        HTMLElementPrototype = (window.HTMLElement || window.Element || window.Node).prototype,
        IE8 = !iPO.call(HTMLElementPrototype, documentElement),
        safeProperty = IE8 ? function (o, k, d) {
      o[k] = d.value;
      return o;
    } : defineProperty,
        isValidNode = IE8 ? function (node) {
      return node.nodeType === 1;
    } : function (node) {
      return iPO.call(HTMLElementPrototype, node);
    },
        targets = IE8 && [],
        attachShadow = HTMLElementPrototype.attachShadow,
        cloneNode = HTMLElementPrototype.cloneNode,
        dispatchEvent = HTMLElementPrototype.dispatchEvent,
        getAttribute = HTMLElementPrototype.getAttribute,
        hasAttribute = HTMLElementPrototype.hasAttribute,
        removeAttribute = HTMLElementPrototype.removeAttribute,
        setAttribute = HTMLElementPrototype.setAttribute,
        // replaced later on
    createElement = document.createElement,
        patchedCreateElement = createElement,
        // shared observer for all attributes
    attributesObserver = MutationObserver && {
      attributes: true,
      characterData: true,
      attributeOldValue: true
    },
        // useful to detect only if there's no MutationObserver
    DOMAttrModified = MutationObserver || function (e) {
      doesNotSupportDOMAttrModified = false;
      documentElement.removeEventListener(DOM_ATTR_MODIFIED, DOMAttrModified);
    },
        // will both be used to make DOMNodeInserted asynchronous
    asapQueue,
        asapTimer = 0,
        // internal flags
    V0 = REGISTER_ELEMENT in document,
        setListener = true,
        justSetup = false,
        doesNotSupportDOMAttrModified = true,
        dropDomContentLoaded = true,
        // needed for the innerHTML helper
    notFromInnerHTMLHelper = true,
        // optionally defined later on
    onSubtreeModified,
        callDOMAttrModified,
        getAttributesMirror,
        observer,
        observe,
        // based on setting prototype capability
    // will check proto or the expando attribute
    // in order to setup the node once
    patchIfNotAlready,
        patch; // only if needed


    if (!V0) {
      if (sPO || hasProto) {
        patchIfNotAlready = function patchIfNotAlready(node, proto) {
          if (!iPO.call(proto, node)) {
            setupNode(node, proto);
          }
        };

        patch = setupNode;
      } else {
        patchIfNotAlready = function patchIfNotAlready(node, proto) {
          if (!node[EXPANDO_UID]) {
            node[EXPANDO_UID] = Object(true);
            setupNode(node, proto);
          }
        };

        patch = patchIfNotAlready;
      }

      if (IE8) {
        doesNotSupportDOMAttrModified = false;

        (function () {
          var descriptor = gOPD(HTMLElementPrototype, ADD_EVENT_LISTENER),
              addEventListener = descriptor.value,
              patchedRemoveAttribute = function patchedRemoveAttribute(name) {
            var e = new CustomEvent(DOM_ATTR_MODIFIED, {
              bubbles: true
            });
            e.attrName = name;
            e.prevValue = getAttribute.call(this, name);
            e.newValue = null;
            e[REMOVAL] = e.attrChange = 2;
            removeAttribute.call(this, name);
            dispatchEvent.call(this, e);
          },
              patchedSetAttribute = function patchedSetAttribute(name, value) {
            var had = hasAttribute.call(this, name),
                old = had && getAttribute.call(this, name),
                e = new CustomEvent(DOM_ATTR_MODIFIED, {
              bubbles: true
            });
            setAttribute.call(this, name, value);
            e.attrName = name;
            e.prevValue = had ? old : null;
            e.newValue = value;

            if (had) {
              e[MODIFICATION] = e.attrChange = 1;
            } else {
              e[ADDITION] = e.attrChange = 0;
            }

            dispatchEvent.call(this, e);
          },
              onPropertyChange = function onPropertyChange(e) {
            // jshint eqnull:true
            var node = e.currentTarget,
                superSecret = node[EXPANDO_UID],
                propertyName = e.propertyName,
                event;

            if (superSecret.hasOwnProperty(propertyName)) {
              superSecret = superSecret[propertyName];
              event = new CustomEvent(DOM_ATTR_MODIFIED, {
                bubbles: true
              });
              event.attrName = superSecret.name;
              event.prevValue = superSecret.value || null;
              event.newValue = superSecret.value = node[propertyName] || null;

              if (event.prevValue == null) {
                event[ADDITION] = event.attrChange = 0;
              } else {
                event[MODIFICATION] = event.attrChange = 1;
              }

              dispatchEvent.call(node, event);
            }
          };

          descriptor.value = function (type, handler, capture) {
            if (type === DOM_ATTR_MODIFIED && this[ATTRIBUTE_CHANGED_CALLBACK] && this.setAttribute !== patchedSetAttribute) {
              this[EXPANDO_UID] = {
                className: {
                  name: 'class',
                  value: this.className
                }
              };
              this.setAttribute = patchedSetAttribute;
              this.removeAttribute = patchedRemoveAttribute;
              addEventListener.call(this, 'propertychange', onPropertyChange);
            }

            addEventListener.call(this, type, handler, capture);
          };

          defineProperty(HTMLElementPrototype, ADD_EVENT_LISTENER, descriptor);
        })();
      } else if (!MutationObserver) {
        documentElement[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, DOMAttrModified);
        documentElement.setAttribute(EXPANDO_UID, 1);
        documentElement.removeAttribute(EXPANDO_UID);

        if (doesNotSupportDOMAttrModified) {
          onSubtreeModified = function onSubtreeModified(e) {
            var node = this,
                oldAttributes,
                newAttributes,
                key;

            if (node === e.target) {
              oldAttributes = node[EXPANDO_UID];
              node[EXPANDO_UID] = newAttributes = getAttributesMirror(node);

              for (key in newAttributes) {
                if (!(key in oldAttributes)) {
                  // attribute was added
                  return callDOMAttrModified(0, node, key, oldAttributes[key], newAttributes[key], ADDITION);
                } else if (newAttributes[key] !== oldAttributes[key]) {
                  // attribute was changed
                  return callDOMAttrModified(1, node, key, oldAttributes[key], newAttributes[key], MODIFICATION);
                }
              } // checking if it has been removed


              for (key in oldAttributes) {
                if (!(key in newAttributes)) {
                  // attribute removed
                  return callDOMAttrModified(2, node, key, oldAttributes[key], newAttributes[key], REMOVAL);
                }
              }
            }
          };

          callDOMAttrModified = function callDOMAttrModified(attrChange, currentTarget, attrName, prevValue, newValue, action) {
            var e = {
              attrChange: attrChange,
              currentTarget: currentTarget,
              attrName: attrName,
              prevValue: prevValue,
              newValue: newValue
            };
            e[action] = attrChange;
            onDOMAttrModified(e);
          };

          getAttributesMirror = function getAttributesMirror(node) {
            for (var attr, name, result = {}, attributes = node.attributes, i = 0, length = attributes.length; i < length; i++) {
              attr = attributes[i];
              name = attr.name;

              if (name !== 'setAttribute') {
                result[name] = attr.value;
              }
            }

            return result;
          };
        }
      } // set as enumerable, writable and configurable


      document[REGISTER_ELEMENT] = function registerElement(type, options) {
        upperType = type.toUpperCase();

        if (setListener) {
          // only first time document.registerElement is used
          // we need to set this listener
          // setting it by default might slow down for no reason
          setListener = false;

          if (MutationObserver) {
            observer = function (attached, detached) {
              function checkEmAll(list, callback) {
                for (var i = 0, length = list.length; i < length; callback(list[i++])) {}
              }

              return new MutationObserver(function (records) {
                for (var current, node, newValue, i = 0, length = records.length; i < length; i++) {
                  current = records[i];

                  if (current.type === 'childList') {
                    checkEmAll(current.addedNodes, attached);
                    checkEmAll(current.removedNodes, detached);
                  } else {
                    node = current.target;

                    if (notFromInnerHTMLHelper && node[ATTRIBUTE_CHANGED_CALLBACK] && current.attributeName !== 'style') {
                      newValue = getAttribute.call(node, current.attributeName);

                      if (newValue !== current.oldValue) {
                        node[ATTRIBUTE_CHANGED_CALLBACK](current.attributeName, current.oldValue, newValue);
                      }
                    }
                  }
                }
              });
            }(executeAction(ATTACHED), executeAction(DETACHED));

            observe = function observe(node) {
              observer.observe(node, {
                childList: true,
                subtree: true
              });
              return node;
            };

            observe(document);

            if (attachShadow) {
              HTMLElementPrototype.attachShadow = function () {
                return observe(attachShadow.apply(this, arguments));
              };
            }
          } else {
            asapQueue = [];
            document[ADD_EVENT_LISTENER]('DOMNodeInserted', onDOMNode(ATTACHED));
            document[ADD_EVENT_LISTENER]('DOMNodeRemoved', onDOMNode(DETACHED));
          }

          document[ADD_EVENT_LISTENER](DOM_CONTENT_LOADED, onReadyStateChange);
          document[ADD_EVENT_LISTENER]('readystatechange', onReadyStateChange);

          HTMLElementPrototype.cloneNode = function (deep) {
            var node = cloneNode.call(this, !!deep),
                i = getTypeIndex(node);
            if (-1 < i) patch(node, protos[i]);
            if (deep && query.length) loopAndSetup(node.querySelectorAll(query));
            return node;
          };
        }

        if (justSetup) return justSetup = false;

        if (-2 < indexOf.call(types, PREFIX_IS + upperType) + indexOf.call(types, PREFIX_TAG + upperType)) {
          throwTypeError(type);
        }

        if (!validName.test(upperType) || -1 < indexOf.call(invalidNames, upperType)) {
          throw new Error('The type ' + type + ' is invalid');
        }

        var constructor = function constructor() {
          return extending ? document.createElement(nodeName, upperType) : document.createElement(nodeName);
        },
            opt = options || OP,
            extending = hOP.call(opt, EXTENDS),
            nodeName = extending ? options[EXTENDS].toUpperCase() : upperType,
            upperType,
            i;

        if (extending && -1 < indexOf.call(types, PREFIX_TAG + nodeName)) {
          throwTypeError(nodeName);
        }

        i = types.push((extending ? PREFIX_IS : PREFIX_TAG) + upperType) - 1;
        query = query.concat(query.length ? ',' : '', extending ? nodeName + '[is="' + type.toLowerCase() + '"]' : nodeName);
        constructor.prototype = protos[i] = hOP.call(opt, 'prototype') ? opt.prototype : create(HTMLElementPrototype);
        if (query.length) loopAndVerify(document.querySelectorAll(query), ATTACHED);
        return constructor;
      };

      document.createElement = patchedCreateElement = function patchedCreateElement(localName, typeExtension) {
        var is = getIs(typeExtension),
            node = is ? createElement.call(document, localName, secondArgument(is)) : createElement.call(document, localName),
            name = '' + localName,
            i = indexOf.call(types, (is ? PREFIX_IS : PREFIX_TAG) + (is || name).toUpperCase()),
            setup = -1 < i;

        if (is) {
          node.setAttribute('is', is = is.toLowerCase());

          if (setup) {
            setup = isInQSA(name.toUpperCase(), is);
          }
        }

        notFromInnerHTMLHelper = !document.createElement.innerHTMLHelper;
        if (setup) patch(node, protos[i]);
        return node;
      };
    }

    function ASAP() {
      var queue = asapQueue.splice(0, asapQueue.length);
      asapTimer = 0;

      while (queue.length) {
        queue.shift().call(null, queue.shift());
      }
    }

    function loopAndVerify(list, action) {
      for (var i = 0, length = list.length; i < length; i++) {
        verifyAndSetupAndAction(list[i], action);
      }
    }

    function loopAndSetup(list) {
      for (var i = 0, length = list.length, node; i < length; i++) {
        node = list[i];
        patch(node, protos[getTypeIndex(node)]);
      }
    }

    function executeAction(action) {
      return function (node) {
        if (isValidNode(node)) {
          verifyAndSetupAndAction(node, action);
          if (query.length) loopAndVerify(node.querySelectorAll(query), action);
        }
      };
    }

    function getTypeIndex(target) {
      var is = getAttribute.call(target, 'is'),
          nodeName = target.nodeName.toUpperCase(),
          i = indexOf.call(types, is ? PREFIX_IS + is.toUpperCase() : PREFIX_TAG + nodeName);
      return is && -1 < i && !isInQSA(nodeName, is) ? -1 : i;
    }

    function isInQSA(name, type) {
      return -1 < query.indexOf(name + '[is="' + type + '"]');
    }

    function onDOMAttrModified(e) {
      var node = e.currentTarget,
          attrChange = e.attrChange,
          attrName = e.attrName,
          target = e.target,
          addition = e[ADDITION] || 2,
          removal = e[REMOVAL] || 3;

      if (notFromInnerHTMLHelper && (!target || target === node) && node[ATTRIBUTE_CHANGED_CALLBACK] && attrName !== 'style' && (e.prevValue !== e.newValue || // IE9, IE10, and Opera 12 gotcha
      e.newValue === '' && (attrChange === addition || attrChange === removal))) {
        node[ATTRIBUTE_CHANGED_CALLBACK](attrName, attrChange === addition ? null : e.prevValue, attrChange === removal ? null : e.newValue);
      }
    }

    function onDOMNode(action) {
      var executor = executeAction(action);
      return function (e) {
        asapQueue.push(executor, e.target);
        if (asapTimer) clearTimeout(asapTimer);
        asapTimer = setTimeout(ASAP, 1);
      };
    }

    function onReadyStateChange(e) {
      if (dropDomContentLoaded) {
        dropDomContentLoaded = false;
        e.currentTarget.removeEventListener(DOM_CONTENT_LOADED, onReadyStateChange);
      }

      if (query.length) loopAndVerify((e.target || document).querySelectorAll(query), e.detail === DETACHED ? DETACHED : ATTACHED);
      if (IE8) purge();
    }

    function patchedSetAttribute(name, value) {
      // jshint validthis:true
      var self = this;
      setAttribute.call(self, name, value);
      onSubtreeModified.call(self, {
        target: self
      });
    }

    function setupNode(node, proto) {
      setPrototype(node, proto);

      if (observer) {
        observer.observe(node, attributesObserver);
      } else {
        if (doesNotSupportDOMAttrModified) {
          node.setAttribute = patchedSetAttribute;
          node[EXPANDO_UID] = getAttributesMirror(node);
          node[ADD_EVENT_LISTENER](DOM_SUBTREE_MODIFIED, onSubtreeModified);
        }

        node[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, onDOMAttrModified);
      }

      if (node[CREATED_CALLBACK] && notFromInnerHTMLHelper) {
        node.created = true;
        node[CREATED_CALLBACK]();
        node.created = false;
      }
    }

    function purge() {
      for (var node, i = 0, length = targets.length; i < length; i++) {
        node = targets[i];

        if (!documentElement.contains(node)) {
          length--;
          targets.splice(i--, 1);
          verifyAndSetupAndAction(node, DETACHED);
        }
      }
    }

    function throwTypeError(type) {
      throw new Error('A ' + type + ' type is already registered');
    }

    function verifyAndSetupAndAction(node, action) {
      var fn,
          i = getTypeIndex(node);

      if (-1 < i) {
        patchIfNotAlready(node, protos[i]);
        i = 0;

        if (action === ATTACHED && !node[ATTACHED]) {
          node[DETACHED] = false;
          node[ATTACHED] = true;
          i = 1;

          if (IE8 && indexOf.call(targets, node) < 0) {
            targets.push(node);
          }
        } else if (action === DETACHED && !node[DETACHED]) {
          node[ATTACHED] = false;
          node[DETACHED] = true;
          i = 1;
        }

        if (i && (fn = node[action + CALLBACK])) fn.call(node);
      }
    } // V1 in da House!


    function CustomElementRegistry() {}

    CustomElementRegistry.prototype = {
      constructor: CustomElementRegistry,
      // a workaround for the stubborn WebKit
      define: usableCustomElements ? function (name, Class, options) {
        if (options) {
          CERDefine(name, Class, options);
        } else {
          var NAME = name.toUpperCase();
          constructors[NAME] = {
            constructor: Class,
            create: [NAME]
          };
          nodeNames.set(Class, NAME);
          customElements.define(name, Class);
        }
      } : CERDefine,
      get: usableCustomElements ? function (name) {
        return customElements.get(name) || get(name);
      } : get,
      whenDefined: usableCustomElements ? function (name) {
        return Promise.race([customElements.whenDefined(name), whenDefined(name)]);
      } : whenDefined
    };

    function CERDefine(name, Class, options) {
      var is = options && options[EXTENDS] || '',
          CProto = Class.prototype,
          proto = create(CProto),
          attributes = Class.observedAttributes || empty,
          definition = {
        prototype: proto
      }; // TODO: is this needed at all since it's inherited?
      // defineProperty(proto, 'constructor', {value: Class});

      safeProperty(proto, CREATED_CALLBACK, {
        value: function value() {
          if (justCreated) justCreated = false;else if (!this[DRECEV1]) {
            this[DRECEV1] = true;
            new Class(this);
            if (CProto[CREATED_CALLBACK]) CProto[CREATED_CALLBACK].call(this);
            var info = constructors[nodeNames.get(Class)];

            if (!usableCustomElements || info.create.length > 1) {
              notifyAttributes(this);
            }
          }
        }
      });
      safeProperty(proto, ATTRIBUTE_CHANGED_CALLBACK, {
        value: function value(name) {
          if (-1 < indexOf.call(attributes, name)) CProto[ATTRIBUTE_CHANGED_CALLBACK].apply(this, arguments);
        }
      });

      if (CProto[CONNECTED_CALLBACK]) {
        safeProperty(proto, ATTACHED_CALLBACK, {
          value: CProto[CONNECTED_CALLBACK]
        });
      }

      if (CProto[DISCONNECTED_CALLBACK]) {
        safeProperty(proto, DETACHED_CALLBACK, {
          value: CProto[DISCONNECTED_CALLBACK]
        });
      }

      if (is) definition[EXTENDS] = is;
      name = name.toUpperCase();
      constructors[name] = {
        constructor: Class,
        create: is ? [is, secondArgument(name)] : [name]
      };
      nodeNames.set(Class, name);
      document[REGISTER_ELEMENT](name.toLowerCase(), definition);
      whenDefined(name);
      waitingList[name].r();
    }

    function get(name) {
      var info = constructors[name.toUpperCase()];
      return info && info.constructor;
    }

    function getIs(options) {
      return typeof options === 'string' ? options : options && options.is || '';
    }

    function notifyAttributes(self) {
      var callback = self[ATTRIBUTE_CHANGED_CALLBACK],
          attributes = callback ? self.attributes : empty,
          i = attributes.length,
          attribute;

      while (i--) {
        attribute = attributes[i]; // || attributes.item(i);

        callback.call(self, attribute.name || attribute.nodeName, null, attribute.value || attribute.nodeValue);
      }
    }

    function whenDefined(name) {
      name = name.toUpperCase();

      if (!(name in waitingList)) {
        waitingList[name] = {};
        waitingList[name].p = new Promise(function (resolve) {
          waitingList[name].r = resolve;
        });
      }

      return waitingList[name].p;
    }

    function polyfillV1() {
      if (customElements) delete window.customElements;
      defineProperty(window, 'customElements', {
        configurable: true,
        value: new CustomElementRegistry()
      });
      defineProperty(window, 'CustomElementRegistry', {
        configurable: true,
        value: CustomElementRegistry
      });

      for (var patchClass = function patchClass(name) {
        var Class = window[name];

        if (Class) {
          window[name] = function CustomElementsV1(self) {
            var info, isNative;
            if (!self) self = this;

            if (!self[DRECEV1]) {
              justCreated = true;
              info = constructors[nodeNames.get(self.constructor)];
              isNative = usableCustomElements && info.create.length === 1;
              self = isNative ? Reflect.construct(Class, empty, info.constructor) : document.createElement.apply(document, info.create);
              self[DRECEV1] = true;
              justCreated = false;
              if (!isNative) notifyAttributes(self);
            }

            return self;
          };

          window[name].prototype = Class.prototype;

          try {
            Class.prototype.constructor = window[name];
          } catch (WebKit) {
            fixGetClass = true;
            defineProperty(Class, DRECEV1, {
              value: window[name]
            });
          }
        }
      }, Classes = htmlClass.get(/^HTML[A-Z]*[a-z]/), i = Classes.length; i--; patchClass(Classes[i])) {}

      document.createElement = function (name, options) {
        var is = getIs(options);
        return is ? patchedCreateElement.call(this, name, secondArgument(is)) : patchedCreateElement.call(this, name);
      };

      if (!V0) {
        justSetup = true;
        document[REGISTER_ELEMENT]('');
      }
    } // if customElements is not there at all


    if (!customElements || polyfill === 'force') polyfillV1();else {
      // if available test extends work as expected
      try {
        (function (DRE, options, name) {
          options[EXTENDS] = 'a';
          DRE.prototype = create(HTMLAnchorElement.prototype);
          DRE.prototype.constructor = DRE;
          window.customElements.define(name, DRE, options);

          if (getAttribute.call(document.createElement('a', {
            is: name
          }), 'is') !== name || usableCustomElements && getAttribute.call(new DRE(), 'is') !== name) {
            throw options;
          }
        })(function DRE() {
          return Reflect.construct(HTMLAnchorElement, [], DRE);
        }, {}, 'document-register-element-a');
      } catch (o_O) {
        // or force the polyfill if not
        // and keep internal original reference
        polyfillV1();
      }
    }

    try {
      createElement.call(document, 'a', 'a');
    } catch (FireFox) {
      secondArgument = function secondArgument(is) {
        return {
          is: is.toLowerCase()
        };
      };
    }
  }

  },{}],6:[function(require,module,exports){
  'use strict';
  /**
   * Constructs a ES6/Promises A+ Promise instance.
   *
   * @constructor
   * @param {function(function(*=), function (*=))} resolver
   */

  function Promise(resolver) {
    if (!(this instanceof Promise)) {
      throw new TypeError('Constructor Promise requires `new`');
    }

    if (!isFunction(resolver)) {
      throw new TypeError('Must pass resolver function');
    }
    /**
     * @type {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise}
     * @private
     */


    this._state = PendingPromise;
    /**
     * @type {*}
     * @private
     */

    this._value = [];
    /**
     * @type {boolean}
     * @private
     */

    this._isChainEnd = true;
    doResolve(this, adopter(this, FulfilledPromise), adopter(this, RejectedPromise), {
      then: resolver
    });
  }
  /****************************
    Public Instance Methods
   ****************************/

  /**
   * Creates a new promise instance that will receive the result of this promise
   * as inputs to the onFulfilled or onRejected callbacks.
   *
   * @param {function(*)} onFulfilled
   * @param {function(*)} onRejected
   */


  Promise.prototype.then = function (onFulfilled, onRejected) {
    onFulfilled = isFunction(onFulfilled) ? onFulfilled : void 0;
    onRejected = isFunction(onRejected) ? onRejected : void 0;

    if (onFulfilled || onRejected) {
      this._isChainEnd = false;
    }

    return this._state(this._value, onFulfilled, onRejected);
  };
  /**
   * Creates a new promise that will handle the rejected state of this promise.
   *
   * @param {function(*)} onRejected
   * @returns {!Promise}
   */


  Promise.prototype.catch = function (onRejected) {
    return this.then(void 0, onRejected);
  };
  /****************************
    Public Static Methods
   ****************************/

  /**
   * Creates a fulfilled Promise of value. If value is itself a then-able,
   * resolves with the then-able's value.
   *
   * @this {!Promise}
   * @param {*=} value
   * @returns {!Promise}
   */


  Promise.resolve = function (value) {
    var Constructor = this;
    var promise;

    if (isObject(value) && value instanceof this) {
      promise = value;
    } else {
      promise = new Constructor(function (resolve) {
        resolve(value);
      });
    }

    return (
      /** @type {!Promise} */
      promise
    );
  };
  /**
   * Creates a rejected Promise of reason.
   *
   * @this {!Promise}
   * @param {*=} reason
   * @returns {!Promise}
   */


  Promise.reject = function (reason) {
    var Constructor = this;
    var promise = new Constructor(function (_, reject) {
      reject(reason);
    });
    return (
      /** @type {!Promise} */
      promise
    );
  };
  /**
   * Creates a Promise that will resolve with an array of the values of the
   * passed in promises. If any promise rejects, the returned promise will
   * reject.
   *
   * @this {!Promise}
   * @param {!Array<Promise|*>} promises
   * @returns {!Promise}
   */


  Promise.all = function (promises) {
    var Constructor = this;
    var promise = new Constructor(function (resolve, reject) {
      var length = promises.length;
      var values = new Array(length);

      if (length === 0) {
        return resolve(values);
      }

      each(promises, function (promise, index) {
        Constructor.resolve(promise).then(function (value) {
          values[index] = value;

          if (--length === 0) {
            resolve(values);
          }
        }, reject);
      });
    });
    return (
      /** @type {!Promise} */
      promise
    );
  };
  /**
   * Creates a Promise that will resolve or reject based on the first
   * resolved or rejected promise.
   *
   * @this {!Promise}
   * @param {!Array<Promise|*>} promises
   * @returns {!Promise}
   */


  Promise.race = function (promises) {
    var Constructor = this;
    var promise = new Constructor(function (resolve, reject) {
      for (var i = 0; i < promises.length; i++) {
        Constructor.resolve(promises[i]).then(resolve, reject);
      }
    });
    return (
      /** @type {!Promise} */
      promise
    );
  };

  var onPossiblyUnhandledRejection = function onPossiblyUnhandledRejection(reason, promise) {
    throw reason;
  };
  /**
   * An internal use static function.
   */


  Promise._overrideUnhandledExceptionHandler = function (handler) {
    onPossiblyUnhandledRejection = handler;
  };
  /****************************
    Private functions
   ****************************/

  /**
   * The Fulfilled Promise state. Calls onFulfilled with the resolved value of
   * this promise, creating a new promise.
   *
   * If there is no onFulfilled, returns the current promise to avoid an promise
   * instance.
   *
   * @this {!Promise} The current promise
   * @param {*=} value The current promise's resolved value.
   * @param {function(*=)=} onFulfilled
   * @param {function(*=)=} unused
   * @param {Deferred} deferred A deferred object that holds a promise and its
   *     resolve and reject functions. It IS NOT passed when called from
   *     Promise#then to save an object instance (since we may return the current
   *     promise). It IS passed in when adopting the Fulfilled state from the
   *     Pending state.
   * @returns {!Promise}
   */


  function FulfilledPromise(value, onFulfilled, unused, deferred) {
    if (!onFulfilled) {
      deferredAdopt(deferred, FulfilledPromise, value);
      return this;
    }

    if (!deferred) {
      deferred = new Deferred(this.constructor);
    }

    defer(tryCatchDeferred(deferred, onFulfilled, value));
    return deferred.promise;
  }
  /**
   * The Rejected Promise state. Calls onRejected with the resolved value of
   * this promise, creating a new promise.
   *
   * If there is no onRejected, returns the current promise to avoid an promise
   * instance.
   *
   * @this {!Promise} The current promise
   * @param {*=} reason The current promise's rejection reason.
   * @param {function(*=)=} unused
   * @param {function(*=)=} onRejected
   * @param {Deferred} deferred A deferred object that holds a promise and its
   *     resolve and reject functions. It IS NOT passed when called from
   *     Promise#then to save an object instance (since we may return the current
   *     promise). It IS passed in when adopting the Rejected state from the
   *     Pending state.
   * @returns {!Promise}
   */


  function RejectedPromise(reason, unused, onRejected, deferred) {
    if (!onRejected) {
      deferredAdopt(deferred, RejectedPromise, reason);
      return this;
    }

    if (!deferred) {
      deferred = new Deferred(this.constructor);
    }

    defer(tryCatchDeferred(deferred, onRejected, reason));
    return deferred.promise;
  }
  /**
   * The Pending Promise state. Eventually calls onFulfilled once the promise has
   * resolved, or onRejected once the promise rejects.
   *
   * If there is no onFulfilled and no onRejected, returns the current promise to
   * avoid an promise instance.
   *
   * @this {!Promise} The current promise
   * @param {*=} queue The current promise's pending promises queue.
   * @param {function(*=)=} onFulfilled
   * @param {function(*=)=} onRejected
   * @param {Deferred} deferred A deferred object that holds a promise and its
   *     resolve and reject functions. It IS NOT passed when called from
   *     Promise#then to save an object instance (since we may return the current
   *     promise). It IS passed in when adopting the Pending state from the
   *     Pending state of another promise.
   * @returns {!Promise}
   */


  function PendingPromise(queue, onFulfilled, onRejected, deferred) {
    if (!deferred) {
      if (!onFulfilled && !onRejected) {
        return this;
      }

      deferred = new Deferred(this.constructor);
    }

    queue.push({
      deferred: deferred,
      onFulfilled: onFulfilled || deferred.resolve,
      onRejected: onRejected || deferred.reject
    });
    return deferred.promise;
  }
  /**
   * Constructs a deferred instance that holds a promise and its resolve and
   * reject functions.
   *
   * @constructor
   */


  function Deferred(Promise) {
    var deferred = this;
    /** @type {!Promise} */

    this.promise = new Promise(function (resolve, reject) {
      /** @type {function(*=)} */
      deferred.resolve = resolve;
      /** @type {function(*=)} */

      deferred.reject = reject;
    });
    return deferred;
  }
  /**
   * Transitions the state of promise to another state. This is only ever called
   * on with a promise that is currently in the Pending state.
   *
   * @param {!Promise} promise
   * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state
   * @param {*=} value
   */


  function adopt(promise, state, value, adoptee) {
    var queue = promise._value;
    promise._state = state;
    promise._value = value;

    if (adoptee && state === PendingPromise) {
      adoptee._state(value, void 0, void 0, {
        promise: promise,
        resolve: void 0,
        reject: void 0
      });
    }

    for (var i = 0; i < queue.length; i++) {
      var next = queue[i];

      promise._state(value, next.onFulfilled, next.onRejected, next.deferred);
    }

    queue.length = 0; // Determine if this rejected promise will be "handled".

    if (state === RejectedPromise && promise._isChainEnd) {
      setTimeout(function () {
        if (promise._isChainEnd) {
          onPossiblyUnhandledRejection(value, promise);
        }
      }, 0);
    }
  }
  /**
   * A partial application of adopt.
   *
   * @param {!Promise} promise
   * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state
   * @returns {function(*=)}
   */


  function adopter(promise, state) {
    return function (value) {
      adopt(promise, state, value);
    };
  }
  /**
   * Updates a deferred promises state. Necessary for updating an adopting
   * promise's state when the adoptee resolves.
   *
   * @param {?Deferred} deferred
   * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state
   * @param {*=} value
   */


  function deferredAdopt(deferred, state, value) {
    if (deferred) {
      var promise = deferred.promise;
      promise._state = state;
      promise._value = value;
    }
  }
  /**
   * A no-op function to prevent double resolving.
   */


  function noop() {}
  /**
   * Tests if fn is a Function
   *
   * @param {*} fn
   * @returns {boolean}
   */


  function isFunction(fn) {
    return typeof fn === 'function';
  }
  /**
   * Tests if fn is an Object
   *
   * @param {*} obj
   * @returns {boolean}
   */


  function isObject(obj) {
    return obj === Object(obj);
  }
  /**
   * Iterates over each element of an array, calling the iterator with the
   * element and its index.
   *
   * @param {!Array} collection
   * @param {function(*=,number)} iterator
   */


  function each(collection, iterator) {
    for (var i = 0; i < collection.length; i++) {
      iterator(collection[i], i);
    }
  }
  /**
   * Creates a function that will attempt to resolve the deferred with the return
   * of fn. If any error is raised, rejects instead.
   *
   * @param {!Deferred} deferred
   * @param {function(*=)} fn
   * @param {*} arg
   * @returns {function()}
   */


  function tryCatchDeferred(deferred, fn, arg) {
    var promise = deferred.promise;
    var resolve = deferred.resolve;
    var reject = deferred.reject;
    return function () {
      try {
        var result = fn(arg);
        doResolve(promise, resolve, reject, result, result);
      } catch (e) {
        reject(e);
      }
    };
  }
  /**
   * Queues and executes multiple deferred functions on another run loop.
   */


  var defer = function () {
    /**
     * Defers fn to another run loop.
     */
    var scheduleFlush;

    if (typeof window !== 'undefined' && window.postMessage) {
      window.addEventListener('message', flush);

      scheduleFlush = function scheduleFlush() {
        window.postMessage('macro-task', '*');
      };
    } else {
      scheduleFlush = function scheduleFlush() {
        setTimeout(flush, 0);
      };
    }

    var queue = new Array(16);
    var length = 0;

    function flush() {
      for (var i = 0; i < length; i++) {
        var fn = queue[i];
        queue[i] = null;
        fn();
      }

      length = 0;
    }
    /**
     * @param {function()} fn
     */


    function defer(fn) {
      if (length === 0) {
        scheduleFlush();
      }

      queue[length++] = fn;
    }

    return defer;
  }();
  /**
   * The Promise resolution procedure.
   * https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
   *
   * @param {!Promise} promise
   * @param {function(*=)} resolve
   * @param {function(*=)} reject
   * @param {*} value
   * @param {*=} context
   */


  function doResolve(promise, resolve, reject, value, context) {
    var _reject2 = reject;
    var then;

    var _resolve2;

    try {
      if (value === promise) {
        throw new TypeError('Cannot fulfill promise with itself');
      }

      var isObj = isObject(value);

      if (isObj && value instanceof promise.constructor) {
        adopt(promise, value._state, value._value, value);
      } else if (isObj && (then = value.then) && isFunction(then)) {
        _resolve2 = function _resolve(value) {
          _resolve2 = _reject2 = noop;
          doResolve(promise, resolve, reject, value, value);
        };

        _reject2 = function _reject(reason) {
          _resolve2 = _reject2 = noop;
          reject(reason);
        };

        then.call(context, function (value) {
          _resolve2(value);
        }, function (reason) {
          _reject2(reason);
        });
      } else {
        resolve(value);
      }
    } catch (e) {
      _reject2(e);
    }
  }

  module.exports = Promise;

  },{}],7:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.listen = listen;
  exports.serializeMessage = serializeMessage;
  exports.deserializeMessage = deserializeMessage;
  exports.isAmpMessage = isAmpMessage;
  exports.IframeTransportEvent = exports.MessageType = exports.CONSTANTS = void 0;

  var _log = require("./log");

  var _object = require("./utils/object");

  var _eventHelperListen = require("./event-helper-listen");

  var _json = require("./json");

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @const */
  var AMP_MESSAGE_PREFIX = 'amp-';
  var CONSTANTS = {
    responseTypeSuffix: '-result',
    messageIdFieldName: 'messageId',
    payloadFieldName: 'payload',
    contentFieldName: 'content'
  };
  /** @enum {string} */

  exports.CONSTANTS = CONSTANTS;
  var MessageType = {
    // For amp-ad
    SEND_EMBED_STATE: 'send-embed-state',
    EMBED_STATE: 'embed-state',
    SEND_EMBED_CONTEXT: 'send-embed-context',
    EMBED_CONTEXT: 'embed-context',
    SEND_INTERSECTIONS: 'send-intersections',
    INTERSECTION: 'intersection',
    EMBED_SIZE: 'embed-size',
    EMBED_SIZE_CHANGED: 'embed-size-changed',
    EMBED_SIZE_DENIED: 'embed-size-denied',
    NO_CONTENT: 'no-content',
    GET_HTML: 'get-html',
    GET_CONSENT_STATE: 'get-consent-state',
    // For the frame to be placed in full overlay mode for lightboxes
    FULL_OVERLAY_FRAME: 'full-overlay-frame',
    FULL_OVERLAY_FRAME_RESPONSE: 'full-overlay-frame-response',
    CANCEL_FULL_OVERLAY_FRAME: 'cancel-full-overlay-frame',
    CANCEL_FULL_OVERLAY_FRAME_RESPONSE: 'cancel-full-overlay-frame-response',
    // For amp-inabox
    SEND_POSITIONS: 'send-positions',
    POSITION: 'position',
    // For amp-analytics' iframe-transport
    SEND_IFRAME_TRANSPORT_EVENTS: 'send-iframe-transport-events',
    IFRAME_TRANSPORT_EVENTS: 'iframe-transport-events',
    IFRAME_TRANSPORT_RESPONSE: 'iframe-transport-response',
    // For user-error-in-iframe
    USER_ERROR_IN_IFRAME: 'user-error-in-iframe'
  };
  /**
   * Listens for the specified event on the element.
   * @param {!EventTarget} element
   * @param {string} eventType
   * @param {function(!Event)} listener
   * @param {Object=} opt_evtListenerOpts
   * @return {!UnlistenDef}
   */

  exports.MessageType = MessageType;

  function listen(element, eventType, listener, opt_evtListenerOpts) {
    return (0, _eventHelperListen.internalListenImplementation)(element, eventType, listener, opt_evtListenerOpts);
  }
  /**
   * Serialize an AMP post message. Output looks like:
   * 'amp-011481323099490{"type":"position","sentinel":"12345","foo":"bar"}'
   * @param {string} type
   * @param {string} sentinel
   * @param {JsonObject=} data
   * @param {?string=} rtvVersion
   * @return {string}
   */


  function serializeMessage(type, sentinel, data, rtvVersion) {
    if (data === void 0) {
      data = (0, _object.dict)();
    }

    if (rtvVersion === void 0) {
      rtvVersion = null;
    }

    // TODO: consider wrap the data in a "data" field. { type, sentinal, data }
    var message = data;
    message['type'] = type;
    message['sentinel'] = sentinel;
    return AMP_MESSAGE_PREFIX + (rtvVersion || '') + JSON.stringify(message);
  }
  /**
   * Deserialize an AMP post message.
   * Returns null if it's not valid AMP message format.
   *
   * @param {*} message
   * @return {?JsonObject|undefined}
   */


  function deserializeMessage(message) {
    if (!isAmpMessage(message)) {
      return null;
    }

    var startPos = message.indexOf('{');
    (0, _log.devAssert)(startPos != -1, 'JSON missing in %s', message);

    try {
      return (0, _json.parseJson)(message.substr(startPos));
    } catch (e) {
      (0, _log.dev)().error('MESSAGING', 'Failed to parse message: ' + message, e);
      return null;
    }
  }
  /**
   *  Returns true if message looks like it is an AMP postMessage
   *  @param {*} message
   *  @return {boolean}
   */


  function isAmpMessage(message) {
    return typeof message == 'string' && message.indexOf(AMP_MESSAGE_PREFIX) == 0 && message.indexOf('{') != -1;
  }
  /** @typedef {{creativeId: string, message: string}} */


  var IframeTransportEvent; // An event, and the transport ID of the amp-analytics tags that
  // generated it. For instance if the creative with transport
  // ID 2 sends "hi", then an IframeTransportEvent would look like:
  // { creativeId: "2", message: "hi" }
  // If the creative with transport ID 2 sent that, and also sent "hello",
  // and the creative with transport ID 3 sends "goodbye" then an *array* of 3
  // AmpAnalyticsIframeTransportEvent would be sent to the 3p frame like so:
  // [
  //   { creativeId: "2", message: "hi" }, // An AmpAnalyticsIframeTransportEvent
  //   { creativeId: "2", message: "hello" }, // Another
  //   { creativeId: "3", message: "goodbye" } // And another
  // ]

  exports.IframeTransportEvent = IframeTransportEvent;

  },{"./event-helper-listen":30,"./json":46,"./log":51,"./utils/object":132}],8:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.ActionTrust = exports.DEFAULT_ACTION = exports.RAW_OBJECT_ARGS_KEY = void 0;

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Key string in an action arguments map for an unparsed object literal string.
   *
   * E.g. for the action in <p on="tap:AMP.setState({foo: 'bar'})",
   * then `args[RAW_OBJECT_ARGS_KEY]` is the string "{foo: 'bar'}".
   *
   * The action service delegates parsing of object literals to the corresponding
   * extension (in the example above, amp-bind).
   *
   * @see ./service/action-impl.ActionInfoDef
   * @const {string}
   */
  var RAW_OBJECT_ARGS_KEY = '__AMP_OBJECT_STRING__';
  /** @const {string} Identifier for an element's default action. */

  exports.RAW_OBJECT_ARGS_KEY = RAW_OBJECT_ARGS_KEY;
  var DEFAULT_ACTION = 'activate';
  /**
   * Trust level of an action.
   *
   * Corresponds to degree of user intent, i.e. events triggered with strong
   * user intent have high trust.
   *
   * @enum {number}
   */

  exports.DEFAULT_ACTION = DEFAULT_ACTION;
  var ActionTrust = {
    LOW: 1,
    HIGH: 100
  };
  exports.ActionTrust = ActionTrust;

  },{}],9:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.AmpEvents = void 0;

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Common AMP events.
   * @enum {string}
   */
  var AmpEvents = {
    BUILT: 'amp:built',
    DOM_UPDATE: 'amp:dom-update',
    VISIBILITY_CHANGE: 'amp:visibilitychange',
    // https://github.com/ampproject/amphtml/blob/master/ads/README.md#page-visibility
    // The following codes are only used for testing.
    // TODO(choumx): Move these to a separate enum so they can be DCE'd.
    ATTACHED: 'amp:attached',
    STUBBED: 'amp:stubbed',
    LOAD_START: 'amp:load:start',
    LOAD_END: 'amp:load:end',
    ERROR: 'amp:error',
    SIZE_CHANGED: 'amp:size-changed'
  };
  exports.AmpEvents = AmpEvents;

  },{}],10:[function(require,module,exports){
  "use strict";

  require("./polyfills");

  var _services = require("./services");

  var _runtime = require("./runtime");

  var _css = require("../build/css");

  var _fontStylesheetTimeout = require("./font-stylesheet-timeout");

  var _autoLightbox = require("./auto-lightbox");

  var _ampdocImpl = require("./service/ampdoc-impl");

  var _error = require("./error");

  var _performanceImpl = require("./service/performance-impl");

  var _platformImpl = require("./service/platform-impl");

  var _pullToRefresh = require("./pull-to-refresh");

  var _styleInstaller = require("./style-installer");

  var _impression = require("./impression");

  var _validatorIntegration = require("./validator-integration");

  var _chunk = require("./chunk");

  var _customElementRegistry = require("./service/custom-element-registry");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * The entry point for AMP Runtime (v0.js) when AMP Runtime = AMP Doc.
   */
  // src/polyfills.js must be the first import.
  // eslint-disable-line sort-imports-es6-autofix/sort-imports-es6

  /**
   * self.IS_AMP_ALT (is AMP alternative binary) is undefined by default in the
   * main v0.js since it is the "main" js.
   * This global boolean is set by alternative binaries like amp-inabox and
   * amp-shadow which has their own bootstrapping sequence.
   * With how single pass works these alternative binaries cannot be generated
   * easily because we can only do a "single pass" so we treat these alternative
   * main binaries as "extensions" and we concatenate their code with the main
   * v0.js code.
   * @type {boolean|undefined}
   */
  var shouldMainBootstrapRun = !self.IS_AMP_ALT;

  if (shouldMainBootstrapRun) {
    // Store the originalHash as early as possible. Trying to debug:
    // https://github.com/ampproject/amphtml/issues/6070
    if (self.location) {
      self.location.originalHash = self.location.hash;
    }
    /** @type {!./service/ampdoc-impl.AmpDocService} */


    var ampdocService; // We must under all circumstances call makeBodyVisible.
    // It is much better to have AMP tags not rendered than having
    // a completely blank page.

    try {
      // Should happen first.
      (0, _error.installErrorReporting)(self); // Also calls makeBodyVisibleRecovery on errors.
      // Declare that this runtime will support a single root doc. Should happen
      // as early as possible.

      (0, _ampdocImpl.installDocService)(self,
      /* isSingleDoc */
      true);
      ampdocService = _services.Services.ampdocServiceFor(self);
    } catch (e) {
      // In case of an error call this.
      (0, _styleInstaller.makeBodyVisibleRecovery)(self.document);
      throw e;
    }

    (0, _chunk.startupChunk)(self.document, function initial() {
      /** @const {!./service/ampdoc-impl.AmpDoc} */
      var ampdoc = ampdocService.getAmpDoc(self.document);
      (0, _performanceImpl.installPerformanceService)(self);
      /** @const {!./service/performance-impl.Performance} */

      var perf = _services.Services.performanceFor(self);

      if (self.document.documentElement.hasAttribute('i-amphtml-no-boilerplate')) {
        perf.addEnabledExperiment('no-boilerplate');
      }

      (0, _platformImpl.installPlatformService)(self);
      (0, _fontStylesheetTimeout.fontStylesheetTimeout)(self);
      perf.tick('is');
      (0, _styleInstaller.installStylesForDoc)(ampdoc, _css.cssText, function () {
        (0, _chunk.startupChunk)(self.document, function services() {
          // Core services.
          (0, _runtime.installRuntimeServices)(self);
          (0, _runtime.installAmpdocServices)(ampdoc); // We need the core services (viewer/resources) to start instrumenting

          perf.coreServicesAvailable();
          (0, _impression.maybeTrackImpression)(self);
        });
        (0, _chunk.startupChunk)(self.document, function adoptWindow() {
          (0, _runtime.adopt)(self);
        });
        (0, _chunk.startupChunk)(self.document, function builtins() {
          // Builtins.
          (0, _runtime.installBuiltins)(self);
        });
        (0, _chunk.startupChunk)(self.document, function stub() {
          // Pre-stub already known elements.
          (0, _customElementRegistry.stubElementsForDoc)(ampdoc);
        });
        (0, _chunk.startupChunk)(self.document, function final() {
          (0, _pullToRefresh.installPullToRefreshBlocker)(self);
          (0, _autoLightbox.installAutoLightboxExtension)(ampdoc);
          (0, _validatorIntegration.maybeValidate)(self);
          (0, _styleInstaller.makeBodyVisible)(self.document);
        });
        (0, _chunk.startupChunk)(self.document, function finalTick() {
          perf.tick('e_is');

          _services.Services.resourcesForDoc(ampdoc).ampInitComplete(); // TODO(erwinm): move invocation of the `flush` method when we have the
          // new ticks in place to batch the ticks properly.


          perf.flush();
        });
      },
      /* opt_isRuntimeCss */
      true,
      /* opt_ext */
      'amp-runtime');
    }); // Output a message to the console and add an attribute to the <html>
    // tag to give some information that can be used in error reports.
    // (At least by sophisticated users).

    if (self.console) {
      (console.info || console.log).call(console, 'Powered by AMP ⚡ HTML – Version 1903211831541', self.location.href);
    }

    self.document.documentElement.setAttribute('amp-version', '1903211831541');
  }

  },{"../build/css":1,"./auto-lightbox":13,"./chunk":15,"./error":29,"./font-stylesheet-timeout":36,"./impression":43,"./polyfills":57,"./pull-to-refresh":68,"./runtime":70,"./service/ampdoc-impl":73,"./service/custom-element-registry":79,"./service/performance-impl":90,"./service/platform-impl":91,"./services":112,"./style-installer":117,"./validator-integration":138}],11:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.triggerAnalyticsEvent = triggerAnalyticsEvent;

  var _services = require("./services");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Helper method to trigger analytics event if amp-analytics is available.
   * TODO: Do not expose this function
   * @param {!Element} target
   * @param {string} eventType
   * @param {!JsonObject=} opt_vars A map of vars and their values.
   */
  function triggerAnalyticsEvent(target, eventType, opt_vars) {
    _services.Services.analyticsForDocOrNull(target).then(function (analytics) {
      if (!analytics) {
        return;
      }

      analytics.triggerEventForTarget(target, eventType, opt_vars);
    });
  }

  },{"./services":112}],12:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.Animation = void 0;

  var _promise = require("./utils/promise");

  var _services = require("./services");

  var _log = require("./log");

  var _curve = require("./curve");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TAG_ = 'Animation';

  var NOOP_CALLBACK = function NOOP_CALLBACK() {};
  /**
   * The animation class allows construction of arbitrary animation processes.
   * The main method is "add" that adds a segment of animation at particular
   * time offset (delay) and duration. All animation segments are simply functions
   * of type Transition which are iterated from 0 to 1 in animation frames to
   * achieve the desired effect.
   */


  var Animation =
  /*#__PURE__*/
  function () {
    /**
     * Creates and starts animation with a single segment. Returns AnimationPlayer
     * object that can be used to monitor or control animation.
     *
     * @param {!Node} contextNode The context node.
     * @param {!TransitionDef<?>} transition Transition to animate.
     * @param {./time.timeDef} duration Duration in milliseconds.
     * @param {(!./curve.CurveDef|string)=} opt_curve Optional curve to use for
     *   animation. Default is the linear animation.
     * @return {!AnimationPlayer}
     */
    Animation.animate = function animate(contextNode, transition, duration, opt_curve) {
      return new Animation(contextNode).setCurve(opt_curve).add(0, transition, 1).start(duration);
    }
    /**
     * @param {!Node} contextNode
     * @param {!./service/vsync-impl.Vsync=} opt_vsync
     */
    ;

    function Animation(contextNode, opt_vsync) {
      /** @private @const {!Node} */
      this.contextNode_ = contextNode;
      /** @private @const {!./service/vsync-impl.Vsync} */

      this.vsync_ = opt_vsync || _services.Services.vsyncFor(self);
      /** @private {?./curve.CurveDef} */

      this.curve_ = null;
      /**
       * @private @const {!Array<!SegmentDef>}
       */

      this.segments_ = [];
    }
    /**
     * Sets the default curve for the animation. Each segment is allowed to have
     * its own curve, but this curve will be used if a segment doesn't specify
     * its own.
     * @param {!./curve.CurveDef|string|undefined} curve
     * @return {!Animation}
     */


    var _proto = Animation.prototype;

    _proto.setCurve = function setCurve(curve) {
      if (curve) {
        this.curve_ = (0, _curve.getCurve)(curve);
      }

      return this;
    }
    /**
     * Adds a segment to the animation. Each segment starts at offset (delay) and
     * runs for a portion of the overall animation (duration). Note that both
     * delay and duration and normtimeDef types which accept values from 0 to 1.
     * Optionally, the time is pushed through a curve. If curve is not specified,
     * the default animation curve will be used. The specified transition is
     * animated over the specified duration from 0 to 1.
     *
     * @param {./time.normtimeDef} delay
     * @param {!TransitionDef<?>} transition
     * @param {./time.normtimeDef} duration
     * @param {(!./curve.CurveDef|string)=} opt_curve
     * @return {!Animation}
     */
    ;

    _proto.add = function add(delay, transition, duration, opt_curve) {
      this.segments_.push({
        delay: delay,
        func: transition,
        duration: duration,
        curve: (0, _curve.getCurve)(opt_curve)
      });
      return this;
    }
    /**
     * Starts the animation and returns the AnimationPlayer object that can be
     * used to monitor and control the animation.
     *
     * @param {./time.timeDef} duration Absolute time in milliseconds.
     * @return {!AnimationPlayer}
     */
    ;

    _proto.start = function start(duration) {
      var player = new AnimationPlayer(this.vsync_, this.contextNode_, this.segments_, this.curve_, duration);
      return player;
    };

    return Animation;
  }();
  /**
   * AnimationPlayer allows tracking and monitoring of the running animation.
   * Most importantly it exposes methods "then" and "thenAlways" that have the
   * semantics of a Promise and signal when the animation completed or failed.
   * Additionally, it exposes the method "halt" which allows to stop/reset the
   * animation.
   * // TODO(@cramforce) Actually fully implement.
   * implements {IThenable}
   */


  exports.Animation = Animation;

  var AnimationPlayer =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./service/vsync-impl.Vsync} vsync
     * @param {!Node} contextNode
     * @param {!Array<!SegmentDef>} segments
     * @param {?./curve.CurveDef} defaultCurve
     * @param {./time.timeDef} duration
     */
    function AnimationPlayer(vsync, contextNode, segments, defaultCurve, duration) {
      /** @private @const {!./service/vsync-impl.Vsync} */
      this.vsync_ = vsync;
      /** @private @const {!Node} */

      this.contextNode_ = contextNode;
      /** @private @const {!Array<!SegmentRuntimeDef>} */

      this.segments_ = [];

      for (var i = 0; i < segments.length; i++) {
        var segment = segments[i];
        this.segments_.push({
          delay: segment.delay,
          func: segment.func,
          duration: segment.duration,
          curve: segment.curve || defaultCurve,
          started: false,
          completed: false
        });
      }
      /** @private @const */


      this.duration_ = duration;
      /** @private {./time.timeDef} */

      this.startTime_ = Date.now();
      /** @private {./time.normtimeDef} */
      // this.normLinearTime_ = 0;

      /** @private {./time.normtimeDef} */
      // this.normTime_ = 0;

      /** @private {boolean} */

      this.running_ = true;
      /** @private {!Object<string, *>} */

      this.state_ = {};
      var deferred = new _promise.Deferred();
      /** @const @private */

      this.promise_ = deferred.promise;
      /** @const @private */

      this.resolve_ = deferred.resolve;
      /** @const @private */

      this.reject_ = deferred.reject;
      /** @const */

      this.task_ = this.vsync_.createAnimTask(this.contextNode_, {
        mutate: this.stepMutate_.bind(this)
      });

      if (this.vsync_.canAnimate(this.contextNode_)) {
        this.task_(this.state_);
      } else {
        (0, _log.dev)().warn(TAG_, 'cannot animate');
        this.complete_(
        /* success */
        false,
        /* dir */
        0);
      }
    }
    /**
     * Chains to the animation's promise that will resolve when the animation has
     * completed or will reject if animation has failed or was interrupted.
     * @param {!Function=} opt_resolve
     * @param {!Function=} opt_reject
     * @return {!Promise}
     */


    var _proto2 = AnimationPlayer.prototype;

    _proto2.then = function then(opt_resolve, opt_reject) {
      if (!opt_resolve && !opt_reject) {
        return this.promise_;
      }

      return this.promise_.then(opt_resolve, opt_reject);
    }
    /**
     * Callback for regardless whether the animation succeeds or fails.
     * @param {!Function=} opt_callback
     * @return {!Promise}
     */
    ;

    _proto2.thenAlways = function thenAlways(opt_callback) {
      var callback = opt_callback || NOOP_CALLBACK;
      return this.then(callback, callback);
    }
    /**
     * Halts the animation. Depending on the opt_dir value, the following actions
     * can be performed:
     * 0: No action. The state will be as at the moment of halting (default)
     * 1: Final state. Transitionable will be set to state = 1.
     * -1: Reset state. Transitionable will be reset to state = 0.
     * The animation's promise will be rejected since the transition has been
     * interrupted.
     * @param {number=} opt_dir
     */
    ;

    _proto2.halt = function halt(opt_dir) {
      this.complete_(
      /* success */
      false,
      /* dir */
      opt_dir || 0);
    }
    /**
     * @param {boolean} success
     * @param {number} dir
     * @private
     */
    ;

    _proto2.complete_ = function complete_(success, dir) {
      if (!this.running_) {
        return;
      }

      this.running_ = false;

      if (dir != 0) {
        // Sort in the completion order.
        if (this.segments_.length > 1) {
          this.segments_.sort(function (s1, s2) {
            return s1.delay + s1.duration - (s2.delay + s2.duration);
          });
        }

        try {
          if (dir > 0) {
            // Natural order - all set to 1.
            for (var i = 0; i < this.segments_.length; i++) {
              this.segments_[i].func(1, true);
            }
          } else {
            // Reverse order - all set to 0.
            for (var _i = this.segments_.length - 1; _i >= 0; _i--) {
              this.segments_[_i].func(0, false);
            }
          }
        } catch (e) {
          (0, _log.dev)().error(TAG_, 'completion failed: ' + e, e);
          success = false;
        }
      }

      if (success) {
        this.resolve_();
      } else {
        this.reject_();
      }
    }
    /**
     * @param {!Object<string, *>} unusedState
     * @private
     */
    ;

    _proto2.stepMutate_ = function stepMutate_(unusedState) {
      if (!this.running_) {
        return;
      }

      var currentTime = Date.now();
      var normLinearTime = Math.min((currentTime - this.startTime_) / this.duration_, 1); // Start segments due to be started

      for (var i = 0; i < this.segments_.length; i++) {
        var segment = this.segments_[i];

        if (!segment.started && normLinearTime >= segment.delay) {
          segment.started = true;
        }
      } // Execute all pending segments.


      for (var _i2 = 0; _i2 < this.segments_.length; _i2++) {
        var _segment = this.segments_[_i2];

        if (!_segment.started || _segment.completed) {
          continue;
        }

        this.mutateSegment_(_segment, normLinearTime);
      } // Complete or start next cycle.


      if (normLinearTime == 1) {
        this.complete_(
        /* success */
        true,
        /* dir */
        0);
      } else {
        if (this.vsync_.canAnimate(this.contextNode_)) {
          this.task_(this.state_);
        } else {
          (0, _log.dev)().warn(TAG_, 'cancel animation');
          this.complete_(
          /* success */
          false,
          /* dir */
          0);
        }
      }
    }
    /**
     * @param {!SegmentRuntimeDef} segment
     * @param {number} totalLinearTime
     */
    ;

    _proto2.mutateSegment_ = function mutateSegment_(segment, totalLinearTime) {
      var normLinearTime;
      var normTime;

      if (segment.duration > 0) {
        normLinearTime = Math.min((totalLinearTime - segment.delay) / segment.duration, 1);
        normTime = normLinearTime;

        if (segment.curve && normTime != 1) {
          try {
            normTime = segment.curve(normLinearTime);
          } catch (e) {
            (0, _log.dev)().error(TAG_, 'step curve failed: ' + e, e);
            this.complete_(
            /* success */
            false,
            /* dir */
            0);
            return;
          }
        }
      } else {
        normLinearTime = 1;
        normTime = 1;
      }

      if (normLinearTime == 1) {
        segment.completed = true;
      }

      try {
        segment.func(normTime, segment.completed);
      } catch (e) {
        (0, _log.dev)().error(TAG_, 'step mutate failed: ' + e, e);
        this.complete_(
        /* success */
        false,
        /* dir */
        0);
        return;
      }
    };

    return AnimationPlayer;
  }();
  /**
   * @typedef {{
   *   delay: ./time.normtimeDef,
   *   func: !TransitionDef,
   *   duration: ./time.normtimeDef,
   *   curve: ?./curve.CurveDef
   * }}
   */


  var SegmentDef;
  /**
   * @typedef {{
   *   delay: ./time.normtimeDef,
   *   func: !TransitionDef,
   *   duration: ./time.normtimeDef,
   *   curve: ?./curve.CurveDef,
   *   started: boolean,
   *   completed: boolean
   * }}
   */

  var SegmentRuntimeDef;

  },{"./curve":22,"./log":51,"./services":112,"./utils/promise":134}],13:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installAutoLightboxExtension = installAutoLightboxExtension;
  exports.isActionableByTap = isActionableByTap;
  exports.AutoLightboxEvents = void 0;

  var _chunk = require("./chunk");

  var _services = require("./services");

  var _log = require("./log");

  var _experiments = require("./experiments");

  /**
   * Copyright 2019 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @const @enum {string} */
  var AutoLightboxEvents = {
    // Triggered when the lightbox attribute is newly set on an item in order to
    // process by the renderer extension (e.g. amp-lightbox-gallery).
    NEWLY_SET: 'amp-auto-lightbox:newly-set'
  };
  /**
   * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
   */

  exports.AutoLightboxEvents = AutoLightboxEvents;

  function installAutoLightboxExtension(ampdoc) {
    var win = ampdoc.win;

    if (!(0, _experiments.isExperimentOn)(win, 'amp-auto-lightbox')) {
      return;
    }

  }
  /**
   * @param {!Element} element
   * @return {boolean}
   */


  function isActionableByTap(element) {
    if (element.tagName.toLowerCase() == 'a' && element.hasAttribute('href')) {
      return true;
    }

    if (element.querySelector('a[href]')) {
      return true;
    }

    var action = _services.Services.actionServiceForDoc(element);

    var hasTapAction = action.hasResolvableAction(element, 'tap', (0, _log.dev)().assertElement(element.parentElement));

    if (hasTapAction) {
      return true;
    }

    var actionables = element.querySelectorAll('[on]');

    for (var i = 0; i < actionables.length; i++) {
      var actionable = actionables[i];

      var _hasTapAction = action.hasResolvableAction(actionable, 'tap', (0, _log.dev)().assertElement(actionable.parentElement));

      if (_hasTapAction) {
        return true;
      }
    }

    return false;
  }

  },{"./chunk":15,"./experiments":32,"./log":51,"./services":112}],14:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.BaseElement = void 0;

  var _actionConstants = require("./action-constants");

  var _layout = require("./layout");

  var _services = require("./services");

  var _log = require("./log");

  var _eventHelper = require("./event-helper");

  var _mode = require("./mode");

  var _types = require("./types");

  var _experiments = require("./experiments");

  var _preconnect = require("./preconnect");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Base class for all custom element implementations. Instead of inheriting
   * from Element this class has an Element. Among other things this allows
   * switching the element implementation when going from a stub to the full
   * implementation.
   *
   * The base class implements a set of lifecycle methods that are called by
   * the runtime as appropriate. These are mostly based on the custom element
   * lifecycle (See
   * https://developers.google.com/web/fundamentals/getting-started/primers/customelements)
   * and adding AMP style late loading to the mix.
   *
   * The complete lifecycle of a custom DOM element is:
   *
   *           ||
   *           || createdCallback
   *           ||
   *           \/
   *    State: <NOT BUILT> <NOT UPGRADED> <NOT ATTACHED>
   *           ||
   *           || upgrade
   *           ||
   *           \/
   *    State: <NOT BUILT> <NOT ATTACHED>
   *           ||
   *           || firstAttachedCallback
   *           ||
   *           \/
   *    State: <NOT BUILT>
   *           ||
   *           || buildCallback
   *           || !getPlaceholder() => createPlaceholderCallback
   *           || preconnectCallback may be called N times after this, but only
   *           || after the doc becomes visible.
   *           || pauseCallback may be called N times after this.
   *           || resumeCallback may be called N times after this.
   *           ||
   *           \/
   *    State: <BUILT>
   *           ||
   *           || layoutCallback        <==
   *           || (firstLayoutCompleted)  ||
   *           ||                         ||
   *           \/                         || isRelayoutNeeded?
   *    State: <LAID OUT>                 ||
   *           ||                         ||
   *           ||                 =========
   *           ||
   *           || viewportCallback
   *           || unlayoutCallback may be called N times after this.
   *           ||
   *           \/
   *    State: <IN VIEWPORT>
   *
   * The preconnectCallback is called when the systems thinks it is good
   * to preconnect to hosts needed by an element. It will never be called
   * before buildCallback and it might be called multiple times including
   * after layoutCallback.
   *
   * The pauseCallback is called when when the document becomes inactive, e.g.
   * when the user swipes away from the document, or when the element is no
   * longer being displayed, e.g. when the carousel slide slides out of view.
   * In these situations, any actively playing media should pause.
   *
   * The resumeCallback is called when when the document becomes active again
   * after becoming inactive, e.g. when the user swipes away from the document
   * and swipes back. In these situations, any paused media may begin playing
   * again, if user interaction is not required.
   * TODO(jridgewell) slide slides into view
   *
   * The createPlaceholderCallback is called if AMP didn't detect a provided
   * placeholder for the element, subclasses can override this to build and
   * return a dynamically created placeholder that AMP would append to the
   * element.
   *
   * The unlayoutCallback is called when the document becomes inactive, e.g.
   * when the user swipes away from the document, or another tab is focused.
   * In these situations, expensive memory and CPU resources should be freed.
   *
   * Additionally whenever the dimensions of an element might have changed
   * AMP remeasures its dimensions and calls `onLayoutMeasure` on the
   * element instance. This can be used to do additional style calculations
   * without triggering style recalculations.
   *
   * When the dimensions of an element has changed, the 'onMeasureChanged'
   * callback is called.
   *
   * For more details, see {@link custom-element.js}.
   *
   * Each method is called exactly once and overriding them in subclasses
   * is optional.
   */
  var BaseElement =
  /*#__PURE__*/
  function () {
    /** @param {!AmpElement} element */
    function BaseElement(element) {
      /** @public @const {!Element} */
      this.element = element;
      /*
      \   \  /  \  /   / /   \     |   _  \     |  \ |  | |  | |  \ |  |  /  ____|
       \   \/    \/   / /  ^  \    |  |_)  |    |   \|  | |  | |   \|  | |  |  __
        \            / /  /_\  \   |      /     |  . `  | |  | |  . `  | |  | |_ |
         \    /\    / /  _____  \  |  |\  \----.|  |\   | |  | |  |\   | |  |__| |
          \__/  \__/ /__/     \__\ | _| `._____||__| \__| |__| |__| \__|  \______|
       Any private property for BaseElement should be declared in
      build-system/amp.multipass.extern.js, this is so closure compiler doesn't
      reuse the same symbol it would use in the core compilation unit for the
      private property in the extensions compilation unit's private properties.
       */

      /** @package {!Layout} */

      this.layout_ = _layout.Layout.NODISPLAY;
      /** @package {number} */

      this.layoutWidth_ = -1;
      /** @package {boolean} */

      this.inViewport_ = false;
      /** @public @const {!Window} */

      this.win = (0, _types.toWin)(element.ownerDocument.defaultView);
      /**
       * Maps action name to struct containing the action handler and minimum
       * trust required to invoke the handler.
       * @private {?Object<string, {
       *   handler: function(!./service/action-impl.ActionInvocation),
       *   minTrust: ActionTrust,
       * }>} */

      this.actionMap_ = null;
      /** @private {?string} */

      this.defaultActionAlias_ = null;
      /** @public {!./preconnect.Preconnect} */

      this.preconnect = (0, _preconnect.preconnectForElement)(this.element);
      /** @public {?Object} For use by sub classes */

      this.config = null;
      /**
       * The time at which this element was scheduled for layout relative to the
       * epoch. This value will be set to 0 until the this element has been
       * scheduled.
       * Note that this value may change over time if the element is enqueued,
       * then dequeued and re-enqueued by the scheduler.
       * @public {number}
       */

      this.layoutScheduleTime = 0;
    }
    /**
     * The element's signal tracker.
     * @return {!./utils/signals.Signals}
     */


    var _proto = BaseElement.prototype;

    _proto.signals = function signals() {
      return this.element.signals();
    }
    /**
     * The element's default action alias.
     * @return {?string}
     */
    ;

    _proto.getDefaultActionAlias = function getDefaultActionAlias() {
      return this.defaultActionAlias_;
    }
    /**
    * This is the priority of loading elements (layoutCallback). Used only to
    * determine layout timing and preloading priority. Does not affect build time,
    * etc.
    *
    * The lower the number, the higher the priority.
    *
    * The default priority for base elements is LayoutPriority.CONTENT.
    * @return {number}
    */
    ;

    _proto.getLayoutPriority = function getLayoutPriority() {
      return _layout.LayoutPriority.CONTENT;
    }
    /**
     * Updates the priority of the resource. If there are tasks currently
     * scheduled, their priority is updated as well.
     *
     * This method can be called any time when the new priority value is
     * available. It's a restricted API and special review is required to
     * allow individual extensions to request priority upgrade.
     *
     * @param {number} newLayoutPriority
     * @restricted
     */
    ;

    _proto.updateLayoutPriority = function updateLayoutPriority(newLayoutPriority) {
      this.element.getResources().updateLayoutPriority(this.element, newLayoutPriority);
    }
    /** @return {!Layout} */
    ;

    _proto.getLayout = function getLayout() {
      return this.layout_;
    }
    /**
     * Returns a previously measured layout box adjusted to the viewport. This
     * mainly affects fixed-position elements that are adjusted to be always
     * relative to the document position in the viewport.
     * @return {!./layout-rect.LayoutRectDef}
     */
    ;

    _proto.getLayoutBox = function getLayoutBox() {
      return this.element.getLayoutBox();
    }
    /**
     * Returns a previously measured layout box relative to the page. The
     * fixed-position elements are relative to the top of the document.
     * @return {!./layout-rect.LayoutRectDef}
     */
    ;

    _proto.getPageLayoutBox = function getPageLayoutBox() {
      return this.element.getPageLayoutBox();
    }
    /**
     * DO NOT CALL. Retained for backward compat during rollout.
     * @public @return {!Window}
     */
    ;

    _proto.getWin = function getWin() {
      return this.win;
    }
    /**
     * Returns the associated ampdoc. Only available when `buildCallback` and
     * going forward. It throws an exception before `buildCallback`.
     * @return {!./service/ampdoc-impl.AmpDoc}
     */
    ;

    _proto.getAmpDoc = function getAmpDoc() {
      return this.element.getAmpDoc();
    }
    /** @public @return {!./service/vsync-impl.Vsync} */
    ;

    _proto.getVsync = function getVsync() {
      return _services.Services.vsyncFor(this.win);
    }
    /**
     * Returns the layout width for this element. A `-1` value indicates that the
     * layout is not yet known. A `0` value indicates that the element is not
     * visible.
     * @return {number}
     * @public
     */
    ;

    _proto.getLayoutWidth = function getLayoutWidth() {
      return this.layoutWidth_;
    }
    /**
     * Returns the consent policy id that this element should wait for before
     * buildCallback.
     * A `null` value indicates to not be blocked by consent.
     * Subclasses may override.
     * @return {?string}
     */
    ;

    _proto.getConsentPolicy = function getConsentPolicy() {
      var policyId = null;

      if (this.element.hasAttribute('data-block-on-consent')) {
        policyId = this.element.getAttribute('data-block-on-consent') || 'default';
      }

      return policyId;
    }
    /**
     * Intended to be implemented by subclasses. Tests whether the element
     * supports the specified layout. By default only Layout.NODISPLAY is
     * supported.
     * @param {!Layout} layout
     * @return {boolean}
     * @public
     */
    ;

    _proto.isLayoutSupported = function isLayoutSupported(layout) {
      return layout == _layout.Layout.NODISPLAY;
    }
    /**
     * Intended to be implemented by subclasses. Tests whether the element
     * requires fixed positioning.
     * @return {boolean}
     * @public
     */
    ;

    _proto.isAlwaysFixed = function isAlwaysFixed() {
      return false;
    }
    /**
     * @return {boolean}
     */
    ;

    _proto.isInViewport = function isInViewport() {
      return this.inViewport_;
    }
    /**
     * This method is called when the element is added to DOM for the first time
     * and before `buildCallback` to give the element a chance to redirect its
     * implementation to another `BaseElement` implementation. The returned
     * value can be either `null` or `undefined` to indicate that no redirection
     * will take place; `BaseElement` instance to upgrade immediately; or a
     * promise to upgrade with the resolved `BaseElement` instance.
     *
     * Notice that calls to `upgradeCallback` are not recursive. I.e. this
     * callback will not be called on the returned instance again.
     *
     * @return {!BaseElement|!Promise<!BaseElement>|null}
     */
    ;

    _proto.upgradeCallback = function upgradeCallback() {
      // Subclasses may override.
      return null;
    }
    /**
     * Called when the element is first created. Note that for element created
     * using createElement this may be before any children are added.
     */
    ;

    _proto.createdCallback = function createdCallback() {} // Subclasses may override.

    /**
     * Override in subclass to adjust the element when it is being added to the
     * DOM. Could e.g. be used to insert a fallback. Should not typically start
     * loading a resource.
     */
    ;

    _proto.firstAttachedCallback = function firstAttachedCallback() {} // Subclasses may override.

    /**
     * Override in subclass if the element needs to rebuilt its DOM content.
     * Until the element has been rebuilt its content are not shown with an only
     * exception of [placeholder] elements. From the moment the element is created
     * and until the building phase is complete it will have "amp-notbuilt" CSS
     * class set on it.
     *
     * This callback is executed early after the element has been attached to DOM.
     *
     * This callback can either immediately return or return a promise if the
     * build steps are asynchronous.
     *
     * @return {!Promise|undefined}
     */
    ;

    _proto.buildCallback = function buildCallback() {} // Subclasses may override.

    /**
     * Called by the framework to give the element a chance to preconnect to
     * hosts and prefetch resources it is likely to need. May be called
     * multiple times because connections can time out.
     * @param {boolean=} opt_onLayout
     */
    ;

    _proto.preconnectCallback = function preconnectCallback(opt_onLayout) {} // Subclasses may override.

    /**
     * Override in subclass to adjust the element when it is being removed from
     * the DOM. Could e.g. be used to remove a listener.
     */
    ;

    _proto.detachedCallback = function detachedCallback() {} // Subclasses may override.

    /**
     * Sets this element as the owner of the specified element. By setting itself
     * as an owner, the element declares that it will manage the lifecycle of
     * the owned element itself. This element, as an owner, will have to call
     * {@link scheduleLayout}, {@link schedulePreload}, {@link updateInViewport}
     * and similar methods.
     * @param {!Element} element
     */
    ;

    _proto.setAsOwner = function setAsOwner(element) {
      this.element.getResources().setOwner(element, this.element);
    }
    /**
     * Subclasses can override this method to opt-in into being called to
     * prerender when document itself is not yet visible (pre-render mode).
     *
     * The return value of this function is used to determine whether or not the
     * element will be built _and_ laid out during prerender mode. Therefore, any
     * changes to the return value _after_ buildCallback() will have no affect.
     * @return {boolean}
     */
    ;

    _proto.prerenderAllowed = function prerenderAllowed() {
      return false;
    }
    /**
     * Subclasses can override this method to create a dynamic placeholder
     * element and return it to be appended to the element. This will only
     * be called if the element doesn't already have a placeholder.
     * @return {?Element}
     */
    ;

    _proto.createPlaceholderCallback = function createPlaceholderCallback() {
      return null;
    }
    /**
     * Subclasses can override this method to opt-out of rendering the element
     * when it is not currently visible.
     * Returning a boolean allows or prevents rendering outside the viewport at
     * any distance, while returning a positive number allows rendering only when
     * the element is within X viewports of the current viewport. Returning a
     * zero causes the element to only render inside the viewport.
     * @return {boolean|number}
     */
    ;

    _proto.renderOutsideViewport = function renderOutsideViewport() {
      // Inabox allow layout independent of viewport location.
      return (0, _mode.getMode)(this.win).runtime == 'inabox' || 3;
    }
    /**
     * Allows for rendering outside of the constraint set by renderOutsideViewport
     * so long task scheduler is idle.  Integer values less than those returned
     * by renderOutsideViewport have no effect.  Subclasses can override (default
     * is disabled).
     * @return {boolean|number}
     */
    ;

    _proto.idleRenderOutsideViewport = function idleRenderOutsideViewport() {
      return false;
    }
    /**
     * Subclasses can override this method to opt-in into receiving additional
     * {@link layoutCallback} calls. Note that this method is not consulted for
     * the first layout given that each element must be laid out at least once.
     * @return {boolean}
     */
    ;

    _proto.isRelayoutNeeded = function isRelayoutNeeded() {
      return false;
    }
    /**
     * Called when the element should perform layout. At this point the element
     * should load/reload resources associated with it. This method is called
     * by the runtime and cannot be called manually. Returns promise that will
     * complete when loading is considered to be complete.
     *
     * The first layout call is always called. If the subclass is interested in
     * receiving additional callbacks, it has to opt in to do so using
     * {@link isRelayoutNeeded} method.
     *
     * @return {!Promise}
     */
    ;

    _proto.layoutCallback = function layoutCallback() {
      return Promise.resolve();
    }
    /**
     * Called to notify the element that the first layout has been successfully
     * completed.
     *
     * The default behavior of this method is to hide the placeholder. However,
     * a subclass may choose to hide placeholder earlier or not hide it at all.
     *
     * @public
     */
    ;

    _proto.firstLayoutCompleted = function firstLayoutCompleted() {
      this.togglePlaceholder(false);
    }
    /**
     * Instructs the resource that it has either entered or exited the visible
     * viewport. Intended to be implemented by actual components.
     * @param {boolean} unusedInViewport
     */
    ;

    _proto.viewportCallback = function viewportCallback(unusedInViewport) {}
    /**
     * Requests the element to stop its activity when the document goes into
     * inactive state. The scope is up to the actual component. Among other
     * things the active playback of video or audio content must be stopped.
     */
    ;

    _proto.pauseCallback = function pauseCallback() {}
    /**
     * Requests the element to resume its activity when the document returns from
     * an inactive state. The scope is up to the actual component. Among other
     * things the active playback of video or audio content may be resumed.
     */
    ;

    _proto.resumeCallback = function resumeCallback() {}
    /**
     * Requests the element to unload any expensive resources when the element
     * goes into non-visible state. The scope is up to the actual component.
     * The component must return `true` if it'd like to later receive
     * {@link layoutCallback} in case document becomes active again.
     *
     * @return {boolean}
     */
    ;

    _proto.unlayoutCallback = function unlayoutCallback() {
      return false;
    }
    /**
     * Subclasses can override this method to opt-in into calling
     * {@link unlayoutCallback} when paused.
     * @return {boolean}
     */
    ;

    _proto.unlayoutOnPause = function unlayoutOnPause() {
      return false;
    }
    /**
     * Whether the element needs to be reconstructed after it has been
     * re-parented. Many elements cannot survive fully the reparenting and
     * are better to be reconstructed from scratch.
     *
     * An example of an element that should be reconstructed in a iframe-based
     * element. Reparenting such an element will cause the iframe to reload and
     * will lost the previously established connection. It's safer to reconstruct
     * such an element. An image or the other hand does not need to be
     * reconstructed since image itself is not reloaded by the browser and thus
     * there's no need to use additional resources for reconstruction.
     *
     * @return {boolean}
     */
    ;

    _proto.reconstructWhenReparented = function reconstructWhenReparented() {
      return true;
    }
    /**
     * Instructs the element that its activation is requested based on some
     * user event. Intended to be implemented by actual components.
     * @param {!./service/action-impl.ActionInvocation} unusedInvocation
     */
    ;

    _proto.activate = function activate(unusedInvocation) {}
    /**
     * Minimum event trust required for activate().
     * @return {ActionTrust}
     */
    ;

    _proto.activationTrust = function activationTrust() {
      return _actionConstants.ActionTrust.HIGH;
    }
    /**
     * Returns a promise that will resolve or fail based on the element's 'load'
     * and 'error' events.
     * @param {T} element
     * @return {!Promise<T>}
     * @template T
     * @final
     */
    ;

    _proto.loadPromise = function loadPromise(element) {
      return (0, _eventHelper.loadPromise)(element);
    }
    /** @private */
    ;

    _proto.initActionMap_ = function initActionMap_() {
      if (!this.actionMap_) {
        this.actionMap_ = this.win.Object.create(null);
      }
    }
    /**
     * Registers the action handler for the method with the specified name.
     *
     * The handler is only invoked by events with trust equal to or greater than
     * `minTrust`. Otherwise, a user error is logged.
     *
     * @param {string} alias
     * @param {function(!./service/action-impl.ActionInvocation)} handler
     * @param {ActionTrust} minTrust
     * @public
     */
    ;

    _proto.registerAction = function registerAction(alias, handler, minTrust) {
      if (minTrust === void 0) {
        minTrust = _actionConstants.ActionTrust.HIGH;
      }

      this.initActionMap_();
      this.actionMap_[alias] = {
        handler: handler,
        minTrust: minTrust
      };
    }
    /**
     * Registers the default action for this component.
     * @param {function(!./service/action-impl.ActionInvocation)} handler
     * @param {string=} alias
     * @param {ActionTrust=} minTrust
     * @public
     */
    ;

    _proto.registerDefaultAction = function registerDefaultAction(handler, alias, minTrust) {
      if (alias === void 0) {
        alias = _actionConstants.DEFAULT_ACTION;
      }

      if (minTrust === void 0) {
        minTrust = _actionConstants.ActionTrust.HIGH;
      }

      (0, _log.devAssert)(!this.defaultActionAlias_, 'Default action "%s" already registered.', this.defaultActionAlias_);
      this.registerAction(alias, handler, minTrust);
      this.defaultActionAlias_ = alias;
    }
    /**
     * Requests the element to execute the specified method. If method must have
     * been previously registered using {@link registerAction}, otherwise an
     * error is thrown.
     * @param {!./service/action-impl.ActionInvocation} invocation The invocation data.
     * @param {boolean=} unusedDeferred Whether the invocation has had to wait any time
     *   for the element to be resolved, upgraded and built.
     * @final
     * @package
     */
    ;

    _proto.executeAction = function executeAction(invocation, unusedDeferred) {
      var method = invocation.method; // If the default action has an alias, the handler will be stored under it.

      if (method === _actionConstants.DEFAULT_ACTION) {
        method = this.defaultActionAlias_ || method;
      }

      this.initActionMap_();
      var holder = this.actionMap_[method];
      var tagName = this.element.tagName;
      (0, _log.userAssert)(holder, "Method not found: " + method + " in " + tagName);
      var handler = holder.handler,
          minTrust = holder.minTrust;

      if (invocation.satisfiesTrust(minTrust)) {
        return handler(invocation);
      }
    }
    /**
     * Returns the maximum DPR available on this device.
     * @return {number}
     */
    ;

    _proto.getMaxDpr = function getMaxDpr() {
      return this.element.getResources().getMaxDpr();
    }
    /**
     * Returns the most optimal DPR currently recommended.
     * @return {number}
     */
    ;

    _proto.getDpr = function getDpr() {
      return this.element.getResources().getDpr();
    }
    /**
     * Utility method that propagates attributes from this element
     * to the given element.
     * If `opt_removeMissingAttrs` is true, then also removes any specified
     * attributes that are missing on this element from the target element.
     * @param {string|!Array<string>} attributes
     * @param {!Element} element
     * @param {boolean=} opt_removeMissingAttrs
     * @public @final
     */
    ;

    _proto.propagateAttributes = function propagateAttributes(attributes, element, opt_removeMissingAttrs) {
      attributes = (0, _types.isArray)(attributes) ? attributes : [attributes];

      for (var i = 0; i < attributes.length; i++) {
        var attr = attributes[i];

        if (this.element.hasAttribute(attr)) {
          element.setAttribute(attr, this.element.getAttribute(attr));
        } else if (opt_removeMissingAttrs) {
          element.removeAttribute(attr);
        }
      }
    }
    /**
     * Utility method that forwards the given list of non-bubbling events
     * from the given element to this element as custom events with the same name.
     * @param  {string|!Array<string>} events
     * @param  {!Element} element
     * @public @final
     * @return {!UnlistenDef}
     */
    ;

    _proto.forwardEvents = function forwardEvents(events, element) {
      var _this = this;

      var unlisteners = ((0, _types.isArray)(events) ? events : [events]).map(function (eventType) {
        return (0, _eventHelper.listen)(element, eventType, function (event) {
          _this.element.dispatchCustomEvent(eventType, (0, _eventHelper.getData)(event) || {});
        });
      });
      return function () {
        return unlisteners.forEach(function (unlisten) {
          return unlisten();
        });
      };
    }
    /**
     * Returns an optional placeholder element for this custom element.
     * @return {?Element}
     * @public @final
     */
    ;

    _proto.getPlaceholder = function getPlaceholder() {
      return this.element.getPlaceholder();
    }
    /**
     * Hides or shows the placeholder, if available.
     * @param {boolean} state
     * @public @final
     */
    ;

    _proto.togglePlaceholder = function togglePlaceholder(state) {
      this.element.togglePlaceholder(state);
    }
    /**
     * Returns an optional fallback element for this custom element.
     * @return {?Element}
     * @public @final
     */
    ;

    _proto.getFallback = function getFallback() {
      return this.element.getFallback();
    }
    /**
     * Hides or shows the fallback, if available. This function must only
     * be called inside a mutate context.
     * @param {boolean} state
     * @public @final
     */
    ;

    _proto.toggleFallback = function toggleFallback(state) {
      this.element.toggleFallback(state);
    }
    /**
     * Hides or shows the loading indicator. This function must only
     * be called inside a mutate context.
     * @param {boolean} state
     * @param {boolean=} opt_force
     * @public @final
     */
    ;

    _proto.toggleLoading = function toggleLoading(state, opt_force) {
      this.element.toggleLoading(state, {
        force: !!opt_force
      });
    }
    /**
     * Returns whether the loading indicator is reused again after the first
     * render.
     * @return {boolean}
     * @public
     */
    ;

    _proto.isLoadingReused = function isLoadingReused() {
      return false;
    }
    /**
     * Returns an optional overflow element for this custom element.
     * @return {?Element}
     * @public @final
     */
    ;

    _proto.getOverflowElement = function getOverflowElement() {
      return this.element.getOverflowElement();
    }
    /**
     * An implementation can call this method to signal to the element that
     * it has started rendering.
     */
    ;

    _proto.renderStarted = function renderStarted() {
      this.element.renderStarted();
    }
    /**
     * Returns the original nodes of the custom element without any service nodes
     * that could have been added for markup. These nodes can include Text,
     * Comment and other child nodes.
     * @return {!Array<!Node>}
     * @public @final
     */
    ;

    _proto.getRealChildNodes = function getRealChildNodes() {
      return this.element.getRealChildNodes();
    }
    /**
     * Returns the original children of the custom element without any service
     * nodes that could have been added for markup.
     * @return {!Array<!Element>}
     * @public @final
     */
    ;

    _proto.getRealChildren = function getRealChildren() {
      return this.element.getRealChildren();
    }
    /**
     * Configures the supplied element to have a "fill content" layout. The
     * exact interpretation of "fill content" depends on the element's layout.
     *
     * If `opt_replacedContent` is specified, it indicates whether the "replaced
     * content" styling should be applied. Replaced content is not allowed to
     * have its own paddings or border.
     *
     * @param {!Element} element
     * @param {boolean=} opt_replacedContent
     * @public @final
     */
    ;

    _proto.applyFillContent = function applyFillContent(element, opt_replacedContent) {
      element.classList.add('i-amphtml-fill-content');

      if (opt_replacedContent) {
        element.classList.add('i-amphtml-replaced-content');
      }
    }
    /**
     * Returns the viewport within which the element operates.
     * @return {!./service/viewport/viewport-impl.Viewport}
     */
    ;

    _proto.getViewport = function getViewport() {
      return _services.Services.viewportForDoc(this.getAmpDoc());
    }
    /**
     * Returns the layout rectangle used for when calculating this element's
     * intersection with the viewport.
     * @return {!./layout-rect.LayoutRectDef}
     */
    ;

    _proto.getIntersectionElementLayoutBox = function getIntersectionElementLayoutBox() {
      return this.getLayoutBox();
    }
    /**
     * Schedule the layout request for the children element or elements
     * specified. Resource manager will perform the actual layout based on the
     * priority of this element and its children.
     * @param {!Element|!Array<!Element>} elements
     * @public
     */
    ;

    _proto.scheduleLayout = function scheduleLayout(elements) {
      this.element.getResources().scheduleLayout(this.element, elements);
    }
    /**
     * @param {!Element|!Array<!Element>} elements
     * @public
     */
    ;

    _proto.schedulePause = function schedulePause(elements) {
      this.element.getResources().schedulePause(this.element, elements);
    }
    /**
     * @param {!Element|!Array<!Element>} elements
     * @public
     */
    ;

    _proto.scheduleResume = function scheduleResume(elements) {
      this.element.getResources().scheduleResume(this.element, elements);
    }
    /**
     * Schedule the preload request for the children element or elements
     * specified. Resource manager will perform the actual preload based on the
     * priority of this element and its children.
     * @param {!Element|!Array<!Element>} elements
     * @public
     */
    ;

    _proto.schedulePreload = function schedulePreload(elements) {
      this.element.getResources().schedulePreload(this.element, elements);
    }
    /**
     * @param {!Element|!Array<!Element>} elements
     * @public
     */
    ;

    _proto.scheduleUnlayout = function scheduleUnlayout(elements) {
      this.element.getResources().
      /*OK*/
      scheduleUnlayout(this.element, elements);
    }
    /**
     * Update inViewport state of the specified children element or elements.
     * Resource manager will perform the actual changes to the inViewport state
     * based on the state of these elements and their parent subtree.
     * @param {!Element|!Array<!Element>} elements
     * @param {boolean} inLocalViewport
     * @public
     */
    ;

    _proto.updateInViewport = function updateInViewport(elements, inLocalViewport) {
      this.element.getResources().updateInViewport(this.element, elements, inLocalViewport);
    }
    /**
     * Requests the runtime to update the height of this element to the specified
     * value. The runtime will schedule this request and attempt to process it
     * as soon as possible.
     * @param {number} newHeight
     * @public
     */
    ;

    _proto.changeHeight = function changeHeight(newHeight) {
      this.element.getResources().
      /*OK*/
      changeSize(this.element, newHeight,
      /* newWidth */
      undefined);
    }
    /**
     * Collapses the element, setting it to `display: none`, and notifies its
     * owner (if there is one) through {@link collapsedCallback} that the element
     * is no longer visible.
     */
    ;

    _proto.collapse = function collapse() {
      this.element.getResources().collapseElement(this.element);
    }
    /**
     * Return a promise that request the runtime to collapse one element
     * @return {!Promise}
     */
    ;

    _proto.attemptCollapse = function attemptCollapse() {
      return this.element.getResources().attemptCollapse(this.element);
    }
    /**
     * Return a promise that requests the runtime to update
     * the height of this element to the specified value.
     * The runtime will schedule this request and attempt to process it
     * as soon as possible. However, unlike in {@link changeHeight}, the runtime
     * may refuse to make a change in which case it will show the element's
     * overflow element if provided, which is supposed to provide the reader with
     * the necessary user action. (The overflow element is shown only if the
     * requested height is greater than 0.)
     * The promise is resolved if the height is successfully updated.
     * @param {number} newHeight
     * @return {!Promise}
     * @public
     */
    ;

    _proto.attemptChangeHeight = function attemptChangeHeight(newHeight) {
      return this.element.getResources().attemptChangeSize(this.element, newHeight,
      /* newWidth */
      undefined);
    }
    /**
    * Return a promise that requests the runtime to update
    * the size of this element to the specified value.
    * The runtime will schedule this request and attempt to process it
    * as soon as possible. However, unlike in {@link changeSize}, the runtime
    * may refuse to make a change in which case it will show the element's
    * overflow element if provided, which is supposed to provide the reader with
    * the necessary user action. (The overflow element is shown only if the
    * requested height is greater than 0.)
    * The promise is resolved if the height is successfully updated.
    * @param {number|undefined} newHeight
    * @param {number|undefined} newWidth
    * @return {!Promise}
    * @public
    */
    ;

    _proto.attemptChangeSize = function attemptChangeSize(newHeight, newWidth) {
      return this.element.getResources().attemptChangeSize(this.element, newHeight, newWidth);
    }
    /**
     * Runs the specified measure, which is called in the "measure" vsync phase.
     * This is simply a proxy to the privileged vsync service.
     *
     * @param {function()} measurer
     * @return {!Promise}
     */
    ;

    _proto.measureElement = function measureElement(measurer) {
      return this.element.getResources().measureElement(measurer);
    }
    /**
     * Runs the specified mutation on the element and ensures that remeasures and
     * layouts are performed for the affected elements.
     *
     * This method should be called whenever a significant mutations are done
     * on the DOM that could affect layout of elements inside this subtree or
     * its siblings. The top-most affected element should be specified as the
     * first argument to this method and all the mutation work should be done
     * in the mutator callback which is called in the "mutation" vsync phase.
     *
     * @param {function()} mutator
     * @param {Element=} opt_element
     * @return {!Promise}
     */
    ;

    _proto.mutateElement = function mutateElement(mutator, opt_element) {
      return this.measureMutateElement(null, mutator, opt_element);
    }
    /**
     * Runs the specified measure, then runs the mutation on the element and
     * ensures that remeasures and layouts are performed for the affected
     * elements.
     *
     * This method should be called whenever a measure and significant mutations
     * are done on the DOM that could affect layout of elements inside this
     * subtree or its siblings. The top-most affected element should be specified
     * as the first argument to this method and all the mutation work should be
     * done in the mutator callback which is called in the "mutation" vsync phase.
     *
     * @param {?function()} measurer
     * @param {function()} mutator
     * @param {Element=} opt_element
     * @return {!Promise}
     */
    ;

    _proto.measureMutateElement = function measureMutateElement(measurer, mutator, opt_element) {
      return this.element.getResources().measureMutateElement(opt_element || this.element, measurer, mutator);
    }
    /**
     * Called every time an owned AmpElement collapses itself.
     * See {@link collapse}.
     * @param {!AmpElement} unusedElement Child element that was collapsed.
     */
    ;

    _proto.collapsedCallback = function collapsedCallback(unusedElement) {} // Subclasses may override.

    /**
     * Expands the element, resetting its default display value, and notifies its
     * owner (if there is one) through {@link expandedCallback} that the element
     * is no longer visible.
     */
    ;

    _proto.expand = function expand() {
      this.element.getResources().expandElement(this.element);
    }
    /**
     * Called every time an owned AmpElement expands itself.
     * See {@link expand}.
     * @param {!AmpElement} unusedElement Child element that was expanded.
     */
    ;

    _proto.expandedCallback = function expandedCallback(unusedElement) {} // Subclasses may override.

    /**
     * Called when one or more attributes are mutated.
     * Note:
     * - Must be called inside a mutate context.
     * - Boolean attributes have a value of `true` and `false` when
     *       present and missing, respectively.
     * @param {
     *   !JsonObject<string, (null|boolean|string|number|Array|Object)>
     * } unusedMutations
     */
    ;

    _proto.mutatedAttributesCallback = function mutatedAttributesCallback(unusedMutations) {} // Subclasses may override.

    /**
     * Called when we just measured the layout rect of this element. Doing
     * more expensive style reads should now be cheap.
     * This may currently not work with extended elements. Please file
     * an issue if that is required.
     * @public
     */
    ;

    _proto.onLayoutMeasure = function onLayoutMeasure() {}
    /**
     * Called only when the measurements of an amp-element changes. This
     * would not trigger for every measurement invalidation caused by a mutation.
     * @public
     */
    ;

    _proto.onMeasureChanged = function onMeasureChanged() {}
    /**
     * @return {./log.Log}
     */
    ;

    _proto.user = function user() {
      return (0, _log.user)(this.element);
    }
    /**
     * Declares a child element (or ourselves) as a Layer
     * @param {!Element=} opt_element
     */
    ;

    _proto.declareLayer = function declareLayer(opt_element) {
      (0, _log.devAssert)((0, _experiments.isExperimentOn)(this.win, 'layers'), 'Layers must be enabled' + ' to declare layer.');

      if (opt_element) {
        (0, _log.devAssert)(this.element.contains(opt_element));
      }

      return this.element.getLayers().declareLayer(opt_element || this.element);
    };

    return BaseElement;
  }();

  exports.BaseElement = BaseElement;

  },{"./action-constants":8,"./event-helper":31,"./experiments":32,"./layout":49,"./log":51,"./mode":53,"./preconnect":67,"./services":112,"./types":121}],15:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.startupChunk = startupChunk;
  exports.chunk = chunk;
  exports.chunkInstanceForTesting = chunkInstanceForTesting;
  exports.deactivateChunking = deactivateChunking;
  exports.activateChunkingForTesting = activateChunkingForTesting;
  exports.runChunksForTesting = runChunksForTesting;
  exports.onIdle = onIdle;
  exports.ChunkPriority = void 0;

  var _services = require("./services");

  var _log = require("./log");

  var _eventHelper = require("./event-helper");

  var _service = require("./service");

  var _styleInstaller = require("./style-installer");

  var _priorityQueue = _interopRequireDefault(require("./utils/priority-queue"));

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  /**
   * @const {string}
   */
  var TAG = 'CHUNK';
  /**
   * @type {boolean}
   */

  var deactivated = /nochunking=1/.test(self.location.hash);
  /**
   * @const {!Promise}
   */

  var resolved = Promise.resolve();
  /**
   * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
   * @return {!Chunks}
   * @private
   */

  function chunkServiceForDoc(elementOrAmpDoc) {
    (0, _service.registerServiceBuilderForDoc)(elementOrAmpDoc, 'chunk', Chunks);
    return (0, _service.getServiceForDoc)(elementOrAmpDoc, 'chunk');
  }
  /**
   * Run the given function. For visible documents the function will be
   * called in a micro task (Essentially ASAP). If the document is
   * not visible, tasks will yield to the event loop (to give the browser
   * time to do other things) and may even be further delayed until
   * there is time.
   *
   * @param {!Document} document
   * @param {function(?IdleDeadline)} fn
   */


  function startupChunk(document, fn) {
    if (deactivated) {
      resolved.then(fn);
      return;
    }

    var service = chunkServiceForDoc(document.documentElement);
    service.runForStartup(fn);
  }
  /**
   * Run the given function sometime in the future without blocking UI.
   *
   * Higher priority tasks are executed before lower priority tasks.
   * Tasks with the same priority are executed in FIFO order.
   *
   * Uses `requestIdleCallback` if available and passes the `IdleDeadline`
   * object to the function, which can be used to perform a variable amount
   * of work depending on the remaining amount of idle time.
   *
   * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
   * @param {function(?IdleDeadline)} fn
   * @param {ChunkPriority} priority
   */


  function chunk(elementOrAmpDoc, fn, priority) {
    if (deactivated) {
      resolved.then(fn);
      return;
    }

    var service = chunkServiceForDoc(elementOrAmpDoc);
    service.run(fn, priority);
  }
  /**
   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
   * @return {!Chunks}
   */


  function chunkInstanceForTesting(elementOrAmpDoc) {
    return chunkServiceForDoc(elementOrAmpDoc);
  }
  /**
   * Use a standard micro task for every invocation. This should only
   * be called from the AMP bootstrap script if it is known that
   * chunking makes no sense. In particular this is the case when
   * AMP runs in the `amp-shadow` multi document mode.
   */


  function deactivateChunking() {
    deactivated = true;
  }
  /**
   * @visibleForTesting
   */


  function activateChunkingForTesting() {
    deactivated = false;
  }
  /**
   * Runs all currently scheduled chunks.
   * Independent of errors it will unwind the queue. Will afterwards
   * throw the first encountered error.
   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
   */


  function runChunksForTesting(elementOrAmpDoc) {
    var service = chunkInstanceForTesting(elementOrAmpDoc);
    var errors = [];

    while (true) {
      try {
        if (!service.execute_(
        /* idleDeadline */
        null)) {
          break;
        }
      } catch (e) {
        errors.push(e);
      }
    }

    if (errors.length) {
      throw errors[0];
    }
  }
  /**
   * The priority of a chunk task. Higher priority tasks have higher values.
   * @enum {number}
   */


  var ChunkPriority = {
    HIGH: 20,
    LOW: 10,
    BACKGROUND: 0
  };
  /** @enum {string} */

  exports.ChunkPriority = ChunkPriority;
  var TaskState = {
    NOT_RUN: 'not_run',
    RUN: 'run'
  };
  /**
   * A default chunkable task.
   * @private
   */

  var Task =
  /*#__PURE__*/
  function () {
    /**
     * @param {function(?IdleDeadline)} fn
     */
    function Task(fn) {
      /** @public {TaskState} */
      this.state = TaskState.NOT_RUN;
      /** @private @const {!function(?IdleDeadline)} */

      this.fn_ = fn;
    }
    /**
     * Executes the wrapped function.
     * @param {?IdleDeadline} idleDeadline
     * @throws {Error}
     * @protected
     */


    var _proto = Task.prototype;

    _proto.runTask_ = function runTask_(idleDeadline) {
      if (this.state == TaskState.RUN) {
        return;
      }

      this.state = TaskState.RUN;

      try {
        this.fn_(idleDeadline);
      } catch (e) {
        this.onTaskError_(e);
        throw e;
      }
    }
    /**
     * @return {string}
     * @protected
     */
    ;

    _proto.getName_ = function getName_() {
      return this.fn_.displayName || this.fn_.name;
    }
    /**
     * Optional handling when a task run throws an error.
     * @param {Error} unusedError
     * @private
     */
    ;

    _proto.onTaskError_ = function onTaskError_(unusedError) {} // By default, no-op.

    /**
     * Returns true if this task should be run without delay.
     * @return {boolean}
     * @protected
     */
    ;

    _proto.immediateTriggerCondition_ = function immediateTriggerCondition_() {
      // By default, there are no immediate trigger conditions.
      return false;
    }
    /**
     * Returns true if this task should be scheduled using `requestIdleCallback`.
     * Otherwise, task is scheduled as macro-task on next event loop.
     * @return {boolean}
     * @protected
     */
    ;

    _proto.useRequestIdleCallback_ = function useRequestIdleCallback_() {
      // By default, always use requestIdleCallback.
      return true;
    };

    return Task;
  }();
  /**
   * A task that's run as part of AMP's startup sequence.
   * @private
   */


  var StartupTask =
  /*#__PURE__*/
  function (_Task) {
    _inheritsLoose(StartupTask, _Task);

    /**
     * @param {function(?IdleDeadline)} fn
     * @param {!Window} win
     * @param {!Promise<!./service/viewer-impl.Viewer>} viewerPromise
     */
    function StartupTask(fn, win, viewerPromise) {
      var _this;

      _this = _Task.call(this, fn) || this;
      /** @private {!Window} */

      _this.win_ = win;
      /** @private {?./service/viewer-impl.Viewer} */

      _this.viewer_ = null;
      viewerPromise.then(function (viewer) {
        _this.viewer_ = viewer;

        if (_this.viewer_.isVisible()) {
          _this.runTask_(
          /* idleDeadline */
          null);
        }

        _this.viewer_.onVisibilityChanged(function () {
          if (_this.viewer_.isVisible()) {
            _this.runTask_(
            /* idleDeadline */
            null);
          }
        });
      });
      return _this;
    }
    /** @override */


    var _proto2 = StartupTask.prototype;

    _proto2.onTaskError_ = function onTaskError_(unusedError) {
      // Startup tasks run early in init. All errors should show the doc.
      (0, _styleInstaller.makeBodyVisibleRecovery)(self.document);
    }
    /** @override */
    ;

    _proto2.immediateTriggerCondition_ = function immediateTriggerCondition_() {
      // Run in a micro task when the doc is visible. Otherwise, run after
      // having yielded to the event queue once.
      return this.isVisible_();
    }
    /** @override */
    ;

    _proto2.useRequestIdleCallback_ = function useRequestIdleCallback_() {
      // We only start using requestIdleCallback when the viewer has
      // been initialized. Otherwise we risk starving ourselves
      // before we get into a state where the viewer can tell us
      // that we are visible.
      return !!this.viewer_;
    }
    /**
     * @return {boolean}
     * @private
     */
    ;

    _proto2.isVisible_ = function isVisible_() {
      // Ask the viewer first.
      if (this.viewer_) {
        return this.viewer_.isVisible();
      } // There is no viewer yet. Lets try to guess whether we are visible.


      if (this.win_.document.hidden) {
        return false;
      } // Viewers send a URL param if we are not visible.


      return !/visibilityState=(hidden|prerender)/.test(this.win_.location.hash);
    };

    return StartupTask;
  }(Task);
  /**
   * Handles queueing, scheduling and executing tasks.
   */


  var Chunks =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./service/ampdoc-impl.AmpDoc} ampDoc
     */
    function Chunks(ampDoc) {
      var _this2 = this;

      /** @private @const {!Window} */
      this.win_ = ampDoc.win;
      /** @private @const {!PriorityQueue<Task>} */

      this.tasks_ = new _priorityQueue.default();
      /** @private @const {function(?IdleDeadline)} */

      this.boundExecute_ = this.execute_.bind(this);
      /** @private @const {!Promise<!./service/viewer-impl.Viewer>} */

      this.viewerPromise_ = _services.Services.viewerPromiseForDoc(ampDoc);
      this.win_.addEventListener('message', function (e) {
        if ((0, _eventHelper.getData)(e) == 'amp-macro-task') {
          _this2.execute_(
          /* idleDeadline */
          null);
        }
      });
    }
    /**
     * Run fn as a "chunk".
     * @param {function(?IdleDeadline)} fn
     * @param {number} priority
     */


    var _proto3 = Chunks.prototype;

    _proto3.run = function run(fn, priority) {
      var t = new Task(fn);
      this.enqueueTask_(t, priority);
    }
    /**
     * Run a fn that's part of AMP's startup sequence as a "chunk".
     * @param {function(?IdleDeadline)} fn
     */
    ;

    _proto3.runForStartup = function runForStartup(fn) {
      var t = new StartupTask(fn, this.win_, this.viewerPromise_);
      this.enqueueTask_(t, Number.POSITIVE_INFINITY);
    }
    /**
     * Queues a task to be executed later with given priority.
     * @param {!Task} task
     * @param {number} priority
     * @private
     */
    ;

    _proto3.enqueueTask_ = function enqueueTask_(task, priority) {
      var _this3 = this;

      this.tasks_.enqueue(task, priority);
      resolved.then(function () {
        _this3.schedule_();
      });
    }
    /**
     * Returns the next task that hasn't been run yet.
     * If `opt_dequeue` is true, remove the returned task from the queue.
     * @param {boolean=} opt_dequeue
     * @return {?Task}
     * @private
     */
    ;

    _proto3.nextTask_ = function nextTask_(opt_dequeue) {
      var t = this.tasks_.peek(); // Dequeue tasks until we find one that hasn't been run yet.

      while (t && t.state !== TaskState.NOT_RUN) {
        this.tasks_.dequeue();
        t = this.tasks_.peek();
      } // If `opt_dequeue` is true, remove this task from the queue.


      if (t && opt_dequeue) {
        this.tasks_.dequeue();
      }

      return t;
    }
    /**
     * Run a task.
     * Schedule the next round if there are more tasks.
     * @param {?IdleDeadline} idleDeadline
     * @return {boolean} Whether anything was executed.
     * @private
     */
    ;

    _proto3.execute_ = function execute_(idleDeadline) {
      var _this4 = this;

      var t = this.nextTask_(
      /* opt_dequeue */
      true);

      if (!t) {
        return false;
      }

      var before = Date.now();
      t.runTask_(idleDeadline);
      resolved.then(function () {
        _this4.schedule_();
      });
      (0, _log.dev)().fine(TAG, t.getName_(), 'Chunk duration', Date.now() - before);
      return true;
    }
    /**
     * Calls `execute_()` asynchronously.
     * @param {?IdleDeadline} idleDeadline
     * @private
     */
    ;

    _proto3.executeAsap_ = function executeAsap_(idleDeadline) {
      var _this5 = this;

      resolved.then(function () {
        _this5.boundExecute_(idleDeadline);
      });
    }
    /**
     * Schedule running the next queued task.
     * @private
     */
    ;

    _proto3.schedule_ = function schedule_() {
      var nextTask = this.nextTask_();

      if (!nextTask) {
        return;
      }

      if (nextTask.immediateTriggerCondition_()) {
        this.executeAsap_(
        /* idleDeadline */
        null);
        return;
      } // If requestIdleCallback exists, schedule a task with it, but
      // do not wait longer than two seconds.


      if (nextTask.useRequestIdleCallback_() && this.win_.requestIdleCallback) {
        onIdle(this.win_, // Wait until we have a budget of at least 15ms.
        // 15ms is a magic number. Budgets are higher when the user
        // is completely idle (around 40), but that occurs too
        // rarely to be usable. 15ms budgets can happen during scrolling
        // but only if the device is doing super, super well, and no
        // real processing is done between frames.
        15
        /* minimumTimeRemaining */
        , 2000
        /* timeout */
        , this.boundExecute_);
        return;
      } // The message doesn't actually matter.


      this.win_.postMessage
      /*OK*/
      ('amp-macro-task', '*');
    };

    return Chunks;
  }();
  /**
   * Delays calling the given function until the browser is notifying us
   * about a certain minimum budget or the timeout is reached.
   * @param {!Window} win
   * @param {number} minimumTimeRemaining Minimum number of millis idle
   *     budget for callback to fire.
   * @param {number} timeout in millis for callback to fire.
   * @param {function(?IdleDeadline)} fn Callback.
   * @visibleForTesting
   */


  function onIdle(win, minimumTimeRemaining, timeout, fn) {
    var startTime = Date.now();
    /**
     * @param {!IdleDeadline} info
     */

    function rIC(info) {
      if (info.timeRemaining() < minimumTimeRemaining) {
        var remainingTimeout = timeout - (Date.now() - startTime);

        if (remainingTimeout <= 0 || info.didTimeout) {
          (0, _log.dev)().fine(TAG, 'Timed out', timeout, info.didTimeout);
          fn(info);
        } else {
          (0, _log.dev)().fine(TAG, 'Rescheduling with', remainingTimeout, info.timeRemaining());
          win.requestIdleCallback(rIC, {
            timeout: remainingTimeout
          });
        }
      } else {
        (0, _log.dev)().fine(TAG, 'Running idle callback with ', minimumTimeRemaining);
        fn(info);
      }
    }

    win.requestIdleCallback(rIC, {
      timeout: timeout
    });
  }

  },{"./event-helper":31,"./log":51,"./service":71,"./services":112,"./style-installer":117,"./utils/priority-queue":133}],16:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.CommonSignals = void 0;

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Commonly used signals across different elements and documents.
   * @enum {string}
   */
  var CommonSignals = {
    /**
     * The element has been built.
     */
    BUILT: 'built',

    /**
     * The initial contents of an element/document/embed have been loaded.
     */
    INI_LOAD: 'ini-load',

    /**
     * The element has been loaded.
     */
    LOAD_END: 'load-end',

    /**
     * The element has started loading.
     */
    LOAD_START: 'load-start',

    /**
     * Rendering has been confirmed to have been started.
     */
    RENDER_START: 'render-start',

    /**
     * The element has been unlaid out.
     */
    UNLOAD: 'unload'
  };
  exports.CommonSignals = CommonSignals;

  },{}],17:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.config = exports.urls = void 0;

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Allows for runtime configuration. Internally, the runtime should
   * use the src/config.js module for various constants. We can use the
   * AMP_CONFIG global to translate user-defined configurations to this
   * module.
   * @type {!Object<string, string>}
   */
  var env = self.AMP_CONFIG || {};
  var thirdPartyFrameRegex = typeof env['thirdPartyFrameRegex'] == 'string' ? new RegExp(env['thirdPartyFrameRegex']) : env['thirdPartyFrameRegex'];
  var cdnProxyRegex = typeof env['cdnProxyRegex'] == 'string' ? new RegExp(env['cdnProxyRegex']) : env['cdnProxyRegex'];
  /** @type {!Object<string, string|boolean|RegExp>} */

  var urls = {
    thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',
    thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',
    thirdPartyFrameRegex: thirdPartyFrameRegex || /^d-\d+\.ampproject\.net$/,
    cdn: env['cdnUrl'] || 'https://cdn.ampproject.org',

    /* Note that cdnProxyRegex is only ever checked against origins
     * (proto://host[:port]) so does not need to consider path
     */
    cdnProxyRegex: cdnProxyRegex || /^https:\/\/([a-zA-Z0-9_-]+\.)?cdn\.ampproject\.org$/,
    localhostRegex: /^https?:\/\/localhost(:\d+)?$/,
    errorReporting: env['errorReportingUrl'] || 'https://amp-error-reporting.appspot.com/r',
    localDev: env['localDev'] || false
  };
  exports.urls = urls;
  var config = {
    urls: urls
  };
  exports.config = config;

  },{}],18:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.CONSENT_POLICY_STATE = void 0;

  /**
   * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // This file will be imported by 3P scripts.

  /**
   * Possible consent policy state to proceed with.
   * @enum {number}
   */
  var CONSENT_POLICY_STATE = {
    // Enum value has external dependency. Please do not change existing value.
    // If new values are added, please notify the AMP for Ads team to assure
    // correct Real Time Config behavior is maintained for Fast Fetch.
    SUFFICIENT: 1,
    INSUFFICIENT: 2,
    UNKNOWN_NOT_REQUIRED: 3,
    UNKNOWN: 4
  };
  exports.CONSENT_POLICY_STATE = CONSENT_POLICY_STATE;

  },{}],19:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.getConsentPolicyState = getConsentPolicyState;
  exports.getConsentPolicySharedData = getConsentPolicySharedData;
  exports.getConsentPolicyInfo = getConsentPolicyInfo;
  exports.shouldBlockOnConsentByMeta = shouldBlockOnConsentByMeta;

  var _consentState = require("./consent-state");

  var _services = require("./services");

  var _log = require("./log");

  /**
   * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Returns a promise that resolve when all consent state the policy wait
   * for resolve. Or if consent service is not available.
   * @param {!Element|!ShadowRoot} element
   * @param {string=} policyId
   * @return {!Promise<?CONSENT_POLICY_STATE>}
   */
  function getConsentPolicyState(element, policyId) {
    if (policyId === void 0) {
      policyId = 'default';
    }

    return _services.Services.consentPolicyServiceForDocOrNull(element).then(function (consentPolicy) {
      if (!consentPolicy) {
        return null;
      }

      return consentPolicy.whenPolicyResolved(
      /** @type {string} */
      policyId);
    });
  }
  /**
   * Returns a promise that resolves to a sharedData retrieved from consent
   * remote endpoint.
   * @param {!Element|!ShadowRoot} element
   * @param {string} policyId
   * @return {!Promise<?Object>}
   */


  function getConsentPolicySharedData(element, policyId) {
    return _services.Services.consentPolicyServiceForDocOrNull(element).then(function (consentPolicy) {
      if (!consentPolicy) {
        return null;
      }

      return consentPolicy.getMergedSharedData(
      /** @type {string} */
      policyId);
    });
  }
  /**
   * TODO(zhouyx): Combine with getConsentPolicyState and return a consentInfo
   * object.
   * @param {!Element|!ShadowRoot} element
   * @param {string} policyId
   * @return {!Promise<string>}
   */


  function getConsentPolicyInfo(element, policyId) {
    // Return the stored consent string.
    return _services.Services.consentPolicyServiceForDocOrNull(element).then(function (consentPolicy) {
      if (!consentPolicy) {
        return null;
      }

      return consentPolicy.getConsentStringInfo(
      /** @type {string} */
      policyId);
    });
  }
  /**
   * Determine if an element needs to be blocked by consent based on metaTags.
   * @param {*} element
   * @return {boolean}
   */


  function shouldBlockOnConsentByMeta(element) {
    var ampdoc = element.getAmpDoc();

    var content = _services.Services.documentInfoForDoc(ampdoc).metaTags['amp-consent-blocking'];

    if (!content) {
      return false;
    } // validator enforce uniqueness of <meta name='amp-consent-blocking'>
    // content will not be an array.


    if (typeof content !== 'string') {
      (0, _log.user)().error('CONSENT', 'Invalid amp-consent-blocking value, ignore meta tag');
      return false;
    } // Handles whitespace


    content = content.toUpperCase().replace(/\s/g, '').split(',');

    if (content.includes(element.tagName)) {
      return true;
    }

    return false;
  }

  },{"./consent-state":18,"./log":51,"./services":112}],20:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.getCookie = getCookie;
  exports.setCookie = setCookie;

  var _string = require("./string");

  var _url = require("./url");

  var _config = require("./config");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Returns the value of the cookie. The cookie access is restricted and must
   * go through the privacy review. Before using this method please file a
   * GitHub issue with "Privacy Review" label.
   *
   * Returns the cookie's value or `null`.
   *
   * @param {!Window} win
   * @param {string} name
   * @return {?string}
   */
  function getCookie(win, name) {
    var cookieString = tryGetDocumentCookieNoInline(win);

    if (!cookieString) {
      return null;
    }

    var cookies = cookieString.split(';');

    for (var i = 0; i < cookies.length; i++) {
      var cookie = cookies[i].trim();
      var eq = cookie.indexOf('=');

      if (eq == -1) {
        continue;
      }

      if ((0, _url.tryDecodeUriComponent)(cookie.substring(0, eq).trim()) == name) {
        var value = cookie.substring(eq + 1).trim();
        return (0, _url.tryDecodeUriComponent)(value, value);
      }
    }

    return null;
  }
  /**
   * This method should not be inlined to prevent TryCatch deoptimization.
   * NoInline keyword at the end of function name also prevents Closure compiler
   * from inlining the function.
   * @param {!Window} win
   * @return {string}
   */


  function tryGetDocumentCookieNoInline(win) {
    try {
      return win.document.cookie;
    } catch (e) {
      // Act as if no cookie is available. Exceptions can be thrown when
      // AMP docs are opened on origins that do not allow setting
      // cookies such as null origins.
      return '';
    }
  }
  /**
   * Sets the value of the cookie. The cookie access is restricted and must
   * go through the privacy review. Before using this method please file a
   * GitHub issue with "Privacy Review" label.
   *
   * @param {!Window} win
   * @param {string} name
   * @param {string} value
   * @param {time} expirationTime
   * @param {{
   *   highestAvailableDomain:(boolean|undefined),
   *   domain:(string|undefined)
   * }=} opt_options
   *     - highestAvailableDomain: If true, set the cookie at the widest domain
   *       scope allowed by the browser. E.g. on example.com if we are currently
   *       on www.example.com.
   *     - domain: Explicit domain to set.
   *     - allowOnProxyOrigin: Allow setting a cookie on the AMP Cache.
   */


  function setCookie(win, name, value, expirationTime, opt_options) {
    checkOriginForSettingCookie(win, opt_options, name);

    if (opt_options && opt_options.highestAvailableDomain) {
      var parts = win.location.hostname.split('.');
      var _domain = parts[parts.length - 1];

      for (var i = parts.length - 2; i >= 0; i--) {
        _domain = parts[i] + '.' + _domain;
        trySetCookie(win, name, value, expirationTime, _domain);

        if (getCookie(win, name) == value) {
          return;
        }
      }
    }

    var domain = undefined;

    if (opt_options && opt_options.domain) {
      domain = opt_options.domain;
    }

    trySetCookie(win, name, value, expirationTime, domain);
  }
  /**
   * Attempt to set a cookie with the given params.
   *
   * @param {!Window} win
   * @param {string} name
   * @param {string} value
   * @param {time} expirationTime
   * @param {string|undefined} domain
   */


  function trySetCookie(win, name, value, expirationTime, domain) {
    // We do not allow setting cookies on the domain that contains both
    // the cdn. and www. hosts.
    if (domain == 'ampproject.org') {
      // Actively delete them.
      value = 'delete';
      expirationTime = 0;
    }

    var cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) + '; path=/' + (domain ? '; domain=' + domain : '') + '; expires=' + new Date(expirationTime).toUTCString();

    try {
      win.document.cookie = cookie;
    } catch (ignore) {// Do not throw if setting the cookie failed Exceptions can be thrown
      // when AMP docs are opened on origins that do not allow setting
      // cookies such as null origins.
    }
  }
  /**
   * Throws if a given cookie should not be set on the given origin.
   * This is a defense-in-depth. Callers should never run into this.
   *
   * @param {!Window} win
   * @param {!Object|undefined} options
   * @param {string} name For the error message.
   */


  function checkOriginForSettingCookie(win, options, name) {
    if (options && options.allowOnProxyOrigin) {
      return;
    }

    if ((0, _url.isProxyOrigin)(win.location.href)) {
      throw new Error('Should never attempt to set cookie on proxy origin: ' + name);
    }

    var current = (0, _url.parseUrlDeprecated)(win.location.href).hostname.toLowerCase();
    var proxy = (0, _url.parseUrlDeprecated)(_config.urls.cdn).hostname.toLowerCase();

    if (current == proxy || (0, _string.endsWith)(current, '.' + proxy)) {
      throw new Error('Should never attempt to set cookie on proxy origin.' + ' (in depth check): ' + name);
    }
  }

  },{"./config":17,"./string":116,"./url":124}],21:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.assertIsName = assertIsName;
  exports.setScopeSelectorSupportedForTesting = setScopeSelectorSupportedForTesting;
  exports.isScopeSelectorSupported = isScopeSelectorSupported;
  exports.prependSelectorsWith = prependSelectorsWith;
  exports.escapeCssSelectorIdent = escapeCssSelectorIdent;
  exports.escapeCssSelectorNth = escapeCssSelectorNth;

  var _cssEscape = require("../third_party/css-escape/css-escape");

  var _log = require("./log");

  /**
   * Copyright 2019 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Asserts that name is just an alphanumeric word, and does not contain
   * advanced CSS selector features like attributes, psuedo-classes, class names,
   * nor ids.
   * @param {string} name
   */
  function assertIsName(name) {
    (0, _log.devAssert)(/^[\w-]+$/.test(name));
  }
  /**
   * @type {boolean|undefined}
   */


  var scopeSelectorSupported;
  /**
   * @param {boolean|undefined} val
   * @visibleForTesting
   */

  function setScopeSelectorSupportedForTesting(val) {
    scopeSelectorSupported = val;
  }
  /**
   * Test that the :scope selector is supported and behaves correctly.
   * @param {!Element} el
   * @return {boolean}
   */


  function isScopeSelectorSupported(el) {
    if (scopeSelectorSupported !== undefined) {
      return scopeSelectorSupported;
    }

    return scopeSelectorSupported = testScopeSelector(el);
  }
  /**
   * Test that the :scope selector is supported and behaves correctly.
   * @param {!Element} el
   * @return {boolean}
   */


  function testScopeSelector(el) {
    try {
      var doc = el.ownerDocument;
      var testElement = doc.createElement('div');
      var testChild = doc.createElement('div');
      testElement.appendChild(testChild); // NOTE(cvializ, #12383): Firefox's implementation is incomplete,
      // therefore we test actual functionality of`:scope` as well.

      return testElement.
      /*OK*/
      querySelector(':scope div') === testChild;
    } catch (e) {
      return false;
    }
  }
  /**
   * Prefixes a selector for ancestor selection. Splits in subselectors and
   * applies prefix to each.
   *
   * e.g.
   * ```
   *   prependSelectorsWith('div', '.i-amphtml-scoped');
   *   // => '.i-amphtml-scoped div'
   *   prependSelectorsWith('div, ul', ':scope');
   *   // => ':scope div, :scope ul'
   *   prependSelectorsWith('div, ul', 'article >');
   *   // => 'article > div, article > ul'
   * ```
   *
   * @param {string} selector
   * @param {string} distribute
   * @return {string}
   */


  function prependSelectorsWith(selector, distribute) {
    return selector.replace(/^|,/g, "$&" + distribute + " ");
  }
  /**
   * Escapes an ident (ID or a class name) to be used as a CSS selector.
   *
   * See https://drafts.csswg.org/cssom/#serialize-an-identifier.
   *
   * @param {string} ident
   * @return {string}
   */


  function escapeCssSelectorIdent(ident) {
    return (0, _cssEscape.cssEscape)(ident);
  }
  /**
   * Escapes an ident in a way that can be used by :nth-child() psuedo-class.
   *
   * See https://github.com/w3c/csswg-drafts/issues/2306.
   *
   * @param {string|number} ident
   * @return {string}
   */


  function escapeCssSelectorNth(ident) {
    var escaped = String(ident); // Ensure it doesn't close the nth-child psuedo class.

    (0, _log.devAssert)(escaped.indexOf(')') === -1);
    return escaped;
  }

  },{"../third_party/css-escape/css-escape":142,"./log":51}],22:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.bezierCurve = bezierCurve;
  exports.getCurve = getCurve;
  exports.Curves = exports.CurveDef = void 0;

  require("./time");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Imported just for the side effect of getting the `types` it exports into
  // the type system during compile time.

  /**
   * A CurveDef is a function that returns a normtime value (0 to 1) for another
   * normtime value.
   * @typedef {function(./time.normtimeDef): ./time.normtimeDef}
   */
  var CurveDef;
  /**
   * Returns a cubic bezier curve.
   * @param {number} x1 X coordinate of the first control point.
   * @param {number} y1 Y coordinate of the first control point.
   * @param {number} x2 X coordinate of the second control point.
   * @param {number} y2 Y coordinate of the second control point.
   * @return {!CurveDef}
   */

  exports.CurveDef = CurveDef;

  function bezierCurve(x1, y1, x2, y2) {
    var bezier = new Bezier(0, 0, x1, y1, x2, y2, 1, 1);
    return bezier.solveYValueFromXValue.bind(bezier);
  }
  /**
   * Thanks to
   * https://closure-library.googlecode.com/git-history/docs/local_closure_goog_math_bezier.js.source.html
   */


  var Bezier =
  /*#__PURE__*/
  function () {
    /**
     * @param {number} x0 X coordinate of the start point.
     * @param {number} y0 Y coordinate of the start point.
     * @param {number} x1 X coordinate of the first control point.
     * @param {number} y1 Y coordinate of the first control point.
     * @param {number} x2 X coordinate of the second control point.
     * @param {number} y2 Y coordinate of the second control point.
     * @param {number} x3 X coordinate of the end point.
     * @param {number} y3 Y coordinate of the end point.
     */
    function Bezier(x0, y0, x1, y1, x2, y2, x3, y3) {
      /**
       * X coordinate of the first point.
       * @type {number}
       */
      this.x0 = x0;
      /**
       * Y coordinate of the first point.
       * @type {number}
       */

      this.y0 = y0;
      /**
       * X coordinate of the first control point.
       * @type {number}
       */

      this.x1 = x1;
      /**
       * Y coordinate of the first control point.
       * @type {number}
       */

      this.y1 = y1;
      /**
       * X coordinate of the second control point.
       * @type {number}
       */

      this.x2 = x2;
      /**
       * Y coordinate of the second control point.
       * @type {number}
       */

      this.y2 = y2;
      /**
       * X coordinate of the end point.
       * @type {number}
       */

      this.x3 = x3;
      /**
       * Y coordinate of the end point.
       * @type {number}
       */

      this.y3 = y3;
    }
    /**
     * Computes the y coordinate of a point on the curve given its x coordinate.
     * @param {number} xVal The x coordinate of the point on the curve.
     * @return {number} The y coordinate of the point on the curve.
     */


    var _proto = Bezier.prototype;

    _proto.solveYValueFromXValue = function solveYValueFromXValue(xVal) {
      return this.getPointY(this.solvePositionFromXValue(xVal));
    }
    /**
     * Computes the position t of a point on the curve given its x coordinate.
     * That is, for an input xVal, finds t s.t. getPointX(t) = xVal.
     * As such, the following should always be true up to some small epsilon:
     * t ~ solvePositionFromXValue(getPointX(t)) for t in [0, 1].
     * @param {number} xVal The x coordinate of the point to find on the curve.
     * @return {number} The position t.
     */
    ;

    _proto.solvePositionFromXValue = function solvePositionFromXValue(xVal) {
      // Desired precision on the computation.
      var epsilon = 1e-6; // Initial estimate of t using linear interpolation.

      var t = (xVal - this.x0) / (this.x3 - this.x0);

      if (t <= 0) {
        return 0;
      } else if (t >= 1) {
        return 1;
      } // Try gradient descent to solve for t. If it works, it is very fast.


      var tMin = 0;
      var tMax = 1;
      var value = 0;

      for (var i = 0; i < 8; i++) {
        value = this.getPointX(t);
        var derivative = (this.getPointX(t + epsilon) - value) / epsilon;

        if (Math.abs(value - xVal) < epsilon) {
          return t;
        } else if (Math.abs(derivative) < epsilon) {
          break;
        } else {
          if (value < xVal) {
            tMin = t;
          } else {
            tMax = t;
          }

          t -= (value - xVal) / derivative;
        }
      } // If the gradient descent got stuck in a local minimum, e.g. because
      // the derivative was close to 0, use a Dichotomy refinement instead.
      // We limit the number of iterations to 8.


      for (var _i = 0; Math.abs(value - xVal) > epsilon && _i < 8; _i++) {
        if (value < xVal) {
          tMin = t;
          t = (t + tMax) / 2;
        } else {
          tMax = t;
          t = (t + tMin) / 2;
        }

        value = this.getPointX(t);
      }

      return t;
    }
    /**
     * Computes the curve's X coordinate at a point between 0 and 1.
     * @param {number} t The point on the curve to find.
     * @return {number} The computed coordinate.
     */
    ;

    _proto.getPointX = function getPointX(t) {
      // Special case start and end.
      if (t == 0) {
        return this.x0;
      } else if (t == 1) {
        return this.x3;
      } // Step one - from 4 points to 3


      var ix0 = this.lerp(this.x0, this.x1, t);
      var ix1 = this.lerp(this.x1, this.x2, t);
      var ix2 = this.lerp(this.x2, this.x3, t); // Step two - from 3 points to 2

      ix0 = this.lerp(ix0, ix1, t);
      ix1 = this.lerp(ix1, ix2, t); // Final step - last point

      return this.lerp(ix0, ix1, t);
    }
    /**
     * Computes the curve's Y coordinate at a point between 0 and 1.
     * @param {number} t The point on the curve to find.
     * @return {number} The computed coordinate.
     */
    ;

    _proto.getPointY = function getPointY(t) {
      // Special case start and end.
      if (t == 0) {
        return this.y0;
      } else if (t == 1) {
        return this.y3;
      } // Step one - from 4 points to 3


      var iy0 = this.lerp(this.y0, this.y1, t);
      var iy1 = this.lerp(this.y1, this.y2, t);
      var iy2 = this.lerp(this.y2, this.y3, t); // Step two - from 3 points to 2

      iy0 = this.lerp(iy0, iy1, t);
      iy1 = this.lerp(iy1, iy2, t); // Final step - last point

      return this.lerp(iy0, iy1, t);
    }
    /**
     * Performs linear interpolation between values a and b. Returns the value
     * between a and b proportional to x (when x is between 0 and 1. When x is
     * outside this range, the return value is a linear extrapolation).
     * @param {number} a A number.
     * @param {number} b A number.
     * @param {number} x The proportion between a and b.
     * @return {number} The interpolated value between a and b.
     */
    ;

    _proto.lerp = function lerp(a, b, x) {
      return a + x * (b - a);
    };

    return Bezier;
  }();
  /**
   * A collection of common curves.
   * See https://developer.mozilla.org/en-US/docs/Web/CSS/timing-function
   * @enum {!CurveDef}
   */


  var Curves = {
    /**
     * linear
     * @param {number} n
     * @return {number}
     */
    LINEAR: function LINEAR(n) {
      return n;
    },

    /**
     * ease
     */
    EASE: bezierCurve(0.25, 0.1, 0.25, 1.0),

    /**
     * ease-in: slow out, fast in
     */
    EASE_IN: bezierCurve(0.42, 0.0, 1.0, 1.0),

    /**
     * ease-out: fast out, slow in
     */
    EASE_OUT: bezierCurve(0.0, 0.0, 0.58, 1.0),

    /**
     * ease-in-out
     */
    EASE_IN_OUT: bezierCurve(0.42, 0.0, 0.58, 1.0)
  };
  /**
   * @const {!Object<string, !CurveDef>}
   */

  exports.Curves = Curves;
  var NAME_MAP = {
    'linear': Curves.LINEAR,
    'ease': Curves.EASE,
    'ease-in': Curves.EASE_IN,
    'ease-out': Curves.EASE_OUT,
    'ease-in-out': Curves.EASE_IN_OUT
  };
  /**
   * If the argument is a string, this methods matches an existing curve by name.
   * @param {?CurveDef|string|undefined} curve
   * @return {?CurveDef}
   */

  function getCurve(curve) {
    if (!curve) {
      return null;
    }

    if (typeof curve == 'string') {
      // If the curve is a custom cubic-bezier curve
      if (curve.indexOf('cubic-bezier') != -1) {
        var match = curve.match(/cubic-bezier\((.+)\)/);

        if (match) {
          var values = match[1].split(',').map(parseFloat);

          if (values.length == 4) {
            for (var i = 0; i < 4; i++) {
              if (isNaN(values[i])) {
                return null;
              }
            }

            return bezierCurve(values[0], values[1], values[2], values[3]);
          }
        }

        return null;
      }

      return NAME_MAP[curve];
    }

    return curve;
  }

  },{"./time":119}],23:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.createCustomElementClass = createCustomElementClass;
  exports.createAmpElementForTesting = createAmpElementForTesting;

  var dom = _interopRequireWildcard(require("./dom"));

  var _ampEvents = require("./amp-events");

  var _commonSignals = require("./common-signals");

  var _elementStub = require("./element-stub");

  var _layout = require("./layout");

  var _layoutDelayMeter = require("./layout-delay-meter");

  var _resource = require("./service/resource");

  var _services = require("./services");

  var _signals = require("./utils/signals");

  var _error = require("./error");

  var _loader = require("../src/loader");

  var _log = require("./log");

  var _intersectionObserverPolyfill = require("../src/intersection-observer-polyfill");

  var _mode = require("./mode");

  var _staticTemplate = require("./static-template");

  var _experiments = require("./experiments");

  var _sizeList = require("./size-list");

  var _style = require("./style");

  var _consent = require("../src/consent");

  var _types = require("./types");

  var _promise = require("../src/utils/promise");

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

  function _templateObject() {
    var data = _taggedTemplateLiteralLoose(["\n            <div class=\"i-amphtml-loading-container i-amphtml-fill-content\n              amp-hidden\"></div>"]);

    _templateObject = function _templateObject() {
      return data;
    };

    return data;
  }

  function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  var TAG = 'CustomElement';
  /**
   * This is the minimum width of the element needed to trigger `loading`
   * animation. This value is justified as about 1/3 of a smallish mobile
   * device viewport. Trying to put a loading indicator into a small element
   * is meaningless.
   * @private @const {number}
   */

  var MIN_WIDTH_FOR_LOADING = 100;
  /**
   * The elements positioned ahead of this threshold may have their loading
   * indicator initialized faster. This is benefitial to avoid relayout during
   * render phase or scrolling.
   * @private @const {number}
   */

  var PREPARE_LOADING_THRESHOLD = 1000;
  /**
   * @enum {number}
   */

  var UpgradeState = {
    NOT_UPGRADED: 1,
    UPGRADED: 2,
    UPGRADE_FAILED: 3,
    UPGRADE_IN_PROGRESS: 4
  };
  /**
   * Caches whether the template tag is supported to avoid memory allocations.
   * @type {boolean|undefined}
   */

  var templateTagSupported;
  /**
   * Whether this platform supports template tags.
   * @return {boolean}
   */

  function isTemplateTagSupported() {
    if (templateTagSupported === undefined) {
      var template = self.document.createElement('template');
      templateTagSupported = 'content' in template;
    }

    return templateTagSupported;
  }
  /**
   * Creates a named custom element class.
   *
   * @param {!Window} win The window in which to register the custom element.
   * @param {string} name The name of the custom element.
   * @return {!Function} The custom element class.
   */


  function createCustomElementClass(win, name) {
    var baseCustomElement = createBaseCustomElementClass(win);
    /** @extends {HTMLElement} */

    var CustomAmpElement =
    /*#__PURE__*/
    function (_baseCustomElement) {
      _inheritsLoose(CustomAmpElement, _baseCustomElement);

      /**
       * @see https://github.com/WebReflection/document-register-element#v1-caveat
       * @suppress {checkTypes}
       * @param {HTMLElement} self
       */
      function CustomAmpElement(self) {
        var _this;

        return (_this = _baseCustomElement.call(this, self) || this) || _assertThisInitialized(_this);
      }
      /**
       * The name of the custom element.
       * @return {string}
       */


      var _proto = CustomAmpElement.prototype;

      _proto.elementName = function elementName() {
        return name;
      };

      return CustomAmpElement;
    }(baseCustomElement);

    return CustomAmpElement;
  }
  /**
   * Creates a base custom element class.
   *
   * @param {!Window} win The window in which to register the custom element.
   * @return {!Function}
   */


  function createBaseCustomElementClass(win) {
    if (win.BaseCustomElementClass) {
      return win.BaseCustomElementClass;
    }

    var htmlElement = win.HTMLElement;
    /** @abstract @extends {HTMLElement} */

    var BaseCustomElement =
    /*#__PURE__*/
    function (_htmlElement) {
      _inheritsLoose(BaseCustomElement, _htmlElement);

      /**
       * @see https://github.com/WebReflection/document-register-element#v1-caveat
       * @suppress {checkTypes}
       * @param {HTMLElement} self
       */
      function BaseCustomElement(self) {
        var _this2;

        self = _this2 = _htmlElement.call(this, self) || this;
        self.createdCallback();
        return self || _assertThisInitialized(_this2);
      }
      /**
       * Called when elements is created. Sets instance vars since there is no
       * constructor.
       * @final @this {!Element}
       */


      var _proto2 = BaseCustomElement.prototype;

      _proto2.createdCallback = function createdCallback() {
        // Flag "notbuilt" is removed by Resource manager when the resource is
        // considered to be built. See "setBuilt" method.

        /** @private {boolean} */
        this.built_ = false;
        /**
         * Several APIs require the element to be connected to the DOM tree, but
         * the CustomElement lifecycle APIs are async. This lead to subtle bugs
         * that require state tracking. See #12849, https://crbug.com/821195, and
         * https://bugs.webkit.org/show_bug.cgi?id=180940.
         * @private {boolean}
         */

        this.isConnected_ = false;
        /** @private {?Promise} */

        this.buildingPromise_ = null;
        /** @type {string} */

        this.readyState = 'loading';
        /** @type {boolean} */

        this.everAttached = false;
        /**
         * Ampdoc can only be looked up when an element is attached.
         * @private {?./service/ampdoc-impl.AmpDoc}
         */

        this.ampdoc_ = null;
        /**
         * Resources can only be looked up when an element is attached.
         * @private {?./service/resources-impl.Resources}
         */

        this.resources_ = null;
        /**
         * Layers can only be looked up when an element is attached.
         * @private {?./service/layers-impl.LayoutLayers}
         */

        this.layers_ = null;
        /** @private {!Layout} */

        this.layout_ = _layout.Layout.NODISPLAY;
        /** @private {number} */

        this.layoutWidth_ = -1;
        /** @private {number} */

        this.layoutCount_ = 0;
        /** @private {boolean} */

        this.isFirstLayoutCompleted_ = false;
        /** @private {boolean} */

        this.isInViewport_ = false;
        /** @private {boolean} */

        this.paused_ = false;
        /** @private {string|null|undefined} */

        this.mediaQuery_ = undefined;
        /** @private {!./size-list.SizeList|null|undefined} */

        this.sizeList_ = undefined;
        /** @private {!./size-list.SizeList|null|undefined} */

        this.heightsList_ = undefined;
        /** @public {boolean} */

        this.warnOnMissingOverflow = true;
        /**
         * This element can be assigned by the {@link applyStaticLayout} to a
         * child element that will be used to size this element.
         * @package {?Element|undefined}
         */

        this.sizerElement = undefined;
        /** @private {boolean|undefined} */

        this.loadingDisabled_ = undefined;
        /** @private {boolean|undefined} */

        this.loadingState_ = undefined;
        /** @private {?Element} */

        this.loadingContainer_ = null;
        /** @private {?Element} */

        this.loadingElement_ = null;
        /** @private {?Element|undefined} */

        this.overflowElement_ = undefined; // `opt_implementationClass` is only used for tests.

        var Ctor = win.ampExtendedElements && win.ampExtendedElements[this.elementName()];

        if ((0, _mode.getMode)().test && this.implementationClassForTesting) {
          Ctor = this.implementationClassForTesting;
        }

        (0, _log.devAssert)(Ctor);
        /** @private {!./base-element.BaseElement} */

        this.implementation_ = new Ctor(this);
        /**
         * An element always starts in a unupgraded state until it's added to DOM
         * for the first time in which case it can be upgraded immediately or wait
         * for script download or `upgradeCallback`.
         * @private {!UpgradeState}
         */

        this.upgradeState_ = UpgradeState.NOT_UPGRADED;
        /**
         * Time delay imposed by baseElement upgradeCallback.  If no
         * upgradeCallback specified or not yet executed, delay is 0.
         * @private {number}
         */

        this.upgradeDelayMs_ = 0;
        /**
         * Action queue is initially created and kept around until the element
         * is ready to send actions directly to the implementation.
         * - undefined initially
         * - array if used
         * - null after unspun
         * @private {?Array<!./service/action-impl.ActionInvocation>|undefined}
         */

        this.actionQueue_ = undefined;
        /**
         * Whether the element is in the template.
         * @private {boolean|undefined}
         */

        this.isInTemplate_ = undefined;
        /** @private @const */

        this.signals_ = new _signals.Signals();

        var perf = _services.Services.performanceForOrNull(win);
        /** @private {boolean} */


        this.perfOn_ = perf && perf.isPerformanceTrackingOn();
        /** @private {?./layout-delay-meter.LayoutDelayMeter} */

        this.layoutDelayMeter_ = null;

        if (this[dom.UPGRADE_TO_CUSTOMELEMENT_RESOLVER]) {
          this[dom.UPGRADE_TO_CUSTOMELEMENT_RESOLVER](this);
          delete this[dom.UPGRADE_TO_CUSTOMELEMENT_RESOLVER];
          delete this[dom.UPGRADE_TO_CUSTOMELEMENT_PROMISE];
        }
      }
      /**
       * The name of the custom element.
       * @abstract
       * @return {string}
       */
      ;

      _proto2.elementName = function elementName() {}
      /** @return {!Signals} */
      ;

      _proto2.signals = function signals() {
        return this.signals_;
      }
      /**
       * Returns the associated ampdoc. Only available after attachment. It throws
       * exception before the element is attached.
       * @return {!./service/ampdoc-impl.AmpDoc}
       * @final @this {!Element}
       * @package
       */
      ;

      _proto2.getAmpDoc = function getAmpDoc() {
        return (0, _log.devAssert)(this.ampdoc_, 'no ampdoc yet, since element is not attached');
      }
      /**
       * Returns Resources manager. Only available after attachment. It throws
       * exception before the element is attached.
       * @return {!./service/resources-impl.Resources}
       * @final @this {!Element}
       * @package
       */
      ;

      _proto2.getResources = function getResources() {
        return (0, _log.devAssert)(this.resources_, 'no resources yet, since element is not attached');
      }
      /**
       * Returns LayoutLayers. Only available after attachment. It throws
       * exception before the element is attached.
       * @return {!./service/layers-impl.LayoutLayers}
       * @final @this {!Element}
       * @package
       */
      ;

      _proto2.getLayers = function getLayers() {
        return (0, _log.devAssert)(this.layers_, 'no layers yet, since element is not attached');
      }
      /**
       * Whether the element has been upgraded yet. Always returns false when
       * the element has not yet been added to DOM. After the element has been
       * added to DOM, the value depends on the `BaseElement` implementation and
       * its `upgradeElement` callback.
       * @return {boolean}
       * @final @this {!Element}
       */
      ;

      _proto2.isUpgraded = function isUpgraded() {
        return this.upgradeState_ == UpgradeState.UPGRADED;
      }
      /**
       * Upgrades the element to the provided new implementation. If element
       * has already been attached, it's layout validation and attachment flows
       * are repeated for the new implementation.
       * @param {function(new:./base-element.BaseElement, !Element)} newImplClass
       * @final @package @this {!Element}
       */
      ;

      _proto2.upgrade = function upgrade(newImplClass) {
        if (this.isInTemplate_) {
          return;
        }

        if (this.upgradeState_ != UpgradeState.NOT_UPGRADED) {
          // Already upgraded or in progress or failed.
          return;
        }

        this.implementation_ = new newImplClass(this);

        if (this.everAttached) {
          // Usually, we do an implementation upgrade when the element is
          // attached to the DOM. But, if it hadn't yet upgraded from
          // ElementStub, we couldn't. Now that it's upgraded from a stub, go
          // ahead and do the full upgrade.
          this.tryUpgrade_();
        }
      }
      /**
       * Time delay imposed by baseElement upgradeCallback.  If no
       * upgradeCallback specified or not yet executed, delay is 0.
       * @return {number}
       */
      ;

      _proto2.getUpgradeDelayMs = function getUpgradeDelayMs() {
        return this.upgradeDelayMs_;
      }
      /**
       * Completes the upgrade of the element with the provided implementation.
       * @param {!./base-element.BaseElement} newImpl
       * @param {number} upgradeStartTime
       * @final @private @this {!Element}
       */
      ;

      _proto2.completeUpgrade_ = function completeUpgrade_(newImpl, upgradeStartTime) {
        this.upgradeDelayMs_ = win.Date.now() - upgradeStartTime;
        this.upgradeState_ = UpgradeState.UPGRADED;
        this.implementation_ = newImpl;
        this.classList.remove('amp-unresolved');
        this.classList.remove('i-amphtml-unresolved');
        this.implementation_.createdCallback();
        this.assertLayout_();
        this.implementation_.layout_ = this.layout_;
        this.implementation_.layoutWidth_ = this.layoutWidth_;
        this.implementation_.firstAttachedCallback();
        this.dispatchCustomEventForTesting(_ampEvents.AmpEvents.ATTACHED);
        this.getResources().upgraded(this);
      }
      /** @private */
      ;

      _proto2.assertLayout_ = function assertLayout_() {
        if (this.layout_ != _layout.Layout.NODISPLAY && !this.implementation_.isLayoutSupported(this.layout_)) {
          var error = 'Layout not supported: ' + this.layout_;

          if (!this.getAttribute('layout')) {
            error += '. The element did not specify a layout attribute. ' + 'Check https://www.ampproject.org/docs/guides/' + 'responsive/control_layout and the respective element ' + 'documentation for details.';
          }

          throw (0, _log.user)().createError(error);
        }
      }
      /**
       * Whether the element has been built. A built element had its
       * {@link buildCallback} method successfully invoked.
       * @return {boolean}
       * @final @this {!Element}
       */
      ;

      _proto2.isBuilt = function isBuilt() {
        return this.built_;
      }
      /**
       * Returns the promise that's resolved when the element has been built. If
       * the build fails, the resulting promise is rejected.
       * @return {!Promise}
       */
      ;

      _proto2.whenBuilt = function whenBuilt() {
        return this.signals_.whenSignal(_commonSignals.CommonSignals.BUILT);
      }
      /**
       * Get the priority to load the element.
       * @return {number} @this {!Element}
       */
      ;

      _proto2.getLayoutPriority = function getLayoutPriority() {
        (0, _log.devAssert)(this.isUpgraded(), 'Cannot get priority of unupgraded element');
        return this.implementation_.getLayoutPriority();
      }
      /**
       * Get the default action alias.
       * @return {?string}
       */
      ;

      _proto2.getDefaultActionAlias = function getDefaultActionAlias() {
        (0, _log.devAssert)(this.isUpgraded(), 'Cannot get default action alias of unupgraded element');
        return this.implementation_.getDefaultActionAlias();
      }
      /**
       * Requests or requires the element to be built. The build is done by
       * invoking {@link BaseElement.buildCallback} method.
       *
       * This method can only be called on a upgraded element.
       *
       * @return {?Promise}
       * @final @this {!Element}
       */
      ;

      _proto2.build = function build() {
        var _this3 = this;

        assertNotTemplate(this);
        (0, _log.devAssert)(this.isUpgraded(), 'Cannot build unupgraded element');

        if (this.buildingPromise_) {
          return this.buildingPromise_;
        }

        return this.buildingPromise_ = new Promise(function (resolve, reject) {
          var policyId = _this3.getConsentPolicy_();

          if (!policyId) {
            resolve(_this3.implementation_.buildCallback());
          } else {
            _services.Services.consentPolicyServiceForDocOrNull(_this3).then(function (policy) {
              if (!policy) {
                return true;
              }

              return policy.whenPolicyUnblock(
              /** @type {string} */
              policyId);
            }).then(function (shouldUnblock) {
              if (shouldUnblock) {
                resolve(_this3.implementation_.buildCallback());
              } else {
                reject((0, _error.blockedByConsentError)());
              }
            });
          }
        }).then(function () {
          _this3.preconnect(
          /* onLayout */
          false);

          _this3.built_ = true;

          _this3.classList.remove('i-amphtml-notbuilt');

          _this3.classList.remove('amp-notbuilt');

          _this3.signals_.signal(_commonSignals.CommonSignals.BUILT);

          if (_this3.isInViewport_) {
            _this3.updateInViewport_(true);
          }

          if (_this3.actionQueue_) {
            // Only schedule when the queue is not empty, which should be
            // the case 99% of the time.
            _services.Services.timerFor((0, _types.toWin)(_this3.ownerDocument.defaultView)).delay(_this3.dequeueActions_.bind(_this3), 1);
          }

          if (!_this3.getPlaceholder()) {
            var placeholder = _this3.createPlaceholder();

            if (placeholder) {
              _this3.appendChild(placeholder);
            }
          }
        }, function (reason) {
          _this3.signals_.rejectSignal(_commonSignals.CommonSignals.BUILT,
          /** @type {!Error} */
          reason);

          if (!(0, _error.isBlockedByConsent)(reason)) {
            (0, _error.reportError)(reason, _this3);
          }

          throw reason;
        });
      }
      /**
       * Called to instruct the element to preconnect to hosts it uses during
       * layout.
       * @param {boolean} onLayout Whether this was called after a layout.
       * @this {!Element}
       */
      ;

      _proto2.preconnect = function preconnect(onLayout) {
        var _this4 = this;

        if (onLayout) {
          this.implementation_.preconnectCallback(onLayout);
        } else {
          // If we do early preconnects we delay them a bit. This is kind of
          // an unfortunate trade off, but it seems faster, because the DOM
          // operations themselves are not free and might delay
          _services.Services.timerFor((0, _types.toWin)(this.ownerDocument.defaultView)).delay(function () {
            var TAG = _this4.tagName;

            if (!_this4.ownerDocument) {
              (0, _log.dev)().error(TAG, 'preconnect without ownerDocument');
              return;
            } else if (!_this4.ownerDocument.defaultView) {
              (0, _log.dev)().error(TAG, 'preconnect without defaultView');
              return;
            }

            _this4.implementation_.preconnectCallback(onLayout);
          }, 1);
        }
      }
      /**
       * Whether the custom element declares that it has to be fixed.
       * @return {boolean}
       * @this {!Element}
       */
      ;

      _proto2.isAlwaysFixed = function isAlwaysFixed() {
        return this.implementation_.isAlwaysFixed();
      }
      /**
       * Updates the layout box of the element.
       * See {@link BaseElement.getLayoutWidth} for details.
       * @param {!./layout-rect.LayoutRectDef} layoutBox
       * @param {boolean=} opt_measurementsChanged
       * @this {!Element}
       */
      ;

      _proto2.updateLayoutBox = function updateLayoutBox(layoutBox, opt_measurementsChanged) {
        var _this5 = this;

        this.layoutWidth_ = layoutBox.width;

        if (this.isUpgraded()) {
          this.implementation_.layoutWidth_ = this.layoutWidth_;
        }

        if (this.isBuilt()) {
          try {
            this.implementation_.onLayoutMeasure();

            if (opt_measurementsChanged) {
              this.implementation_.onMeasureChanged();
            }
          } catch (e) {
            (0, _error.reportError)(e, this);
          }
        }

        if (this.isLoadingEnabled_()) {
          if (this.isInViewport_) {
            // Already in viewport - start showing loading.
            this.toggleLoading(true);
          } else if (layoutBox.top < PREPARE_LOADING_THRESHOLD && layoutBox.top >= 0) {
            // Few top elements will also be pre-initialized with a loading
            // element.
            this.mutateOrInvoke_(function () {
              return _this5.prepareLoading_();
            });
          }
        }
      }
      /**
       * @return {?Element}
       * @private
       */
      ;

      _proto2.getSizer_ = function getSizer_() {
        if (this.sizerElement === undefined && this.layout_ === _layout.Layout.RESPONSIVE) {
          // Expect sizer to exist, just not yet discovered.
          this.sizerElement = this.querySelector('i-amphtml-sizer');
        }

        return this.sizerElement || null;
      }
      /**
       * If the element has a media attribute, evaluates the value as a media
       * query and based on the result adds or removes the class
       * `i-amphtml-hidden-by-media-query`. The class adds display:none to the
       * element which in turn prevents any of the resource loading to happen for
       * the element.
       *
       * This method is called by Resources and shouldn't be called by anyone
       * else.
       *
       * @final
       * @package @this {!Element}
       */
      ;

      _proto2.applySizesAndMediaQuery = function applySizesAndMediaQuery() {
        assertNotTemplate(this); // Media query.

        if (this.mediaQuery_ === undefined) {
          this.mediaQuery_ = this.getAttribute('media') || null;
        }

        if (this.mediaQuery_) {
          var defaultView = this.ownerDocument.defaultView;
          this.classList.toggle('i-amphtml-hidden-by-media-query', !defaultView.matchMedia(this.mediaQuery_).matches);
        } // Sizes.


        if (this.sizeList_ === undefined) {
          var sizesAttr = this.getAttribute('sizes');
          this.sizeList_ = sizesAttr ? (0, _sizeList.parseSizeList)(sizesAttr) : null;
        }

        if (this.sizeList_) {
          (0, _style.setStyle)(this, 'width', this.sizeList_.select((0, _types.toWin)(this.ownerDocument.defaultView)));
        } // Heights.


        if (this.heightsList_ === undefined && this.layout_ === _layout.Layout.RESPONSIVE) {
          var heightsAttr = this.getAttribute('heights');
          this.heightsList_ = heightsAttr ? (0, _sizeList.parseSizeList)(heightsAttr,
          /* allowPercent */
          true) : null;
        }

        if (this.heightsList_) {
          var sizer = this.getSizer_();

          if (sizer) {
            (0, _style.setStyle)(sizer, 'paddingTop', this.heightsList_.select((0, _types.toWin)(this.ownerDocument.defaultView)));
          }
        }
      }
      /**
       * Changes the size of the element.
       *
       * This method is called by Resources and shouldn't be called by anyone
       * else. This method must always be called in the mutation context.
       *
       * @param {number|undefined} newHeight
       * @param {number|undefined} newWidth
       * @param {!./layout-rect.LayoutMarginsDef=} opt_newMargins
       * @final
       * @package @this {!Element}
       */
      ;

      _proto2.changeSize = function changeSize(newHeight, newWidth, opt_newMargins) {
        var sizer = this.getSizer_();

        if (sizer) {
          // From the moment height is changed the element becomes fully
          // responsible for managing its height. Aspect ratio is no longer
          // preserved.
          this.sizerElement = null;
          (0, _style.setStyle)(sizer, 'paddingTop', '0');
          this.mutateOrInvoke_(function () {
            dom.removeElement(sizer);
          });
        }

        if (newHeight !== undefined) {
          (0, _style.setStyle)(this, 'height', newHeight, 'px');
        }

        if (newWidth !== undefined) {
          (0, _style.setStyle)(this, 'width', newWidth, 'px');
        }

        if (opt_newMargins) {
          if (opt_newMargins.top != null) {
            (0, _style.setStyle)(this, 'marginTop', opt_newMargins.top, 'px');
          }

          if (opt_newMargins.right != null) {
            (0, _style.setStyle)(this, 'marginRight', opt_newMargins.right, 'px');
          }

          if (opt_newMargins.bottom != null) {
            (0, _style.setStyle)(this, 'marginBottom', opt_newMargins.bottom, 'px');
          }

          if (opt_newMargins.left != null) {
            (0, _style.setStyle)(this, 'marginLeft', opt_newMargins.left, 'px');
          }
        }

        if (this.isAwaitingSize_()) {
          this.sizeProvided_();
        }

        this.dispatchCustomEvent(_ampEvents.AmpEvents.SIZE_CHANGED);
      }
      /**
       * Called when the element is first connected to the DOM. Calls
       * {@link firstAttachedCallback} if this is the first attachment.
       *
       * This callback is guarded by checks to see if the element is still
       * connected.  Chrome and Safari can trigger connectedCallback even when
       * the node is disconnected. See #12849, https://crbug.com/821195, and
       * https://bugs.webkit.org/show_bug.cgi?id=180940. Thankfully,
       * connectedCallback will later be called when the disconnected root is
       * connected to the document tree.
       *
       * @final @this {!Element}
       */
      ;

      _proto2.connectedCallback = function connectedCallback() {
        if (!isTemplateTagSupported() && this.isInTemplate_ === undefined) {
          this.isInTemplate_ = !!dom.closestAncestorElementBySelector(this, 'template');
        }

        if (this.isInTemplate_) {
          return;
        }

        if (this.isConnected_ || !dom.isConnectedNode(this)) {
          return;
        }

        this.isConnected_ = true;

        if (!this.everAttached) {
          this.classList.add('i-amphtml-element');
          this.classList.add('i-amphtml-notbuilt');
          this.classList.add('amp-notbuilt');
        }

        if (!this.ampdoc_) {
          // Ampdoc can now be initialized.
          var _win = (0, _types.toWin)(this.ownerDocument.defaultView);

          var ampdocService = _services.Services.ampdocServiceFor(_win);

          var ampdoc = ampdocService.getAmpDoc(this);
          this.ampdoc_ = ampdoc; // Load the pre-stubbed extension if needed.

          var extensionId = this.tagName.toLowerCase();

          if (isStub(this.implementation_) && !ampdoc.declaresExtension(extensionId)) {
            _services.Services.extensionsFor(_win).installExtensionForDoc(ampdoc, extensionId);
          }
        }

        if (!this.resources_) {
          // Resources can now be initialized since the ampdoc is now available.
          this.resources_ = _services.Services.resourcesForDoc(this.ampdoc_);
        }

        if ((0, _experiments.isExperimentOn)(this.ampdoc_.win, 'layers')) {
          if (!this.layers_) {
            // Resources can now be initialized since the ampdoc is now available.
            this.layers_ = _services.Services.layersForDoc(this.ampdoc_);
          }

          this.getLayers().add(this);
        }

        this.getResources().add(this);

        if (this.everAttached) {
          var reconstruct = this.reconstructWhenReparented();

          if (reconstruct) {
            this.reset_();
          }

          if (this.isUpgraded()) {
            if (reconstruct) {
              this.getResources().upgraded(this);
            }

            this.dispatchCustomEventForTesting(_ampEvents.AmpEvents.ATTACHED);
          }
        } else {
          this.everAttached = true;

          try {
            this.layout_ = (0, _layout.applyStaticLayout)(this);
          } catch (e) {
            (0, _error.reportError)(e, this);
          }

          if (!isStub(this.implementation_)) {
            this.tryUpgrade_();
          }

          if (!this.isUpgraded()) {
            this.classList.add('amp-unresolved');
            this.classList.add('i-amphtml-unresolved'); // amp:attached is dispatched from the ElementStub class when it
            // replayed the firstAttachedCallback call.

            this.dispatchCustomEventForTesting(_ampEvents.AmpEvents.STUBBED);
          }
        }
      }
      /**
       * @return {boolean}
       * @private
       */
      ;

      _proto2.isAwaitingSize_ = function isAwaitingSize_() {
        return this.classList.contains('i-amphtml-layout-awaiting-size');
      }
      /**
       * @private
       */
      ;

      _proto2.sizeProvided_ = function sizeProvided_() {
        this.classList.remove('i-amphtml-layout-awaiting-size');
      }
      /** The Custom Elements V0 sibling to `connectedCallback`. */
      ;

      _proto2.attachedCallback = function attachedCallback() {
        this.connectedCallback();
      }
      /**
       * Try to upgrade the element with the provided implementation.
       * @private @final @this {!Element}
       */
      ;

      _proto2.tryUpgrade_ = function tryUpgrade_() {
        var _this6 = this;

        var impl = this.implementation_;
        (0, _log.devAssert)(!isStub(impl), 'Implementation must not be a stub');

        if (this.upgradeState_ != UpgradeState.NOT_UPGRADED) {
          // Already upgraded or in progress or failed.
          return;
        } // The `upgradeCallback` only allows redirect once for the top-level
        // non-stub class. We may allow nested upgrades later, but they will
        // certainly be bad for performance.


        this.upgradeState_ = UpgradeState.UPGRADE_IN_PROGRESS;
        var startTime = win.Date.now();
        var res = impl.upgradeCallback();

        if (!res) {
          // Nothing returned: the current object is the upgraded version.
          this.completeUpgrade_(impl, startTime);
        } else if (typeof res.then == 'function') {
          // It's a promise: wait until it's done.
          res.then(function (upgrade) {
            _this6.completeUpgrade_(upgrade || impl, startTime);
          }).catch(function (reason) {
            _this6.upgradeState_ = UpgradeState.UPGRADE_FAILED;
            (0, _log.rethrowAsync)(reason);
          });
        } else {
          // It's an actual instance: upgrade immediately.
          this.completeUpgrade_(
          /** @type {!./base-element.BaseElement} */
          res, startTime);
        }
      }
      /**
       * Called when the element is disconnected from the DOM.
       *
       * @final @this {!Element}
       */
      ;

      _proto2.disconnectedCallback = function disconnectedCallback() {
        this.disconnect(
        /* pretendDisconnected */
        false);
      }
      /** The Custom Elements V0 sibling to `disconnectedCallback`. */
      ;

      _proto2.detachedCallback = function detachedCallback() {
        this.disconnectedCallback();
      }
      /**
       * Called when an element is disconnected from DOM, or when an ampDoc is
       * being disconnected (the element itself may still be connected to ampDoc).
       *
       * This callback is guarded by checks to see if the element is still
       * connected. See #12849, https://crbug.com/821195, and
       * https://bugs.webkit.org/show_bug.cgi?id=180940.
       * If the element is still connected to the document, you'll need to pass
       * opt_pretendDisconnected.
       *
       * @param {boolean} pretendDisconnected Forces disconnection regardless
       *     of DOM isConnected.
       */
      ;

      _proto2.disconnect = function disconnect(pretendDisconnected) {
        if (this.isInTemplate_ || !this.isConnected_) {
          return;
        }

        if (!pretendDisconnected && dom.isConnectedNode(this)) {
          return;
        } // This path only comes from Resource#disconnect, which deletes the
        // Resource instance tied to this element. Therefore, it is no longer
        // an AMP Element. But, DOM queries for i-amphtml-element assume that
        // the element is tied to a Resource.


        if (pretendDisconnected) {
          this.classList.remove('i-amphtml-element');
        }

        this.isConnected_ = false;
        this.getResources().remove(this);

        if ((0, _experiments.isExperimentOn)(this.ampdoc_.win, 'layers')) {
          this.getLayers().remove(this);
        }

        this.implementation_.detachedCallback();
      }
      /**
       * Dispatches a custom event.
       *
       * @param {string} name
       * @param {!Object=} opt_data Event data.
       * @final @this {!Element}
       */
      ;

      _proto2.dispatchCustomEvent = function dispatchCustomEvent(name, opt_data) {
        var data = opt_data || {}; // Constructors of events need to come from the correct window. Sigh.

        var event = this.ownerDocument.createEvent('Event');
        event.data = data;
        event.initEvent(name,
        /* bubbles */
        true,
        /* cancelable */
        true);
        this.dispatchEvent(event);
      }
      /**
       * Dispatches a custom event only in testing environment.
       *
       * @param {string} name
       * @param {!Object=} opt_data Event data.
       * @final @this {!Element}
       */
      ;

      _proto2.dispatchCustomEventForTesting = function dispatchCustomEventForTesting(name, opt_data) {
        if (!(0, _mode.getMode)().test) {
          return;
        }

        this.dispatchCustomEvent(name, opt_data);
      }
      /**
       * Whether the element can pre-render.
       * @return {boolean}
       * @final @this {!Element}
       */
      ;

      _proto2.prerenderAllowed = function prerenderAllowed() {
        return this.implementation_.prerenderAllowed();
      }
      /**
       * Creates a placeholder for the element.
       * @return {?Element}
       * @final @this {!Element}
       */
      ;

      _proto2.createPlaceholder = function createPlaceholder() {
        return this.implementation_.createPlaceholderCallback();
      }
      /**
       * Whether the element should ever render when it is not in viewport.
       * @return {boolean|number}
       * @final @this {!Element}
       */
      ;

      _proto2.renderOutsideViewport = function renderOutsideViewport() {
        return this.implementation_.renderOutsideViewport();
      }
      /**
       * Whether the element should render outside of renderOutsideViewport when
       * the scheduler is idle.
       * @return {boolean|number}
       * @final @this {!Element}
       */
      ;

      _proto2.idleRenderOutsideViewport = function idleRenderOutsideViewport() {
        return this.implementation_.idleRenderOutsideViewport();
      }
      /**
       * Returns a previously measured layout box adjusted to the viewport. This
       * mainly affects fixed-position elements that are adjusted to be always
       * relative to the document position in the viewport.
       * @return {!./layout-rect.LayoutRectDef}
       * @final @this {!Element}
       */
      ;

      _proto2.getLayoutBox = function getLayoutBox() {
        return this.getResources().getResourceForElement(this).getLayoutBox();
      }
      /**
       * Returns a previously measured layout box relative to the page. The
       * fixed-position elements are relative to the top of the document.
       * @return {!./layout-rect.LayoutRectDef}
       * @final @this {!Element}
       */
      ;

      _proto2.getPageLayoutBox = function getPageLayoutBox() {
        return this.getResources().getResourceForElement(this).getPageLayoutBox();
      }
      /**
       * @return {?Element}
       * @final @this {!Element}
       */
      ;

      _proto2.getOwner = function getOwner() {
        return this.getResources().getResourceForElement(this).getOwner();
      }
      /**
       * Returns a change entry for that should be compatible with
       * IntersectionObserverEntry.
       * @return {!IntersectionObserverEntry} A change entry.
       * @final @this {!Element}
       */
      ;

      _proto2.getIntersectionChangeEntry = function getIntersectionChangeEntry() {
        var box = this.implementation_.getIntersectionElementLayoutBox();
        var owner = this.getResources().getResourceForElement(this).getOwner();
        var viewportBox = this.implementation_.getViewport().getRect(); // TODO(jridgewell, #4826): We may need to make this recursive.

        var ownerBox = owner && owner.getLayoutBox();
        return (0, _intersectionObserverPolyfill.getIntersectionChangeEntry)(box, ownerBox, viewportBox);
      }
      /**
       * Returns the resource ID of the element.
       * @return {number}
       */
      ;

      _proto2.getResourceId = function getResourceId() {
        return this.getResources().getResourceForElement(this).getId();
      }
      /**
       * Returns the current resource state of the element.
       * @return {!ResourceState}
       */
      ;

      _proto2.getResourceState_ = function getResourceState_() {
        return this.getResources().getResourceForElement(this).getState();
      }
      /**
       * The runtime calls this method to determine if {@link layoutCallback}
       * should be called again when layout changes.
       * @return {boolean}
       * @package @final @this {!Element}
       */
      ;

      _proto2.isRelayoutNeeded = function isRelayoutNeeded() {
        return this.implementation_.isRelayoutNeeded();
      }
      /**
       * Returns reference to implementation after it has been built.
       * @return {!Promise<!./base-element.BaseElement>}
       */
      ;

      _proto2.getImpl = function getImpl() {
        var _this7 = this;

        return this.whenBuilt().then(function () {
          return _this7.implementation_;
        });
      }
      /**
       * Returns the layout of the element.
       * @return {!Layout}
       */
      ;

      _proto2.getLayout = function getLayout() {
        return this.layout_;
      }
      /**
       * Instructs the element to layout its content and load its resources if
       * necessary by calling the {@link BaseElement.layoutCallback} method that
       * should be implemented by BaseElement subclasses. Must return a promise
       * that will yield when the layout and associated loadings are complete.
       *
       * This method is always called for the first layout, but for subsequent
       * layouts the runtime consults {@link isRelayoutNeeded} method.
       *
       * Can only be called on a upgraded and built element.
       *
       * @return {!Promise}
       * @package @final @this {!Element}
       */
      ;

      _proto2.layoutCallback = function layoutCallback() {
        var _this8 = this;

        assertNotTemplate(this);
        (0, _log.devAssert)(this.isBuilt(), 'Must be built to receive viewport events');
        this.dispatchCustomEventForTesting(_ampEvents.AmpEvents.LOAD_START);
        var isLoadEvent = this.layoutCount_ == 0; // First layout is "load".

        this.signals_.reset(_commonSignals.CommonSignals.UNLOAD);

        if (isLoadEvent) {
          this.signals_.signal(_commonSignals.CommonSignals.LOAD_START);
        }

        if (this.perfOn_) {
          this.getLayoutDelayMeter_().startLayout();
        }

        var promise = (0, _promise.tryResolve)(function () {
          return _this8.implementation_.layoutCallback();
        });
        this.preconnect(
        /* onLayout */
        true);
        this.classList.add('i-amphtml-layout');
        return promise.then(function () {
          if (isLoadEvent) {
            _this8.signals_.signal(_commonSignals.CommonSignals.LOAD_END);
          }

          _this8.readyState = 'complete';
          _this8.layoutCount_++;

          _this8.toggleLoading(false, {
            cleanup: true
          }); // Check if this is the first success layout that needs
          // to call firstLayoutCompleted.


          if (!_this8.isFirstLayoutCompleted_) {
            _this8.implementation_.firstLayoutCompleted();

            _this8.isFirstLayoutCompleted_ = true;

            _this8.dispatchCustomEventForTesting(_ampEvents.AmpEvents.LOAD_END);
          }
        }, function (reason) {
          // add layoutCount_ by 1 despite load fails or not
          if (isLoadEvent) {
            _this8.signals_.rejectSignal(_commonSignals.CommonSignals.LOAD_END,
            /** @type {!Error} */
            reason);
          }

          _this8.layoutCount_++;

          _this8.toggleLoading(false, {
            cleanup: true
          });

          throw reason;
        });
      }
      /**
       * Whether the resource is currently visible in the viewport.
       * @return {boolean}
       * @final @package @this {!Element}
       */
      ;

      _proto2.isInViewport = function isInViewport() {
        return this.isInViewport_;
      }
      /**
       * Instructs the resource that it entered or exited the visible viewport.
       *
       * Can only be called on a upgraded and built element.
       *
       * @param {boolean} inViewport Whether the element has entered or exited
       *   the visible viewport.
       * @final @package @this {!Element}
       */
      ;

      _proto2.viewportCallback = function viewportCallback(inViewport) {
        var _this9 = this;

        assertNotTemplate(this);

        if (inViewport == this.isInViewport_) {
          return;
        } // TODO(dvoytenko, #9177): investigate/cleanup viewport signals for
        // elements in dead iframes.


        if (!this.ownerDocument || !this.ownerDocument.defaultView) {
          return;
        }

        this.isInViewport_ = inViewport;

        if (this.layoutCount_ == 0) {
          if (!inViewport) {
            this.toggleLoading(false);
          } else {
            // Set a minimum delay in case the element loads very fast or if it
            // leaves the viewport.
            _services.Services.timerFor((0, _types.toWin)(this.ownerDocument.defaultView)).delay(function () {
              // TODO(dvoytenko, #9177): cleanup `this.ownerDocument.defaultView`
              // once investigation is complete. It appears that we get a lot of
              // errors here once the iframe is destroyed due to timer.
              if (_this9.isInViewport_ && _this9.ownerDocument && _this9.ownerDocument.defaultView) {
                _this9.toggleLoading(true);
              }
            }, 100);
          }
        }

        if (this.isBuilt()) {
          this.updateInViewport_(inViewport);
        }
      }
      /**
       * @param {boolean} inViewport
       * @private @this {!Element}
       */
      ;

      _proto2.updateInViewport_ = function updateInViewport_(inViewport) {
        this.implementation_.inViewport_ = inViewport;
        this.implementation_.viewportCallback(inViewport);

        if (inViewport && this.perfOn_) {
          this.getLayoutDelayMeter_().enterViewport();
        }
      }
      /**
       * Whether the resource is currently paused.
       * @return {boolean}
       * @final @package @this {!Element}
       */
      ;

      _proto2.isPaused = function isPaused() {
        return this.paused_;
      }
      /**
       * Requests the resource to stop its activity when the document goes into
       * inactive state. The scope is up to the actual component. Among other
       * things the active playback of video or audio content must be stopped.
       *
       * @package @final @this {!Element}
       */
      ;

      _proto2.pauseCallback = function pauseCallback() {
        assertNotTemplate(this);

        if (this.paused_) {
          return;
        }

        this.paused_ = true;
        this.viewportCallback(false);

        if (this.isBuilt()) {
          this.implementation_.pauseCallback();
        }
      }
      /**
       * Requests the resource to resume its activity when the document returns
       * from an inactive state. The scope is up to the actual component. Among
       * other things the active playback of video or audio content may be
       * resumed.
       *
       * @package @final @this {!Element}
       */
      ;

      _proto2.resumeCallback = function resumeCallback() {
        assertNotTemplate(this);

        if (!this.paused_) {
          return;
        }

        this.paused_ = false;

        if (this.isBuilt()) {
          this.implementation_.resumeCallback();
        }
      }
      /**
       * Requests the element to unload any expensive resources when the element
       * goes into non-visible state. The scope is up to the actual component.
       *
       * Calling this method on unbuilt or unupgraded element has no effect.
       *
       * @return {boolean}
       * @package @final @this {!Element}
       */
      ;

      _proto2.unlayoutCallback = function unlayoutCallback() {
        assertNotTemplate(this);

        if (!this.isBuilt()) {
          return false;
        }

        this.signals_.signal(_commonSignals.CommonSignals.UNLOAD);
        var isReLayoutNeeded = this.implementation_.unlayoutCallback();

        if (isReLayoutNeeded) {
          this.reset_();
        }

        return isReLayoutNeeded;
      }
      /** @private */
      ;

      _proto2.reset_ = function reset_() {
        this.layoutCount_ = 0;
        this.isFirstLayoutCompleted_ = false;
        this.signals_.reset(_commonSignals.CommonSignals.RENDER_START);
        this.signals_.reset(_commonSignals.CommonSignals.LOAD_START);
        this.signals_.reset(_commonSignals.CommonSignals.LOAD_END);
        this.signals_.reset(_commonSignals.CommonSignals.INI_LOAD);
      }
      /**
       * Whether to call {@link unlayoutCallback} when pausing the element.
       * Certain elements cannot properly pause (like amp-iframes with unknown
       * video content), and so we must unlayout to stop playback.
       *
       * @return {boolean}
       * @package @final @this {!Element}
       */
      ;

      _proto2.unlayoutOnPause = function unlayoutOnPause() {
        return this.implementation_.unlayoutOnPause();
      }
      /**
       * Whether the element needs to be reconstructed after it has been
       * re-parented. Many elements cannot survive fully the reparenting and
       * are better to be reconstructed from scratch.
       *
       * @return {boolean}
       * @package @final @this {!Element}
       */
      ;

      _proto2.reconstructWhenReparented = function reconstructWhenReparented() {
        return this.implementation_.reconstructWhenReparented();
      }
      /**
       * Collapses the element, and notifies its owner (if there is one) that the
       * element is no longer present.
       */
      ;

      _proto2.collapse = function collapse() {
        this.implementation_.
        /*OK*/
        collapse();
      }
      /**
       * Called every time an owned AmpElement collapses itself.
       * @param {!AmpElement} element
       */
      ;

      _proto2.collapsedCallback = function collapsedCallback(element) {
        this.implementation_.collapsedCallback(element);
      }
      /**
       * Expands the element, and notifies its owner (if there is one) that the
       * element is now present.
       */
      ;

      _proto2.expand = function expand() {
        this.implementation_.
        /*OK*/
        expand();
      }
      /**
       * Called every time an owned AmpElement expands itself.
       * @param {!AmpElement} element
       */
      ;

      _proto2.expandedCallback = function expandedCallback(element) {
        this.implementation_.expandedCallback(element);
      }
      /**
       * Called when one or more attributes are mutated.
       * Note: Must be called inside a mutate context.
       * Note: Boolean attributes have a value of `true` and `false` when
       *     present and missing, respectively.
       * @param {!JsonObject<string, (null|boolean|string|number|Array|Object)>} mutations
       */
      ;

      _proto2.mutatedAttributesCallback = function mutatedAttributesCallback(mutations) {
        this.implementation_.mutatedAttributesCallback(mutations);
      }
      /**
       * Enqueues the action with the element. If element has been upgraded and
       * built, the action is dispatched to the implementation right away.
       * Otherwise the invocation is enqueued until the implementation is ready
       * to receive actions.
       * @param {!./service/action-impl.ActionInvocation} invocation
       * @final @this {!Element}
       */
      ;

      _proto2.enqueAction = function enqueAction(invocation) {
        assertNotTemplate(this);

        if (!this.isBuilt()) {
          if (this.actionQueue_ === undefined) {
            this.actionQueue_ = [];
          }

          (0, _log.devAssert)(this.actionQueue_).push(invocation);
        } else {
          this.executionAction_(invocation, false);
        }
      }
      /**
       * Dequeues events from the queue and dispatches them to the implementation
       * with "deferred" flag.
       * @private @this {!Element}
       */
      ;

      _proto2.dequeueActions_ = function dequeueActions_() {
        var _this10 = this;

        if (!this.actionQueue_) {
          return;
        }

        var actionQueue = (0, _log.devAssert)(this.actionQueue_);
        this.actionQueue_ = null; // Notice, the actions are currently not de-duped.

        actionQueue.forEach(function (invocation) {
          _this10.executionAction_(invocation, true);
        });
      }
      /**
       * Executes the action immediately. All errors are consumed and reported.
       * @param {!./service/action-impl.ActionInvocation} invocation
       * @param {boolean} deferred
       * @final
       * @private @this {!Element}
       */
      ;

      _proto2.executionAction_ = function executionAction_(invocation, deferred) {
        try {
          this.implementation_.executeAction(invocation, deferred);
        } catch (e) {
          (0, _log.rethrowAsync)('Action execution failed:', e, invocation.node.tagName, invocation.method);
        }
      }
      /**
       * Get the consent policy to follow.
       * @return {?string}
       */
      ;

      _proto2.getConsentPolicy_ = function getConsentPolicy_() {
        var policyId = this.getAttribute('data-block-on-consent');

        if (policyId === null) {
          if ((0, _consent.shouldBlockOnConsentByMeta)(this)) {
            policyId = 'default';
            this.setAttribute('data-block-on-consent', policyId);
          } else {
            // data-block-on-consent attribute not set
            return null;
          }
        }

        if (policyId == '' || policyId == 'default') {
          // data-block-on-consent value not set, up to individual element
          // Note: data-block-on-consent and data-block-on-consent='default' is
          // treated exactly the same
          return this.implementation_.getConsentPolicy();
        }

        return policyId;
      }
      /**
       * Returns the original nodes of the custom element without any service
       * nodes that could have been added for markup. These nodes can include
       * Text, Comment and other child nodes.
       * @return {!Array<!Node>}
       * @package @final @this {!Element}
       */
      ;

      _proto2.getRealChildNodes = function getRealChildNodes() {
        return dom.childNodes(this, function (node) {
          return !isInternalOrServiceNode(node);
        });
      }
      /**
       * Returns the original children of the custom element without any service
       * nodes that could have been added for markup.
       * @return {!Array<!Element>}
       * @package @final @this {!Element}
       */
      ;

      _proto2.getRealChildren = function getRealChildren() {
        return dom.childElements(this, function (element) {
          return !isInternalOrServiceNode(element);
        });
      }
      /**
       * Returns an optional placeholder element for this custom element.
       * @return {?Element}
       * @package @final @this {!Element}
       */
      ;

      _proto2.getPlaceholder = function getPlaceholder() {
        return dom.lastChildElement(this, function (el) {
          return el.hasAttribute('placeholder') && // Blacklist elements that has a native placeholder property
          // like input and textarea. These are not allowed to be AMP
          // placeholders.
          !isInputPlaceholder(el);
        });
      }
      /**
       * Hides or shows the placeholder, if available.
       * @param {boolean} show
       * @package @final @this {!Element}
       */
      ;

      _proto2.togglePlaceholder = function togglePlaceholder(show) {
        assertNotTemplate(this);

        if (show) {
          var placeholder = this.getPlaceholder();

          if (placeholder) {
            (0, _log.dev)().assertElement(placeholder).classList.remove('amp-hidden');
          }
        } else {
          var placeholders = dom.childElementsByAttr(this, 'placeholder');

          for (var i = 0; i < placeholders.length; i++) {
            // Don't toggle elements with a native placeholder property
            // e.g. input, textarea
            if (isInputPlaceholder(placeholders[i])) {
              continue;
            }

            placeholders[i].classList.add('amp-hidden');
          }
        }
      }
      /**
       * Returns an optional fallback element for this custom element.
       * @return {?Element}
       * @package @final @this {!Element}
       */
      ;

      _proto2.getFallback = function getFallback() {
        return dom.childElementByAttr(this, 'fallback');
      }
      /**
       * Hides or shows the fallback, if available. This function must only
       * be called inside a mutate context.
       * @param {boolean} show
       * @package @final @this {!Element}
       */
      ;

      _proto2.toggleFallback = function toggleFallback(show) {
        assertNotTemplate(this);
        var resourceState = this.getResourceState_(); // Do not show fallback before layout

        if (show && (resourceState == _resource.ResourceState.NOT_BUILT || resourceState == _resource.ResourceState.NOT_LAID_OUT || resourceState == _resource.ResourceState.READY_FOR_LAYOUT)) {
          return;
        } // This implementation is notably less efficient then placeholder
        // toggling. The reasons for this are: (a) "not supported" is the state of
        // the whole element, (b) some relayout is expected and (c) fallback
        // condition would be rare.


        this.classList.toggle('amp-notsupported', show);

        if (show == true) {
          var fallbackElement = this.getFallback();

          if (fallbackElement) {
            this.getResources().scheduleLayout(this, fallbackElement);
          }
        }
      }
      /**
       * An implementation can call this method to signal to the element that
       * it has started rendering.
       * @package @final @this {!Element}
       */
      ;

      _proto2.renderStarted = function renderStarted() {
        this.signals_.signal(_commonSignals.CommonSignals.RENDER_START);
        this.togglePlaceholder(false);
        this.toggleLoading(false);
      }
      /**
       * Whether the loading can be shown for this element.
       * @return {boolean}
       * @private @this {!Element}
       */
      ;

      _proto2.isLoadingEnabled_ = function isLoadingEnabled_() {
        // No loading indicator will be shown if either one of these conditions
        // true:
        // 1. `noloading` attribute is specified;
        // 2. The element has not been whitelisted;
        // 3. The element is too small or has not yet been measured;
        // 4. The element has already been laid out (include having loading
        //    error);
        // 5. The element is a `placeholder` or a `fallback`;
        // 6. The element's layout is not a size-defining layout.
        // 7. The document is A4A.
        if (this.isInA4A_()) {
          return false;
        }

        if (this.loadingDisabled_ === undefined) {
          this.loadingDisabled_ = this.hasAttribute('noloading');
        }

        if (this.loadingDisabled_ || !(0, _layout.isLoadingAllowed)(this) || this.layoutWidth_ < MIN_WIDTH_FOR_LOADING || this.layoutCount_ > 0 || isInternalOrServiceNode(this) || !(0, _layout.isLayoutSizeDefined)(this.layout_)) {
          return false;
        }

        return true;
      }
      /**
       * @return {boolean}
       * @private
       */
      ;

      _proto2.isInA4A_ = function isInA4A_() {
        return (// in FIE
          this.ampdoc_ && this.ampdoc_.win != this.ownerDocument.defaultView || // in inabox
          (0, _mode.getMode)().runtime == 'inabox'
        );
      }
      /**
       * Creates a loading object. The caller must ensure that loading can
       * actually be shown. This method must also be called in the mutate
       * context.
       * @private @this {!Element}
       */
      ;

      _proto2.prepareLoading_ = function prepareLoading_() {
        if (!this.isLoadingEnabled_()) {
          return;
        }

        if (!this.loadingContainer_) {
          var doc = this.ownerDocument;
          (0, _log.devAssert)(doc);
          var container = (0, _staticTemplate.htmlFor)(doc)(_templateObject());
          var element = (0, _loader.createLoaderElement)(doc, this.elementName());
          container.appendChild(element);
          this.appendChild(container);
          this.loadingContainer_ = container;
          this.loadingElement_ = element;
        }
      }
      /**
       * Turns the loading indicator on or off.
       * @param {boolean} state
       * @param {{cleanup:boolean, force:boolean}=} opt_options
       * @public @final @this {!Element}
       */
      ;

      _proto2.toggleLoading = function toggleLoading(state, opt_options) {
        var _this11 = this;

        var cleanup = opt_options && opt_options.cleanup;
        var force = opt_options && opt_options.force;
        assertNotTemplate(this);

        if (state && !this.implementation_.isLoadingReused() && (this.layoutCount_ > 0 || this.signals_.get(_commonSignals.CommonSignals.RENDER_START))) {
          // Loading has already been canceled. Ignore.
          return;
        }

        this.loadingState_ = state;

        if (!state && !this.loadingContainer_) {
          return;
        } // Check if loading should be shown.


        if (state && !force && !this.isLoadingEnabled_()) {
          this.loadingState_ = false;
          return;
        }

        this.mutateOrInvoke_(function () {
          var state = _this11.loadingState_; // Repeat "loading enabled" check because it could have changed while
          // waiting for vsync.

          if (state && !force && !_this11.isLoadingEnabled_()) {
            state = false;
          }

          if (state) {
            _this11.prepareLoading_();
          }

          if (!_this11.loadingContainer_) {
            return;
          }

          _this11.loadingContainer_.classList.toggle('amp-hidden', !state);

          _this11.loadingElement_.classList.toggle('amp-active', state);

          if (!state && cleanup && !_this11.implementation_.isLoadingReused()) {
            var loadingContainer = _this11.loadingContainer_;
            _this11.loadingContainer_ = null;
            _this11.loadingElement_ = null;

            _this11.mutateOrInvoke_(function () {
              dom.removeElement(loadingContainer);
            });
          }
        });
      }
      /**
       * Returns an optional overflow element for this custom element.
       * @return {!./layout-delay-meter.LayoutDelayMeter}
       */
      ;

      _proto2.getLayoutDelayMeter_ = function getLayoutDelayMeter_() {
        if (!this.layoutDelayMeter_) {
          this.layoutDelayMeter_ = new _layoutDelayMeter.LayoutDelayMeter((0, _types.toWin)(this.ownerDocument.defaultView), this.getLayoutPriority());
        }

        return this.layoutDelayMeter_;
      }
      /**
       * Returns an optional overflow element for this custom element.
       * @return {?Element}
       * @this {!Element}
       */
      ;

      _proto2.getOverflowElement = function getOverflowElement() {
        if (this.overflowElement_ === undefined) {
          this.overflowElement_ = dom.childElementByAttr(this, 'overflow');

          if (this.overflowElement_) {
            if (!this.overflowElement_.hasAttribute('tabindex')) {
              this.overflowElement_.setAttribute('tabindex', '0');
            }

            if (!this.overflowElement_.hasAttribute('role')) {
              this.overflowElement_.setAttribute('role', 'button');
            }
          }
        }

        return this.overflowElement_;
      }
      /**
       * Hides or shows the overflow, if available. This function must only
       * be called inside a mutate context.
       * @param {boolean} overflown
       * @param {number|undefined} requestedHeight
       * @param {number|undefined} requestedWidth
       * @package @final @this {!Element}
       */
      ;

      _proto2.overflowCallback = function overflowCallback(overflown, requestedHeight, requestedWidth) {
        var _this12 = this;

        this.getOverflowElement();

        if (!this.overflowElement_) {
          if (overflown && this.warnOnMissingOverflow) {
            (0, _log.user)().warn(TAG, 'Cannot resize element and overflow is not available', this);
          }
        } else {
          this.overflowElement_.classList.toggle('amp-visible', overflown);

          if (overflown) {
            this.overflowElement_.onclick = function () {
              var resources = _this12.getResources();

              resources.
              /*OK*/
              changeSize(_this12, requestedHeight, requestedWidth);
              resources.mutateElement(_this12, function () {
                _this12.overflowCallback(
                /* overflown */
                false, requestedHeight, requestedWidth);
              });
            };
          } else {
            this.overflowElement_.onclick = null;
          }
        }
      }
      /**
       * Mutates the element using resources if available.
       *
       * @param {function()} mutator
       * @param {?Element=} opt_element
       */
      ;

      _proto2.mutateOrInvoke_ = function mutateOrInvoke_(mutator, opt_element) {
        if (this.resources_) {
          this.getResources().mutateElement(opt_element || this, mutator);
        } else {
          mutator();
        }
      };

      return BaseCustomElement;
    }(htmlElement);

    win.BaseCustomElementClass = BaseCustomElement;
    return win.BaseCustomElementClass;
  }
  /** @param {!Element} element */


  function isInputPlaceholder(element) {
    return 'placeholder' in element;
  }
  /** @param {!Element} element */


  function assertNotTemplate(element) {
    (0, _log.devAssert)(!element.isInTemplate_, 'Must never be called in template');
  }
  /**
   * Whether the implementation is a stub.
   * @param {?./base-element.BaseElement} impl
   * @return {boolean}
   */


  function isStub(impl) {
    return impl instanceof _elementStub.ElementStub;
  }
  /**
   * Returns "true" for internal AMP nodes or for placeholder elements.
   * @param {!Node} node
   * @return {boolean}
   */


  function isInternalOrServiceNode(node) {
    if ((0, _layout.isInternalElement)(node)) {
      return true;
    }

    if (node.tagName && (node.hasAttribute('placeholder') || node.hasAttribute('fallback') || node.hasAttribute('overflow'))) {
      return true;
    }

    return false;
  }
  /**
   * Creates a new custom element class prototype.
   *
   * @param {!Window} win The window in which to register the custom element.
   * @param {string} name The name of the custom element.
   * @param {function(new:./base-element.BaseElement, !Element)=} opt_implementationClass For testing only.
   * @return {!Object} Prototype of element.
   */


  function createAmpElementForTesting(win, name, opt_implementationClass) {
    var Element = createCustomElementClass(win, name);

    if ((0, _mode.getMode)().test && opt_implementationClass) {
      Element.prototype.implementationClassForTesting = opt_implementationClass;
    }

    return Element;
  }

  },{"../src/consent":19,"../src/intersection-observer-polyfill":45,"../src/loader":50,"../src/utils/promise":134,"./amp-events":9,"./common-signals":16,"./dom":26,"./element-stub":28,"./error":29,"./experiments":32,"./layout":49,"./layout-delay-meter":47,"./log":51,"./mode":53,"./service/resource":92,"./services":112,"./size-list":114,"./static-template":115,"./style":118,"./types":121,"./utils/signals":136}],24:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.isDocumentReady = isDocumentReady;
  exports.onDocumentReady = onDocumentReady;
  exports.whenDocumentReady = whenDocumentReady;
  exports.whenDocumentComplete = whenDocumentComplete;

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Whether the document is ready.
   * @param {!Document} doc
   * @return {boolean}
   */
  function isDocumentReady(doc) {
    return doc.readyState != 'loading' && doc.readyState != 'uninitialized';
  }
  /**
   * Whether the document has loaded all the css and sub-resources.
   * @param {!Document} doc
   * @return {boolean}
   */


  function isDocumentComplete(doc) {
    return doc.readyState == 'complete';
  }
  /**
   * Calls the callback when document is ready.
   * @param {!Document} doc
   * @param {function(!Document)} callback
   */


  function onDocumentReady(doc, callback) {
    onDocumentState(doc, isDocumentReady, callback);
  }
  /**
   * Calls the callback when document's state satisfies the stateFn.
   * @param {!Document} doc
   * @param {function(!Document):boolean} stateFn
   * @param {function(!Document)} callback
   */


  function onDocumentState(doc, stateFn, callback) {
    var ready = stateFn(doc);

    if (ready) {
      callback(doc);
    } else {
      var readyListener = function readyListener() {
        if (stateFn(doc)) {
          if (!ready) {
            ready = true;
            callback(doc);
          }

          doc.removeEventListener('readystatechange', readyListener);
        }
      };

      doc.addEventListener('readystatechange', readyListener);
    }
  }
  /**
   * Returns a promise that is resolved when document is ready.
   * @param {!Document} doc
   * @return {!Promise<!Document>}
   */


  function whenDocumentReady(doc) {
    return new Promise(function (resolve) {
      onDocumentReady(doc, resolve);
    });
  }
  /**
   * Returns a promise that is resolved when document is complete.
   * @param {!Document} doc
   * @return {!Promise<!Document>}
   */


  function whenDocumentComplete(doc) {
    return new Promise(function (resolve) {
      onDocumentState(doc, isDocumentComplete, resolve);
    });
  }

  },{}],25:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installGlobalSubmitListenerForDoc = installGlobalSubmitListenerForDoc;
  exports.onDocumentFormSubmit_ = onDocumentFormSubmit_;

  var _actionConstants = require("./action-constants");

  var _url = require("./url");

  var _services = require("./services");

  var _log = require("./log");

  var _elementService = require("./element-service");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
   * @return {!Promise}
   */
  function installGlobalSubmitListenerForDoc(ampdoc) {
    // Register global submit event listener only if the amp-form
    // extension is used. Allowing the usage of native forms, otherwise.
    return (0, _elementService.isExtensionScriptInNode)(ampdoc, 'amp-form').then(function (ampFormInstalled) {
      if (ampFormInstalled) {
        ampdoc.getRootNode().addEventListener('submit', onDocumentFormSubmit_, true);
      }
    });
  }
  /**
   * Intercept any submit on the current document and prevent invalid submits from
   * going through.
   *
   * @param {!Event} e
   */


  function onDocumentFormSubmit_(e) {
    if (e.defaultPrevented) {
      return;
    }

    var form = (0, _log.dev)().assertElement(e.target);

    if (!form || form.tagName != 'FORM') {
      return;
    } // amp-form extension will add novalidate to all forms to manually trigger
    // validation. In that case `novalidate` doesn't have the same meaning.


    var isAmpFormMarked = form.classList.contains('i-amphtml-form');
    var shouldValidate;

    if (isAmpFormMarked) {
      shouldValidate = !form.hasAttribute('amp-novalidate');
    } else {
      shouldValidate = !form.hasAttribute('novalidate');
    } // Safari does not trigger validation check on submission, hence we
    // trigger it manually. In other browsers this would never execute since
    // the submit event wouldn't be fired if the form is invalid.


    if (shouldValidate && form.checkValidity && !form.checkValidity()) {
      e.preventDefault();
    }

    var inputs = form.elements;

    for (var i = 0; i < inputs.length; i++) {
      (0, _log.userAssert)(!inputs[i].name || inputs[i].name != _url.SOURCE_ORIGIN_PARAM, 'Illegal input name, %s found: %s', _url.SOURCE_ORIGIN_PARAM, inputs[i]);
    }

    var action = form.getAttribute('action');
    var actionXhr = form.getAttribute('action-xhr');
    var method = (form.getAttribute('method') || 'GET').toUpperCase();

    if (actionXhr) {
      (0, _url.assertHttpsUrl)(actionXhr, form, 'action-xhr');
      (0, _log.userAssert)(!(0, _url.isProxyOrigin)(actionXhr), 'form action-xhr should not be on AMP CDN: %s', form);
      (0, _url.checkCorsUrl)(actionXhr);
    }

    if (action) {
      (0, _url.assertHttpsUrl)(action, form, 'action');
      (0, _log.userAssert)(!(0, _url.isProxyOrigin)(action), 'form action should not be on AMP CDN: %s', form);
      (0, _url.checkCorsUrl)(action);
    }

    if (method == 'GET') {
      (0, _log.userAssert)(actionXhr || action, 'form action-xhr or action attribute is required for method=GET: %s', form);
    } else if (method == 'POST') {
      if (action) {
        var TAG = 'form';
        (0, _log.user)().error(TAG, 'action attribute is invalid for method=POST: %s', form);
      }

      if (!actionXhr) {
        e.preventDefault();
        (0, _log.userAssert)(false, 'Only XHR based (via action-xhr attribute) submissions are support ' + 'for POST requests. %s', form);
      }
    }

    var target = form.getAttribute('target');

    if (target) {
      (0, _log.userAssert)(target == '_blank' || target == '_top', 'form target=%s is invalid can only be _blank or _top: %s', target, form);
    } else {
      form.setAttribute('target', '_top');
    } // For xhr submissions relay the submission event through action service to
    // allow us to wait for amp-form (and possibly its dependencies) to execute
    // the actual submission. For non-XHR GET we let the submission go through
    // to allow _blank target to work.


    if (actionXhr) {
      e.preventDefault(); // It's important to stop propagation of the submission to avoid double
      // handling of the event in cases were we are delegating to action service
      // to deliver the submission event.

      e.stopImmediatePropagation();

      var actions = _services.Services.actionServiceForDoc(form);

      actions.execute(form, 'submit',
      /*args*/
      null,
      /*source*/
      form,
      /*caller*/
      form, e, _actionConstants.ActionTrust.HIGH);
    }
  }

  },{"./action-constants":8,"./element-service":27,"./log":51,"./services":112,"./url":124}],26:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.waitForChild = waitForChild;
  exports.waitForChildPromise = waitForChildPromise;
  exports.waitForHead = waitForHead;
  exports.waitForHeadPromise = waitForHeadPromise;
  exports.waitForBody = waitForBody;
  exports.waitForBodyPromise = waitForBodyPromise;
  exports.removeElement = removeElement;
  exports.removeChildren = removeChildren;
  exports.copyChildren = copyChildren;
  exports.insertAfterOrAtStart = insertAfterOrAtStart;
  exports.addAttributesToElement = addAttributesToElement;
  exports.createElementWithAttributes = createElementWithAttributes;
  exports.isConnectedNode = isConnectedNode;
  exports.rootNodeFor = rootNodeFor;
  exports.closest = closest;
  exports.closestNode = closestNode;
  exports.closestAncestorElementBySelector = closestAncestorElementBySelector;
  exports.ancestorElements = ancestorElements;
  exports.ancestorElementsByTag = ancestorElementsByTag;
  exports.childElement = childElement;
  exports.childElements = childElements;
  exports.lastChildElement = lastChildElement;
  exports.childNodes = childNodes;
  exports.childElementByAttr = childElementByAttr;
  exports.lastChildElementByAttr = lastChildElementByAttr;
  exports.childElementsByAttr = childElementsByAttr;
  exports.childElementByTag = childElementByTag;
  exports.childElementsByTag = childElementsByTag;
  exports.matches = matches;
  exports.elementByTag = elementByTag;
  exports.scopedQuerySelector = scopedQuerySelector;
  exports.scopedQuerySelectorAll = scopedQuerySelectorAll;
  exports.getDataParamsFromAttributes = getDataParamsFromAttributes;
  exports.hasNextNodeInDocumentOrder = hasNextNodeInDocumentOrder;
  exports.templateContentClone = templateContentClone;
  exports.iterateCursor = iterateCursor;
  exports.openWindowDialog = openWindowDialog;
  exports.isJsonScriptTag = isJsonScriptTag;
  exports.isJsonLdScriptTag = isJsonLdScriptTag;
  exports.isRTL = isRTL;
  exports.escapeHtml = escapeHtml;
  exports.tryFocus = tryFocus;
  exports.isIframed = isIframed;
  exports.isAmpElement = isAmpElement;
  exports.whenUpgradedToCustomElement = whenUpgradedToCustomElement;
  exports.fullscreenEnter = fullscreenEnter;
  exports.fullscreenExit = fullscreenExit;
  exports.isFullscreenElement = isFullscreenElement;
  exports.isEnabled = isEnabled;
  exports.domOrderComparator = domOrderComparator;
  exports.UPGRADE_TO_CUSTOMELEMENT_RESOLVER = exports.UPGRADE_TO_CUSTOMELEMENT_PROMISE = void 0;

  var _promise = require("./utils/promise");

  var _css = require("./css");

  var _log = require("./log");

  var _object = require("./utils/object");

  var _documentReady = require("./document-ready");

  var _string = require("./string");

  var _types = require("./types");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var HTML_ESCAPE_CHARS = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var HTML_ESCAPE_REGEX = /(&|<|>|"|'|`)/g;
  /** @const {string} */

  var UPGRADE_TO_CUSTOMELEMENT_PROMISE = '__AMP_UPG_PRM';
  /** @const {string} */

  exports.UPGRADE_TO_CUSTOMELEMENT_PROMISE = UPGRADE_TO_CUSTOMELEMENT_PROMISE;
  var UPGRADE_TO_CUSTOMELEMENT_RESOLVER = '__AMP_UPG_RES';
  /**
   * Waits until the child element is constructed. Once the child is found, the
   * callback is executed.
   * @param {!Element} parent
   * @param {function(!Element):boolean} checkFunc
   * @param {function()} callback
   */

  exports.UPGRADE_TO_CUSTOMELEMENT_RESOLVER = UPGRADE_TO_CUSTOMELEMENT_RESOLVER;

  function waitForChild(parent, checkFunc, callback) {
    if (checkFunc(parent)) {
      callback();
      return;
    }
    /** @const {!Window} */


    var win = (0, _types.toWin)(parent.ownerDocument.defaultView);

    if (win.MutationObserver) {
      /** @const {MutationObserver} */
      var observer = new win.MutationObserver(function () {
        if (checkFunc(parent)) {
          observer.disconnect();
          callback();
        }
      });
      observer.observe(parent, {
        childList: true
      });
    } else {
      /** @const {number} */
      var interval = win.setInterval(function () {
        if (checkFunc(parent)) {
          win.clearInterval(interval);
          callback();
        }
      },
      /* milliseconds */
      5);
    }
  }
  /**
   * Waits until the child element is constructed. Once the child is found, the
   * promise is resolved.
   * @param {!Element} parent
   * @param {function(!Element):boolean} checkFunc
   * @return {!Promise}
   */


  function waitForChildPromise(parent, checkFunc) {
    return new Promise(function (resolve) {
      waitForChild(parent, checkFunc, resolve);
    });
  }
  /**
   * Waits for document's head to be available.
   * @param {!Document} doc
   * @param {function()} callback
   */


  function waitForHead(doc, callback) {
    waitForChild(doc.documentElement, function () {
      return !!doc.body;
    }, callback);
  }
  /**
   * Waits for the document's head to be available.
   * @param {!Document} doc
   * @return {!Promise}
   */


  function waitForHeadPromise(doc) {
    return new Promise(function (resolve) {
      return waitForHead(doc, resolve);
    });
  }
  /**
   * Waits for document's body to be available and ready.
   * Will be deprecated soon; use {@link AmpDoc#whenBodyAvailable} or
   * @{link DocumentState#onBodyAvailable} instead.
   * @param {!Document} doc
   * @param {function()} callback
   */


  function waitForBody(doc, callback) {
    (0, _documentReady.onDocumentReady)(doc, function () {
      return waitForHead(doc, callback);
    });
  }
  /**
   * Waits for document's body to be available.
   * @param {!Document} doc
   * @return {!Promise}
   */


  function waitForBodyPromise(doc) {
    return new Promise(function (resolve) {
      return waitForBody(doc, resolve);
    });
  }
  /**
   * Removes the element.
   * @param {!Element} element
   */


  function removeElement(element) {
    if (element.parentElement) {
      element.parentElement.removeChild(element);
    }
  }
  /**
   * Removes all child nodes of the specified element.
   * @param {!Element} parent
   */


  function removeChildren(parent) {
    while (parent.firstChild) {
      parent.removeChild(parent.firstChild);
    }
  }
  /**
   * Copies all children nodes of element "from" to element "to". Child nodes
   * are deeply cloned. Notice, that this method should be used with care and
   * preferably on smaller subtrees.
   * @param {!Element} from
   * @param {!Element|!DocumentFragment} to
   */


  function copyChildren(from, to) {
    var frag = to.ownerDocument.createDocumentFragment();

    for (var n = from.firstChild; n; n = n.nextSibling) {
      frag.appendChild(n.cloneNode(true));
    }

    to.appendChild(frag);
  }
  /**
   * Insert the element in the root after the element named after or
   * if that is null at the beginning.
   * @param {!Element|!ShadowRoot} root
   * @param {!Element} element
   * @param {?Node} after
   */


  function insertAfterOrAtStart(root, element, after) {
    var before = after ? after.nextSibling : root.firstChild;
    root.insertBefore(element, before);
  }
  /**
   * Add attributes to an element.
   * @param {!Element} element
   * @param {!JsonObject<string, string>} attributes
   * @return {!Element} created element
   */


  function addAttributesToElement(element, attributes) {
    for (var attr in attributes) {
      element.setAttribute(attr, attributes[attr]);
    }

    return element;
  }
  /**
   * Create a new element on document with specified tagName and attributes.
   * @param {!Document} doc
   * @param {string} tagName
   * @param {!JsonObject<string, string>} attributes
   * @return {!Element} created element
   */


  function createElementWithAttributes(doc, tagName, attributes) {
    var element = doc.createElement(tagName);
    return addAttributesToElement(element, attributes);
  }
  /**
   * Returns true if node is connected (attached).
   * @param {!Node} node
   * @return {boolean}
   * @see https://dom.spec.whatwg.org/#connected
   */


  function isConnectedNode(node) {
    var connected = node.isConnected;

    if (connected !== undefined) {
      return connected;
    } // "An element is connected if its shadow-including root is a document."


    var n = node;

    do {
      n = rootNodeFor(n);

      if (n.host) {
        n = n.host;
      } else {
        break;
      }
    } while (true);

    return n.nodeType === Node.DOCUMENT_NODE;
  }
  /**
   * Returns the root for a given node. Does not cross shadow DOM boundary.
   * @param {!Node} node
   * @return {!Node}
   */


  function rootNodeFor(node) {
    if (Node.prototype.getRootNode) {
      // Type checker says `getRootNode` may return null.
      return node.getRootNode() || node;
    }

    var n;

    for (n = node; !!n.parentNode; n = n.parentNode) {}

    return n;
  }
  /**
   * Finds the closest element that satisfies the callback from this element
   * up the DOM subtree.
   * @param {!Element} element
   * @param {function(!Element):boolean} callback
   * @param {Element=} opt_stopAt optional elemnt to stop the search at.
   * @return {?Element}
   */


  function closest(element, callback, opt_stopAt) {
    for (var el = element; el && el !== opt_stopAt; el = el.parentElement) {
      if (callback(el)) {
        return el;
      }
    }

    return null;
  }
  /**
   * Finds the closest node that satisfies the callback from this node
   * up the DOM subtree.
   * @param {!Node} node
   * @param {function(!Node):boolean} callback
   * @return {?Node}
   */


  function closestNode(node, callback) {
    for (var n = node; n; n = n.parentNode) {
      if (callback(n)) {
        return n;
      }
    }

    return null;
  }
  /**
   * Finds the closest ancestor element with the specified selector from this
   * element.
   * @param {!Element} element
   * @param {string} selector
   * @return {?Element} closest ancestor if found.
   */


  function closestAncestorElementBySelector(element, selector) {
    if (element.closest) {
      return element.closest(selector);
    }

    return closest(element, function (el) {
      return matches(el, selector);
    });
  }
  /**
   * Finds all ancestor elements that satisfy predicate.
   * @param {!Element} child
   * @param {function(!Element):boolean} predicate
   * @return {!Array<!Element>}
   */


  function ancestorElements(child, predicate) {
    var ancestors = [];

    for (var ancestor = child.parentElement; ancestor; ancestor = ancestor.parentElement) {
      if (predicate(ancestor)) {
        ancestors.push(ancestor);
      }
    }

    return ancestors;
  }
  /**
   * Finds all ancestor elements that has the specified tag name.
   * @param {!Element} child
   * @param {string} tagName
   * @return {!Array<!Element>}
   */


  function ancestorElementsByTag(child, tagName) {
    (0, _css.assertIsName)(tagName);
    tagName = tagName.toUpperCase();
    return ancestorElements(child, function (el) {
      return el.tagName == tagName;
    });
  }
  /**
   * Finds the first child element that satisfies the callback.
   * @param {!Element} parent
   * @param {function(!Element):boolean} callback
   * @return {?Element}
   */


  function childElement(parent, callback) {
    for (var child = parent.firstElementChild; child; child = child.nextElementSibling) {
      if (callback(child)) {
        return child;
      }
    }

    return null;
  }
  /**
   * Finds all child elements that satisfy the callback.
   * @param {!Element} parent
   * @param {function(!Element):boolean} callback
   * @return {!Array<!Element>}
   */


  function childElements(parent, callback) {
    var children = [];

    for (var child = parent.firstElementChild; child; child = child.nextElementSibling) {
      if (callback(child)) {
        children.push(child);
      }
    }

    return children;
  }
  /**
   * Finds the last child element that satisfies the callback.
   * @param {!Element} parent
   * @param {function(!Element):boolean} callback
   * @return {?Element}
   */


  function lastChildElement(parent, callback) {
    for (var child = parent.lastElementChild; child; child = child.previousElementSibling) {
      if (callback(child)) {
        return child;
      }
    }

    return null;
  }
  /**
   * Finds all child nodes that satisfy the callback.
   * These nodes can include Text, Comment and other child nodes.
   * @param {!Node} parent
   * @param {function(!Node):boolean} callback
   * @return {!Array<!Node>}
   */


  function childNodes(parent, callback) {
    var nodes = [];

    for (var child = parent.firstChild; child; child = child.nextSibling) {
      if (callback(child)) {
        nodes.push(child);
      }
    }

    return nodes;
  }
  /**
   * Finds the first child element that has the specified attribute.
   * @param {!Element} parent
   * @param {string} attr
   * @return {?Element}
   */


  function childElementByAttr(parent, attr) {
    (0, _css.assertIsName)(attr);
    return scopedQuerySelector
    /*OK*/
    (parent, "> [" + attr + "]");
  }
  /**
   * Finds the last child element that has the specified attribute.
   * @param {!Element} parent
   * @param {string} attr
   * @return {?Element}
   */


  function lastChildElementByAttr(parent, attr) {
    (0, _css.assertIsName)(attr);
    return lastChildElement(parent, function (el) {
      return el.hasAttribute(attr);
    });
  }
  /**
   * Finds all child elements that has the specified attribute.
   * @param {!Element} parent
   * @param {string} attr
   * @return {!NodeList<!Element>}
   */


  function childElementsByAttr(parent, attr) {
    (0, _css.assertIsName)(attr);
    return scopedQuerySelectorAll
    /*OK*/
    (parent, "> [" + attr + "]");
  }
  /**
   * Finds the first child element that has the specified tag name.
   * @param {!Element} parent
   * @param {string} tagName
   * @return {?Element}
   */


  function childElementByTag(parent, tagName) {
    (0, _css.assertIsName)(tagName);
    return scopedQuerySelector
    /*OK*/
    (parent, "> " + tagName);
  }
  /**
   * Finds all child elements with the specified tag name.
   * @param {!Element} parent
   * @param {string} tagName
   * @return {!NodeList<!Element>}
   */


  function childElementsByTag(parent, tagName) {
    (0, _css.assertIsName)(tagName);
    return scopedQuerySelectorAll
    /*OK*/
    (parent, "> " + tagName);
  }
  /**
   * Checks if the given element matches the selector
   * @param  {!Element} el The element to verify
   * @param  {string} selector The selector to check against
   * @return {boolean} True if the element matched the selector. False otherwise.
   */


  function matches(el, selector) {
    var matcher = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector || el.oMatchesSelector;

    if (matcher) {
      return matcher.call(el, selector);
    }

    return false; // IE8 always returns false.
  }
  /**
   * Finds the first descendant element with the specified name.
   * @param {!Element|!Document|!ShadowRoot} element
   * @param {string} tagName
   * @return {?Element}
   */


  function elementByTag(element, tagName) {
    (0, _css.assertIsName)(tagName);
    return element.
    /*OK*/
    querySelector(tagName);
  }
  /**
   * Finds all elements that matche `selector`, scoped inside `root`
   * for user-agents that do not support native scoping.
   *
   * This method isn't required for modern builds, can be removed.
   *
   * @param {!Element} root
   * @param {string} selector
   * @return {!NodeList<!Element>}
   */


  function scopedQuerySelectionFallback(root, selector) {
    var unique = 'i-amphtml-scoped';
    root.classList.add(unique);
    var scopedSelector = (0, _css.prependSelectorsWith)(selector, "." + unique);
    var elements = root.
    /*OK*/
    querySelectorAll(scopedSelector);
    root.classList.remove(unique);
    return elements;
  }
  /**
   * Finds the first element that matches `selector`, scoped inside `root`.
   * Note: in IE, this causes a quick mutation of the element's class list.
   * @param {!Element} root
   * @param {string} selector
   * @return {?Element}
   */


  function scopedQuerySelector(root, selector) {
    if ((0, _css.isScopeSelectorSupported)(root)) {
      return root.
      /*OK*/
      querySelector((0, _css.prependSelectorsWith)(selector, ':scope'));
    } // Only IE.


    var fallbackResult = scopedQuerySelectionFallback(root, selector);
    return fallbackResult[0] === undefined ? null : fallbackResult[0];
  }
  /**
   * Finds every element that matches `selector`, scoped inside `root`.
   * Note: in IE, this causes a quick mutation of the element's class list.
   * @param {!Element} root
   * @param {string} selector
   * @return {!NodeList<!Element>}
   */


  function scopedQuerySelectorAll(root, selector) {
    if ((0, _css.isScopeSelectorSupported)(root)) {
      return root.
      /*OK*/
      querySelectorAll((0, _css.prependSelectorsWith)(selector, ':scope'));
    } // Only IE.


    return scopedQuerySelectionFallback(root, selector);
  }
  /**
   * Returns element data-param- attributes as url parameters key-value pairs.
   * e.g. data-param-some-attr=value -> {someAttr: value}.
   * @param {!Element} element
   * @param {function(string):string=} opt_computeParamNameFunc to compute the
   *    parameter name, get passed the camel-case parameter name.
   * @param {!RegExp=} opt_paramPattern Regex pattern to match data attributes.
   * @return {!JsonObject}
   */


  function getDataParamsFromAttributes(element, opt_computeParamNameFunc, opt_paramPattern) {
    var computeParamNameFunc = opt_computeParamNameFunc || function (key) {
      return key;
    };

    var dataset = element.dataset;
    var params = (0, _object.dict)();
    var paramPattern = opt_paramPattern ? opt_paramPattern : /^param(.+)/;

    for (var key in dataset) {
      var _matches = key.match(paramPattern);

      if (_matches) {
        var param = _matches[1][0].toLowerCase() + _matches[1].substr(1);

        params[computeParamNameFunc(param)] = dataset[key];
      }
    }

    return params;
  }
  /**
   * Whether the element have a next node in the document order.
   * This means either:
   *  a. The element itself has a nextSibling.
   *  b. Any of the element ancestors has a nextSibling.
   * @param {!Element} element
   * @param {?Node} opt_stopNode
   * @return {boolean}
   */


  function hasNextNodeInDocumentOrder(element, opt_stopNode) {
    var currentElement = element;

    do {
      if (currentElement.nextSibling) {
        return true;
      }
    } while ((currentElement = currentElement.parentNode) && currentElement != opt_stopNode);

    return false;
  }
  /**
   * Returns a clone of the content of a template element.
   *
   * Polyfill to replace .content access for browsers that do not support
   * HTMLTemplateElements natively.
   *
   * @param {!HTMLTemplateElement|!Element} template
   * @return {!DocumentFragment}
   */


  function templateContentClone(template) {
    if ('content' in template) {
      return template.content.cloneNode(true);
    } else {
      var content = template.ownerDocument.createDocumentFragment();
      copyChildren(template, content);
      return content;
    }
  }
  /**
   * Iterate over an array-like.
   * Test cases: https://jsbench.github.io/#f638cacc866a1b2d6e517e6cfa900d6b
   * @param {!IArrayLike<T>} iterable
   * @param {function(T, number)} cb
   * @template T
   */


  function iterateCursor(iterable, cb) {
    var length = iterable.length;

    for (var i = 0; i < length; i++) {
      cb(iterable[i], i);
    }
  }
  /**
   * This method wraps around window's open method. It first tries to execute
   * `open` call with the provided target and if it fails, it retries the call
   * with the `_top` target. This is necessary given that in some embedding
   * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets
   * is blocked by default.
   *
   * @param {!Window} win
   * @param {string} url
   * @param {string} target
   * @param {string=} opt_features
   * @return {?Window}
   */


  function openWindowDialog(win, url, target, opt_features) {
    // Try first with the specified target. If we're inside the WKWebView or
    // a similar environments, this method is expected to fail by default for
    // all targets except `_top`.
    var res;

    try {
      res = win.open(url, target, opt_features);
    } catch (e) {
      (0, _log.dev)().error('DOM', 'Failed to open url on target: ', target, e);
    } // Then try with `_top` target.


    if (!res && target != '_top') {
      res = win.open(url, '_top');
    }

    return res;
  }
  /**
   * Whether the element is a script tag with application/json type.
   * @param {!Element} element
   * @return {boolean}
   */


  function isJsonScriptTag(element) {
    return element.tagName == 'SCRIPT' && element.hasAttribute('type') && element.getAttribute('type').toUpperCase() == 'APPLICATION/JSON';
  }
  /**
   * Whether the element is a script tag with application/json type.
   * @param {!Element} element
   * @return {boolean}
   */


  function isJsonLdScriptTag(element) {
    return element.tagName == 'SCRIPT' && element.getAttribute('type').toUpperCase() == 'APPLICATION/LD+JSON';
  }
  /**
   * Whether the page's direction is right to left or not.
   * @param {!Document} doc
   * @return {boolean}
   */


  function isRTL(doc) {
    var dir = doc.body.getAttribute('dir') || doc.documentElement.getAttribute('dir') || 'ltr';
    return dir == 'rtl';
  }
  /**
   * Escapes `<`, `>` and other HTML charcaters with their escaped forms.
   * @param {string} text
   * @return {string}
   */


  function escapeHtml(text) {
    if (!text) {
      return text;
    }

    return text.replace(HTML_ESCAPE_REGEX, escapeHtmlChar);
  }
  /**
   * @param {string} c
   * @return {string}
   */


  function escapeHtmlChar(c) {
    return HTML_ESCAPE_CHARS[c];
  }
  /**
   * Tries to focus on the given element; fails silently if browser throws an
   * exception.
   * @param {!Element} element
   */


  function tryFocus(element) {
    try {
      element.
      /*OK*/
      focus();
    } catch (e) {// IE <= 7 may throw exceptions when focusing on hidden items.
    }
  }
  /**
   * Whether the given window is in an iframe or not.
   * @param {!Window} win
   * @return {boolean}
   */


  function isIframed(win) {
    return win.parent && win.parent != win;
  }
  /**
   * Determines if this element is an AMP element
   * @param {!Element} element
   * @return {boolean}
   */


  function isAmpElement(element) {
    var tag = element.tagName; // Use prefix to recognize AMP element. This is necessary because stub
    // may not be attached yet.

    return (0, _string.startsWith)(tag, 'AMP-') && // Some "amp-*" elements are not really AMP elements. :smh:
    !(tag == 'AMP-STICKY-AD-TOP-PADDING' || tag == 'AMP-BODY');
  }
  /**
   * Return a promise that resolve when an AMP element upgrade from HTMLElement
   * to CustomElement
   * @param {!Element} element
   * @return {!Promise<!Element>}
   */


  function whenUpgradedToCustomElement(element) {
    (0, _log.devAssert)(isAmpElement(element), 'element is not AmpElement');

    if (element.createdCallback) {
      // Element already is CustomElement;
      return Promise.resolve(element);
    } // If Element is still HTMLElement, wait for it to upgrade to customElement
    // Note: use pure string to avoid obfuscation between versions.


    if (!element[UPGRADE_TO_CUSTOMELEMENT_PROMISE]) {
      var deferred = new _promise.Deferred();
      element[UPGRADE_TO_CUSTOMELEMENT_PROMISE] = deferred.promise;
      element[UPGRADE_TO_CUSTOMELEMENT_RESOLVER] = deferred.resolve;
    }

    return element[UPGRADE_TO_CUSTOMELEMENT_PROMISE];
  }
  /**
   * Replacement for `Element.requestFullscreen()` method.
   * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen
   * @param {!Element} element
   */


  function fullscreenEnter(element) {
    var requestFs = element.requestFullscreen || element.requestFullScreen || element.webkitRequestFullscreen || element.webkitEnterFullscreen || element.msRequestFullscreen || element.mozRequestFullScreen;

    if (requestFs) {
      requestFs.call(element);
    }
  }
  /**
   * Replacement for `Document.exitFullscreen()` method.
   * https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen
   * @param {!Element} element
   */


  function fullscreenExit(element) {
    var elementBoundExit = element.cancelFullScreen || element.exitFullscreen || element.webkitExitFullscreen || element.webkitCancelFullScreen || element.mozCancelFullScreen || element.msExitFullscreen;

    if (elementBoundExit) {
      elementBoundExit.call(element);
      return;
    }

    var ownerDocument = element.ownerDocument;

    if (!ownerDocument) {
      return;
    }

    var docBoundExit = ownerDocument.cancelFullScreen || ownerDocument.exitFullscreencancelFullScreen || ownerDocument.webkitExitFullscreencancelFullScreen || ownerDocument.webkitCancelFullScreencancelFullScreen || ownerDocument.mozCancelFullScreencancelFullScreen || ownerDocument.msExitFullscreen;

    if (docBoundExit) {
      docBoundExit.call(ownerDocument);
    }
  }
  /**
   * Replacement for `Document.fullscreenElement`.
   * https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement
   * @param {!Element} element
   * @return {boolean}
   */


  function isFullscreenElement(element) {
    var webkitDisplayingFullscreen = element.webkitDisplayingFullscreen;

    if (webkitDisplayingFullscreen !== undefined) {
      return webkitDisplayingFullscreen;
    }

    var ownerDocument = element.ownerDocument;

    if (!ownerDocument) {
      return false;
    }

    var fullscreenElement = ownerDocument.fullscreenElement || ownerDocument.webkitFullscreenElement || ownerDocument.mozFullScreenElement || ownerDocument.webkitCurrentFullScreenElement;
    return fullscreenElement == element;
  }
  /**
   * Returns true if node is not disabled.
   *
   * IE8 can return false positives, see {@link matches}.
   * @param {!Element} element
   * @return {boolean}
   * @see https://www.w3.org/TR/html5/forms.html#concept-fe-disabled
   */


  function isEnabled(element) {
    return !(element.disabled || matches(element, ':disabled'));
  }

  var PRECEDING_OR_CONTAINS = Node.DOCUMENT_POSITION_PRECEDING | Node.DOCUMENT_POSITION_CONTAINS;
  /**
   * A sorting comparator that sorts elements in DOM tree order.
   * A first sibling is sorted to be before its nextSibling.
   * A parent node is sorted to be before a child.
   * See https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
   *
   * @param {!Element} element1
   * @param {!Element} element2
   * @return {number}
   */

  function domOrderComparator(element1, element2) {
    if (element1 === element2) {
      return 0;
    }

    var pos = element1.compareDocumentPosition(element2); // if fe2 is preceeding or contains fe1 then, fe1 is after fe2

    if (pos & PRECEDING_OR_CONTAINS) {
      return 1;
    } // if fe2 is following or contained by fe1, then fe1 is before fe2


    return -1;
  }

  },{"./css":21,"./document-ready":24,"./log":51,"./string":116,"./types":121,"./utils/object":132,"./utils/promise":134}],27:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.getElementService = getElementService;
  exports.getElementServiceIfAvailable = getElementServiceIfAvailable;
  exports.getElementServiceForDoc = getElementServiceForDoc;
  exports.getElementServiceIfAvailableForDoc = getElementServiceIfAvailableForDoc;
  exports.getElementServiceIfAvailableForDocInEmbedScope = getElementServiceIfAvailableForDocInEmbedScope;
  exports.extensionScriptsInNode = extensionScriptsInNode;
  exports.isExtensionScriptInNode = isExtensionScriptInNode;

  var dom = _interopRequireWildcard(require("./dom"));

  var _service = require("./service");

  var _types = require("./types");

  var _log = require("./log");

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Returns a promise for a service for the given id and window. Also expects an
   * element that has the actual implementation. The promise resolves when the
   * implementation loaded. Users should typically wrap this as a special purpose
   * function (e.g. Services.viewportForDoc(...)) for type safety and because the
   * factory should not be passed around.
   * @param {!Window} win
   * @param {string} id of the service.
   * @param {string} extension Name of the custom extension that provides the
   *     implementation of this service.
   * @param {boolean=} opt_element Whether this service is provided by an element,
   *     not the extension.
   * @return {!Promise<*>}
   */
  function getElementService(win, id, extension, opt_element) {
    return getElementServiceIfAvailable(win, id, extension, opt_element).then(function (service) {
      return assertService(service, id, extension);
    });
  }
  /**
   * Same as getElementService but produces null if the given element is not
   * actually available on the current page.
   * @param {!Window} win
   * @param {string} id of the service.
   * @param {string} extension Name of the custom extension that provides the
   *     implementation of this service.
   * @param {boolean=} opt_element Whether this service is provided by an
   *     element, not the extension.
   * @return {!Promise<?Object>}
   */


  function getElementServiceIfAvailable(win, id, extension, opt_element) {
    var s = (0, _service.getServicePromiseOrNull)(win, id);

    if (s) {
      return (
        /** @type {!Promise<?Object>} */
        s
      );
    }

    return getElementServicePromiseOrNull(win, id, extension, opt_element);
  }
  /**
   * @param {!Window} win
   * @param {string} elementName Name of an extended custom element.
   * @return {boolean} Whether this element is scheduled to be loaded.
   */


  function isElementScheduled(win, elementName) {
    // Set in custom-element.js
    if (!win.ampExtendedElements) {
      return false;
    }

    return !!win.ampExtendedElements[elementName];
  }
  /**
   * Returns a promise for a service for the given id and window. Also expects an
   * element that has the actual implementation. The promise resolves when the
   * implementation loaded. Users should typically wrap this as a special purpose
   * function (e.g. Services.viewportForDoc(...)) for type safety and because the
   * factory should not be passed around.
   * @param {!Element|!ShadowRoot} element
   * @param {string} id of the service.
   * @param {string} extension Name of the custom extension that provides the
   *     implementation of this service.
   * @param {boolean=} opt_element Whether this service is provided by an element,
   *     not the extension.
   * @return {!Promise<*>}
   */


  function getElementServiceForDoc(element, id, extension, opt_element) {
    return getElementServiceIfAvailableForDoc(element, id, extension, opt_element).then(function (service) {
      return assertService(service, id, extension);
    });
  }
  /**
   * Same as getElementService but produces null if the given element is not
   * actually available on the current page.
   * @param {!Element|!ShadowRoot} element
   * @param {string} id of the service.
   * @param {string} extension Name of the custom extension that provides the
   *     implementation of this service.
   * @param {boolean=} opt_element Whether this service is provided by an
   *     element, not the extension.
   * @return {!Promise<?Object>}
   */


  function getElementServiceIfAvailableForDoc(element, id, extension, opt_element) {
    var s = (0, _service.getServicePromiseOrNullForDoc)(element, id);

    if (s) {
      return (
        /** @type {!Promise<?Object>} */
        s
      );
    }

    var ampdoc = (0, _service.getAmpdoc)(element);
    return ampdoc.whenBodyAvailable().then(function () {
      return waitForExtensionIfPresent(ampdoc.win, extension, ampdoc.win.document.head);
    }).then(function () {
      // If this service is provided by an element, then we can't depend on
      // the service (they may not use the element).
      if (opt_element) {
        return (0, _service.getServicePromiseOrNullForDoc)(element, id);
      } else if (isElementScheduled(ampdoc.win, extension)) {
        return (0, _service.getServicePromiseForDoc)(element, id);
      }

      return null;
    });
  }
  /**
   * Returns a promise for service for the given id in the embed scope of
   * a given element, if it exists. Falls back to ampdoc scope if the element
   * is not embedded.
   *
   * @param {!Element|!ShadowRoot} element
   * @param {string} id of the service.
   * @param {string} extension Name of the custom element that provides
   *     the implementation of this service.
   * @return {!Promise<?Object>}
   */


  function getElementServiceIfAvailableForDocInEmbedScope(element, id, extension) {
    var s = (0, _service.getExistingServiceForDocInEmbedScope)(element, id);

    if (s) {
      return (
        /** @type {!Promise<?Object>} */
        Promise.resolve(s)
      );
    }

    var win = (0, _types.toWin)(element.ownerDocument.defaultView);
    var topWin = (0, _service.getTopWindow)(win); // In embeds, doc services are stored on the embed window.

    if (win !== topWin) {
      return getElementServicePromiseOrNull(win, id, extension);
    } else {
      // Only fallback to element's ampdoc (top-level) if not embedded.
      return getElementServiceIfAvailableForDoc(element, id, extension);
    }
  }
  /**
   * Throws user error if `service` is null.
   * @param {Object} service
   * @param {string} id
   * @param {string} extension
   * @return {!Object}
   * @private
   */


  function assertService(service, id, extension) {
    return (
      /** @type {!Object} */
      (0, _log.userAssert)(service, 'Service %s was requested to be provided through %s, ' + 'but %s is not loaded in the current page. To fix this ' + 'problem load the JavaScript file for %s in this page.', id, extension, extension, extension)
    );
  }
  /**
   * Get list of all the extension JS files
   * @param {HTMLHeadElement|Element|ShadowRoot} head
   * @return {!Array<string>}
   */


  function extensionScriptsInNode(head) {
    // ampdoc.getHeadNode() can return null
    if (!head) {
      return [];
    }

    var scripts = [];
    var list = head.querySelectorAll('script[custom-element]');

    for (var i = 0; i < list.length; i++) {
      scripts.push(list[i].getAttribute('custom-element'));
    }

    return scripts;
  }
  /**
   * Waits for body to be present then verifies that an extension script is
   * present in head for installation.
   * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
   * @param {string} extensionId
   * @return {!Promise<boolean>}
   */


  function isExtensionScriptInNode(ampdoc, extensionId) {
    return ampdoc.whenBodyAvailable().then(function () {
      return extensionScriptInNode(ampdoc.getHeadNode(), extensionId);
    });
  }
  /**
   * Verifies that an extension script is present in head for
   * installation.
   * @param {HTMLHeadElement|Element|ShadowRoot} head
   * @param {string} extensionId
   * @private
   */


  function extensionScriptInNode(head, extensionId) {
    return extensionScriptsInNode(head).includes(extensionId);
  }
  /**
   * Waits for an extension if its script is present
   * @param {!Window} win
   * @param {string} extension
   * @param {HTMLHeadElement|Element|ShadowRoot} head
   * @return {!Promise}
   * @private
   */


  function waitForExtensionIfPresent(win, extension, head) {
    /**
     * If there is an extension script wait for it to load before trying
     * to get the service. Prevents a race condition when everything but
     * the extensions is in cache. If there is no script then it's either
     * not present, or the service was defined by a test. In those cases
     * we don't wait around for an extension that does not exist.
     */
    // TODO(jpettitt) investigate registerExtension to short circuit
    // the dom call in extensionScriptsInNode()
    if (!extensionScriptInNode(head, extension)) {
      return Promise.resolve();
    }

    var extensions = (0, _service.getService)(win, 'extensions');
    return (
      /** @type {!Promise<?Object>} */
      extensions.waitForExtension(win, extension)
    );
  }
  /**
   * Returns the promise for service with `id` on the given window if available.
   * Otherwise, resolves with null (service was not registered).
   * @param {!Window} win
   * @param {string} id
   * @param {string} extension
   * @param {boolean=} opt_element
   * @return {!Promise<Object>}
   * @private
   */


  function getElementServicePromiseOrNull(win, id, extension, opt_element) {
    return dom.waitForBodyPromise(win.document).then(function () {
      return waitForExtensionIfPresent(win, extension, win.document.head);
    }).then(function () {
      // If this service is provided by an element, then we can't depend on
      // the service (they may not use the element).
      if (opt_element) {
        return (0, _service.getServicePromiseOrNull)(win, id);
      } else if (isElementScheduled(win, extension)) {
        return (0, _service.getServicePromise)(win, id);
      }

      return null;
    });
  }

  },{"./dom":26,"./log":51,"./service":71,"./types":121}],28:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.ElementStub = exports.stubbedElements = void 0;

  var _baseElement = require("./base-element");

  var _log = require("./log");

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  /** @type {!Array} */
  var stubbedElements = [];
  exports.stubbedElements = stubbedElements;

  var ElementStub =
  /*#__PURE__*/
  function (_BaseElement) {
    _inheritsLoose(ElementStub, _BaseElement);

    /** @param {!AmpElement} element */
    function ElementStub(element) {
      var _this;

      _this = _BaseElement.call(this, element) || this;
      stubbedElements.push(_assertThisInitialized(_this));
      return _this;
    }
    /** @override */


    var _proto = ElementStub.prototype;

    _proto.getLayoutPriority = function getLayoutPriority() {
      return (0, _log.devAssert)(0, 'Cannot get priority of stubbed element');
    }
    /** @override */
    ;

    _proto.isLayoutSupported = function isLayoutSupported(unusedLayout) {
      // Always returns true and will eventually call this method on the actual
      // element.
      return true;
    }
    /** @override */
    ;

    _proto.reconstructWhenReparented = function reconstructWhenReparented() {
      // No real state so no reason to reconstruct.
      return false;
    };

    return ElementStub;
  }(_baseElement.BaseElement);

  exports.ElementStub = ElementStub;

  },{"./base-element":14,"./log":51}],29:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.reportErrorForWin = reportErrorForWin;
  exports.reportError = reportError;
  exports.cancellation = cancellation;
  exports.isCancellation = isCancellation;
  exports.blockedByConsentError = blockedByConsentError;
  exports.isBlockedByConsent = isBlockedByConsent;
  exports.installErrorReporting = installErrorReporting;
  exports.reportErrorToServerOrViewer = reportErrorToServerOrViewer;
  exports.maybeReportErrorToViewer = maybeReportErrorToViewer;
  exports.errorReportingDataForViewer = errorReportingDataForViewer;
  exports.getErrorReportData = getErrorReportData;
  exports.detectNonAmpJs = detectNonAmpJs;
  exports.resetAccumulatedErrorMessagesForTesting = resetAccumulatedErrorMessagesForTesting;
  exports.detectJsEngineFromStack = detectJsEngineFromStack;
  exports.reportErrorToAnalytics = reportErrorToAnalytics;

  var _ampEvents = require("./amp-events");

  var _services = require("./services");

  var _log = require("./log");

  var _object = require("./utils/object");

  var _experiments = require("./experiments");

  var _exponentialBackoff = require("./exponential-backoff");

  var _mode = require("./mode");

  var _eventHelper = require("./event-helper");

  var _url = require("./url");

  var _styleInstaller = require("./style-installer");

  var _string = require("./string");

  var _analytics = require("./analytics");

  var _config = require("./config");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @const {string}
   */
  var CANCELLED = 'CANCELLED';
  /**
   * @const {string}
   */

  var BLOCK_BY_CONSENT = 'BLOCK_BY_CONSENT';
  /**
   * The threshold for errors throttled because nothing can be done about
   * them, but we'd still like to report the rough number.
   * @const {number}
   */

  var NON_ACTIONABLE_ERROR_THROTTLE_THRESHOLD = 0.001;
  /**
   * The threshold for errors throttled because nothing can be done about
   * them, but we'd still like to report the rough number.
   * @const {number}
   */

  var USER_ERROR_THROTTLE_THRESHOLD = 0.1;
  /**
   * Collects error messages, so they can be included in subsequent reports.
   * That allows identifying errors that might be caused by previous errors.
   */

  var accumulatedErrorMessages = self.AMPErrors || []; // Use a true global, to avoid multi-module inclusion issues.

  self.AMPErrors = accumulatedErrorMessages;
  /**
   * Pushes element into array, keeping at most the most recent limit elements
   *
   * @param {!Array<T>} array
   * @param {T} element
   * @param {number} limit
   * @template T
   */

  function pushLimit(array, element, limit) {
    if (array.length >= limit) {
      array.splice(0, array.length - limit + 1);
    }

    array.push(element);
  }
  /**
   * A wrapper around our exponentialBackoff, to lazy initialize it to avoid an
   * un-DCE'able side-effect.
   * @param {function()} work the function to execute after backoff
   * @return {number} the setTimeout id
   */


  var _reportingBackoff = function reportingBackoff(work) {
    // Set reportingBackoff as the lazy-created function. JS Vooodoooo.
    _reportingBackoff = (0, _exponentialBackoff.exponentialBackoff)(1.5);
    return _reportingBackoff(work);
  };
  /**
   * Attempts to stringify a value, falling back to String.
   * @param {*} value
   * @return {string}
   */


  function tryJsonStringify(value) {
    try {
      // Cast is fine, because we really don't care here. Just trying.
      return JSON.stringify(
      /** @type {!JsonObject} */
      value);
    } catch (e) {
      return String(value);
    }
  }
  /**
   * The true JS engine, as detected by inspecting an Error stack. This should be
   * used with the userAgent to tell definitely. I.e., Chrome on iOS is really a
   * Safari JS engine.
   */


  var detectedJsEngine;
  /**
   * @param {!Window} win
   * @param {*} error
   * @param {!Element=} opt_associatedElement
   */

  function reportErrorForWin(win, error, opt_associatedElement) {
    reportError(error, opt_associatedElement);

    if (error && !!win && (0, _log.isUserErrorMessage)(error.message) && !(0, _log.isUserErrorEmbed)(error.message)) {
      reportErrorToAnalytics(
      /** @type {!Error} */
      error, win);
    }
  }
  /**
   * Reports an error. If the error has an "associatedElement" property
   * the element is marked with the `i-amphtml-element-error` and displays
   * the message itself. The message is always send to the console.
   * If the error has a "messageArray" property, that array is logged.
   * This way one gets the native fidelity of the console for things like
   * elements instead of stringification.
   * @param {*} error
   * @param {!Element=} opt_associatedElement
   * @return {!Error}
   */


  function reportError(error, opt_associatedElement) {
    try {
      // Convert error to the expected type.
      var isValidError;

      if (error) {
        if (error.message !== undefined) {
          error = (0, _log.duplicateErrorIfNecessary)(
          /** @type {!Error} */
          error);
          isValidError = true;
        } else {
          var origError = error;
          error = new Error(tryJsonStringify(origError));
          error.origError = origError;
        }
      } else {
        error = new Error('Unknown error');
      } // Report if error is not an expected type.


      if (!isValidError && (0, _mode.getMode)().localDev && !(0, _mode.getMode)().test) {
        setTimeout(function () {
          var rethrow = new Error('_reported_ Error reported incorrectly: ' + error);
          throw rethrow;
        });
      }

      if (error.reported) {
        return (
          /** @type {!Error} */
          error
        );
      }

      error.reported = true; // Update element.

      var element = opt_associatedElement || error.associatedElement;

      if (element && element.classList) {
        element.classList.add('i-amphtml-error');

        if ((0, _mode.getMode)().development) {
          element.classList.add('i-amphtml-element-error');
          element.setAttribute('error-message', error.message);
        }
      } // Report to console.


      if (self.console) {
        var output = console.error || console.log;

        if (error.messageArray) {
          output.apply(console, error.messageArray);
        } else {
          if (element) {
            output.call(console, error.message, element);
          } else if (!(0, _mode.getMode)().minified) {
            output.call(console, error.stack);
          } else {
            output.call(console, error.message);
          }
        }
      }

      if (element && element.dispatchCustomEventForTesting) {
        element.dispatchCustomEventForTesting(_ampEvents.AmpEvents.ERROR, error.message);
      } // 'call' to make linter happy. And .call to make compiler happy
      // that expects some @this.


      onError['call'](undefined, undefined, undefined, undefined, undefined, error);
    } catch (errorReportingError) {
      setTimeout(function () {
        throw errorReportingError;
      });
    }

    return (
      /** @type {!Error} */
      error
    );
  }
  /**
   * Returns an error for a cancellation of a promise.
   * @return {!Error}
   */


  function cancellation() {
    return new Error(CANCELLED);
  }
  /**
   * @param {*} errorOrMessage
   * @return {boolean}
   */


  function isCancellation(errorOrMessage) {
    if (!errorOrMessage) {
      return false;
    }

    if (typeof errorOrMessage == 'string') {
      return (0, _string.startsWith)(errorOrMessage, CANCELLED);
    }

    if (typeof errorOrMessage.message == 'string') {
      return (0, _string.startsWith)(errorOrMessage.message, CANCELLED);
    }

    return false;
  }
  /**
   * Returns an error for component blocked by consent
   * @return {!Error}
   */


  function blockedByConsentError() {
    return new Error(BLOCK_BY_CONSENT);
  }
  /**
   * @param {*} errorOrMessage
   * @return {boolean}
   */


  function isBlockedByConsent(errorOrMessage) {
    if (!errorOrMessage) {
      return false;
    }

    if (typeof errorOrMessage == 'string') {
      return (0, _string.startsWith)(errorOrMessage, BLOCK_BY_CONSENT);
    }

    if (typeof errorOrMessage.message == 'string') {
      return (0, _string.startsWith)(errorOrMessage.message, BLOCK_BY_CONSENT);
    }

    return false;
  }
  /**
   * Install handling of global unhandled exceptions.
   * @param {!Window} win
   */


  function installErrorReporting(win) {
    win.onerror =
    /** @type {!Function} */
    onError;
    win.addEventListener('unhandledrejection', function (event) {
      if (event.reason && (event.reason.message === CANCELLED || event.reason.message === BLOCK_BY_CONSENT)) {
        event.preventDefault();
        return;
      }

      reportError(event.reason || new Error('rejected promise ' + event));
    });
  }
  /**
   * Signature designed, so it can work with window.onerror
   * @param {string|undefined} message
   * @param {string|undefined} filename
   * @param {string|undefined} line
   * @param {string|undefined} col
   * @param {*|undefined} error
   * @this {!Window|undefined}
   */


  function onError(message, filename, line, col, error) {
    var _this = this;

    // Make an attempt to unhide the body.
    if (this && this.document) {
      (0, _styleInstaller.makeBodyVisibleRecovery)(this.document);
    }

    if ((0, _mode.getMode)().localDev || (0, _mode.getMode)().development || (0, _mode.getMode)().test) {
      return;
    }

    var hasNonAmpJs = false;

    try {
      hasNonAmpJs = detectNonAmpJs(self);
    } catch (ignore) {// Ignore errors during error report generation.
    }

    if (hasNonAmpJs && Math.random() > 0.01) {
      // Only report 1% of errors on pages with non-AMP JS.
      // These errors can almost never be acted upon, but spikes such as
      // due to buggy browser extensions may be helpful to notify authors.
      return;
    }

    var data = getErrorReportData(message, filename, line, col, error, hasNonAmpJs);

    if (data) {
      _reportingBackoff(function () {
        return reportErrorToServerOrViewer(_this,
        /** @type {!JsonObject} */
        data);
      });
    }
  }
  /**
   * Passes the given error data to either server or viewer.
   * @param {!Window} win
   * @param {!JsonObject} data Data from `getErrorReportData`.
   * @return {Promise<undefined>}
   */


  function reportErrorToServerOrViewer(win, data) {
    // Report the error to viewer if it has the capability. The data passed
    // to the viewer is exactly the same as the data passed to the server
    // below.
    return maybeReportErrorToViewer(win, data).then(function (reportedErrorToViewer) {
      if (!reportedErrorToViewer) {
        var xhr = new XMLHttpRequest();
        xhr.open('POST', _config.urls.errorReporting, true);
        xhr.send(JSON.stringify(data));
      }
    });
  }
  /**
   * Passes the given error data to the viewer if the following criteria is met:
   * - The viewer is a trusted viewer
   * - The viewer has the `errorReporter` capability
   * - The AMP doc is in single doc mode
   * - The AMP doc is opted-in for error interception (`<html>` tag has the
   *   `report-errors-to-viewer` attribute)
   *
   * @param {!Window} win
   * @param {!JsonObject} data Data from `getErrorReportData`.
   * @return {!Promise<boolean>} `Promise<True>` if the error was sent to the
   *     viewer, `Promise<False>` otherwise.
   * @visibleForTesting
   */


  function maybeReportErrorToViewer(win, data) {
    var ampdocService = _services.Services.ampdocServiceFor(win);

    if (!ampdocService.isSingleDoc()) {
      return Promise.resolve(false);
    }

    var ampdocSingle = ampdocService.getAmpDoc();
    var htmlElement = ampdocSingle.getRootNode().documentElement;
    var docOptedIn = htmlElement.hasAttribute('report-errors-to-viewer');

    if (!docOptedIn) {
      return Promise.resolve(false);
    }

    var viewer = _services.Services.viewerForDoc(ampdocSingle);

    if (!viewer.hasCapability('errorReporter')) {
      return Promise.resolve(false);
    }

    return viewer.isTrustedViewer().then(function (viewerTrusted) {
      if (!viewerTrusted) {
        return false;
      }

      viewer.sendMessage('error', errorReportingDataForViewer(data));
      return true;
    });
  }
  /**
   * Strips down the error reporting data to a minimal set
   * to be sent to the viewer.
   * @param {!JsonObject} errorReportData
   * @return {!JsonObject}
   * @visibleForTesting
   */


  function errorReportingDataForViewer(errorReportData) {
    return (0, _object.dict)({
      'm': errorReportData['m'],
      // message
      'a': errorReportData['a'],
      // isUserError
      's': errorReportData['s'],
      // error stack
      'el': errorReportData['el'],
      // tagName
      'v': errorReportData['v'],
      // runtime
      'jse': errorReportData['jse'] // detectedJsEngine

    });
  }
  /**
   * @param {string|undefined}  message
   * @param {*|undefined} error
   * @return {string}
   */


  function buildErrorMessage_(message, error) {
    if (error) {
      if (error.message) {
        message = error.message;
      } else {
        // This should never be a string, but sometimes it is.
        message = String(error);
      }
    }

    if (!message) {
      message = 'Unknown error';
    }

    return message;
  }
  /**
   * Signature designed, so it can work with window.onerror
   * @param {string|undefined} message
   * @param {string|undefined} filename
   * @param {string|undefined} line
   * @param {string|undefined} col
   * @param {*|undefined} error
   * @param {boolean} hasNonAmpJs
   * @return {!JsonObject|undefined} The data to post
   * visibleForTesting
   */


  function getErrorReportData(message, filename, line, col, error, hasNonAmpJs) {
    message = buildErrorMessage_(message, error); // An "expected" error is still an error, i.e. some features are disabled
    // or not functioning fully because of it. However, it's an expected
    // error. E.g. as is the case with some browser API missing (storage).
    // Thus, the error can be classified differently by log aggregators.
    // The main goal is to monitor that an "expected" error doesn't deteriorate
    // over time. It's impossible to completely eliminate it.

    var expected = !!(error && error.expected);

    if (/_reported_/.test(message)) {
      return;
    }

    if (message == CANCELLED) {
      return;
    }

    var detachedWindow = !(self && self.window);
    var throttleBase = Math.random(); // We throttle load errors and generic "Script error." errors
    // that have no information and thus cannot be acted upon.

    if ((0, _eventHelper.isLoadErrorMessage)(message) || // See https://github.com/ampproject/amphtml/issues/7353
    // for context.
    message == 'Script error.' || // Window has become detached, really anything can happen
    // at this point.
    detachedWindow) {
      expected = true;

      if (throttleBase > NON_ACTIONABLE_ERROR_THROTTLE_THRESHOLD) {
        return;
      }
    }

    var isUserError = (0, _log.isUserErrorMessage)(message); // Only report a subset of user errors.

    if (isUserError && throttleBase > USER_ERROR_THROTTLE_THRESHOLD) {
      return;
    } // This is the App Engine app in
    // https://github.com/ampproject/error-tracker
    // It stores error reports via https://cloud.google.com/error-reporting/
    // for analyzing production issues.


    var data =
    /** @type {!JsonObject} */
    Object.create(null);
    data['v'] = (0, _mode.getMode)().rtvVersion;
    data['noAmp'] = hasNonAmpJs ? '1' : '0';
    data['m'] = message.replace(_log.USER_ERROR_SENTINEL, '');
    data['a'] = isUserError ? '1' : '0'; // Errors are tagged with "ex" ("expected") label to allow loggers to
    // classify these errors as benchmarks and not exceptions.

    data['ex'] = expected ? '1' : '0';
    data['dw'] = detachedWindow ? '1' : '0';
    var runtime = '1p';

    if (self.context && self.context.location) {
      data['3p'] = '1';
      runtime = '3p';
    } else if ((0, _mode.getMode)().runtime) {
      runtime = (0, _mode.getMode)().runtime;
    }

    if ((0, _mode.getMode)().singlePassType) {
      data['spt'] = (0, _mode.getMode)().singlePassType;
    }

    data['rt'] = runtime; // Add our a4a id if we are inabox

    if (runtime === 'inabox') {
      data['adid'] = (0, _mode.getMode)().a4aId;
    } // TODO(erwinm): Remove ca when all systems read `bt` instead of `ca` to
    // identify js binary type.


    data['ca'] = (0, _experiments.isCanary)(self) ? '1' : '0'; // Pass binary type.

    data['bt'] = (0, _experiments.getBinaryType)(self);

    if (self.location.ancestorOrigins && self.location.ancestorOrigins[0]) {
      data['or'] = self.location.ancestorOrigins[0];
    }

    if (self.viewerState) {
      data['vs'] = self.viewerState;
    } // Is embedded?


    if (self.parent && self.parent != self) {
      data['iem'] = '1';
    }

    if (self.AMP && self.AMP.viewer) {
      var resolvedViewerUrl = self.AMP.viewer.getResolvedViewerUrl();
      var messagingOrigin = self.AMP.viewer.maybeGetMessagingOrigin();

      if (resolvedViewerUrl) {
        data['rvu'] = resolvedViewerUrl;
      }

      if (messagingOrigin) {
        data['mso'] = messagingOrigin;
      }
    }

    if (!detectedJsEngine) {
      detectedJsEngine = detectJsEngineFromStack();
    }

    data['jse'] = detectedJsEngine;
    var exps = [];
    var experiments = (0, _experiments.experimentTogglesOrNull)(self);

    for (var exp in experiments) {
      var on = experiments[exp];
      exps.push(exp + "=" + (on ? '1' : '0'));
    }

    data['exps'] = exps.join(',');

    if (error) {
      var tagName = error.associatedElement ? error.associatedElement.tagName : 'u'; // Unknown

      data['el'] = tagName;

      if (error.args) {
        data['args'] = JSON.stringify(error.args);
      }

      if (!isUserError && !error.ignoreStack && error.stack) {
        data['s'] = error.stack;
      } // TODO(jridgewell, #18574); Make sure error is always an object.


      if (error.message) {
        error.message += ' _reported_';
      }
    } else {
      data['f'] = filename || '';
      data['l'] = line || '';
      data['c'] = col || '';
    }

    data['r'] = self.document.referrer;
    data['ae'] = accumulatedErrorMessages.join(',');
    data['fr'] = self.location.originalHash || self.location.hash;
    pushLimit(accumulatedErrorMessages, message, 25);
    return data;
  }
  /**
   * Returns true if it appears like there is non-AMP JS on the
   * current page.
   * @param {!Window} win
   * @return {boolean}
   * @visibleForTesting
   */


  function detectNonAmpJs(win) {
    var scripts = win.document.querySelectorAll('script[src]');

    for (var i = 0; i < scripts.length; i++) {
      if (!(0, _url.isProxyOrigin)(scripts[i].src.toLowerCase())) {
        return true;
      }
    }

    return false;
  }
  /**
   * Resets accumulated error messages for testing
   */


  function resetAccumulatedErrorMessagesForTesting() {
    accumulatedErrorMessages = [];
  }
  /**
   * Does a series of checks on the stack of an thrown error to determine the
   * JS engine that is currently running. This gives a bit more information than
   * just the UserAgent, since browsers often allow overriding it to "emulate"
   * mobile.
   * @return {string}
   * @visibleForTesting
   */


  function detectJsEngineFromStack() {
    /** @constructor */
    function Fn() {}

    Fn.prototype.t = function () {
      throw new Error('message');
    };

    var object = new Fn();

    try {
      object.t();
    } catch (e) {
      var stack = e.stack; // Safari only mentions the method name.

      if ((0, _string.startsWith)(stack, 't@')) {
        return 'Safari';
      } // Firefox mentions "prototype".


      if (stack.indexOf('.prototype.t@') > -1) {
        return 'Firefox';
      } // IE looks like Chrome, but includes a context for the base stack line.
      // Explicitly, we're looking for something like:
      // "    at Global code (https://example.com/app.js:1:200)" or
      // "    at Anonymous function (https://example.com/app.js:1:200)"
      // vs Chrome which has:
      // "    at https://example.com/app.js:1:200"


      var last = stack.split('\n').pop();

      if (/\bat .* \(/i.test(last)) {
        return 'IE';
      } // Finally, chrome includes the error message in the stack.


      if ((0, _string.startsWith)(stack, 'Error: message')) {
        return 'Chrome';
      }
    }

    return 'unknown';
  }
  /**
   * @param {!Error} error
   * @param {!Window} win
   */


  function reportErrorToAnalytics(error, win) {
    // Currently this can only be executed in a single-doc mode. Otherwise,
    // it's not clear which ampdoc the event would belong too.
    if (_services.Services.ampdocServiceFor(win).isSingleDoc()) {
      var vars = (0, _object.dict)({
        'errorName': error.name,
        'errorMessage': error.message
      });
      (0, _analytics.triggerAnalyticsEvent)(getRootElement_(win), 'user-error', vars);
    }
  }
  /**
   * @param {!Window} win
   * @return {!Element}
   * @private
   */


  function getRootElement_(win) {
    var root = _services.Services.ampdocServiceFor(win).getAmpDoc().getRootNode();

    return (0, _log.dev)().assertElement(root.documentElement || root.body || root);
  }

  },{"./amp-events":9,"./analytics":11,"./config":17,"./event-helper":31,"./experiments":32,"./exponential-backoff":33,"./log":51,"./mode":53,"./services":112,"./string":116,"./style-installer":117,"./url":124,"./utils/object":132}],30:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.internalListenImplementation = internalListenImplementation;
  exports.detectEvtListenerOptsSupport = detectEvtListenerOptsSupport;
  exports.resetEvtListenerOptsSupportForTesting = resetEvtListenerOptsSupportForTesting;

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
    * Whether addEventListener supports options or only takes capture as a boolean
    * @type {boolean|undefined}
    * @visibleForTesting
    */
  var optsSupported;
  /**
   * Listens for the specified event on the element.
   *
   * Do not use this directly. This method is implemented as a shared
   * dependency. Use `listen()` in either `event-helper` or `3p-frame-messaging`,
   * depending on your use case.
   *
   * @param {!EventTarget} element
   * @param {string} eventType
   * @param {function(!Event)} listener
   * @param {Object=} opt_evtListenerOpts
   * @return {!UnlistenDef}
   */

  function internalListenImplementation(element, eventType, listener, opt_evtListenerOpts) {
    var localElement = element;
    var localListener = listener;
    /**
     * @type {?Function}
     */

    var wrapped;

    wrapped = function wrapped(event) {
      try {
        return localListener(event);
      } catch (e) {
        // reportError is installed globally per window in the entry point.
        self.reportError(e);
        throw e;
      }
    };

    var optsSupported = detectEvtListenerOptsSupport();
    var capture = false;

    if (opt_evtListenerOpts) {
      capture = opt_evtListenerOpts.capture;
    }

    localElement.addEventListener(eventType, wrapped, optsSupported ? opt_evtListenerOpts : capture);
    return function () {
      if (localElement) {
        localElement.removeEventListener(eventType, wrapped, optsSupported ? opt_evtListenerOpts : capture);
      } // Ensure these are GC'd


      localListener = null;
      localElement = null;
      wrapped = null;
    };
  }
  /**
   * Tests whether the browser supports options as an argument of addEventListener
   * or not.
   *
   * @return {boolean}
   */


  function detectEvtListenerOptsSupport() {
    // Only run the test once
    if (optsSupported !== undefined) {
      return optsSupported;
    }

    optsSupported = false;

    try {
      // Test whether browser supports EventListenerOptions or not
      var options = {
        get capture() {
          optsSupported = true;
        }

      };
      self.addEventListener('test-options', null, options);
      self.removeEventListener('test-options', null, options);
    } catch (err) {// EventListenerOptions are not supported
    }

    return optsSupported;
  }
  /**
    * Resets the test for whether addEventListener supports options or not.
    */


  function resetEvtListenerOptsSupportForTesting() {
    optsSupported = undefined;
  }

  },{}],31:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.createCustomEvent = createCustomEvent;
  exports.listen = listen;
  exports.getData = getData;
  exports.getDetail = getDetail;
  exports.listenOnce = listenOnce;
  exports.listenOncePromise = listenOncePromise;
  exports.isLoaded = isLoaded;
  exports.loadPromise = loadPromise;
  exports.isLoadErrorMessage = isLoadErrorMessage;

  var _eventHelperListen = require("./event-helper-listen");

  var _log = require("./log");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @const {string}  */
  var LOAD_FAILURE_PREFIX = 'Failed to load:';
  /**
   * Returns a CustomEvent with a given type and detail; supports fallback for IE.
   * @param {!Window} win
   * @param {string} type
   * @param {!JsonObject|string|undefined|null} detail
   * @param {EventInit=} opt_eventInit
   * @return {!Event}
   */

  function createCustomEvent(win, type, detail, opt_eventInit) {
    var eventInit =
    /** @type {!CustomEventInit} */
    {
      detail: detail
    };
    Object.assign(eventInit, opt_eventInit); // win.CustomEvent is a function on Edge, Chrome, FF, Safari but
    // is an object on IE 11.

    if (typeof win.CustomEvent == 'function') {
      return new win.CustomEvent(type, eventInit);
    } else {
      // Deprecated fallback for IE.
      var e = win.document.createEvent('CustomEvent');
      e.initCustomEvent(type, !!eventInit.bubbles, !!eventInit.cancelable, detail);
      return e;
    }
  }
  /**
   * Listens for the specified event on the element.
   * @param {!EventTarget} element
   * @param {string} eventType
   * @param {function(!Event)} listener
   * @param {Object=} opt_evtListenerOpts
   * @return {!UnlistenDef}
   */


  function listen(element, eventType, listener, opt_evtListenerOpts) {
    return (0, _eventHelperListen.internalListenImplementation)(element, eventType, listener, opt_evtListenerOpts);
  }
  /**
   * Returns the data property of an event with the correct type.
   * @param {!Event|{data: !JsonObject}} event
   * @return {?JsonObject|string|undefined}
   */


  function getData(event) {
    return (
      /** @type {?JsonObject|string|undefined} */
      event.data
    );
  }
  /**
   * Returns the detail property of an event with the correct type.
   * @param {!Event|{detail: !JsonObject}} event
   * @return {?JsonObject|string|undefined}
   */


  function getDetail(event) {
    return (
      /** @type {?JsonObject|string|undefined} */
      event.detail
    );
  }
  /**
   * Listens for the specified event on the element and removes the listener
   * as soon as event has been received.
   * @param {!EventTarget} element
   * @param {string} eventType
   * @param {function(!Event)} listener
   * @param {Object=} opt_evtListenerOpts
   * @return {!UnlistenDef}
   */


  function listenOnce(element, eventType, listener, opt_evtListenerOpts) {
    var localListener = listener;
    var unlisten = (0, _eventHelperListen.internalListenImplementation)(element, eventType, function (event) {
      try {
        localListener(event);
      } finally {
        // Ensure listener is GC'd
        localListener = null;
        unlisten();
      }
    }, opt_evtListenerOpts);
    return unlisten;
  }
  /**
   * Returns  a promise that will resolve as soon as the specified event has
   * fired on the element.
   * @param {!EventTarget} element
   * @param {string} eventType
   * @param {Object=} opt_evtListenerOpts
   * @param {function(!UnlistenDef)=} opt_cancel An optional function that, when
   *     provided, will be called with the unlistener. This gives the caller
   *     access to the unlistener, so it may be called manually when necessary.
   * @return {!Promise<!Event>}
   */


  function listenOncePromise(element, eventType, opt_evtListenerOpts, opt_cancel) {
    var unlisten;
    var eventPromise = new Promise(function (resolve) {
      unlisten = listenOnce(element, eventType, resolve, opt_evtListenerOpts);
    });
    eventPromise.then(unlisten, unlisten);

    if (opt_cancel) {
      opt_cancel(unlisten);
    }

    return eventPromise;
  }
  /**
   * Whether the specified element/window has been loaded already.
   * @param {!Element|!Window} eleOrWindow
   * @return {boolean}
   */


  function isLoaded(eleOrWindow) {
    return !!(eleOrWindow.complete || eleOrWindow.readyState == 'complete' // If the passed in thing is a Window, infer loaded state from
    //
    || eleOrWindow.document && eleOrWindow.document.readyState == 'complete');
  }
  /**
   * Returns a promise that will resolve or fail based on the eleOrWindow's 'load'
   * and 'error' events. Optionally this method takes a timeout, which will reject
   * the promise if the resource has not loaded by then.
   * @param {T} eleOrWindow Supports both Elements and as a special case Windows.
   * @return {!Promise<T>}
   * @template T
   */


  function loadPromise(eleOrWindow) {
    var unlistenLoad;
    var unlistenError;

    if (isLoaded(eleOrWindow)) {
      return Promise.resolve(eleOrWindow);
    }

    var loadingPromise = new Promise(function (resolve, reject) {
      // Listen once since IE 5/6/7 fire the onload event continuously for
      // animated GIFs.
      var tagName = eleOrWindow.tagName;

      if (tagName === 'AUDIO' || tagName === 'VIDEO') {
        unlistenLoad = listenOnce(eleOrWindow, 'loadstart', resolve);
      } else {
        unlistenLoad = listenOnce(eleOrWindow, 'load', resolve);
      } // For elements, unlisten on error (don't for Windows).


      if (tagName) {
        unlistenError = listenOnce(eleOrWindow, 'error', reject);
      }
    });
    return loadingPromise.then(function () {
      if (unlistenError) {
        unlistenError();
      }

      return eleOrWindow;
    }, function () {
      if (unlistenLoad) {
        unlistenLoad();
      }

      failedToLoad(eleOrWindow);
    });
  }
  /**
   * Emit error on load failure.
   * @param {!Element|!Window} eleOrWindow Supports both Elements and as a special
   *     case Windows.
   */


  function failedToLoad(eleOrWindow) {
    // Report failed loads as user errors so that they automatically go
    // into the "document error" bucket.
    var target = eleOrWindow;

    if (target && target.src) {
      target = target.src;
    }

    throw (0, _log.user)().createError(LOAD_FAILURE_PREFIX, target);
  }
  /**
   * Returns true if this error message is was created for a load error.
   * @param {string} message An error message
   * @return {boolean}
   */


  function isLoadErrorMessage(message) {
    return message.indexOf(LOAD_FAILURE_PREFIX) != -1;
  }

  },{"./event-helper-listen":30,"./log":51}],32:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.isCanary = isCanary;
  exports.getBinaryType = getBinaryType;
  exports.isExperimentOn = isExperimentOn;
  exports.toggleExperiment = toggleExperiment;
  exports.experimentToggles = experimentToggles;
  exports.experimentTogglesOrNull = experimentTogglesOrNull;
  exports.getExperimentToglesFromCookieForTesting = getExperimentToglesFromCookieForTesting;
  exports.resetExperimentTogglesForTesting = resetExperimentTogglesForTesting;
  exports.randomlySelectUnsetExperiments = randomlySelectUnsetExperiments;
  exports.getExperimentBranch = getExperimentBranch;
  exports.forceExperimentBranch = forceExperimentBranch;
  exports.RANDOM_NUMBER_GENERATORS = exports.ExperimentInfo = void 0;

  var _cookies = require("./cookies");

  var _object = require("./utils/object");

  var _url = require("./url");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @fileoverview Experiments system allows a developer to opt-in to test
   * features that are not yet fully tested.
   *
   * Experiments page: https://cdn.ampproject.org/experiments.html *
   */

  /** @const {string} */
  var COOKIE_NAME = 'AMP_EXP';
  /** @const {number} */

  var COOKIE_MAX_AGE_DAYS = 180; // 6 month

  /** @const {time} */

  var COOKIE_EXPIRATION_INTERVAL = COOKIE_MAX_AGE_DAYS * 24 * 60 * 60 * 1000;
  /** @const {string} */

  var TOGGLES_WINDOW_PROPERTY = '__AMP__EXPERIMENT_TOGGLES';
  /**
   * @typedef {{
   *   isTrafficEligible: function(!Window):boolean,
   *   branches: !Array<string>
   * }}
   */

  var ExperimentInfo;
  /**
   * Whether we are in canary.
   * @param {!Window} win
   * @return {boolean}
   */

  exports.ExperimentInfo = ExperimentInfo;

  function isCanary(win) {
    return !!(win.AMP_CONFIG && win.AMP_CONFIG.canary);
  }
  /**
   * Returns binary type, e.g., canary, production, control, or rc.
   * @param {!Window} win
   * @return {string}
   */


  function getBinaryType(win) {
    return win.AMP_CONFIG && win.AMP_CONFIG.type ? win.AMP_CONFIG.type : 'unknown';
  }
  /**
   * Whether the specified experiment is on or off.
   * @param {!Window} win
   * @param {string} experimentId
   * @return {boolean}
   */


  function isExperimentOn(win, experimentId) {
    var toggles = experimentToggles(win);
    return !!toggles[experimentId];
  }
  /**
   * Toggles the experiment on or off. Returns the actual value of the experiment
   * after toggling is done.
   * @param {!Window} win
   * @param {string} experimentId
   * @param {boolean=} opt_on
   * @param {boolean=} opt_transientExperiment  Whether to toggle the
   *     experiment state "transiently" (i.e., for this page load only) or
   *     durably (by saving the experiment IDs to the cookie after toggling).
   *     Default: false (save durably).
   * @return {boolean} New state for experimentId.
   */


  function toggleExperiment(win, experimentId, opt_on, opt_transientExperiment) {
    var currentlyOn = isExperimentOn(win,
    /*OK*/
    experimentId);
    var on = !!(opt_on !== undefined ? opt_on : !currentlyOn);

    if (on != currentlyOn) {
      var toggles = experimentToggles(win);
      toggles[experimentId] = on;

      if (!opt_transientExperiment) {
        var cookieToggles = getExperimentTogglesFromCookie(win);
        cookieToggles[experimentId] = on;
        saveExperimentTogglesToCookie(win, cookieToggles);
      }
    }

    return on;
  }
  /**
   * Calculate whether the experiment is on or off based off of the
   * cookieFlag or the global config frequency given.
   * @param {!Window} win
   * @return {!Object<string, boolean>}
   */


  function experimentToggles(win) {
    if (win[TOGGLES_WINDOW_PROPERTY]) {
      return win[TOGGLES_WINDOW_PROPERTY];
    }

    win[TOGGLES_WINDOW_PROPERTY] = Object.create(null);
    var toggles = win[TOGGLES_WINDOW_PROPERTY]; // Read the default config of this build.

    if (win.AMP_CONFIG) {
      for (var experimentId in win.AMP_CONFIG) {
        var frequency = win.AMP_CONFIG[experimentId];

        if (typeof frequency === 'number' && frequency >= 0 && frequency <= 1) {
          toggles[experimentId] = Math.random() < frequency;
        }
      }
    } // Read document level override from meta tag.


    if (win.AMP_CONFIG && Array.isArray(win.AMP_CONFIG['allow-doc-opt-in']) && win.AMP_CONFIG['allow-doc-opt-in'].length > 0) {
      var allowed = win.AMP_CONFIG['allow-doc-opt-in'];
      var meta = win.document.head.querySelector('meta[name="amp-experiments-opt-in"]');

      if (meta) {
        var optedInExperiments = meta.getAttribute('content').split(',');

        for (var i = 0; i < optedInExperiments.length; i++) {
          if (allowed.indexOf(optedInExperiments[i]) != -1) {
            toggles[optedInExperiments[i]] = true;
          }
        }
      }
    }

    Object.assign(toggles, getExperimentTogglesFromCookie(win));

    if (win.AMP_CONFIG && Array.isArray(win.AMP_CONFIG['allow-url-opt-in']) && win.AMP_CONFIG['allow-url-opt-in'].length > 0) {
      var _allowed = win.AMP_CONFIG['allow-url-opt-in'];
      var hash = win.location.originalHash || win.location.hash;
      var params = (0, _url.parseQueryString)(hash);

      for (var _i = 0; _i < _allowed.length; _i++) {
        var param = params["e-" + _allowed[_i]];

        if (param == '1') {
          toggles[_allowed[_i]] = true;
        }

        if (param == '0') {
          toggles[_allowed[_i]] = false;
        }
      }
    }

    return toggles;
  }
  /**
   * Returns the cached experiments toggles, or null if they have not been
   * computed yet.
   * @param {!Window} win
   * @return {Object<string, boolean>}
   */


  function experimentTogglesOrNull(win) {
    return win[TOGGLES_WINDOW_PROPERTY] || null;
  }
  /**
   * Returns a set of experiment IDs currently on.
   * @param {!Window} win
   * @return {!Object<string, boolean>}
   */


  function getExperimentTogglesFromCookie(win) {
    var experimentCookie = (0, _cookies.getCookie)(win, COOKIE_NAME);
    var tokens = experimentCookie ? experimentCookie.split(/\s*,\s*/g) : [];
    var toggles = Object.create(null);

    for (var i = 0; i < tokens.length; i++) {
      if (tokens[i].length == 0) {
        continue;
      }

      if (tokens[i][0] == '-') {
        toggles[tokens[i].substr(1)] = false;
      } else {
        toggles[tokens[i]] = true;
      }
    }

    return toggles;
  }
  /**
   * Saves a set of experiment IDs currently on.
   * @param {!Window} win
   * @param {!Object<string, boolean>} toggles
   */


  function saveExperimentTogglesToCookie(win, toggles) {
    var experimentIds = [];

    for (var experiment in toggles) {
      experimentIds.push((toggles[experiment] === false ? '-' : '') + experiment);
    }

    (0, _cookies.setCookie)(win, COOKIE_NAME, experimentIds.join(','), Date.now() + COOKIE_EXPIRATION_INTERVAL, {
      // Set explicit domain, so the cookie gets send to sub domains.
      domain: win.location.hostname,
      allowOnProxyOrigin: true
    });
  }
  /**
   * See getExperimentTogglesFromCookie().
   * @param {!Window} win
   * @return {!Object<string, boolean>}
   * @visibleForTesting
   */


  function getExperimentToglesFromCookieForTesting(win) {
    return getExperimentTogglesFromCookie(win);
  }
  /**
   * Resets the experimentsToggle cache for testing purposes.
   * @param {!Window} win
   * @visibleForTesting
   */


  function resetExperimentTogglesForTesting(win) {
    (0, _cookies.setCookie)(win, COOKIE_NAME, '', 0, {
      domain: win.location.hostname
    });
    win[TOGGLES_WINDOW_PROPERTY] = null;
  }
  /**
   * In some browser implementations of Math.random(), sequential calls of
   * Math.random() are correlated and can cause a bias.  In particular,
   * if the previous random() call was < 0.001 (as it will be if we select
   * into an experiment), the next value could be less than 0.5 more than
   * 50.7% of the time.  This provides an implementation that roots down into
   * the crypto API, when available, to produce less biased samples.
   *
   * @return {number} Pseudo-random floating-point value on the range [0, 1).
   */


  function slowButAccuratePrng() {
    // TODO(tdrl): Implement.
    return Math.random();
  }
  /**
   * Container for alternate random number generator implementations.  This
   * allows us to set an "accurate" PRNG for branch selection, but to mock it
   * out easily in tests.
   *
   * @visibleForTesting
   * @const {!{accuratePrng: function():number}}
   */


  var RANDOM_NUMBER_GENERATORS = {
    accuratePrng: slowButAccuratePrng
  };
  /**
   * Selects, uniformly at random, a single item from the array.
   * @param {!Array<string>} arr Object to select from.
   * @return {?string} Single item from arr or null if arr was empty.
   */

  exports.RANDOM_NUMBER_GENERATORS = RANDOM_NUMBER_GENERATORS;

  function selectRandomItem(arr) {
    var rn = RANDOM_NUMBER_GENERATORS.accuratePrng();
    return arr[Math.floor(rn * arr.length)] || null;
  }
  /**
   * Selects which page-level experiment branches are enabled. If a given
   * experiment name is already set (including to the null / no branches selected
   * state), this won't alter its state.
   *
   * Check whether a given experiment is set using isExperimentOn(win,
   * experimentName) and, if it is on, look for which branch is selected in
   * win.experimentBranches[experimentName].
   *
   * @param {!Window} win Window context on which to save experiment
   *     selection state.
   * @param {!Object<string, !ExperimentInfo>} experiments  Set of experiments to
   *     configure for this page load.
   * @return {!Object<string, string>} Map of experiment names to selected
   *     branches.
   */


  function randomlySelectUnsetExperiments(win, experiments) {
    win.experimentBranches = win.experimentBranches || {};
    var selectedExperiments = {};

    for (var experimentName in experiments) {
      // Skip experimentName if it is not a key of experiments object or if it
      // has already been populated by some other property.
      if (!(0, _object.hasOwn)(experiments, experimentName)) {
        continue;
      }

      if ((0, _object.hasOwn)(win.experimentBranches, experimentName)) {
        selectedExperiments[experimentName] = win.experimentBranches[experimentName];
        continue;
      }

      if (!experiments[experimentName].isTrafficEligible || !experiments[experimentName].isTrafficEligible(win)) {
        win.experimentBranches[experimentName] = null;
        continue;
      } // If we're in the experiment, but we haven't already forced a specific
      // experiment branch (e.g., via a test setup), then randomize the branch
      // choice.


      if (!win.experimentBranches[experimentName] && isExperimentOn(win,
      /*OK*/
      experimentName)) {
        var branches = experiments[experimentName].branches;
        win.experimentBranches[experimentName] = selectRandomItem(branches);
        selectedExperiments[experimentName] = win.experimentBranches[experimentName];
      }
    }

    return selectedExperiments;
  }
  /**
   * Returns the experiment branch enabled for the given experiment ID.
   * For example, 'control' or 'experiment'.
   *
   * @param {!Window} win Window context to check for experiment state.
   * @param {string} experimentName Name of the experiment to check.
   * @return {?string} Active experiment branch ID for experimentName (possibly
   *     null if experimentName has been tested but no branch was enabled).
   */


  function getExperimentBranch(win, experimentName) {
    return win.experimentBranches ? win.experimentBranches[experimentName] : null;
  }
  /**
   * Force enable (or disable) a specific branch of a given experiment name.
   * Disables the experiment name altogether if branchId is falseish.
   *
   * @param {!Window} win Window context to check for experiment state.
   * @param {string} experimentName Name of the experiment to check.
   * @param {?string} branchId ID of branch to force or null to disable
   *     altogether.
   * @visibleForTesting
   */


  function forceExperimentBranch(win, experimentName, branchId) {
    win.experimentBranches = win.experimentBranches || {};
    toggleExperiment(win, experimentName, !!branchId, true);
    win.experimentBranches[experimentName] = branchId;
  }

  },{"./cookies":20,"./url":124,"./utils/object":132}],33:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.exponentialBackoff = exponentialBackoff;
  exports.exponentialBackoffClock = exponentialBackoffClock;
  exports.getJitter = getJitter;

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @param {number=} opt_base Exponential base. Defaults to 2.
   * @return {function(function()): number} Function that when invoked will
   *     call the passed in function. On every invocation the next
   *     invocation of the passed in function will be exponentially
   *     later. Returned function returns timeout id.
   */
  function exponentialBackoff(opt_base) {
    var getTimeout = exponentialBackoffClock(opt_base);
    return function (work) {
      return setTimeout(work, getTimeout());
    };
  }
  /**
   * @param {number=} opt_base Exponential base. Defaults to 2.
   * @return {function(): number} Function that when invoked will return
   *    a number that exponentially grows per invocation.
   */


  function exponentialBackoffClock(opt_base) {
    var base = opt_base || 2;
    var count = 0;
    return function () {
      var wait = Math.pow(base, count++);
      wait += getJitter(wait);
      return wait * 1000;
    };
  }
  /**
   * Add jitter to avoid the thundering herd. This can e.g. happen when
   * we poll a backend and it fails for everyone at the same time.
   * We add up to 30% (default) longer or shorter than the given time.
   *
   * @param {number} wait the amount if base milliseconds
   * @param {number=} opt_perc the min/max percentage to add or sutract
   * @return {number}
   */


  function getJitter(wait, opt_perc) {
    opt_perc = opt_perc || .3;
    var jitter = wait * opt_perc * Math.random();

    if (Math.random() > .5) {
      jitter *= -1;
    }

    return jitter;
  }

  },{}],34:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.FiniteStateMachine = void 0;

  var _log = require("./log");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @template STATE
   */
  var FiniteStateMachine =
  /*#__PURE__*/
  function () {
    /**
     * Constructs a FSM using the bits defined in initialState as changeable
     * states.
     * @param {STATE} initialState
     */
    function FiniteStateMachine(initialState) {
      /**
       * The current state of the FSM
       * @private {STATE}
       */
      this.state_ = initialState;
      /**
       * Callbacks that are invoked when transitioning from an old state
       * to the new.
       * @private {Object<string, function()>}
       */

      this.transitions_ = Object.create(null);
    }
    /**
     * Adds a transition callback that will be called when the oldState
     * transitions to the newState.
     * @param {STATE} oldState
     * @param {STATE} newState
     * @param {function()} callback
     */


    var _proto = FiniteStateMachine.prototype;

    _proto.addTransition = function addTransition(oldState, newState, callback) {
      var transition = this.statesToTransition_(oldState, newState);
      (0, _log.devAssert)(!this.transitions_[transition], 'cannot define a duplicate transition callback');
      this.transitions_[transition] = callback;
    }
    /**
     * Transitions to the newState and invokes the registered transition
     * callback, if one is defined.
     * @param {STATE} newState
     */
    ;

    _proto.setState = function setState(newState) {
      var oldState = this.state_;
      this.state_ = newState;
      var transition = this.statesToTransition_(oldState, newState);
      var callback = this.transitions_[transition];

      if (callback) {
        callback();
      }
    }
    /**
     * Transforms the state transition into a key which identifies a callback.
     * @private
     * @param {STATE} oldState
     * @param {STATE} newState
     * @return {string}
     */
    ;

    _proto.statesToTransition_ = function statesToTransition_(oldState, newState) {
      return oldState + "|" + newState;
    };

    return FiniteStateMachine;
  }();

  exports.FiniteStateMachine = FiniteStateMachine;

  },{"./log":51}],35:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.FocusHistory = void 0;

  var _observable = require("./observable");

  var _services = require("./services");

  var _log = require("./log");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * FocusHistory keeps track of recent focused elements. This history can be
   * purged using `purgeBefore` method.
   */
  var FocusHistory =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     * @param {number} purgeTimeout
     */
    function FocusHistory(win, purgeTimeout) {
      var _this = this;

      /** @const {!Window} */
      this.win = win;
      /** @private @const {number} */

      this.purgeTimeout_ = purgeTimeout;
      /** @private @const {!Array<!{el: !Element, time: time}>} */

      this.history_ = [];
      /** @private @const {!Observable<!Element>} */

      this.observeFocus_ = new _observable.Observable();
      /**
       * @private
       * @param {!Event} e
       */

      this.captureFocus_ = function (e) {
        // Hack (#15079) due to Firefox firing focus events on the entire page
        if (e.target && e.target.nodeType == 1) {
          _this.pushFocus_((0, _log.dev)().assertElement(e.target));
        }
      };
      /**
       * @private
       * @param {*} unusedE
       */


      this.captureBlur_ = function (unusedE) {
        // IFrame elements do not receive `focus` event. An alternative way is
        // implemented here. We wait for a blur to arrive on the main window
        // and after a short time check which element is active.
        _services.Services.timerFor(win).delay(function () {
          _this.pushFocus_(_this.win.document.activeElement);
        }, 500);
      };

      this.win.document.addEventListener('focus', this.captureFocus_, true);
      this.win.addEventListener('blur', this.captureBlur_);
    }
    /** @visibleForTesting */


    var _proto = FocusHistory.prototype;

    _proto.cleanup_ = function cleanup_() {
      this.win.document.removeEventListener('focus', this.captureFocus_, true);
      this.win.removeEventListener('blur', this.captureBlur_);
    }
    /**
     * Add a listener for focus events.
     * @param {function(!Element)} handler
     * @return {!UnlistenDef}
     */
    ;

    _proto.onFocus = function onFocus(handler) {
      return this.observeFocus_.add(handler);
    }
    /**
     * @param {!Element} element
     * @private
     */
    ;

    _proto.pushFocus_ = function pushFocus_(element) {
      var now = Date.now();

      if (this.history_.length == 0 || this.history_[this.history_.length - 1].el != element) {
        this.history_.push({
          el: element,
          time: now
        });
      } else {
        this.history_[this.history_.length - 1].time = now;
      }

      this.purgeBefore(now - this.purgeTimeout_);
      this.observeFocus_.fire(element);
    }
    /**
     * Returns the element that was focused last.
     * @return {?Element}
     */
    ;

    _proto.getLast = function getLast() {
      if (this.history_.length == 0) {
        return null;
      }

      return this.history_[this.history_.length - 1].el;
    }
    /**
     * Removes elements from the history older than the specified time.
     * @param {time} time
     */
    ;

    _proto.purgeBefore = function purgeBefore(time) {
      var index = this.history_.length - 1;

      for (var i = 0; i < this.history_.length; i++) {
        if (this.history_[i].time >= time) {
          index = i - 1;
          break;
        }
      }

      if (index != -1) {
        this.history_.splice(0, index + 1);
      }
    }
    /**
     * Returns `true` if the specified element contains any of the elements in
     * the history.
     * @param {!Element} element
     * @return {boolean}
     */
    ;

    _proto.hasDescendantsOf = function hasDescendantsOf(element) {
      if (this.win.document.activeElement) {
        this.pushFocus_(this.win.document.activeElement);
      }

      for (var i = 0; i < this.history_.length; i++) {
        if (element.contains(this.history_[i].el)) {
          return true;
        }
      }

      return false;
    };

    return FocusHistory;
  }();

  exports.FocusHistory = FocusHistory;

  },{"./log":51,"./observable":54,"./services":112}],36:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.fontStylesheetTimeout = fontStylesheetTimeout;

  var _css = require("./css");

  var _experiments = require("./experiments");

  var _documentReady = require("./document-ready");

  var _config = require("./config");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * While browsers put a timeout on font downloads (3s by default,
   * some less on slow connections), there is no such timeout for style
   * sheets. In the case of AMP external stylesheets are ONLY used to
   * download fonts, but browsers have no reasonable timeout for
   * stylesheets. Users may thus wait a long time for these to download
   * even though all they do is reference fonts.
   *
   * For that reasons this function identifies (or rather infers) font
   * stylesheets that have not downloaded within timeout period of the page
   * response starting and reinserts equivalent link tags  dynamically. This
   * removes their page-render-blocking nature and lets the doc render.
   *
   * @param {!Window} win
   */
  function fontStylesheetTimeout(win) {
    (0, _documentReady.onDocumentReady)(win.document, function () {
      return maybeTimeoutFonts(win);
    });
  }
  /**
   * @param {!Window} win
   */


  function maybeTimeoutFonts(win) {
    var timeSinceResponseStart = 0; // If available, we start counting from the time the HTTP response
    // for the page started. The preload scanner should then quickly
    // start the CSS download.

    var perf = win.performance;

    if (perf && perf.timing && perf.timing.responseStart) {
      timeSinceResponseStart = Date.now() - perf.timing.responseStart;
    }

    var timeout = Math.max(1, 250 - timeSinceResponseStart); // Avoid timer dependency since this runs very early in execution.

    win.setTimeout(function () {
      // Try again, more fonts might have loaded.
      timeoutFontFaces(win);
      var styleSheets = win.document.styleSheets;

      if (!styleSheets) {
        return;
      } // Find all stylesheets that aren't loaded from the AMP CDN (those are
      // critical if they are present).


      var styleLinkElements = win.document.querySelectorAll("link[rel~=\"stylesheet\"]:not([href^=\"" + (0, _css.escapeCssSelectorIdent)(_config.urls.cdn) + "\"])"); // Compare external sheets against elements of document.styleSheets.
      // They do not appear in this list until they have been loaded.

      var timedoutStyleSheets = [];

      for (var i = 0; i < styleLinkElements.length; i++) {
        var link = styleLinkElements[i];
        var found = false;

        for (var n = 0; n < styleSheets.length; n++) {
          if (styleSheets[n].ownerNode == link) {
            found = true;
            break;
          }
        }

        if (!found) {
          timedoutStyleSheets.push(link);
        }
      }

      var _loop = function _loop(_i) {
        var link = timedoutStyleSheets[_i]; // To avoid blocking the render, we assign a non-matching media
        // attribute first…

        var media = link.media || 'all';
        link.media = 'not-matching'; // And then switch it back to the original after the stylesheet
        // loaded.

        link.onload = function () {
          link.media = media;
          timeoutFontFaces(win);
        };

        link.setAttribute('i-amphtml-timeout', timeout); // Pop/insert the same link. This causes Chrome to unblock, and doesn't
        // blank out Safari. #12521

        link.parentNode.insertBefore(link, link.nextSibling);
      };

      for (var _i = 0; _i < timedoutStyleSheets.length; _i++) {
        _loop(_i);
      }
    }, timeout);
  }
  /**
   * Sets font faces that haven't been loaded by the time this was called to
   * `font-display: swap` in supported browsers.
   * See https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display
   * for details on behavior.
   * Swap effectively leads to immediate display of the fallback font with
   * the custom font being displayed when possible.
   * While this is not the most desirable setting, it is compatible with the
   * default (which does that but only waiting for 3 seconds).
   * Ideally websites would opt into `font-display: optional` which provides
   * nicer UX for non-icon fonts.
   * If fonts set a non default display mode, this does nothing.
   * @param {!Window} win
   */


  function timeoutFontFaces(win) {
    if (!(0, _experiments.isExperimentOn)(win, 'font-display-swap')) {
      return;
    }

    var doc = win.document; // TODO(@cramforce) Switch to .values when FontFaceSet extern supports it.

    if (!doc.fonts || !doc.fonts['values']) {
      return;
    }

    var it = doc.fonts['values']();
    var entry;

    while (entry = it.next()) {
      var fontFace = entry.value;

      if (!fontFace) {
        return;
      }

      if (fontFace.status != 'loading') {
        continue;
      } // Not supported or non-default value.
      // If the publisher specified a non-default, we respect that, of course.


      if (!('display' in fontFace) || fontFace.display != 'auto') {
        continue;
      }

      fontFace.display = 'swap';
    }
  }

  },{"./config":17,"./css":21,"./document-ready":24,"./experiments":32}],37:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.createFormDataWrapper = createFormDataWrapper;
  exports.isFormDataWrapper = isFormDataWrapper;
  exports.PolyfillFormDataWrapper = void 0;

  var _services = require("./services");

  var _form = require("./form");

  var _dom = require("./dom");

  var _object = require("./utils/object");

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  /**
   * Create a form data wrapper. The wrapper is necessary to provide a common
   * API for FormData objects on all browsers. For example, not all browsers
   * support the FormData#entries or FormData#delete functions.
   *
   * @param {!Window} win
   * @param {!HTMLFormElement=} opt_form
   * @return {!FormDataWrapperInterface}
   */
  function createFormDataWrapper(win, opt_form) {
    var platform = _services.Services.platformFor(win);

    if (platform.isIos() && platform.getMajorVersion() == 11) {
      return new Ios11NativeFormDataWrapper(opt_form);
    } else if (FormData.prototype.entries && FormData.prototype.delete) {
      return new NativeFormDataWrapper(opt_form);
    } else {
      return new PolyfillFormDataWrapper(opt_form);
    }
  }
  /**
   * Check if the given object is a FormDataWrapper instance
   * @param {*} o
   * @return {boolean} True if the object is a FormDataWrapper instance.
   */


  function isFormDataWrapper(o) {
    // instanceof doesn't work as expected, so we detect with duck-typing.
    return !!o && typeof o.getFormData == 'function';
  }
  /**
   * A polyfill wrapper for a `FormData` object.
   *
   * If there's no native `FormData#entries`, chances are there are no native
   * methods to read the content of the `FormData` after construction, so the
   * only way to implement `entries` in this class is to capture the fields in
   * the form passed to the constructor (and the arguments passed to the
   * `append` method).
   *
   * For more details on this, see http://mdn.io/FormData.
   *
   * @implements {FormDataWrapperInterface}
   * @visibleForTesting
   */


  var PolyfillFormDataWrapper =
  /*#__PURE__*/
  function () {
    /** @override */
    function PolyfillFormDataWrapper(opt_form) {
      if (opt_form === void 0) {
        opt_form = undefined;
      }

      /** @private @const {!Object<string, !Array<string>>} */
      this.fieldValues_ = opt_form ? (0, _form.getFormAsObject)(opt_form) : (0, _object.map)();
    }
    /**
     * @param {string} name
     * @param {string|!File} value
     * @param {string=} opt_filename
     * @override
     */


    var _proto = PolyfillFormDataWrapper.prototype;

    _proto.append = function append(name, value, opt_filename) {
      // Coercion to string is required to match
      // the native FormData.append behavior
      var nameString = String(name);
      this.fieldValues_[nameString] = this.fieldValues_[nameString] || [];
      this.fieldValues_[nameString].push(String(value));
    }
    /** @override */
    ;

    _proto.delete = function _delete(name) {
      delete this.fieldValues_[name];
    }
    /** @override */
    ;

    _proto.entries = function entries() {
      var _this = this;

      var fieldEntries = [];
      Object.keys(this.fieldValues_).forEach(function (name) {
        var values = _this.fieldValues_[name];
        values.forEach(function (value) {
          return fieldEntries.push([name, value]);
        });
      }); // Generator functions are not supported by the current Babel configuration,
      // so we must manually implement the iterator interface.

      var nextIndex = 0;
      return (
        /** @type {!Iterator<!Array<string>>} */
        {
          next: function next() {
            return nextIndex < fieldEntries.length ? {
              value: fieldEntries[nextIndex++],
              done: false
            } : {
              value: undefined,
              done: true
            };
          }
        }
      );
    }
    /** @override */
    ;

    _proto.getFormData = function getFormData() {
      var _this2 = this;

      var formData = new FormData();
      Object.keys(this.fieldValues_).forEach(function (name) {
        var values = _this2.fieldValues_[name];
        values.forEach(function (value) {
          return formData.append(name, value);
        });
      });
      return formData;
    };

    return PolyfillFormDataWrapper;
  }();
  /**
   * Wrap the native FormData implementation.
   *
   * @implements {FormDataWrapperInterface}
   */


  exports.PolyfillFormDataWrapper = PolyfillFormDataWrapper;

  var NativeFormDataWrapper =
  /*#__PURE__*/
  function () {
    /** @override */
    function NativeFormDataWrapper(opt_form) {
      /** @private @const {!FormData} */
      this.formData_ = new FormData(opt_form);
    }
    /**
     * @param {string} name
     * @param {string|!File} value
     * @param {string=} opt_filename
     * @override
     */


    var _proto2 = NativeFormDataWrapper.prototype;

    _proto2.append = function append(name, value, opt_filename) {
      this.formData_.append(name, value);
    }
    /** @override */
    ;

    _proto2.delete = function _delete(name) {
      this.formData_.delete(name);
    }
    /** @override */
    ;

    _proto2.entries = function entries() {
      return this.formData_.entries();
    }
    /** @override */
    ;

    _proto2.getFormData = function getFormData() {
      return this.formData_;
    };

    return NativeFormDataWrapper;
  }();
  /**
   * iOS 11 has a bug when submitting empty file inputs.
   * This works around the bug by replacing the empty files with Blob objects.
   */


  var Ios11NativeFormDataWrapper =
  /*#__PURE__*/
  function (_NativeFormDataWrappe) {
    _inheritsLoose(Ios11NativeFormDataWrapper, _NativeFormDataWrappe);

    /** @override */
    function Ios11NativeFormDataWrapper(opt_form) {
      var _this3;

      _this3 = _NativeFormDataWrappe.call(this, opt_form) || this;

      if (opt_form) {
        (0, _dom.iterateCursor)(opt_form.elements, function (input) {
          if (input.type == 'file' && input.files.length == 0) {
            _this3.formData_.delete(input.name);

            _this3.formData_.append(input.name, new Blob([]), '');
          }
        });
      }

      return _this3;
    }
    /**
     * @param {string} name
     * @param {string|!File} value
     * @param {string=} opt_filename
     * @override
     */


    var _proto3 = Ios11NativeFormDataWrapper.prototype;

    _proto3.append = function append(name, value, opt_filename) {
      // Safari 11 breaks on submitting empty File values.
      if (value && typeof value == 'object' && isEmptyFile(value)) {
        this.formData_.append(name, new Blob([]), opt_filename || '');
      } else {
        this.formData_.append(name, value);
      }
    };

    return Ios11NativeFormDataWrapper;
  }(NativeFormDataWrapper);
  /**
   * A wrapper for a native `FormData` object that allows the retrieval of entries
   * in the form data after construction even on browsers that don't natively
   * support `FormData.prototype.entries`.
   *
   * @interface
   * @note Subclassing `FormData` doesn't work in this case as the transpiler
   *     generates code that calls the super constructor directly using
   *     `Function.prototype.call`. WebKit (Safari) doesn't allow this and
   *     enforces that constructors be called with the `new` operator.
   */


  var FormDataWrapperInterface =
  /*#__PURE__*/
  function () {
    /**
     * Creates a new wrapper for a `FormData` object.
     *
     * If there's no native `FormData#entries`, chances are there are no native
     * methods to read the content of the `FormData` after construction, so the
     * only way to implement `entries` in this class is to capture the fields in
     * the form passed to the constructor (and the arguments passed to the
     * `append` method).
     *
     * For more details on this, see http://mdn.io/FormData.
     *
     * @param {!HTMLFormElement=} opt_form An HTML `<form>` element — when
     *     specified, the `FormData` object will be populated with the form's
     *     current keys/values using the name property of each element for the
     *     keys and their submitted value for the values. It will also encode file
     *     input content.
     */
    function FormDataWrapperInterface(opt_form) {}
    /**
     * Appends a new value onto an existing key inside a `FormData` object, or
     * adds the key if it does not already exist.
     *
     * Appending a `File` object is not yet supported and the `filename`
     * parameter is ignored for this wrapper.
     *
     * For more details on this, see http://mdn.io/FormData/append.
     *
     * TODO(cvializ): Update file support
     *
     * @param {string} unusedName The name of the field whose data is contained in
     *     `value`.
     * @param {string|!File} unusedValue The field's value.
     * @param {string=} opt_filename The filename to use if the value is a file.
     */


    var _proto4 = FormDataWrapperInterface.prototype;

    _proto4.append = function append(unusedName, unusedValue, opt_filename) {}
    /**
     * Remove the given value from the FormData.
     *
     * For more details on this, see http://mdn.io/FormData/delete.
     *
     * @param {string} unusedName The name of the field to remove from the FormData.
     */
    ;

    _proto4.delete = function _delete(unusedName) {}
    /**
     * Returns an iterator of all key/value pairs contained in this object.
     *
     * For more details on this, see http://mdn.io/FormData/entries.
     *
     * @return {!Iterator<!Array<string|!File>>}
     */
    ;

    _proto4.entries = function entries() {}
    /**
     * Returns the wrapped native `FormData` object.
     *
     * @return {!FormData}
     */
    ;

    _proto4.getFormData = function getFormData() {};

    return FormDataWrapperInterface;
  }();
  /**
   * Check if the given file is an empty file, which is the result of submitting
   * an empty `<input type="file">`. These cause errors when submitting forms
   * in Safari 11.
   *
   * @param {!File} file
   * @return {boolean}
   */


  function isEmptyFile(file) {
    return file.name == '' && file.size == 0;
  }

  },{"./dom":26,"./form":38,"./services":112,"./utils/object":132}],38:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.formOrNullForElement = formOrNullForElement;
  exports.setFormForElement = setFormForElement;
  exports.getFormAsObject = getFormAsObject;

  var _dom = require("./dom");

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @const {string} */
  var FORM_PROP_ = '__AMP_FORM';
  /**
   * @param {!Element} element
   * @return {../extensions/amp-form/0.1/amp-form.AmpForm}
   */

  function formOrNullForElement(element) {
    return element[FORM_PROP_] || null;
  }
  /**
   * @param {!Element} element
   * @param {!../extensions/amp-form/0.1/amp-form.AmpForm} form
   */


  function setFormForElement(element, form) {
    element[FORM_PROP_] = form;
  }
  /**
   * Returns form data in the passed-in form as an object.
   * Includes focused submit buttons.
   * @param {!HTMLFormElement} form
   * @return {!JsonObject}
   */


  function getFormAsObject(form) {
    var elements = form.elements,
        ownerDocument = form.ownerDocument;
    var data =
    /** @type {!JsonObject} */
    {};
    var submittableTagsRegex = /^(?:input|select|textarea|button)$/i;
    var unsubmittableTypesRegex = /^(?:button|image|file|reset)$/i;
    var checkableType = /^(?:checkbox|radio)$/i;

    var _loop = function _loop(i) {
      var input = elements[i];
      var checked = input.checked,
          name = input.name,
          multiple = input.multiple,
          options = input.options,
          tagName = input.tagName,
          type = input.type,
          value = input.value;

      if (!name || isDisabled(input) || !submittableTagsRegex.test(tagName) || unsubmittableTypesRegex.test(type) || checkableType.test(type) && !checked) {
        return "continue";
      }

      if (data[name] === undefined) {
        data[name] = [];
      }

      if (multiple) {
        (0, _dom.iterateCursor)(options, function (option) {
          if (option.selected) {
            data[name].push(option.value);
          }
        });
        return "continue";
      } // In a form, the button's value is only submitted if the button itself was
      // used to submit the form. We can detect that using the document focus.
      // Browsers vary on the conditions that focus the form submit button.
      // Generally, the button is only focused if the user triggers the button
      // itself. If a script calls `button.click` or `form.submit` the button
      // will not be focused. If the user presses enter inside a field, the button
      // will not be focused.


      if ((type == 'submit' || tagName == 'BUTTON') && input != ownerDocument.activeElement) {
        return "continue";
      }

      data[name].push(value);
    };

    for (var i = 0; i < elements.length; i++) {
      var _ret = _loop(i);

      if (_ret === "continue") continue;
    } // Wait until the end to remove the empty values, since
    // we don't know when evaluating any one input whether
    // there will be or have already been inputs with the same names.
    // e.g. We want to remove empty <select multiple name=x> but
    // there could also be an <input name=x>. At the end we know if an empty name
    // can be deleted.


    Object.keys(data).forEach(function (key) {
      if (data[key].length == 0) {
        delete data[key];
      }
    });
    return data;
  }
  /**
   * Checks if a field is disabled.
   * @param {!Element} element
   * @private
   */


  function isDisabled(element) {
    if (element.disabled) {
      return true;
    }

    var ancestors = (0, _dom.ancestorElementsByTag)(element, 'fieldset');

    for (var i = 0; i < ancestors.length; i++) {
      if (ancestors[i].disabled) {
        return true;
      }
    }

    return false;
  }

  },{"./dom":26}],39:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.setSrcdocSupportedForTesting = setSrcdocSupportedForTesting;
  exports.setFriendlyIframeEmbedVisible = setFriendlyIframeEmbedVisible;
  exports.getFriendlyIframeEmbedOptional = getFriendlyIframeEmbedOptional;
  exports.installFriendlyIframeEmbed = installFriendlyIframeEmbed;
  exports.mergeHtmlForTesting = mergeHtmlForTesting;
  exports.whenContentIniLoad = whenContentIniLoad;
  exports.isInFie = isInFie;
  exports.FriendlyIframeEmbed = exports.FriendlyIframeSpec = void 0;

  var _commonSignals = require("./common-signals");

  var _observable = require("./observable");

  var _services = require("./services");

  var _signals = require("./utils/signals");

  var _dom = require("./dom");

  var _log = require("./log");

  var _service = require("./service");

  var _documentReady = require("./document-ready");

  var _layoutRect = require("./layout-rect");

  var _eventHelper = require("./event-helper");

  var _style = require("./style");

  var _types = require("./types");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @const {string} */
  var EMBED_PROP = '__AMP_EMBED__';
  /** @const {!Array<string>} */

  var EXCLUDE_INI_LOAD = ['AMP-AD', 'AMP-ANALYTICS', 'AMP-PIXEL', 'AMP-AD-EXIT'];
  /**
   * Parameters used to create the new "friendly iframe" embed.
   * - html: The complete content of an AMP embed, which is itself an AMP
   *   document. Can include whatever is normally allowed in an AMP document,
   *   except for AMP `<script>` declarations. Those should be passed as an
   *   array of `extensionIds`.
   * - extensionsIds: An optional array of AMP extension IDs used in this embed.
   * - fonts: An optional array of fonts used in this embed.
   *
   * @typedef {{
   *   host: (?AmpElement|undefined),
   *   url: string,
   *   html: string,
   *   extensionIds: (?Array<string>|undefined),
   *   fonts: (?Array<string>|undefined),
   * }}
   */

  var FriendlyIframeSpec;
  /**
   * @type {boolean|undefined}
   * @visibleForTesting
   */

  exports.FriendlyIframeSpec = FriendlyIframeSpec;
  var srcdocSupported;
  /**
   * @param {boolean|undefined} val
   * @visibleForTesting
   */

  function setSrcdocSupportedForTesting(val) {
    srcdocSupported = val;
  }
  /**
   * Returns `true` if the Friendly Iframes are supported.
   * @return {boolean}
   */


  function isSrcdocSupported() {
    if (srcdocSupported === undefined) {
      srcdocSupported = 'srcdoc' in HTMLIFrameElement.prototype;
    }

    return srcdocSupported;
  }
  /**
   * Sets whether the embed is currently visible. The interpretation of visibility
   * is up to the embed parent. However, most of typical cases would rely on
   * whether the embed is currently in the viewport.
   * @param {!FriendlyIframeEmbed} embed
   * @param {boolean} visible
   * TODO(dvoytenko): Re-evaluate and probably drop once layers are ready.
   */


  function setFriendlyIframeEmbedVisible(embed, visible) {
    embed.setVisible_(visible);
  }
  /**
   * Returns the embed created using `installFriendlyIframeEmbed` or `null`.
   * Caution: This will only return the FIE after the iframe has 'loaded'. If you
   * are checking before this signal you may be in a race condition that returns
   * null.
   * @param {!HTMLIFrameElement} iframe
   * @return {?FriendlyIframeEmbed}
   */


  function getFriendlyIframeEmbedOptional(iframe) {
    return (
      /** @type {?FriendlyIframeEmbed} */
      iframe[EMBED_PROP]
    );
  }
  /**
   * Creates the requested "friendly iframe" embed. Returns the promise that
   * will be resolved as soon as the embed is available. The actual
   * initialization of the embed will start as soon as the `iframe` is added
   * to the DOM.
   * @param {!HTMLIFrameElement} iframe
   * @param {!Element} container
   * @param {!FriendlyIframeSpec} spec
   * @param {function(!Window)=} opt_preinstallCallback
   * @return {!Promise<!FriendlyIframeEmbed>}
   */


  function installFriendlyIframeEmbed(iframe, container, spec, opt_preinstallCallback) {
    /** @const {!Window} */
    var win = (0, _service.getTopWindow)((0, _types.toWin)(iframe.ownerDocument.defaultView));
    /** @const {!./service/extensions-impl.Extensions} */

    var extensions = _services.Services.extensionsFor(win);

    (0, _style.setStyle)(iframe, 'visibility', 'hidden');
    iframe.setAttribute('referrerpolicy', 'unsafe-url'); // Pre-load extensions.

    if (spec.extensionIds) {
      spec.extensionIds.forEach(function (extensionId) {
        return extensions.preloadExtension(extensionId);
      });
    }

    var html = mergeHtml(spec); // Receive the signal when iframe is ready: it's document is formed.

    iframe.onload = function () {
      // Chrome does not reflect the iframe readystate.
      iframe.readyState = 'complete';
    };

    var registerViolationListener = function registerViolationListener() {
      iframe.contentWindow.addEventListener('securitypolicyviolation', function (violationEvent) {
        (0, _log.dev)().warn('FIE', 'security policy violation', violationEvent);
      });
    };

    var loadedPromise;

    if (isSrcdocSupported()) {
      iframe.srcdoc = html;
      loadedPromise = (0, _eventHelper.loadPromise)(iframe);
      container.appendChild(iframe);
      registerViolationListener();
    } else {
      iframe.src = 'about:blank';
      container.appendChild(iframe);
      var childDoc = iframe.contentWindow.document;
      childDoc.open();
      registerViolationListener();
      childDoc.write(html); // With document.write, `iframe.onload` arrives almost immediately, thus
      // we need to wait for child's `window.onload`.

      loadedPromise = (0, _eventHelper.loadPromise)(iframe.contentWindow);
      childDoc.close();
    } // Wait for document ready signal.
    // This is complicated due to crbug.com/649201 on Chrome and a similar issue
    // on Safari where newly created document's `readyState` immediately equals
    // `complete`, even though the document itself is not yet available. There's
    // no other reliable signal for `readyState` in a child window and thus
    // we have to fallback to polling.


    var readyPromise;

    if (isIframeReady(iframe)) {
      readyPromise = Promise.resolve();
    } else {
      readyPromise = new Promise(function (resolve) {
        /** @const {number} */
        var interval = win.setInterval(function () {
          if (isIframeReady(iframe)) {
            resolve();
            win.clearInterval(interval);
          }
        },
        /* milliseconds */
        5); // For safety, make sure we definitely stop polling when child doc is
        // loaded.

        loadedPromise.catch(function (error) {
          (0, _log.rethrowAsync)(error);
        }).then(function () {
          resolve();
          win.clearInterval(interval);
        });
      });
    }

    return readyPromise.then(function () {
      var embed = new FriendlyIframeEmbed(iframe, spec, loadedPromise);
      iframe[EMBED_PROP] = embed;
      var childWin =
      /** @type {!Window} */
      iframe.contentWindow; // Add extensions.

      extensions.installExtensionsInChildWindow(childWin, spec.extensionIds || [], opt_preinstallCallback); // Ready to be shown.

      embed.startRender_();
      return embed;
    });
  }
  /**
   * Returns `true` when iframe is ready.
   * @param {!HTMLIFrameElement} iframe
   * @return {boolean}
   */


  function isIframeReady(iframe) {
    // This is complicated due to crbug.com/649201 on Chrome and a similar issue
    // on Safari where newly created document's `readyState` immediately equals
    // `complete`, even though the document itself is not yet available. There's
    // no other reliable signal for `readyState` in a child window and thus
    // the best way to check is to see the contents of the body.
    var childDoc = iframe.contentWindow && iframe.contentWindow.document;
    return !!(childDoc && (0, _documentReady.isDocumentReady)(childDoc) && childDoc.body && childDoc.body.firstChild);
  }
  /**
   * Merges base and fonts into html document.
   * @param {!FriendlyIframeSpec} spec
   */


  function mergeHtml(spec) {
    var originalHtml = spec.html;
    var originalHtmlUp = originalHtml.toUpperCase(); // Find the insertion point.

    var ip = originalHtmlUp.indexOf('<HEAD');

    if (ip != -1) {
      ip = originalHtmlUp.indexOf('>', ip + 1) + 1;
    }

    if (ip == -1) {
      ip = originalHtmlUp.indexOf('<BODY');
    }

    if (ip == -1) {
      ip = originalHtmlUp.indexOf('<HTML');

      if (ip != -1) {
        ip = originalHtmlUp.indexOf('>', ip + 1) + 1;
      }
    }

    var result = []; // Preambule.

    if (ip > 0) {
      result.push(originalHtml.substring(0, ip));
    } // Add <BASE> tag.


    result.push("<base href=\"" + (0, _dom.escapeHtml)(spec.url) + "\">"); // Load fonts.

    if (spec.fonts) {
      spec.fonts.forEach(function (font) {
        result.push("<link href=\"" + (0, _dom.escapeHtml)(font) + "\" rel=\"stylesheet\" type=\"text/css\">");
      });
    } // Load CSP


    result.push('<meta http-equiv=Content-Security-Policy ' + 'content="script-src \'none\';object-src \'none\';child-src \'none\'">'); // Postambule.

    if (ip > 0) {
      result.push(originalHtml.substring(ip));
    } else {
      result.push(originalHtml);
    }

    return result.join('');
  }
  /**
   * Exposes `mergeHtml` for testing purposes.
   * @param {!FriendlyIframeSpec} spec
   * @visibleForTesting
   */


  function mergeHtmlForTesting(spec) {
    return mergeHtml(spec);
  }
  /**
   * A "friendly iframe" embed. This is the iframe that's fully accessible to
   * the AMP runtime. It's similar to Shadow DOM in many respects, but it also
   * provides iframe/viewport measurements and enables the use of `vh`, `vw` and
   * `@media` CSS.
   *
   * The friendly iframe is managed by the top-level AMP Runtime. When it's
   * destroyed, the `destroy` method must be called to free up the shared
   * resources.
   */


  var FriendlyIframeEmbed =
  /*#__PURE__*/
  function () {
    /**
     * @param {!HTMLIFrameElement} iframe
     * @param {!FriendlyIframeSpec} spec
     * @param {!Promise} loadedPromise
     */
    function FriendlyIframeEmbed(iframe, spec, loadedPromise) {
      /** @const {!HTMLIFrameElement} */
      this.iframe = iframe;
      /** @const {!Window} */

      this.win =
      /** @type{!Window} */
      iframe.contentWindow;
      /** @const {!FriendlyIframeSpec} */

      this.spec = spec;
      /** @const {?AmpElement} */

      this.host = spec.host || null;
      /** @const @private {time} */

      this.startTime_ = Date.now();
      /**
       * Starts out as invisible. The interpretation of this flag is up to
       * the emded parent.
       * @private {boolean}
       */

      this.visible_ = false;
      /** @private {!Observable<boolean>} */

      this.visibilityObservable_ = new _observable.Observable();
      /** @private @const */

      this.signals_ = this.host ? this.host.signals() : new _signals.Signals();
      /** @private @const {!Promise} */

      this.winLoadedPromise_ = Promise.all([loadedPromise, this.whenReady()]);
    }
    /**
     * Ensures that all resources from this iframe have been released.
     */


    var _proto = FriendlyIframeEmbed.prototype;

    _proto.destroy = function destroy() {
      _services.Services.resourcesForDoc(this.iframe).removeForChildWindow(this.win);

      (0, _service.disposeServicesForEmbed)(this.win);
    }
    /**
     * @return {time}
     */
    ;

    _proto.getStartTime = function getStartTime() {
      return this.startTime_;
    }
    /**
     * Returns the base URL for the embedded document.
     * @return {string}
     */
    ;

    _proto.getUrl = function getUrl() {
      return this.spec.url;
    }
    /** @return {!Signals} */
    ;

    _proto.signals = function signals() {
      return this.signals_;
    }
    /**
     * Returns a promise that will resolve when the embed document is ready.
     * Notice that this signal coincides with the embed's `render-start`.
     * @return {!Promise}
     */
    ;

    _proto.whenReady = function whenReady() {
      return this.signals_.whenSignal(_commonSignals.CommonSignals.RENDER_START);
    }
    /**
     * Returns a promise that will resolve when the child window's `onload` event
     * has been emitted. In friendly iframes this typically only includes font
     * loading.
     * @return {!Promise}
     */
    ;

    _proto.whenWindowLoaded = function whenWindowLoaded() {
      return this.winLoadedPromise_;
    }
    /**
     * Returns a promise that will resolve when the initial load  of the embed's
     * content has been completed.
     * @return {!Promise}
     */
    ;

    _proto.whenIniLoaded = function whenIniLoaded() {
      return this.signals_.whenSignal(_commonSignals.CommonSignals.INI_LOAD);
    }
    /**
     * @private
     * @restricted
     */
    ;

    _proto.startRender_ = function startRender_() {
      var _this = this;

      if (this.host) {
        this.host.renderStarted();
      } else {
        this.signals_.signal(_commonSignals.CommonSignals.RENDER_START);
      }

      (0, _style.setStyle)(this.iframe, 'visibility', '');

      if (this.win.document && this.win.document.body) {
        this.win.document.documentElement.classList.add('i-amphtml-fie');
        (0, _style.setStyles)((0, _log.dev)().assertElement(this.win.document.body), {
          opacity: 1,
          visibility: 'visible',
          animation: 'none'
        });
      } // Initial load signal signal.


      var rect;

      if (this.host) {
        rect = this.host.getLayoutBox();
      } else {
        rect = (0, _layoutRect.layoutRectLtwh)(0, 0, this.win.
        /*OK*/
        innerWidth, this.win.
        /*OK*/
        innerHeight);
      }

      Promise.all([this.whenReady(), whenContentIniLoad(this.iframe, this.win, rect)]).then(function () {
        _this.signals_.signal(_commonSignals.CommonSignals.INI_LOAD);
      });
    }
    /**
     * Whether the embed is currently visible. The interpretation of visibility
     * is up to the embed parent. However, most of typical cases would rely on
     * whether the embed is currently in the viewport.
     * @return {boolean}
     * TODO(dvoytenko): Re-evaluate and probably drop once layers are ready.
     */
    ;

    _proto.isVisible = function isVisible() {
      return this.visible_;
    }
    /**
     * See `isVisible` for more info.
     * @param {function(boolean)} handler
     * @return {!UnlistenDef}
     */
    ;

    _proto.onVisibilityChanged = function onVisibilityChanged(handler) {
      return this.visibilityObservable_.add(handler);
    }
    /**
     * @param {boolean} visible
     * @private
     * @restricted
     */
    ;

    _proto.setVisible_ = function setVisible_(visible) {
      if (this.visible_ != visible) {
        this.visible_ = visible;
        this.visibilityObservable_.fire(this.visible_);
      }
    }
    /**
     * @return {!HTMLBodyElement}
     * @visibleForTesting
     */
    ;

    _proto.getBodyElement = function getBodyElement() {
      return (
        /** @type {!HTMLBodyElement} */
        (this.iframe.contentDocument || this.iframe.contentWindow.document).body
      );
    }
    /**
     * @return {!./service/resources-impl.Resources}
     * @private
     */
    ;

    _proto.getResources_ = function getResources_() {
      return _services.Services.resourcesForDoc(this.iframe);
    }
    /**
     * Runs a measure/mutate cycle ensuring that the iframe change is propagated
     * to the resource manager.
     * @param {{measure: (function()|undefined), mutate: function()}} task
     * @return {!Promise}
     * @private
     */
    ;

    _proto.measureMutate_ = function measureMutate_(task) {
      return this.getResources_().measureMutateElement(this.iframe, task.measure || null, task.mutate);
    }
    /**
     * @return {!Promise}
     */
    ;

    _proto.enterFullOverlayMode = function enterFullOverlayMode() {
      var _this2 = this;

      var ampAdParent = (0, _log.dev)().assertElement(this.iframe.parentNode); // Security assertion. Otherwise any 3p frame could request lighbox mode.

      (0, _log.userAssert)(ampAdParent.tagName.toLowerCase() == 'amp-ad', 'Only <amp-ad> is allowed to enter lightbox mode.');
      var bodyStyle;
      return this.measureMutate_({
        measure: function measure() {
          var rect = _this2.host ? _this2.host.getLayoutBox() : _this2.iframe.
          /*OK*/
          getBoundingClientRect(); // Offset by scroll top as iframe will be position: fixed.

          var dy = -_services.Services.viewportForDoc(_this2.iframe).getScrollTop();

          var _moveLayoutRect = (0, _layoutRect.moveLayoutRect)(rect,
          /* dx */
          0, dy),
              top = _moveLayoutRect.top,
              left = _moveLayoutRect.left,
              width = _moveLayoutRect.width,
              height = _moveLayoutRect.height; // Offset body by header height to prevent visual jump.


          bodyStyle = {
            top: (0, _style.px)(top),
            left: (0, _style.px)(left),
            width: (0, _style.px)(width),
            height: (0, _style.px)(height)
          };
        },
        mutate: function mutate() {
          // !important to prevent abuse e.g. box @ ltwh = 0, 0, 0, 0
          (0, _style.setImportantStyles)(_this2.iframe, {
            'position': 'fixed',
            'left': 0,
            'right': 0,
            'bottom': 0,
            'width': '100vw',
            'top': 0,
            'height': '100vh'
          }); // We need to override runtime-level !important rules

          (0, _style.setImportantStyles)(_this2.getBodyElement(), {
            'background': 'transparent',
            'position': 'absolute',
            'bottom': 'auto',
            'right': 'auto',
            // Read during vsync measure phase.
            'top': bodyStyle.top,
            'left': bodyStyle.left,
            'width': bodyStyle.width,
            'height': bodyStyle.height
          });
        }
      });
    }
    /**
     * @return {!Promise}
     */
    ;

    _proto.leaveFullOverlayMode = function leaveFullOverlayMode() {
      var _this3 = this;

      return this.measureMutate_({
        mutate: function mutate() {
          (0, _style.resetStyles)(_this3.iframe, ['position', 'left', 'right', 'top', 'bottom', 'width', 'height']); // we're not resetting background here as we need to set it to
          // transparent permanently.

          (0, _style.resetStyles)(_this3.getBodyElement(), ['position', 'top', 'left', 'width', 'height', 'bottom', 'right']);
        }
      });
    };

    return FriendlyIframeEmbed;
  }();
  /**
   * Returns the promise that will be resolved when all content elements
   * have been loaded in the initially visible set.
   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
   * @param {!Window} hostWin
   * @param {!./layout-rect.LayoutRectDef} rect
   * @return {!Promise}
   */


  exports.FriendlyIframeEmbed = FriendlyIframeEmbed;

  function whenContentIniLoad(elementOrAmpDoc, hostWin, rect) {
    return _services.Services.resourcesForDoc(elementOrAmpDoc).getResourcesInRect(hostWin, rect).then(function (resources) {
      var promises = [];
      resources.forEach(function (r) {
        if (!EXCLUDE_INI_LOAD.includes(r.element.tagName)) {
          promises.push(r.loadedOnce());
        }
      });
      return Promise.all(promises);
    });
  }
  /**
   * @param {!Element} element
   * @return {boolean}
   */


  function isInFie(element) {
    return element.classList.contains('i-amphtml-fie') || !!(0, _dom.closestAncestorElementBySelector)(element, '.i-amphtml-fie');
  }

  },{"./common-signals":16,"./document-ready":24,"./dom":26,"./event-helper":31,"./layout-rect":48,"./log":51,"./observable":54,"./service":71,"./services":112,"./style":118,"./types":121,"./utils/signals":136}],40:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.install = install;

  var _layoutRect = require("./layout-rect");

  var _dom = require("./dom");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @fileoverview
   * IE 10 throws "Unspecified error" when calling getBoundingClientRect() on a
   * disconnected node.
   * @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/106812/
   */
  var nativeClientRect = Element.prototype.getBoundingClientRect;
  /**
   * Polyfill for Node.getBoundingClientRect API.
   * @this {!Element}
   * @return {!ClientRect|!LayoutRectDef}
   */

  function getBoundingClientRect() {
    if ((0, _dom.isConnectedNode)(this)) {
      return nativeClientRect.call(this);
    }

    return (0, _layoutRect.layoutRectLtwh)(0, 0, 0, 0);
  }
  /**
   * Determines if this polyfill should be installed.
   * @param {!Window} win
   * @return {boolean}
   */


  function shouldInstall(win) {
    try {
      var div = win.document.createElement('div');
      var rect = div.
      /*OK*/
      getBoundingClientRect();
      return rect.top !== 0;
    } catch (e) {
      // IE 10 or less
      return true;
    }
  }
  /**
   * Sets the getBoundingClientRect polyfill if using IE 10 or an
   * earlier version.
   * @param {!Window} win
   */


  function install(win) {
    if (shouldInstall(win)) {
      win.Object.defineProperty(win.Element.prototype, 'getBoundingClientRect', {
        value: getBoundingClientRect
      });
    }
  }

  },{"./dom":26,"./layout-rect":48}],41:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.getState = getState;

  /**
   * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Gets state from History.
   * But IE11 throws if there is no state.
   *
   * @param {!History} history
   * @return {*}
   */
  function getState(history) {
    try {
      return history.state;
    } catch (e) {
      return null;
    }
  }

  },{}],42:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.listenFor = listenFor;
  exports.listenForOncePromise = listenForOncePromise;
  exports.postMessage = postMessage;
  exports.postMessageToWindows = postMessageToWindows;
  exports.parseIfNeeded = parseIfNeeded;
  exports.looksLikeTrackingIframe = looksLikeTrackingIframe;
  exports.isAdLike = isAdLike;
  exports.disableScrollingOnIframe = disableScrollingOnIframe;
  exports.canInspectWindow = canInspectWindow;
  exports.SubscriptionApi = void 0;

  var _dom = require("./dom");

  var _pFrameMessaging = require("./3p-frame-messaging");

  var _log = require("./log");

  var _object = require("./utils/object");

  var _eventHelper = require("./event-helper");

  var _url = require("./url");

  var _array = require("./utils/array");

  var _style = require("./style");

  var _json = require("./json");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Sentinel used to force unlistening after a iframe is detached.
   * @type {string}
   */
  var UNLISTEN_SENTINEL = 'unlisten';
  /**
   * @typedef {{
   *   frame: !Element,
   *   events: !Object<string, !Array<function(!JsonObject)>>
   * }}
   */

  var WindowEventsDef;
  /**
   * Returns a mapping from a URL's origin to an array of windows and their
   * listenFor listeners.
   * @param {?Window} parentWin the window that created the iframe
   * @param {boolean=} opt_create create the mapping if it does not exist
   * @return {?Object<string, !Array<!WindowEventsDef>>}
   */

  function getListenFors(parentWin, opt_create) {
    var listeningFors = parentWin.listeningFors;

    if (!listeningFors && opt_create) {
      listeningFors = parentWin.listeningFors = Object.create(null);
    }

    return listeningFors || null;
  }
  /**
   * Returns an array of WindowEventsDef that have had any listenFor listeners
   * registered for this sentinel.
   * @param {?Window} parentWin the window that created the iframe
   * @param {string} sentinel the sentinel of the message
   * @param {boolean=} opt_create create the array if it does not exist
   * @return {?Array<!WindowEventsDef>}
   */


  function getListenForSentinel(parentWin, sentinel, opt_create) {
    var listeningFors = getListenFors(parentWin, opt_create);

    if (!listeningFors) {
      return listeningFors;
    }

    var listenSentinel = listeningFors[sentinel];

    if (!listenSentinel && opt_create) {
      listenSentinel = listeningFors[sentinel] = [];
    }

    return listenSentinel || null;
  }
  /**
   * Returns an mapping of event names to listenFor listeners.
   * @param {?Window} parentWin the window that created the iframe
   * @param {!Element} iframe the iframe element who's context will trigger the
   *     event
   * @param {boolean=} opt_is3P set to true if the iframe is 3p.
   * @return {?Object<string, !Array<function(!JsonObject, !Window, string)>>}
   */


  function getOrCreateListenForEvents(parentWin, iframe, opt_is3P) {
    var sentinel = getSentinel_(iframe, opt_is3P);
    var listenSentinel = getListenForSentinel(parentWin, sentinel, true);
    var windowEvents;

    for (var i = 0; i < listenSentinel.length; i++) {
      var we = listenSentinel[i];

      if (we.frame === iframe) {
        windowEvents = we;
        break;
      }
    }

    if (!windowEvents) {
      windowEvents = {
        frame: iframe,
        events: Object.create(null)
      };
      listenSentinel.push(windowEvents);
    }

    return windowEvents.events;
  }
  /**
   * Returns an mapping of event names to listenFor listeners.
   * @param {?Window} parentWin the window that created the iframe
   * @param {string} sentinel the sentinel of the message
   * @param {string} origin the source window's origin
   * @param {?Window} triggerWin the window that triggered the event
   * @return {?Object<string, !Array<function(!JsonObject, !Window, string)>>}
   */


  function getListenForEvents(parentWin, sentinel, origin, triggerWin) {
    var listenSentinel = getListenForSentinel(parentWin, sentinel);

    if (!listenSentinel) {
      return listenSentinel;
    } // Find the entry for the frame.
    // TODO(@nekodo): Add a WeakMap<Window, WindowEventsDef> cache to
    //     speed up this process.


    var windowEvents;

    for (var i = 0; i < listenSentinel.length; i++) {
      var we = listenSentinel[i];
      var contentWindow = we.frame.contentWindow;

      if (!contentWindow) {
        setTimeout(dropListenSentinel, 0, listenSentinel);
      } else if (triggerWin == contentWindow || isDescendantWindow(contentWindow, triggerWin)) {
        // 3p code path, we may accept messages from nested frames.
        windowEvents = we;
        break;
      }
    }

    return windowEvents ? windowEvents.events : null;
  }
  /**
   * Checks whether one window is a descendant of another by climbing
   * the parent chain.
   * @param {?Window} ancestor potential ancestor window
   * @param {?Window} descendant potential descendant window
   * @return {boolean}
   */


  function isDescendantWindow(ancestor, descendant) {
    for (var win = descendant; win && win != win.parent; win = win.parent) {
      if (win == ancestor) {
        return true;
      }
    }

    return false;
  }
  /**
   * Removes any listenFors registed on listenSentinel that do not have
   * a contentWindow (the frame was removed from the DOM tree).
   * @param {!Array<!WindowEventsDef>} listenSentinel
   */


  function dropListenSentinel(listenSentinel) {
    var noopData = (0, _object.dict)({
      'sentinel': UNLISTEN_SENTINEL
    });

    for (var i = listenSentinel.length - 1; i >= 0; i--) {
      var windowEvents = listenSentinel[i];

      if (!windowEvents.frame.contentWindow) {
        listenSentinel.splice(i, 1);
        var events = windowEvents.events;

        for (var name in events) {
          // Splice here, so that each unlisten does not shift the array
          events[name].splice(0, Infinity).forEach(function (event) {
            event(noopData);
          });
        }
      }
    }
  }
  /**
   * Registers the global listenFor event listener if it has yet to be.
   * @param {?Window} parentWin
   */


  function registerGlobalListenerIfNeeded(parentWin) {
    if (parentWin.listeningFors) {
      return;
    }

    var listenForListener = function listenForListener(event) {
      if (!(0, _eventHelper.getData)(event)) {
        return;
      }

      var data = parseIfNeeded((0, _eventHelper.getData)(event));

      if (!data || !data['sentinel']) {
        return;
      }

      var listenForEvents = getListenForEvents(parentWin, data['sentinel'], event.origin, event.source);

      if (!listenForEvents) {
        return;
      }

      var listeners = listenForEvents[data['type']];

      if (!listeners) {
        return;
      } // We slice to avoid issues with adding another listener or unlistening
      // during iteration. We could move to a Doubly Linked List with
      // backtracking, but that's overly complicated.


      listeners = listeners.slice();

      for (var i = 0; i < listeners.length; i++) {
        var listener = listeners[i];
        listener(data, event.source, event.origin);
      }
    };

    parentWin.addEventListener('message', listenForListener);
  }
  /**
   * Allows listening for message from the iframe. Returns an unlisten
   * function to remove the listener.
   *
   * @param {?Element} iframe
   * @param {string} typeOfMessage
   * @param {?function(!JsonObject, !Window, string)} callback Called when a
   *     message of this type arrives for this iframe.
   * @param {boolean=} opt_is3P set to true if the iframe is 3p.
   * @param {boolean=} opt_includingNestedWindows set to true if messages from
   *     nested frames should also be accepted.
   * @param {boolean=} opt_allowOpaqueOrigin set to true if messages from
         opaque origins (origin == null) are allowed.
   * @return {!UnlistenDef}
   */


  function listenFor(iframe, typeOfMessage, callback, opt_is3P, opt_includingNestedWindows, opt_allowOpaqueOrigin) {
    (0, _log.devAssert)(iframe.src, 'only iframes with src supported');
    (0, _log.devAssert)(!iframe.parentNode, 'cannot register events on an attached ' + 'iframe. It will cause hair-pulling bugs like #2942');
    (0, _log.devAssert)(callback);
    var parentWin = iframe.ownerDocument.defaultView;
    registerGlobalListenerIfNeeded(parentWin);
    var listenForEvents = getOrCreateListenForEvents(parentWin, iframe, opt_is3P);
    var iframeOrigin = (0, _url.parseUrlDeprecated)(iframe.src).origin;
    var events = listenForEvents[typeOfMessage] || (listenForEvents[typeOfMessage] = []);
    var unlisten;

    var listener = function listener(data, source, origin) {
      var sentinel = data['sentinel']; // Exclude messages that don't satisfy amp sentinel rules.

      if (sentinel == 'amp') {
        // For `amp` sentinel, nested windows are not allowed
        if (source != iframe.contentWindow) {
          return;
        } // For `amp` sentinel origin must match unless opaque origin is allowed


        var isOpaqueAndAllowed = origin == 'null' && opt_allowOpaqueOrigin;

        if (iframeOrigin != origin && !isOpaqueAndAllowed) {
          return;
        }
      } // Exclude nested frames if necessary.
      // Note that the source was already verified to be either the contentWindow
      // of the iframe itself or a descendant window within it.


      if (!opt_includingNestedWindows && source != iframe.contentWindow) {
        return;
      }

      if (data.sentinel == UNLISTEN_SENTINEL) {
        unlisten();
        return;
      }

      callback(data, source, origin);
    };

    events.push(listener);
    return unlisten = function unlisten() {
      if (listener) {
        var index = events.indexOf(listener);

        if (index > -1) {
          events.splice(index, 1);
        } // Make sure references to the unlisten function do not keep
        // alive too much.


        listener = null;
        events = null;
        callback = null;
      }
    };
  }
  /**
   * Returns a promise that resolves when one of given messages has been observed
   * for the first time. And remove listener for all other messages.
   * @param {!Element} iframe
   * @param {string|!Array<string>} typeOfMessages
   * @param {boolean=} opt_is3P
   * @return {!Promise<!{data: !JsonObject, source: !Window, origin: string}>}
   */


  function listenForOncePromise(iframe, typeOfMessages, opt_is3P) {
    var unlistenList = [];

    if (typeof typeOfMessages == 'string') {
      typeOfMessages = [typeOfMessages];
    }

    return new Promise(function (resolve) {
      for (var i = 0; i < typeOfMessages.length; i++) {
        var message = typeOfMessages[i];
        var unlisten = listenFor(iframe, message, function (data, source, origin) {
          for (var _i = 0; _i < unlistenList.length; _i++) {
            unlistenList[_i]();
          }

          resolve({
            data: data,
            source: source,
            origin: origin
          });
        }, opt_is3P);
        unlistenList.push(unlisten);
      }
    });
  }
  /**
   * Posts a message to the iframe.
   * @param {!Element} iframe The iframe.
   * @param {string} type Type of the message.
   * @param {!JsonObject} object Message payload.
   * @param {string} targetOrigin origin of the target.
   * @param {boolean=} opt_is3P set to true if the iframe is 3p.
   */


  function postMessage(iframe, type, object, targetOrigin, opt_is3P) {
    postMessageToWindows(iframe, [{
      win: iframe.contentWindow,
      origin: targetOrigin
    }], type, object, opt_is3P);
  }
  /**
   * Posts an identical message to multiple target windows with the same
   * sentinel.
   * The message is serialized only once.
   * @param {!Element} iframe The iframe.
   * @param {!Array<{win: !Window, origin: string}>} targets to send the message
   *     to, pairs of window and its origin.
   * @param {string} type Type of the message.
   * @param {!JsonObject} object Message payload.
   * @param {boolean=} opt_is3P set to true if the iframe is 3p.
   */


  function postMessageToWindows(iframe, targets, type, object, opt_is3P) {
    if (!iframe.contentWindow) {
      return;
    }

    object['type'] = type;
    object['sentinel'] = getSentinel_(iframe, opt_is3P);
    var payload = object;

    if (opt_is3P) {
      // Serialize ourselves because that is much faster in Chrome.
      payload = 'amp-' + JSON.stringify(object);
    }

    for (var i = 0; i < targets.length; i++) {
      var target = targets[i];
      target.win.
      /*OK*/
      postMessage(payload, target.origin);
    }
  }
  /**
   * Gets the sentinel string.
   * @param {!Element} iframe The iframe.
   * @param {boolean=} opt_is3P set to true if the iframe is 3p.
   * @return {string} Sentinel string.
   * @private
   */


  function getSentinel_(iframe, opt_is3P) {
    return opt_is3P ? iframe.getAttribute('data-amp-3p-sentinel') : 'amp';
  }
  /**
   * JSON parses event.data if it needs to be
   * @param {*} data
   * @return {?JsonObject} object message
   * @private
   * @visibleForTesting
   */


  function parseIfNeeded(data) {
    if (typeof data == 'string') {
      if (data.charAt(0) == '{') {
        data = (0, _json.tryParseJson)(data, function (e) {
          (0, _log.dev)().warn('IFRAME-HELPER', 'Postmessage could not be parsed. ' + 'Is it in a valid JSON format?', e);
        }) || null;
      } else if ((0, _pFrameMessaging.isAmpMessage)(data)) {
        data = (0, _pFrameMessaging.deserializeMessage)(data);
      } else {
        data = null;
      }
    }

    return (
      /** @type {?JsonObject} */
      data
    );
  }
  /**
   * Manages a postMessage API for an iframe with a subscription message and
   * a way to broadcast messages to all subscribed windows, which
   * in turn must all be descendants of the contentWindow of the iframe.
   */


  var SubscriptionApi =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Element} iframe The iframe.
     * @param {string} type Type of the subscription message.
     * @param {boolean} is3p set to true if the iframe is 3p.
     * @param {function(!JsonObject, !Window, string)} requestCallback Callback
     *     invoked whenever a new window subscribes.
     */
    function SubscriptionApi(iframe, type, is3p, requestCallback) {
      var _this = this;

      /** @private @const {!Element} */
      this.iframe_ = iframe;
      /** @private @const {boolean} */

      this.is3p_ = is3p;
      /** @private @const {!Array<{win: !Window, origin: string}>} */

      this.clientWindows_ = [];
      /** @private @const {!UnlistenDef} */

      this.unlisten_ = listenFor(this.iframe_, type, function (data, source, origin) {
        // This message might be from any window within the iframe, we need
        // to keep track of which windows want to be sent updates.
        if (!_this.clientWindows_.some(function (entry) {
          return entry.win == source;
        })) {
          _this.clientWindows_.push({
            win: source,
            origin: origin
          });
        }

        requestCallback(data, source, origin);
      }, this.is3p_, // For 3P frames we also allow nested frames within them to subscribe..
      this.is3p_
      /* opt_includingNestedWindows */
      );
    }
    /**
     * Sends a message to all subscribed windows.
     * @param {string} type Type of the message.
     * @param {!JsonObject} data Message payload.
     */


    var _proto = SubscriptionApi.prototype;

    _proto.send = function send(type, data) {
      // Remove clients that have been removed from the DOM.
      (0, _array.remove)(this.clientWindows_, function (client) {
        return !client.win.parent;
      });
      postMessageToWindows(this.iframe_, this.clientWindows_, type, data, this.is3p_);
    }
    /**
     * Destroys iframe.
     */
    ;

    _proto.destroy = function destroy() {
      this.unlisten_();
      this.clientWindows_.length = 0;
    };

    return SubscriptionApi;
  }();
  /**
   * @param {!Element} element
   * @return {boolean}
   */


  exports.SubscriptionApi = SubscriptionApi;

  function looksLikeTrackingIframe(element) {
    var box = element.getLayoutBox(); // This heuristic is subject to change.

    if (box.width > 10 || box.height > 10) {
      return false;
    } // Iframe is not tracking iframe if open with user interaction


    return !(0, _dom.closestAncestorElementBySelector)(element, '.i-amphtml-overlay');
  } // Most common ad sizes
  // Array of [width, height] pairs.


  var adSizes = [[300, 250], [320, 50], [300, 50], [320, 100]];
  /**
   * Guess whether this element might be an ad.
   * @param {!Element} element An amp-iframe element.
   * @return {boolean}
   * @visibleForTesting
   */

  function isAdLike(element) {
    var box = element.getLayoutBox();
    var height = box.height,
        width = box.width;

    for (var i = 0; i < adSizes.length; i++) {
      var refWidth = adSizes[i][0];
      var refHeight = adSizes[i][1];

      if (refHeight > height) {
        continue;
      }

      if (refWidth > width) {
        continue;
      } // Fuzzy matching to account for padding.


      if (height - refHeight <= 20 && width - refWidth <= 20) {
        return true;
      }
    }

    return false;
  }
  /**
   * @param {!Element} iframe
   * @private
   */


  function disableScrollingOnIframe(iframe) {
    (0, _dom.addAttributesToElement)(iframe, (0, _object.dict)({
      'scrolling': 'no'
    })); // This shouldn't work, but it does on Firefox.
    // https://stackoverflow.com/a/15494969

    (0, _style.setStyle)(iframe, 'overflow', 'hidden');
    return iframe;
  }
  /**
   * Returns true if win's properties can be accessed and win is defined.
   * This functioned is used to determine if a window is cross-domained
   * from the perspective of the current window.
   * @param {!Window} win
   * @return {boolean}
   * @private
   */


  function canInspectWindow(win) {
    // TODO: this is not reliable.  The compiler assumes that property reads are
    // side-effect free.  The recommended fix is to use goog.reflect.sinkValue
    // but since we're not using the closure library I'm not sure how to do this.
    // See https://github.com/google/closure-compiler/issues/3156
    try {
      // win['test'] could be truthy but not true the compiler shouldn't be able
      // to optimize this check away.
      return !!win.location.href && (win['test'] || true);
    } catch (unusedErr) {
      // eslint-disable-line no-unused-vars
      return false;
    }
  }

  },{"./3p-frame-messaging":7,"./dom":26,"./event-helper":31,"./json":46,"./log":51,"./style":118,"./url":124,"./utils/array":125,"./utils/object":132}],43:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.getTrackImpressionPromise = getTrackImpressionPromise;
  exports.resetTrackImpressionPromiseForTesting = resetTrackImpressionPromiseForTesting;
  exports.maybeTrackImpression = maybeTrackImpression;
  exports.doNotTrackImpression = doNotTrackImpression;
  exports.isTrustedReferrer = isTrustedReferrer;
  exports.shouldAppendExtraParams = shouldAppendExtraParams;
  exports.getExtraParamsUrl = getExtraParamsUrl;

  var _promise = require("./utils/promise");

  var _services = require("./services");

  var _url = require("./url");

  var _log = require("./log");

  var _mode = require("./mode");

  var _experiments = require("./experiments");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TIMEOUT_VALUE = 8000;
  var trackImpressionPromise = null;
  var DEFAULT_APPEND_URL_PARAM = ['gclid', 'gclsrc'];
  /**
   * These domains are trusted with more sensitive viewer operations such as
   * sending impression requests. If you believe your domain should be here,
   * file the issue on GitHub to discuss. The process will be similar
   * (but somewhat more stringent) to the one described in the [3p/README.md](
   * https://github.com/ampproject/amphtml/blob/master/3p/README.md)
   *
   * @export {!Array<!RegExp>}
   */

  var TRUSTED_REFERRER_HOSTS = [
  /**
   * Twitter's link wrapper domains:
   * - t.co
   */
  /^t.co$/];
  /**
   * A function to get the trackImpressionPromise;
   * @return {!Promise}
   */

  function getTrackImpressionPromise() {
    return (0, _log.userAssert)(trackImpressionPromise, 'E#19457 trackImpressionPromise');
  }
  /**
   * Function that reset the trackImpressionPromise only for testing
   * @visibleForTesting
   */


  function resetTrackImpressionPromiseForTesting() {
    trackImpressionPromise = null;
  }
  /**
   * Emit a HTTP request to a destination defined on the incoming URL.
   * Launched for trusted viewer. Otherwise guarded by experiment.
   * @param {!Window} win
   */


  function maybeTrackImpression(win) {
    var deferred = new _promise.Deferred();
    var promise = deferred.promise,
        resolveImpression = deferred.resolve;
    trackImpressionPromise = _services.Services.timerFor(win).timeoutPromise(TIMEOUT_VALUE, promise, 'TrackImpressionPromise timeout').catch(function (error) {
      (0, _log.dev)().warn('IMPRESSION', error);
    });

    var viewer = _services.Services.viewerForDoc(win.document.documentElement);

    var isTrustedViewerPromise = viewer.isTrustedViewer();
    var isTrustedReferrerPromise = viewer.getReferrerUrl().then(function (referrer) {
      return isTrustedReferrer(referrer);
    });
    Promise.all([isTrustedViewerPromise, isTrustedReferrerPromise]).then(function (results) {
      var isTrustedViewer = results[0];
      var isTrustedReferrer = results[1]; // Enable the feature in the case of trusted viewer,
      // or trusted referrer
      // or with experiment turned on

      if (!isTrustedViewer && !isTrustedReferrer && !(0, _experiments.isExperimentOn)(win, 'alp')) {
        resolveImpression();
        return;
      }

      var replaceUrlPromise = handleReplaceUrl(win);
      var clickUrlPromise = handleClickUrl(win);
      Promise.all([replaceUrlPromise, clickUrlPromise]).then(function () {
        resolveImpression();
      }, function () {});
    });
  }
  /**
   * Signal that impression tracking is not relevant in this environment.
   */


  function doNotTrackImpression() {
    trackImpressionPromise = Promise.resolve();
  }
  /**
   * Handle the getReplaceUrl and return a promise when url is replaced Only
   * handles replaceUrl when viewer indicates AMP to do so. Viewer should indicate
   * by setting the legacy replaceUrl init param and add `replaceUrl` to its
   * capability param. Future plan is to change the type of legacy init replaceUrl
   * param from url string to boolean value. Please NOTE replaceUrl and adLocation
   * will never arrive at same time, so there is no race condition on the order of
   * handling url replacement.
   * @param {!Window} win
   * @return {!Promise}
   */


  function handleReplaceUrl(win) {
    var viewer = _services.Services.viewerForDoc(win.document.documentElement); // ReplaceUrl substitution doesn't have to wait until the document is visible


    if (!viewer.getParam('replaceUrl')) {
      // The init replaceUrl param serve as a signal on whether replaceUrl is
      // required for this doc.
      return Promise.resolve();
    }

    if (!viewer.hasCapability('replaceUrl')) {
      // If Viewer is not capability of providing async replaceUrl, use the legacy
      // init replaceUrl param.
      viewer.replaceUrl(viewer.getParam('replaceUrl') || null);
      return Promise.resolve();
    } // request async replaceUrl is viewer support getReplaceUrl.


    return viewer.sendMessageAwaitResponse('getReplaceUrl',
    /* data */
    undefined).then(function (response) {
      if (!response || typeof response != 'object') {
        (0, _log.dev)().warn('IMPRESSION', 'get invalid replaceUrl response');
        return;
      }

      viewer.replaceUrl(response['replaceUrl'] || null);
    }, function (err) {
      (0, _log.dev)().warn('IMPRESSION', 'Error request replaceUrl from viewer', err);
    });
  }
  /**
   * @param {string} referrer
   * @visibleForTesting
   */


  function isTrustedReferrer(referrer) {
    var url = (0, _url.parseUrlDeprecated)(referrer);

    if (url.protocol != 'https:') {
      return false;
    }

    return TRUSTED_REFERRER_HOSTS.some(function (th) {
      return th.test(url.hostname);
    });
  }
  /**
   * Perform the impression request if it has been provided via
   * the click param in the viewer arguments. Returns a promise.
   * @param {!Window} win
   * @return {!Promise}
   */


  function handleClickUrl(win) {
    var viewer = _services.Services.viewerForDoc(win.document.documentElement);
    /** @const {string|undefined} */


    var clickUrl = viewer.getParam('click');

    if (!clickUrl) {
      return Promise.resolve();
    }

    if (clickUrl.indexOf('https://') != 0) {
      (0, _log.user)().warn('IMPRESSION', 'click fragment param should start with https://. Found ', clickUrl);
      return Promise.resolve();
    }

    if (win.location.hash) {
      // This is typically done using replaceState inside the viewer.
      // If for some reason it failed, get rid of the fragment here to
      // avoid duplicate tracking.
      win.location.hash = '';
    } // TODO(@zhouyx) need test with a real response.


    return viewer.whenFirstVisible().then(function () {
      return invoke(win, (0, _log.dev)().assertString(clickUrl));
    }).then(function (response) {
      applyResponse(win, response);
    }).catch(function (err) {
      (0, _log.user)().warn('IMPRESSION', 'Error on request clickUrl: ', err);
    });
  }
  /**
   * Send the url to ad server and wait for its response
   * @param {!Window} win
   * @param {string} clickUrl
   * @return {!Promise<?JsonObject>}
   */


  function invoke(win, clickUrl) {
    if ((0, _mode.getMode)().localDev && !(0, _mode.getMode)().test) {
      clickUrl = 'http://localhost:8000/impression-proxy?url=' + clickUrl;
    }

    return _services.Services.xhrFor(win).fetchJson(clickUrl, {
      credentials: 'include',
      // All origins are allows to send these requests.
      requireAmpResponseSourceOrigin: false
    }).then(function (res) {
      // Treat 204 no content response specially
      if (res.status == 204) {
        return null;
      }

      return res.json();
    });
  }
  /**
   * parse the response back from ad server
   * Set for analytics purposes
   * @param {!Window} win
   * @param {?JsonObject} response
   */


  function applyResponse(win, response) {
    if (!response) {
      return;
    }

    var adLocation = response['location'];
    var adTracking = response['tracking_url']; // If there is a tracking_url, need to track it
    // Otherwise track the location

    var trackUrl = adTracking || adLocation;

    if (trackUrl && !(0, _url.isProxyOrigin)(trackUrl)) {
      // To request the provided trackUrl for tracking purposes.
      new Image().src = trackUrl;
    } // Replace the location href params with new location params we get (if any).


    if (adLocation) {
      if (!win.history.replaceState) {
        return;
      }

      var viewer = _services.Services.viewerForDoc(win.document.documentElement);

      var currentHref = win.location.href;
      var url = (0, _url.parseUrlDeprecated)(adLocation);
      var params = (0, _url.parseQueryString)(url.search);
      var newHref = (0, _url.addParamsToUrl)(currentHref, params); // TODO: Avoid overwriting the fragment parameter.

      win.history.replaceState(null, '', newHref);
      viewer.maybeUpdateFragmentForCct();
    }
  }
  /**
   * Return a promise that whether appending extra url params to outgoing link is
   * required.
   * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
   * @return {!Promise<boolean>}
   */


  function shouldAppendExtraParams(ampdoc) {
    return ampdoc.whenReady().then(function () {
      return !!ampdoc.getBody().querySelector('amp-analytics[type=googleanalytics]');
    });
  }
  /**
   * Return the extra url params string that should be appended to outgoing link
   * @param {!Window} win
   * @param {!Element} target
   * @return {string}
   */


  function getExtraParamsUrl(win, target) {
    // Get an array with extra params that needs to append.
    var url = (0, _url.parseUrlDeprecated)(win.location.href);
    var params = (0, _url.parseQueryString)(url.search);
    var appendParams = [];

    for (var i = 0; i < DEFAULT_APPEND_URL_PARAM.length; i++) {
      var param = DEFAULT_APPEND_URL_PARAM[i];

      if (typeof params[param] !== 'undefined') {
        appendParams.push(param);
      }
    } // Check if the param already exists


    var additionalUrlParams = target.getAttribute('data-amp-addparams');
    var href = target.href;

    if (additionalUrlParams) {
      href = (0, _url.addParamsToUrl)(href, (0, _url.parseQueryString)(additionalUrlParams));
    }

    var loc = (0, _url.parseUrlDeprecated)(href);
    var existParams = (0, _url.parseQueryString)(loc.search);

    for (var _i = appendParams.length - 1; _i >= 0; _i--) {
      var _param = appendParams[_i];

      if (typeof existParams[_param] !== 'undefined') {
        appendParams.splice(_i, 1);
      }
    }

    return getQueryParamUrl(appendParams);
  }
  /**
   * Helper method to convert an query param array to string
   * @param {!Array<string>} params
   * @return {string}
   */


  function getQueryParamUrl(params) {
    var url = '';

    for (var i = 0; i < params.length; i++) {
      var param = params[i];
      url += i == 0 ? param + "=QUERY_PARAM(" + param + ")" : "&" + param + "=QUERY_PARAM(" + param + ")";
    }

    return url;
  }

  },{"./experiments":32,"./log":51,"./mode":53,"./services":112,"./url":124,"./utils/promise":134}],44:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installInputService = installInputService;
  exports.Input = void 0;

  var _observable = require("./observable");

  var _services = require("./services");

  var _log = require("./log");

  var _eventHelper = require("./event-helper");

  var _service = require("./service");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TAG_ = 'Input';
  var MAX_MOUSE_CONFIRM_ATTEMPS_ = 3;
  var CLICK_TIMEOUT_ = 300;
  /**
   * Detects and maintains different types of input such as touch, mouse or
   * keyboard.
   */

  var Input =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function Input(win) {
      /** @const {!Window} */
      this.win = win;
      /** @private {!Function} */

      this.boundOnKeyDown_ = this.onKeyDown_.bind(this);
      /** @private {!Function} */

      this.boundOnMouseDown_ = this.onMouseDown_.bind(this);
      /** @private {?function(!Event)} */

      this.boundOnMouseMove_ = null;
      /** @private {?Function} */

      this.boundMouseCanceled_ = null;
      /** @private {?Function} */

      this.boundMouseConfirmed_ = null;
      /** @private {boolean} */

      this.hasTouch_ = 'ontouchstart' in win || win.navigator['maxTouchPoints'] !== undefined && win.navigator['maxTouchPoints'] > 0 || win['DocumentTouch'] !== undefined;
      (0, _log.dev)().fine(TAG_, 'touch detected:', this.hasTouch_);
      /** @private {boolean} */

      this.keyboardActive_ = false;
      this.win.document.addEventListener('keydown', this.boundOnKeyDown_);
      this.win.document.addEventListener('mousedown', this.boundOnMouseDown_);
      /** @private {boolean} */

      this.hasMouse_ = true;
      /** @private {number} */

      this.mouseConfirmAttemptCount_ = 0;
      /** @private {!Observable<boolean>} */

      this.touchDetectedObservable_ = new _observable.Observable();
      /** @private {!Observable<boolean>} */

      this.mouseDetectedObservable_ = new _observable.Observable();
      /** @private {!Observable<boolean>} */

      this.keyboardStateObservable_ = new _observable.Observable(); // If touch available, temporarily set hasMouse to false and wait for
      // mouse events.

      if (this.hasTouch_) {
        this.hasMouse_ = !this.hasTouch_;
        this.boundOnMouseMove_ =
        /** @private {function(!Event)} */
        this.onMouseMove_.bind(this);
        (0, _eventHelper.listenOnce)(win.document, 'mousemove', this.boundOnMouseMove_);
      }
    }
    /**
     * Whether the touch input has been detected.
     * @return {boolean}
     */


    var _proto = Input.prototype;

    _proto.isTouchDetected = function isTouchDetected() {
      return this.hasTouch_;
    }
    /**
     * Registers an event handle in case if the touch is detected.
     * @param {function(boolean)} handler
     * @param {boolean=} opt_fireImmediately
     * @return {!UnlistenDef}
     */
    ;

    _proto.onTouchDetected = function onTouchDetected(handler, opt_fireImmediately) {
      if (opt_fireImmediately) {
        handler(this.isTouchDetected());
      }

      return this.touchDetectedObservable_.add(handler);
    }
    /**
     * Whether the mouse input has been detected.
     * @return {boolean}
     */
    ;

    _proto.isMouseDetected = function isMouseDetected() {
      return this.hasMouse_;
    }
    /**
     * Registers an event handle in case if the mouse is detected.
     * @param {function(boolean)} handler
     * @param {boolean=} opt_fireImmediately
     * @return {!UnlistenDef}
     */
    ;

    _proto.onMouseDetected = function onMouseDetected(handler, opt_fireImmediately) {
      if (opt_fireImmediately) {
        handler(this.isMouseDetected());
      }

      return this.mouseDetectedObservable_.add(handler);
    }
    /**
     * Whether the keyboard input is currently active.
     * @return {boolean}
     */
    ;

    _proto.isKeyboardActive = function isKeyboardActive() {
      return this.keyboardActive_;
    }
    /**
     * Registers an event handle for changes in the keyboard input.
     * @param {function(boolean)} handler
     * @param {boolean=} opt_fireImmediately
     * @return {!UnlistenDef}
     */
    ;

    _proto.onKeyboardStateChanged = function onKeyboardStateChanged(handler, opt_fireImmediately) {
      if (opt_fireImmediately) {
        handler(this.isKeyboardActive());
      }

      return this.keyboardStateObservable_.add(handler);
    }
    /**
     * @param {!Event} e
     * @private
     */
    ;

    _proto.onKeyDown_ = function onKeyDown_(e) {
      if (this.keyboardActive_) {
        return;
      }

      if (e.defaultPrevented) {
        return;
      } // Ignore inputs.


      var target = e.target;

      if (target && (target.tagName == 'INPUT' || target.tagName == 'TEXTAREA' || target.tagName == 'SELECT' || target.tagName == 'OPTION' || target.hasAttribute('contenteditable'))) {
        return;
      }

      this.keyboardActive_ = true;
      this.keyboardStateObservable_.fire(true);
      (0, _log.dev)().fine(TAG_, 'keyboard activated');
    }
    /** @private */
    ;

    _proto.onMouseDown_ = function onMouseDown_() {
      if (!this.keyboardActive_) {
        return;
      }

      this.keyboardActive_ = false;
      this.keyboardStateObservable_.fire(false);
      (0, _log.dev)().fine(TAG_, 'keyboard deactivated');
    }
    /**
     * @param {!Event} e
     * @return {!Promise|undefined}
     * @private
     */
    ;

    _proto.onMouseMove_ = function onMouseMove_(e) {
      var _this = this;

      // The event explicitly states that it's a result of a touch event.
      if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents) {
        this.mouseCanceled_();
        return undefined;
      }

      if (!this.boundMouseConfirmed_) {
        this.boundMouseConfirmed_ = this.mouseConfirmed_.bind(this);
        this.boundMouseCanceled_ = this.mouseCanceled_.bind(this);
      } // If "click" arrives within a timeout time, this is most likely a
      // touch/mouse emulation. Otherwise, if timeout exceeded, this looks
      // like a legitimate mouse event.


      var unlisten;
      var listenPromise = (0, _eventHelper.listenOncePromise)(this.win.document, 'click',
      /* capture */
      undefined, function (unlistener) {
        unlisten = unlistener;
      });
      return _services.Services.timerFor(this.win).timeoutPromise(CLICK_TIMEOUT_, listenPromise).then(this.boundMouseCanceled_, function () {
        if (unlisten) {
          unlisten();
        }

        _this.boundMouseConfirmed_();
      });
    }
    /** @private */
    ;

    _proto.mouseConfirmed_ = function mouseConfirmed_() {
      this.hasMouse_ = true;
      this.mouseDetectedObservable_.fire(true);
      (0, _log.dev)().fine(TAG_, 'mouse detected');
    }
    /** @private */
    ;

    _proto.mouseCanceled_ = function mouseCanceled_() {
      // Repeat, if attempts allow.
      this.mouseConfirmAttemptCount_++;

      if (this.mouseConfirmAttemptCount_ <= MAX_MOUSE_CONFIRM_ATTEMPS_) {
        (0, _eventHelper.listenOnce)(this.win.document, 'mousemove',
        /** @type {function(!Event)} */
        this.boundOnMouseMove_);
      } else {
        (0, _log.dev)().fine(TAG_, 'mouse detection failed');
      }
    };

    return Input;
  }();
  /**
   * @param {!Window} win
   */


  exports.Input = Input;

  function installInputService(win) {
    (0, _service.registerServiceBuilder)(win, 'input', Input);
  }

  },{"./event-helper":31,"./log":51,"./observable":54,"./service":71,"./services":112}],45:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.getIntersectionChangeEntry = getIntersectionChangeEntry;
  exports.nativeIntersectionObserverSupported = nativeIntersectionObserverSupported;
  exports.intersectionRatio = intersectionRatio;
  exports.getThresholdSlot = getThresholdSlot;
  exports.IntersectionObserverPolyfill = exports.IntersectionObserverApi = exports.DEFAULT_THRESHOLD = exports.DOMRect = void 0;

  var _pass = require("./pass");

  var _services = require("./services");

  var _iframeHelper = require("./iframe-helper");

  var _log = require("./log");

  var _object = require("./utils/object");

  var _types = require("./types");

  var _layoutRect = require("./layout-rect");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * The structure that defines the rectangle used in intersection observers.
   *
   * @typedef {{
   *   top: number,
   *   bottom: number,
   *   left: number,
   *   right: number,
   *   width: number,
   *   height: number,
   *   x: number,
   *   y: number,
   * }}
   */
  var DOMRect;
  exports.DOMRect = DOMRect;
  var DEFAULT_THRESHOLD = [0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1];
  /** @typedef {{
   *    element: !Element,
   *    currentThresholdSlot: number,
   *  }}
   */

  exports.DEFAULT_THRESHOLD = DEFAULT_THRESHOLD;
  var ElementIntersectionStateDef;
  /** @const @private */

  var TAG = 'INTERSECTION-OBSERVER';
  /** @const @private */

  var INIT_TIME = Date.now();
  /**
   * A function to get the element's current IntersectionObserverEntry
   * regardless of the intersetion ratio. Only available when element is not
   * nested in a container iframe.
   * TODO: support opt_iframe if there's valid use cases.
   * @param {!./layout-rect.LayoutRectDef} element element's rect
   * @param {?./layout-rect.LayoutRectDef} owner element's owner rect
   * @param {!./layout-rect.LayoutRectDef} hostViewport hostViewport's rect
   * @return {!IntersectionObserverEntry} A change entry.
   */

  function getIntersectionChangeEntry(element, owner, hostViewport) {
    var intersection = (0, _layoutRect.rectIntersection)(element, owner, hostViewport) || (0, _layoutRect.layoutRectLtwh)(0, 0, 0, 0);
    var ratio = intersectionRatio(intersection, element);
    return calculateChangeEntry(element, hostViewport, intersection, ratio);
  }
  /**
   * @param {!Window} win
   * @return {boolean}
   */


  function nativeIntersectionObserverSupported(win) {
    return 'IntersectionObserver' in win && 'IntersectionObserverEntry' in win && 'intersectionRatio' in win.IntersectionObserverEntry.prototype;
  }
  /**
   * A class to help amp-iframe and amp-ad nested iframe listen to intersection
   * change.
   */


  var IntersectionObserverApi =
  /*#__PURE__*/
  function () {
    /**
     * @param {!AMP.BaseElement} baseElement
     * @param {!Element} iframe
     * @param {boolean=} opt_is3p
     */
    function IntersectionObserverApi(baseElement, iframe, opt_is3p) {
      var _this = this;

      /** @private @const {!AMP.BaseElement} */
      this.baseElement_ = baseElement;
      /** @private {?IntersectionObserverPolyfill} */

      this.intersectionObserver_ = null;
      /** @private {boolean} */

      this.shouldObserve_ = false;
      /** @private {boolean} */

      this.isInViewport_ = false;
      /** @private {?function()} */

      this.unlistenOnDestroy_ = null;
      /** @private {!./service/viewport/viewport-impl.Viewport} */

      this.viewport_ = baseElement.getViewport();
      /** @private {?SubscriptionApi} */

      this.subscriptionApi_ = new _iframeHelper.SubscriptionApi(iframe, 'send-intersections', opt_is3p || false, function () {
        _this.startSendingIntersection_();
      });
      this.intersectionObserver_ = new IntersectionObserverPolyfill(function (entries) {
        // Remove target info from cross origin iframe.
        for (var i = 0; i < entries.length; i++) {
          delete entries[i]['target'];
        }

        _this.subscriptionApi_.send('intersection', (0, _object.dict)({
          'changes': entries
        }));
      }, {
        threshold: DEFAULT_THRESHOLD
      });
      this.intersectionObserver_.tick(this.viewport_.getRect());
      /** @const {function()} */

      this.fire = function () {
        if (!_this.shouldObserve_ || !_this.isInViewport_) {
          return;
        }

        _this.intersectionObserver_.tick(_this.viewport_.getRect());
      };
    }
    /**
     * Function to start listening to viewport event. and observer intersection
     * change on the element.
     */


    var _proto = IntersectionObserverApi.prototype;

    _proto.startSendingIntersection_ = function startSendingIntersection_() {
      var _this2 = this;

      this.shouldObserve_ = true;
      this.intersectionObserver_.observe(this.baseElement_.element);
      this.baseElement_.getVsync().measure(function () {
        _this2.isInViewport_ = _this2.baseElement_.isInViewport();

        _this2.fire();
      });
      var unlistenViewportScroll = this.viewport_.onScroll(this.fire);
      var unlistenViewportChange = this.viewport_.onChanged(this.fire);

      this.unlistenOnDestroy_ = function () {
        unlistenViewportScroll();
        unlistenViewportChange();
      };
    }
    /**
     * Enable to the PositionObserver to listen to viewport events
     * @param {boolean} inViewport
     */
    ;

    _proto.onViewportCallback = function onViewportCallback(inViewport) {
      this.isInViewport_ = inViewport;
    }
    /**
     * Clean all listenrs
     */
    ;

    _proto.destroy = function destroy() {
      this.shouldObserve_ = false;
      this.intersectionObserver_.disconnect();
      this.intersectionObserver_ = null;

      if (this.unlistenOnDestroy_) {
        this.unlistenOnDestroy_();
        this.unlistenOnDestroy_ = null;
      }

      this.subscriptionApi_.destroy();
      this.subscriptionApi_ = null;
    };

    return IntersectionObserverApi;
  }();
  /**
   * The IntersectionObserverPolyfill class lets any element receive its
   * intersection data with the viewport. It acts like native browser supported
   * IntersectionObserver.
   * The IntersectionObserver receives a callback function and an optional option
   * as params. Whenever the element intersection ratio cross a threshold value,
   * IntersectionObserverPolyfill will call the provided callback function with
   * the change entry. Only Works with one document for now.
   * @visibleForTesting
   */


  exports.IntersectionObserverApi = IntersectionObserverApi;

  var IntersectionObserverPolyfill =
  /*#__PURE__*/
  function () {
    /**
     * @param {function(!Array<!IntersectionObserverEntry>)} callback
     * @param {Object=} opt_option
     */
    function IntersectionObserverPolyfill(callback, opt_option) {
      /** @private @const {function(!Array<!IntersectionObserverEntry>)} */
      this.callback_ = callback; // The input threshold can be a number or an array of numbers.

      var threshold = opt_option && opt_option.threshold;

      if (threshold) {
        threshold = (0, _types.isArray)(threshold) ? threshold : [threshold];
      } else {
        threshold = [0];
      }

      for (var i = 0; i < threshold.length; i++) {
        (0, _log.devAssert)((0, _types.isFiniteNumber)(threshold[i]), 'Threshold should be a ' + 'finite number or an array of finite numbers');
      }
      /**
       * A list of threshold, sorted in increasing numeric order
       * @private @const {!Array}
       */


      this.threshold_ = threshold.sort();
      (0, _log.devAssert)(this.threshold_[0] >= 0 && this.threshold_[this.threshold_.length - 1] <= 1, 'Threshold should be in the range from "[0, 1]"');
      /** @private {?./layout-rect.LayoutRectDef} */

      this.lastViewportRect_ = null;
      /** @private {./layout-rect.LayoutRectDef|undefined} */

      this.lastIframeRect_ = undefined;
      /**
       * Store a list of observed elements and their current threshold slot which
       * their intersection ratio fills, range from [0, this.threshold_.length]
       * @private {Array<!ElementIntersectionStateDef>}
       */

      this.observeEntries_ = [];
      /**
       * Mutation observer to fire off on visibility changes
       * @private {?MutationObserver}
       */

      this.mutationObserver_ = null;
      /** @private {Pass} */

      this.mutationPass_ = null;
    }
    /**
     * Function to unobserve all elements.
     * and clean up the polyfill.
     */


    var _proto2 = IntersectionObserverPolyfill.prototype;

    _proto2.disconnect = function disconnect() {
      this.observeEntries_.length = 0;
      this.disconnectMutationObserver_();
    }
    /**
     * Provide a way to observe the intersection change for a specific element
     * Please note IntersectionObserverPolyfill only support AMP element now
     * TODO: Support non AMP element
     * @param {!Element} element
     */
    ;

    _proto2.observe = function observe(element) {
      // Check the element is an AMP element.
      (0, _log.devAssert)(element.getLayoutBox); // If the element already exists in current observeEntries, do nothing

      for (var i = 0; i < this.observeEntries_.length; i++) {
        if (this.observeEntries_[i].element === element) {
          (0, _log.dev)().warn(TAG, 'should observe same element once');
          return;
        }
      }

      var newState = {
        element: element,
        currentThresholdSlot: 0
      }; // Get the new observed element's first changeEntry based on last viewport

      if (this.lastViewportRect_) {
        var change = this.getValidIntersectionChangeEntry_(newState, this.lastViewportRect_, this.lastIframeRect_);

        if (change) {
          this.callback_([change]);
        }
      } // Add a mutation observer to tick ourself
      // TODO (@torch2424): Allow this to observe elements,
      // from multiple documents.


      var ampdoc = _services.Services.ampdoc(element);

      if (ampdoc.win.MutationObserver && !this.mutationObserver_) {
        this.mutationPass_ = new _pass.Pass(ampdoc.win, this.handleMutationObserverPass_.bind(this, element));
        this.mutationObserver_ = new ampdoc.win.MutationObserver(this.handleMutationObserverNotification_.bind(this));
        this.mutationObserver_.observe(ampdoc.win.document, {
          attributes: true,
          attributeFilter: ['hidden'],
          subtree: true
        });
      } // push new observed element


      this.observeEntries_.push(newState);
    }
    /**
     * Provide a way to unobserve intersection change for a specified element
     * @param {!Element} element
     */
    ;

    _proto2.unobserve = function unobserve(element) {
      // find the unobserved element in observeEntries
      for (var i = 0; i < this.observeEntries_.length; i++) {
        if (this.observeEntries_[i].element === element) {
          this.observeEntries_.splice(i, 1);

          if (this.observeEntries_.length <= 0) {
            this.disconnectMutationObserver_();
          }

          return;
        }
      }

      (0, _log.dev)().warn(TAG, 'unobserve non-observed element');
    }
    /**
     * Tick function that update the DOMRect of the root of observed elements.
     * Caller needs to make sure to pass in the correct container.
     * Note: the opt_iframe param is the iframe position relative to the host doc,
     * The iframe must be a non-scrollable iframe.
     * @param {!./layout-rect.LayoutRectDef} hostViewport
     * @param {./layout-rect.LayoutRectDef=} opt_iframe
     */
    ;

    _proto2.tick = function tick(hostViewport, opt_iframe) {
      if (opt_iframe) {
        // If element inside an iframe. Adjust origin to the iframe.left/top.
        hostViewport = (0, _layoutRect.moveLayoutRect)(hostViewport, -opt_iframe.left, -opt_iframe.top);
        opt_iframe = (0, _layoutRect.moveLayoutRect)(opt_iframe, -opt_iframe.left, -opt_iframe.top);
      }

      this.lastViewportRect_ = hostViewport;
      this.lastIframeRect_ = opt_iframe;
      var changes = [];

      for (var i = 0; i < this.observeEntries_.length; i++) {
        var change = this.getValidIntersectionChangeEntry_(this.observeEntries_[i], hostViewport, opt_iframe);

        if (change) {
          changes.push(change);
        }
      }

      if (changes.length) {
        this.callback_(changes);
      }
    }
    /**
     * Return a change entry for one element that should be compatible with
     * IntersectionObserverEntry if it's valid with current config.
     * When the new intersection ratio doesn't cross one of a threshold value,
     * the function will return null.
     *
     * @param {!ElementIntersectionStateDef} state
     * @param {!./layout-rect.LayoutRectDef} hostViewport hostViewport's rect
     * @param {./layout-rect.LayoutRectDef=} opt_iframe iframe container rect
     *    If opt_iframe is provided, all LayoutRect has position relative to
     *    the iframe. If opt_iframe is not provided,
     *    all LayoutRect has position relative to the host document.
     * @return {?IntersectionObserverEntry} A valid change entry or null if ratio
     * @private
     */
    ;

    _proto2.getValidIntersectionChangeEntry_ = function getValidIntersectionChangeEntry_(state, hostViewport, opt_iframe) {
      var element = state.element;
      var elementRect = element.getLayoutBox();
      var owner = element.getOwner();
      var ownerRect = owner && owner.getLayoutBox(); // calculate intersectionRect. that the element intersects with hostViewport
      // and intersects with owner element and container iframe if exists.

      var intersectionRect = (0, _layoutRect.rectIntersection)(elementRect, ownerRect, hostViewport, opt_iframe) || (0, _layoutRect.layoutRectLtwh)(0, 0, 0, 0); // calculate ratio, call callback based on new ratio value.

      var ratio = intersectionRatio(intersectionRect, elementRect);
      var newThresholdSlot = getThresholdSlot(this.threshold_, ratio);

      if (newThresholdSlot == state.currentThresholdSlot) {
        return null;
      }

      state.currentThresholdSlot = newThresholdSlot; // To get same behavior as native IntersectionObserver set hostViewport null
      // if inside an iframe

      var changeEntry = calculateChangeEntry(elementRect, opt_iframe ? null : hostViewport, intersectionRect, ratio);
      changeEntry.target = element;
      return changeEntry;
    }
    /**
     * Handle Mutation Oberserver events
     * @private
     */
    ;

    _proto2.handleMutationObserverNotification_ = function handleMutationObserverNotification_() {
      if (this.mutationPass_.isPending()) {
        return;
      } // Wait one animation frame so that other mutations may arrive.


      this.mutationPass_.schedule(16);
    }
    /**
     * Handle Mutation Observer Pass
     * This performas the tick, and is wrapped in a paas
     * To handle throttling of the observer
     * @param {!Element} element
     * @private
     */
    ;

    _proto2.handleMutationObserverPass_ = function handleMutationObserverPass_(element) {
      var _this3 = this;

      var viewport = _services.Services.viewportForDoc(element);

      var resources = _services.Services.resourcesForDoc(element);

      resources.onNextPass(function () {
        _this3.tick(viewport.getRect());
      });
    }
    /**
     * Clean up the mutation observer
     * @private
     */
    ;

    _proto2.disconnectMutationObserver_ = function disconnectMutationObserver_() {
      if (this.mutationObserver_) {
        this.mutationObserver_.disconnect();
      }

      this.mutationObserver_ = null;

      if (this.mutationPass_) {
        this.mutationPass_.cancel();
      }

      this.mutationPass_ = null;
    };

    return IntersectionObserverPolyfill;
  }();
  /**
   * Returns the ratio of the smaller box's area to the larger box's area.
   * @param {!./layout-rect.LayoutRectDef} smaller
   * @param {!./layout-rect.LayoutRectDef} larger
   * @return {number}
   * @visibleForTesting
   */


  exports.IntersectionObserverPolyfill = IntersectionObserverPolyfill;

  function intersectionRatio(smaller, larger) {
    var smallerBoxArea = smaller.width * smaller.height;
    var largerBoxArea = larger.width * larger.height; // Check for a divide by zero

    return largerBoxArea === 0 ? 0 : smallerBoxArea / largerBoxArea;
  }
  /**
   * Returns the slot number that the current ratio fills in.
   * @param {!Array} sortedThreshold valid sorted IoB threshold
   * @param {number} ratio Range from [0, 1]
   * @return {number} Range from [0, threshold.length]
   * @visibleForTesting
   */


  function getThresholdSlot(sortedThreshold, ratio) {
    var startIdx = 0;
    var endIdx = sortedThreshold.length; // 0 is a special case that does not fit into [small, large) range

    if (ratio == 0) {
      return 0;
    }

    var mid = (startIdx + endIdx) / 2 | 0;

    while (startIdx < mid) {
      var midValue = sortedThreshold[mid]; // In the range of [small, large)

      if (ratio < midValue) {
        endIdx = mid;
      } else {
        startIdx = mid;
      }

      mid = (startIdx + endIdx) / 2 | 0;
    }

    return endIdx;
  }
  /**
   * Helper function to calculate the IntersectionObserver change entry.
   * @param {!./layout-rect.LayoutRectDef} element element's rect
   * @param {?./layout-rect.LayoutRectDef} hostViewport hostViewport's rect
   * @param {!./layout-rect.LayoutRectDef} intersection
   * @param {number} ratio
   * @return {!IntersectionObserverEntry}}
   */


  function calculateChangeEntry(element, hostViewport, intersection, ratio) {
    // If element not in an iframe.
    // adjust all LayoutRect to hostViewport Origin.
    var boundingClientRect = element;
    var rootBounds = hostViewport; // If no hostViewport is provided, element is inside an non-scrollable iframe.
    // Every Layoutrect has already adjust their origin according to iframe
    // rect origin. LayoutRect position is relative to iframe origin,
    // thus relative to iframe's viewport origin because the viewport is at the
    // iframe origin. No need to adjust position here.

    if (hostViewport) {
      // If element not in an iframe.
      // adjust all LayoutRect to hostViewport Origin.
      rootBounds =
      /** @type {!./layout-rect.LayoutRectDef} */
      rootBounds;
      intersection = (0, _layoutRect.moveLayoutRect)(intersection, -hostViewport.left, -hostViewport.top); // The element is relative to (0, 0), while the viewport moves. So, we must
      // adjust.

      boundingClientRect = (0, _layoutRect.moveLayoutRect)(boundingClientRect, -hostViewport.left, -hostViewport.top); // Now, move the viewport to (0, 0)

      rootBounds = (0, _layoutRect.moveLayoutRect)(rootBounds, -hostViewport.left, -hostViewport.top);
    }

    return (
      /** @type {!IntersectionObserverEntry} */
      {
        time: typeof performance !== 'undefined' && performance.now ? performance.now() : Date.now() - INIT_TIME,
        rootBounds: rootBounds,
        boundingClientRect: boundingClientRect,
        intersectionRect: intersection,
        intersectionRatio: ratio
      }
    );
  }

  },{"./iframe-helper":42,"./layout-rect":48,"./log":51,"./pass":55,"./services":112,"./types":121,"./utils/object":132}],46:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.recreateNonProtoObject = recreateNonProtoObject;
  exports.getValueForExpr = getValueForExpr;
  exports.parseJson = parseJson;
  exports.tryParseJson = tryParseJson;
  exports.getChildJsonConfig = getChildJsonConfig;
  exports.deepEquals = deepEquals;

  var _dom = require("./dom");

  var _types = require("./types");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @fileoverview This module declares JSON types as defined in the
   * {@link http://json.org/}.
   */
  // NOTE Type are changed to {*} because of
  // https://github.com/google/closure-compiler/issues/1999

  /**
   * JSON scalar. It's either string, number or boolean.
   * @typedef {*} should be string|number|boolean
   */
  var JSONScalarDef;
  /**
   * JSON object. It's a map with string keys and JSON values.
   * @typedef {*} should be !Object<string, ?JSONValueDef>
   */

  var JSONObjectDef;
  /**
   * JSON array. It's an array with JSON values.
   * @typedef {*} should be !Array<?JSONValueDef>
   */

  var JSONArrayDef;
  /**
   * JSON value. It's either a scalar, an object or an array.
   * @typedef {*} should be !JSONScalarDef|!JSONObjectDef|!JSONArrayDef
   */

  var JSONValueDef;
  /**
   * Recreates objects with prototype-less copies.
   * @param {!JsonObject} obj
   * @return {!JsonObject}
   */

  function recreateNonProtoObject(obj) {
    var copy = Object.create(null);

    for (var k in obj) {
      if (!hasOwnProperty(obj, k)) {
        continue;
      }

      var v = obj[k];
      copy[k] = (0, _types.isObject)(v) ? recreateNonProtoObject(v) : v;
    }

    return (
      /** @type {!JsonObject} */
      copy
    );
  }
  /**
   * Returns a value from an object for a field-based expression. The expression
   * is a simple nested dot-notation of fields, such as `field1.field2`. If any
   * field in a chain does not exist or is not an object or array, the returned
   * value will be `undefined`.
   *
   * @param {!JsonObject} obj
   * @param {string} expr
   * @return {*}
   */


  function getValueForExpr(obj, expr) {
    // The `.` indicates "the object itself".
    if (expr == '.') {
      return obj;
    } // Otherwise, navigate via properties.


    var parts = expr.split('.');
    var value = obj;

    for (var i = 0; i < parts.length; i++) {
      var part = parts[i];

      if (part && value && value[part] !== undefined && hasOwnProperty(value, part)) {
        value = value[part];
        continue;
      }

      value = undefined;
      break;
    }

    return value;
  }
  /**
   * Simple wrapper around JSON.parse that casts the return value
   * to JsonObject.
   * Create a new wrapper if an array return value is desired.
   * @param {*} json JSON string to parse
   * @return {?JsonObject} May be extend to parse arrays.
   */


  function parseJson(json) {
    return (
      /** @type {?JsonObject} */
      JSON.parse(
      /** @type {string} */
      json)
    );
  }
  /**
   * Parses the given `json` string without throwing an exception if not valid.
   * Returns `undefined` if parsing fails.
   * Returns the `Object` corresponding to the JSON string when parsing succeeds.
   * @param {*} json JSON string to parse
   * @param {function(!Error)=} opt_onFailed Optional function that will be called
   *     with the error if parsing fails.
   * @return {?JsonObject|undefined} May be extend to parse arrays.
   */


  function tryParseJson(json, opt_onFailed) {
    try {
      return parseJson(json);
    } catch (e) {
      if (opt_onFailed) {
        opt_onFailed(e);
      }

      return undefined;
    }
  }
  /**
   * Helper method to get the json config from an element <script> tag
   * @param {!Element} element
   * @return {?JsonObject}
   * @throws {!Error} If element does not have exactly one <script> child
   * with type="application/json", or if the <script> contents are not valid JSON.
   */


  function getChildJsonConfig(element) {
    var scripts = (0, _dom.childElementsByTag)(element, 'script');
    var n = scripts.length;

    if (n !== 1) {
      throw new Error("Found " + scripts.length + " <script> children. Expected 1.");
    }

    var script = scripts[0];

    if (!(0, _dom.isJsonScriptTag)(script)) {
      throw new Error('<script> child must have type="application/json"');
    }

    try {
      return parseJson(script.textContent);
    } catch (unusedError) {
      throw new Error('Failed to parse <script> contents. Is it valid JSON?');
    }
  }
  /**
   * Deeply checks strict equality of items in nested arrays and objects.
   *
   * @param {JSONValueDef} a
   * @param {JSONValueDef} b
   * @param {number} depth The maximum depth. Must be finite.
   * @return {boolean}
   * @throws {Error} If depth argument is not finite.
   */


  function deepEquals(a, b, depth) {
    if (depth === void 0) {
      depth = 5;
    }

    if (!isFinite(depth) || depth < 0) {
      throw new Error('Invalid depth: ' + depth);
    }

    if (a === b) {
      return true;
    }
    /** @type {!Array<{a: JSONValueDef, b: JSONValueDef, depth: number}>} */


    var queue = [{
      a: a,
      b: b,
      depth: depth
    }];

    while (queue.length > 0) {
      var _queue$shift = queue.shift(),
          _a = _queue$shift.a,
          _b = _queue$shift.b,
          _depth = _queue$shift.depth; // Only check deep equality if depth > 0.


      if (_depth > 0) {
        if (typeof _a !== typeof _b) {
          return false;
        } else if (Array.isArray(_a) && Array.isArray(_b)) {
          if (_a.length !== _b.length) {
            return false;
          }

          for (var i = 0; i < _a.length; i++) {
            queue.push({
              a: _a[i],
              b: _b[i],
              depth: _depth - 1
            });
          }

          continue;
        } else if (_a && _b && typeof _a === 'object' && typeof _b === 'object') {
          var keysA = Object.keys(
          /** @type {!Object} */
          _a);
          var keysB = Object.keys(
          /** @type {!Object} */
          _b);

          if (keysA.length !== keysB.length) {
            return false;
          }

          for (var _i = 0; _i < keysA.length; _i++) {
            var k = keysA[_i];
            queue.push({
              a: _a[k],
              b: _b[k],
              depth: _depth - 1
            });
          }

          continue;
        }
      } // If we get here, then depth == 0 or (a, b) are primitives.


      if (_a !== _b) {
        return false;
      }
    }

    return true;
  }
  /**
   * @param {*} obj
   * @param {string} key
   * @return {boolean}
   */


  function hasOwnProperty(obj, key) {
    if (obj == null || typeof obj != 'object') {
      return false;
    }

    return Object.prototype.hasOwnProperty.call(
    /** @type {!Object} */
    obj, key);
  }

  },{"./dom":26,"./types":121}],47:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.LayoutDelayMeter = void 0;

  var _services = require("./services");

  var _log = require("./log");

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var LABEL_MAP = {
    0: 'cld',
    2: 'adld'
  };
  /**
   * Measures the time latency between "first time in viewport" and
   * "start to layout" of an element.
   */

  var LayoutDelayMeter =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     * @param {number} priority
     */
    function LayoutDelayMeter(win, priority) {
      /** @private {!Window} */
      this.win_ = win;
      /** @private {?./service/performance-impl.Performance} */

      this.performance_ = _services.Services.performanceForOrNull(win);
      /** @private {?number} */

      this.firstInViewportTime_ = null;
      /** @private {?number} */

      this.firstLayoutTime_ = null;
      /** @private {boolean} */

      this.done_ = false;
      /** @private {?string} */

      this.label_ = LABEL_MAP[priority];
    }
    /**
     *
     */


    var _proto = LayoutDelayMeter.prototype;

    _proto.enterViewport = function enterViewport() {
      if (!this.label_ || this.firstInViewportTime_) {
        return;
      }

      this.firstInViewportTime_ = this.win_.Date.now();
      this.tryMeasureDelay_();
    }
    /**
     * starts layout
     */
    ;

    _proto.startLayout = function startLayout() {
      if (!this.label_ || this.firstLayoutTime_) {
        return;
      }

      this.firstLayoutTime_ = this.win_.Date.now();
      this.tryMeasureDelay_();
    }
    /**
     * Tries to measure delay
     */
    ;

    _proto.tryMeasureDelay_ = function tryMeasureDelay_() {
      if (!this.performance_ || !this.performance_.isPerformanceTrackingOn()) {
        return;
      }

      if (this.done_) {
        // Already measured.
        return;
      }

      if (!this.firstInViewportTime_ || !this.firstLayoutTime_) {
        // Not ready yet.
        return;
      }

      var delay = this.win_.Math.max(this.firstLayoutTime_ - this.firstInViewportTime_, 0);
      this.performance_.tickDelta((0, _log.dev)().assertString(this.label_), delay);
      this.performance_.throttledFlush();
      this.done_ = true;
    };

    return LayoutDelayMeter;
  }();

  exports.LayoutDelayMeter = LayoutDelayMeter;

  },{"./log":51,"./services":112}],48:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.layoutRectLtwh = layoutRectLtwh;
  exports.layoutRectFromDomRect = layoutRectFromDomRect;
  exports.layoutRectsOverlap = layoutRectsOverlap;
  exports.rectIntersection = rectIntersection;
  exports.layoutRectsRelativePos = layoutRectsRelativePos;
  exports.expandLayoutRect = expandLayoutRect;
  exports.moveLayoutRect = moveLayoutRect;
  exports.areMarginsChanged = areMarginsChanged;
  exports.layoutRectSizeEquals = layoutRectSizeEquals;
  exports.layoutRectEquals = layoutRectEquals;
  exports.cloneLayoutMarginsChangeDef = cloneLayoutMarginsChangeDef;
  exports.RelativePositions = exports.LayoutMarginsChangeDef = exports.LayoutMarginsDef = exports.LayoutRectDef = void 0;

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * The structure that combines position and size for an element. The exact
   * interpretation of position and size depends on the use case.
   *
   * @typedef {{
   *   top: number,
   *   bottom: number,
   *   left: number,
   *   right: number,
   *   width: number,
   *   height: number,
   *   x: number,
   *   y: number
   * }}
   */
  var LayoutRectDef;
  /**
   * The structure that represents the margins of an Element.
   *
   * @typedef {{
   *   top: number,
   *   right: number,
   *   bottom: number,
   *   left: number
   * }}
   */

  exports.LayoutRectDef = LayoutRectDef;
  var LayoutMarginsDef;
  /**
   * The structure that represents a requested change to the margins of an
   * Element. Any new values specified will replace existing ones (rather than
   * being additive).
   *
   * @typedef {{
   *   top: (number|undefined),
   *   right: (number|undefined),
   *   bottom: (number|undefined),
   *   left: (number|undefined)
   * }}
   */

  exports.LayoutMarginsDef = LayoutMarginsDef;
  var LayoutMarginsChangeDef;
  /**
  * RelativePositions
  *
  * Describes the relative position of an element to another (whether the
  * first is inside the second, on top of the second or on the bottom
  * @enum {string}
  */

  exports.LayoutMarginsChangeDef = LayoutMarginsChangeDef;
  var RelativePositions = {
    INSIDE: 'inside',
    TOP: 'top',
    BOTTOM: 'bottom'
  };
  /**
   * Creates a layout rect based on the left, top, width and height parameters
   * in that order.
   * @param {number} left
   * @param {number} top
   * @param {number} width
   * @param {number} height
   * @return {!LayoutRectDef}
   */

  exports.RelativePositions = RelativePositions;

  function layoutRectLtwh(left, top, width, height) {
    return {
      left: left,
      top: top,
      width: width,
      height: height,
      bottom: top + height,
      right: left + width,
      x: left,
      y: top
    };
  }
  /**
   * Creates a layout rect based on the DOMRect, e.g. obtained from calling
   * getBoundingClientRect.
   * @param {!ClientRect} rect
   * @return {!LayoutRectDef}
   */


  function layoutRectFromDomRect(rect) {
    return layoutRectLtwh(Number(rect.left), Number(rect.top), Number(rect.width), Number(rect.height));
  }
  /**
   * Returns true if the specified two rects overlap by a single pixel.
   * @param {!LayoutRectDef} r1
   * @param {!LayoutRectDef} r2
   * @return {boolean}
   */


  function layoutRectsOverlap(r1, r2) {
    return r1.top <= r2.bottom && r2.top <= r1.bottom && r1.left <= r2.right && r2.left <= r1.right;
  }
  /**
   * Returns the intersection between a, b or null if there is none.
   * @param {...?LayoutRectDef|undefined} var_args
   * @return {?LayoutRectDef}
   */


  function rectIntersection(var_args) {
    var x0 = -Infinity;
    var x1 = Infinity;
    var y0 = -Infinity;
    var y1 = Infinity;

    for (var i = 0; i < arguments.length; i++) {
      var current = arguments[i];

      if (!current) {
        continue;
      }

      x0 = Math.max(x0, current.left);
      x1 = Math.min(x1, current.left + current.width);
      y0 = Math.max(y0, current.top);
      y1 = Math.min(y1, current.top + current.height);

      if (x1 < x0 || y1 < y0) {
        return null;
      }
    }

    if (x1 == Infinity) {
      return null;
    }

    return layoutRectLtwh(x0, y0, x1 - x0, y1 - y0);
  }
  /**
   * Returns the position of r2 relative to r1
   * @param {!LayoutRectDef} r1
   * @param {!LayoutRectDef} r2
   * @return {RelativePositions}
   */


  function layoutRectsRelativePos(r1, r2) {
    if (r1.top < r2.top) {
      return RelativePositions.TOP;
    } else if (r1.bottom > r2.bottom) {
      return RelativePositions.BOTTOM;
    } else {
      return RelativePositions.INSIDE;
    }
  }
  /**
   * Expand the layout rect using multiples of width and height.
   * @param {!LayoutRectDef} rect Original rect.
   * @param {number} dw Expansion in width, specified as a multiple of width.
   * @param {number} dh Expansion in height, specified as a multiple of height.
   * @return {!LayoutRectDef}
   */


  function expandLayoutRect(rect, dw, dh) {
    return layoutRectLtwh(rect.left - rect.width * dw, rect.top - rect.height * dh, rect.width * (1 + dw * 2), rect.height * (1 + dh * 2));
  }
  /**
   * Moves the layout rect using dx and dy.
   * @param {!LayoutRectDef} rect Original rect.
   * @param {number} dx Move horizontally with this value.
   * @param {number} dy Move vertically with this value.
   * @return {!LayoutRectDef}
   */


  function moveLayoutRect(rect, dx, dy) {
    if (dx == 0 && dy == 0 || rect.width == 0 && rect.height == 0) {
      return rect;
    }

    return layoutRectLtwh(rect.left + dx, rect.top + dy, rect.width, rect.height);
  }
  /**
   * @param {!LayoutMarginsDef} margins
   * @param {!LayoutMarginsChangeDef} change
   * @return {boolean}
   */


  function areMarginsChanged(margins, change) {
    return change.top !== undefined && change.top != margins.top || change.right !== undefined && change.right != margins.right || change.bottom !== undefined && change.bottom != margins.bottom || change.left !== undefined && change.left != margins.left;
  }
  /**
   * @param {!LayoutRectDef} from
   * @param {!LayoutRectDef} to
   * @return {boolean}
   */


  function layoutRectSizeEquals(from, to) {
    return from.width == to.width && from.height === to.height;
  }
  /**
   * @param {?LayoutRectDef} r1
   * @param {?LayoutRectDef} r2
   * @return {boolean}
   */


  function layoutRectEquals(r1, r2) {
    if (!r1 || !r2) {
      return false;
    }

    return r1.left == r2.left && r1.top == r2.top && r1.width == r2.width && r1.height == r2.height;
  }
  /**
   * @param {LayoutMarginsChangeDef|undefined} marginsChange
   * @return {LayoutMarginsChangeDef|undefined}
   */


  function cloneLayoutMarginsChangeDef(marginsChange) {
    if (!marginsChange) {
      return marginsChange;
    }

    return {
      top: marginsChange.top,
      bottom: marginsChange.bottom,
      left: marginsChange.left,
      right: marginsChange.right
    };
  }

  },{}],49:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.parseLayout = parseLayout;
  exports.getLayoutClass = getLayoutClass;
  exports.isLayoutSizeDefined = isLayoutSizeDefined;
  exports.isInternalElement = isInternalElement;
  exports.parseLength = parseLength;
  exports.assertLength = assertLength;
  exports.assertLengthOrPercent = assertLengthOrPercent;
  exports.getLengthUnits = getLengthUnits;
  exports.getLengthNumeral = getLengthNumeral;
  exports.hasNaturalDimensions = hasNaturalDimensions;
  exports.getNaturalDimensions = getNaturalDimensions;
  exports.isLoadingAllowed = isLoadingAllowed;
  exports.applyStaticLayout = applyStaticLayout;
  exports.LOADING_ELEMENTS_ = exports.naturalDimensions_ = exports.LengthDef = exports.LayoutPriority = exports.Layout = void 0;

  var _log = require("./log");

  var _staticTemplate = require("./static-template");

  var _types = require("./types");

  var _style = require("./style");

  var _string = require("./string");

  function _templateObject() {
    var data = _taggedTemplateLiteralLoose(["\n      <i-amphtml-sizer class=\"i-amphtml-sizer\">\n        <img alt=\"\" role=\"presentation\" aria-hidden=\"true\"\n             class=\"i-amphtml-intrinsic-sizer\" />\n      </i-amphtml-sizer>"]);

    _templateObject = function _templateObject() {
      return data;
    };

    return data;
  }

  function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

  /**
   * @enum {string}
   */
  var Layout = {
    NODISPLAY: 'nodisplay',
    FIXED: 'fixed',
    FIXED_HEIGHT: 'fixed-height',
    RESPONSIVE: 'responsive',
    CONTAINER: 'container',
    FILL: 'fill',
    FLEX_ITEM: 'flex-item',
    FLUID: 'fluid',
    INTRINSIC: 'intrinsic'
  };
  /**
   * Layout priorities to use with BaseElement#getLayoutPriority() and
   * BaseElement#updateLayoutPriority().
   * @enum {number}
   */

  exports.Layout = Layout;
  var LayoutPriority = {
    CONTENT: 0,
    METADATA: 1,
    ADS: 2,
    BACKGROUND: 3
  };
  /**
   * CSS Length type. E.g. "1px" or "20vh".
   * @typedef {string}
   */

  exports.LayoutPriority = LayoutPriority;
  var LengthDef;
  /**
   * @typedef {{
   *   width: string,
   *   height: string
   * }}
   */

  exports.LengthDef = LengthDef;
  var DimensionsDef;
  /**
   * The set of elements with natural dimensions, that is, elements
   * which have a known dimension either based on their value specified here,
   * or, if the value is null, a dimension specific to the browser.
   * `hasNaturalDimensions` checks for membership in this set.
   * `getNaturalDimensions` determines the dimensions for an element in the
   *    set and caches it.
   * @type {!Object<string, ?DimensionsDef>}
   * @private  Visible for testing only!
   */

  var naturalDimensions_ = {
    'AMP-PIXEL': {
      width: '0px',
      height: '0px'
    },
    'AMP-ANALYTICS': {
      width: '1px',
      height: '1px'
    },
    // TODO(dvoytenko): audio should have width:auto.
    'AMP-AUDIO': null,
    'AMP-SOCIAL-SHARE': {
      width: '60px',
      height: '44px'
    }
  };
  /**
   * Elements that the progess can be shown for. This set has to be externalized
   * since the element's implementation may not be downloaded yet.
   * @enum {boolean}
   * @private  Visible for testing only!
   */

  exports.naturalDimensions_ = naturalDimensions_;
  var LOADING_ELEMENTS_ = {
    'AMP-AD': true,
    'AMP-ANIM': true,
    'AMP-BRIGHTCOVE': true,
    'AMP-DAILYMOTION': true,
    'AMP-EMBED': true,
    'AMP-FACEBOOK': true,
    'AMP-FACEBOOK-COMMENTS': true,
    'AMP-FACEBOOK-LIKE': true,
    'AMP-FACEBOOK-PAGE': true,
    'AMP-GOOGLE-DOCUMENT-EMBED': true,
    'AMP-IFRAME': true,
    'AMP-IMG': true,
    'AMP-INSTAGRAM': true,
    'AMP-LIST': true,
    'AMP-PINTEREST': true,
    'AMP-PLAYBUZZ': true,
    'AMP-YOUTUBE': true,
    'AMP-VIMEO': true
  };
  /**
   * All video player components must either have a) "video" or b) "player" in
   * their name. A few components don't follow this convention for historical
   * reasons, so they're present in the LOADING_ELEMENTS_ whitelist.
   * @private @const {!RegExp}
   */

  exports.LOADING_ELEMENTS_ = LOADING_ELEMENTS_;
  var videoPlayerTagNameRe = /^amp\-(video|.+player)/i;
  /**
   * @param {string} s
   * @return {Layout|undefined} Returns undefined in case of failure to parse
   *   the layout string.
   */

  function parseLayout(s) {
    for (var k in Layout) {
      if (Layout[k] == s) {
        return Layout[k];
      }
    }

    return undefined;
  }
  /**
   * @param {!Layout} layout
   * @return {string}
   */


  function getLayoutClass(layout) {
    return 'i-amphtml-layout-' + layout;
  }
  /**
   * Whether an element with this layout inherently defines the size.
   * @param {!Layout} layout
   * @return {boolean}
   */


  function isLayoutSizeDefined(layout) {
    return layout == Layout.FIXED || layout == Layout.FIXED_HEIGHT || layout == Layout.RESPONSIVE || layout == Layout.FILL || layout == Layout.FLEX_ITEM || layout == Layout.FLUID || layout == Layout.INTRINSIC;
  }
  /**
   * Whether the tag is an internal (service) AMP tag.
   * @param {!Node|string} tag
   * @return {boolean}
   */


  function isInternalElement(tag) {
    var tagName = typeof tag == 'string' ? tag : tag.tagName;
    return tagName && (0, _string.startsWith)(tagName.toLowerCase(), 'i-');
  }
  /**
   * Parses the CSS length value. If no units specified, the assumed value is
   * "px". Returns undefined in case of parsing error.
   * @param {string|undefined|null} s
   * @return {!LengthDef|undefined}
   */


  function parseLength(s) {
    if (typeof s == 'number') {
      return s + 'px';
    }

    if (!s) {
      return undefined;
    }

    if (!/^\d+(\.\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)?$/.test(s)) {
      return undefined;
    }

    if (/^\d+(\.\d+)?$/.test(s)) {
      return s + 'px';
    }

    return s;
  }
  /**
   * Asserts that the supplied value is a non-percent CSS Length value.
   * @param {!LengthDef|string|null|undefined} length
   * @return {!LengthDef}
   */


  function assertLength(length) {
    (0, _log.userAssert)(/^\d+(\.\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)$/.test(length), 'Invalid length value: %s', length);
    return (
      /** @type {!LengthDef} */
      length
    );
  }
  /**
   * Asserts that the supplied value is a CSS Length value
   * (including percent unit).
   * @param {!LengthDef|string} length
   * @return {!LengthDef}
   */


  function assertLengthOrPercent(length) {
    (0, _log.userAssert)(/^\d+(\.\d+)?(px|em|rem|vh|vw|vmin|vmax|%)$/.test(length), 'Invalid length or percent value: %s', length);
    return length;
  }
  /**
   * Returns units from the CSS length value.
   * @param {!LengthDef|string|null|undefined} length
   * @return {string}
   */


  function getLengthUnits(length) {
    assertLength(length);
    (0, _log.dev)().assertString(length);
    var m = (0, _log.userAssert)(length.match(/[a-z]+/i), 'Failed to read units from %s', length);
    return m[0];
  }
  /**
   * Returns the numeric value of a CSS length value.
   * @param {!LengthDef|string|null|undefined} length
   * @return {number|undefined}
   */


  function getLengthNumeral(length) {
    var res = parseFloat(length);
    return (0, _types.isFiniteNumber)(res) ? res : undefined;
  }
  /**
   * Determines whether the tagName is a known element that has natural dimensions
   * in our runtime or the browser.
   * @param {string} tagName The element tag name.
   * @return {boolean}
   */


  function hasNaturalDimensions(tagName) {
    tagName = tagName.toUpperCase();
    return naturalDimensions_[tagName] !== undefined;
  }
  /**
   * Determines the default dimensions for an element which could vary across
   * different browser implementations, like <audio> for instance.
   * This operation can only be completed for an element whitelisted by
   * `hasNaturalDimensions`.
   * @param {!Element} element
   * @return {DimensionsDef}
   */


  function getNaturalDimensions(element) {
    var tagName = element.tagName.toUpperCase();
    (0, _log.devAssert)(naturalDimensions_[tagName] !== undefined);

    if (!naturalDimensions_[tagName]) {
      var doc = element.ownerDocument;
      var naturalTagName = tagName.replace(/^AMP\-/, '');
      var temp = doc.createElement(naturalTagName); // For audio, should no-op elsewhere.

      temp.controls = true;
      (0, _style.setStyles)(temp, {
        position: 'absolute',
        visibility: 'hidden'
      });
      doc.body.appendChild(temp);
      naturalDimensions_[tagName] = {
        width: (temp.
        /*OK*/
        offsetWidth || 1) + 'px',
        height: (temp.
        /*OK*/
        offsetHeight || 1) + 'px'
      };
      doc.body.removeChild(temp);
    }

    return (
      /** @type {DimensionsDef} */
      naturalDimensions_[tagName]
    );
  }
  /**
   * Whether the loading can be shown for the specified elemeent. This set has
   * to be externalized since the element's implementation may not be
   * downloaded yet.
   * @param {!Element} element
   * @return {boolean}
   */


  function isLoadingAllowed(element) {
    var tagName = element.tagName.toUpperCase();
    return LOADING_ELEMENTS_[tagName] || isVideoPlayerComponent(tagName);
  }
  /**
   * All video player components must either have a) "video" or b) "player" in
   * their name. A few components don't follow this convention for historical
   * reasons, so they're present in the LOADING_ELEMENTS_ whitelist.
   * @param {string} tagName
   * @return {boolean}
   */


  function isVideoPlayerComponent(tagName) {
    return videoPlayerTagNameRe.test(tagName);
  }
  /**
   * Applies layout to the element. Visible for testing only.
   *
   * \   \  /  \  /   / /   \     |   _  \     |  \ |  | |  | |  \ |  |  / _____|
   *  \   \/    \/   / /  ^  \    |  |_)  |    |   \|  | |  | |   \|  | |  |  __
   *   \            / /  /_\  \   |      /     |  . `  | |  | |  . `  | |  | |_ |
   *    \    /\    / /  _____  \  |  |\  \----.|  |\   | |  | |  |\   | |  |__| |
   *     \__/  \__/ /__/     \__\ | _| `._____||__| \__| |__| |__| \__|  \______|
   *
   * The equivalent of this method is used for server-side rendering (SSR) and
   * any changes made to it must be made in coordination with caches that
   * implement SSR. For more information on SSR see bit.ly/amp-ssr.
   *
   * @param {!Element} element
   * @return {!Layout}
   */


  function applyStaticLayout(element) {
    // Check if the layout has already been done by server-side rendering or
    // client-side rendering and the element was cloned. The document may be
    // visible to the user if the boilerplate was removed so please take care in
    // making changes here.
    var completedLayoutAttr = element.getAttribute('i-amphtml-layout');

    if (completedLayoutAttr) {
      var _layout =
      /** @type {!Layout} */
      (0, _log.devAssert)(parseLayout(completedLayoutAttr));

      if ((_layout == Layout.RESPONSIVE || _layout == Layout.INTRINSIC) && element.firstElementChild) {
        // Find sizer, but assume that it might not have been parsed yet.
        element.sizerElement = element.querySelector('i-amphtml-sizer') || undefined;
      } else if (_layout == Layout.NODISPLAY) {
        (0, _style.toggle)(element, false); // TODO(jridgewell): Temporary hack while SSR still adds an inline
        // `display: none`

        element['style']['display'] = '';
      }

      return _layout;
    } // If the layout was already done by server-side rendering (SSR), then the
    // code below will not run. Any changes below will necessitate a change to SSR
    // and must be coordinated with caches that implement SSR. See bit.ly/amp-ssr.
    // Parse layout from the element.


    var layoutAttr = element.getAttribute('layout');
    var widthAttr = element.getAttribute('width');
    var heightAttr = element.getAttribute('height');
    var sizesAttr = element.getAttribute('sizes');
    var heightsAttr = element.getAttribute('heights'); // Input layout attributes.

    var inputLayout = layoutAttr ? parseLayout(layoutAttr) : null;
    (0, _log.userAssert)(inputLayout !== undefined, 'Unknown layout: %s', layoutAttr);
    /** @const {string|null|undefined} */

    var inputWidth = widthAttr && widthAttr != 'auto' ? parseLength(widthAttr) : widthAttr;
    (0, _log.userAssert)(inputWidth !== undefined, 'Invalid width value: %s', widthAttr);
    /** @const {string|null|undefined} */

    var inputHeight = heightAttr && heightAttr != 'fluid' ? parseLength(heightAttr) : heightAttr;
    (0, _log.userAssert)(inputHeight !== undefined, 'Invalid height value: %s', heightAttr); // Effective layout attributes. These are effectively constants.

    var width;
    var height;
    var layout; // Calculate effective width and height.

    if ((!inputLayout || inputLayout == Layout.FIXED || inputLayout == Layout.FIXED_HEIGHT) && (!inputWidth || !inputHeight) && hasNaturalDimensions(element.tagName)) {
      // Default width and height: handle elements that do not specify a
      // width/height and are defined to have natural browser dimensions.
      var dimensions = getNaturalDimensions(element);
      width = inputWidth || inputLayout == Layout.FIXED_HEIGHT ? inputWidth : dimensions.width;
      height = inputHeight || dimensions.height;
    } else {
      width = inputWidth;
      height = inputHeight;
    } // Calculate effective layout.


    if (inputLayout) {
      layout = inputLayout;
    } else if (!width && !height) {
      layout = Layout.CONTAINER;
    } else if (height == 'fluid') {
      layout = Layout.FLUID;
    } else if (height && (!width || width == 'auto')) {
      layout = Layout.FIXED_HEIGHT;
    } else if (height && width && (sizesAttr || heightsAttr)) {
      layout = Layout.RESPONSIVE;
    } else {
      layout = Layout.FIXED;
    } // Verify layout attributes.


    if (layout == Layout.FIXED || layout == Layout.FIXED_HEIGHT || layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {
      (0, _log.userAssert)(height, 'Expected height to be available: %s', heightAttr);
    }

    if (layout == Layout.FIXED_HEIGHT) {
      (0, _log.userAssert)(!width || width == 'auto', 'Expected width to be either absent or equal "auto" ' + 'for fixed-height layout: %s', widthAttr);
    }

    if (layout == Layout.FIXED || layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {
      (0, _log.userAssert)(width && width != 'auto', 'Expected width to be available and not equal to "auto": %s', widthAttr);
    }

    if (layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {
      (0, _log.userAssert)(getLengthUnits(width) == getLengthUnits(height), 'Length units should be the same for width and height: %s, %s', widthAttr, heightAttr);
    } else {
      (0, _log.userAssert)(heightsAttr === null, 'Unexpected "heights" attribute for none-responsive layout');
    } // Apply UI.


    element.classList.add(getLayoutClass(layout));

    if (isLayoutSizeDefined(layout)) {
      element.classList.add('i-amphtml-layout-size-defined');
    }

    if (layout == Layout.NODISPLAY) {
      // CSS defines layout=nodisplay automatically with `display:none`. Thus
      // no additional styling is needed.
      (0, _style.toggle)(element, false); // TODO(jridgewell): Temporary hack while SSR still adds an inline
      // `display: none`

      element['style']['display'] = '';
    } else if (layout == Layout.FIXED) {
      (0, _style.setStyles)(element, {
        width: (0, _log.dev)().assertString(width),
        height: (0, _log.dev)().assertString(height)
      });
    } else if (layout == Layout.FIXED_HEIGHT) {
      (0, _style.setStyle)(element, 'height', (0, _log.dev)().assertString(height));
    } else if (layout == Layout.RESPONSIVE) {
      var sizer = element.ownerDocument.createElement('i-amphtml-sizer');
      (0, _style.setStyles)(sizer, {
        paddingTop: getLengthNumeral(height) / getLengthNumeral(width) * 100 + '%'
      });
      element.insertBefore(sizer, element.firstChild);
      element.sizerElement = sizer;
    } else if (layout == Layout.INTRINSIC) {
      // Intrinsic uses an svg inside the sizer element rather than the padding
      // trick Note a naked svg won't work becasue other thing expect the
      // i-amphtml-sizer element
      var _sizer = (0, _staticTemplate.htmlFor)(element)(_templateObject());

      var intrinsicSizer = _sizer.firstElementChild;
      intrinsicSizer.setAttribute('src', "data:image/svg+xml;charset=utf-8,<svg height=\"" + height + "\" width=\"" + width + "\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"/>");
      element.insertBefore(_sizer, element.firstChild);
      element.sizerElement = _sizer;
    } else if (layout == Layout.FILL) {// Do nothing.
    } else if (layout == Layout.CONTAINER) {// Do nothing. Elements themselves will check whether the supplied
      // layout value is acceptable. In particular container is only OK
      // sometimes.
    } else if (layout == Layout.FLEX_ITEM) {
      // Set height and width to a flex item if they exist.
      // The size set to a flex item could be overridden by `display: flex` later.
      if (width) {
        (0, _style.setStyle)(element, 'width', width);
      }

      if (height) {
        (0, _style.setStyle)(element, 'height', height);
      }
    } else if (layout == Layout.FLUID) {
      element.classList.add('i-amphtml-layout-awaiting-size');

      if (width) {
        (0, _style.setStyle)(element, 'width', width);
      }

      (0, _style.setStyle)(element, 'height', 0);
    } // Mark the element as having completed static layout, in case it is cloned
    // in the future.


    element.setAttribute('i-amphtml-layout', layout);
    return layout;
  }

  },{"./log":51,"./static-template":115,"./string":116,"./style":118,"./types":121}],50:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.createLoaderElement = createLoaderElement;

  var _staticTemplate = require("./static-template");

  function _templateObject2() {
    var data = _taggedTemplateLiteralLoose(["<div class=\"i-amphtml-loader\">\n        <div class=\"i-amphtml-loader-dot\"></div>\n        <div class=\"i-amphtml-loader-dot\"></div>\n        <div class=\"i-amphtml-loader-dot\"></div>\n      </div>"]);

    _templateObject2 = function _templateObject2() {
      return data;
    };

    return data;
  }

  function _templateObject() {
    var data = _taggedTemplateLiteralLoose(["<div class=\"i-amphtml-loader-line\">\n          <div class=\"i-amphtml-loader-moving-line\"></div>\n        </div>"]);

    _templateObject = function _templateObject() {
      return data;
    };

    return data;
  }

  function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

  /** @private @const */
  var LINE_LOADER_ELEMENTS = {
    'AMP-AD': true
  };
  /**
   * Creates a default "loading indicator" element. This element accepts
   * `amp-active` class in which case it may choose to run an animation.
   * @param {!Document} doc
   * @param {string} elementName
   * @return {!Element}
   */

  function createLoaderElement(doc, elementName) {
    if (LINE_LOADER_ELEMENTS[elementName.toUpperCase()]) {
      return (0, _staticTemplate.htmlFor)(doc)(_templateObject());
    }

    return (0, _staticTemplate.htmlFor)(doc)(_templateObject2());
  }

  },{"./static-template":115}],51:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.isUserErrorMessage = isUserErrorMessage;
  exports.isUserErrorEmbed = isUserErrorEmbed;
  exports.setReportError = setReportError;
  exports.overrideLogLevel = overrideLogLevel;
  exports.duplicateErrorIfNecessary = duplicateErrorIfNecessary;
  exports.createErrorVargs = createErrorVargs;
  exports.rethrowAsync = rethrowAsync;
  exports.initLogConstructor = initLogConstructor;
  exports.resetLogConstructorForTesting = resetLogConstructorForTesting;
  exports.user = user;
  exports.dev = dev;
  exports.isFromEmbed = isFromEmbed;
  exports.devAssert = devAssert;
  exports.userAssert = userAssert;
  exports.Log = exports.LogLevel = exports.USER_ERROR_EMBED_SENTINEL = exports.USER_ERROR_SENTINEL = void 0;

  var _mode = require("./mode");

  var _modeObject = require("./mode-object");

  var _types = require("./types");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Triple zero width space.
   *
   * This is added to user error messages, so that we can later identify
   * them, when the only thing that we have is the message. This is the
   * case in many browsers when the global exception handler is invoked.
   *
   * @const {string}
   */
  var USER_ERROR_SENTINEL = "\u200B\u200B\u200B";
  /**
   * Four zero width space.
   *
   * @const {string}
   */

  exports.USER_ERROR_SENTINEL = USER_ERROR_SENTINEL;
  var USER_ERROR_EMBED_SENTINEL = "\u200B\u200B\u200B\u200B";
  /**
   * @param {string} message
   * @return {boolean} Whether this message was a user error.
   */

  exports.USER_ERROR_EMBED_SENTINEL = USER_ERROR_EMBED_SENTINEL;

  function isUserErrorMessage(message) {
    return message.indexOf(USER_ERROR_SENTINEL) >= 0;
  }
  /**
   * @param {string} message
   * @return {boolean} Whether this message was a a user error from an iframe embed.
   */


  function isUserErrorEmbed(message) {
    return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;
  }
  /**
   * @enum {number}
   * @private Visible for testing only.
   */


  var LogLevel = {
    OFF: 0,
    ERROR: 1,
    WARN: 2,
    INFO: 3,
    FINE: 4
  };
  /**
   * Sets reportError function. Called from error.js to break cyclic
   * dependency.
   * @param {function(*, !Element=)|undefined} fn
   */

  exports.LogLevel = LogLevel;

  function setReportError(fn) {
    self.reportError = fn;
  }
  /**
   * @type {!LogLevel|undefined}
   * @private
   */


  var levelOverride_ = undefined;
  /**
   * @param {!LogLevel} level
   */

  function overrideLogLevel(level) {
    levelOverride_ = level;
  }
  /**
   * Logging class. Use of sentinel string instead of a boolean to check user/dev
   * errors because errors could be rethrown by some native code as a new error,
   * and only a message would survive. Also, some browser don’t support a 5th
   * error object argument in window.onerror. List of supporting browser can be
   * found here:
   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html
   * @final
   * @private Visible for testing only.
   */


  var Log =
  /*#__PURE__*/
  function () {
    /**
     * opt_suffix will be appended to error message to identify the type of the
     * error message. We can't rely on the error object to pass along the type
     * because some browsers do not have this param in its window.onerror API.
     * See:
     * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html
     *
     * @param {!Window} win
     * @param {function(!./mode.ModeDef):!LogLevel} levelFunc
     * @param {string=} opt_suffix
     */
    function Log(win, levelFunc, opt_suffix) {
      /**
       * In tests we use the main test window instead of the iframe where
       * the tests runs because only the former is relayed to the console.
       * @const {!Window}
       */
      this.win = (0, _mode.getMode)().test && win.AMP_TEST_IFRAME ? win.parent : win;
      /** @private @const {function(!./mode.ModeDef):!LogLevel} */

      this.levelFunc_ = levelFunc;
      /** @private @const {!LogLevel} */

      this.level_ = this.defaultLevel_();
      /** @private @const {string} */

      this.suffix_ = opt_suffix || '';
    }
    /**
     * @return {!LogLevel}
     * @private
     */


    var _proto = Log.prototype;

    _proto.getLevel_ = function getLevel_() {
      return levelOverride_ !== undefined ? levelOverride_ : this.level_;
    }
    /**
     * @return {!LogLevel}
     * @private
     */
    ;

    _proto.defaultLevel_ = function defaultLevel_() {
      // No console - can't enable logging.
      if (!this.win.console || !this.win.console.log) {
        return LogLevel.OFF;
      } // Logging has been explicitly disabled.


      if ((0, _mode.getMode)().log == '0') {
        return LogLevel.OFF;
      } // Logging is enabled for tests directly.


      if ((0, _mode.getMode)().test && this.win.ENABLE_LOG) {
        return LogLevel.FINE;
      } // LocalDev by default allows INFO level, unless overriden by `#log`.


      if ((0, _mode.getMode)().localDev && !(0, _mode.getMode)().log) {
        return LogLevel.INFO;
      } // Delegate to the specific resolver.


      return this.levelFunc_((0, _modeObject.getModeObject)());
    }
    /**
     * @param {string} tag
     * @param {string} level
     * @param {!Array} messages
     */
    ;

    _proto.msg_ = function msg_(tag, level, messages) {
      if (this.getLevel_() != LogLevel.OFF) {
        var fn = this.win.console.log;

        if (level == 'ERROR') {
          fn = this.win.console.error || fn;
        } else if (level == 'INFO') {
          fn = this.win.console.info || fn;
        } else if (level == 'WARN') {
          fn = this.win.console.warn || fn;
        }

        if ((0, _mode.getMode)().localDev) {
          messages.unshift('[' + tag + ']');
        }

        fn.apply(this.win.console, messages);
      }
    }
    /**
     * Whether the logging is enabled.
     * @return {boolean}
     */
    ;

    _proto.isEnabled = function isEnabled() {
      return this.getLevel_() != LogLevel.OFF;
    }
    /**
     * Reports a fine-grained message.
     * @param {string} tag
     * @param {...*} var_args
     */
    ;

    _proto.fine = function fine(tag, var_args) {
      if (this.getLevel_() >= LogLevel.FINE) {
        this.msg_(tag, 'FINE', Array.prototype.slice.call(arguments, 1));
      }
    }
    /**
     * Reports a informational message.
     * @param {string} tag
     * @param {...*} var_args
     */
    ;

    _proto.info = function info(tag, var_args) {
      if (this.getLevel_() >= LogLevel.INFO) {
        this.msg_(tag, 'INFO', Array.prototype.slice.call(arguments, 1));
      }
    }
    /**
     * Reports a warning message.
     * @param {string} tag
     * @param {...*} var_args
     */
    ;

    _proto.warn = function warn(tag, var_args) {
      if (this.getLevel_() >= LogLevel.WARN) {
        this.msg_(tag, 'WARN', Array.prototype.slice.call(arguments, 1));
      }
    }
    /**
     * Reports an error message. If the logging is disabled, the error is rethrown
     * asynchronously.
     * @param {string} tag
     * @param {...*} var_args
     * @return {!Error|undefined}
     * @private
     */
    ;

    _proto.error_ = function error_(tag, var_args) {
      if (this.getLevel_() >= LogLevel.ERROR) {
        this.msg_(tag, 'ERROR', Array.prototype.slice.call(arguments, 1));
      } else {
        var error = createErrorVargs.apply(null, Array.prototype.slice.call(arguments, 1));
        this.prepareError_(error);
        return error;
      }
    }
    /**
     * Reports an error message.
     * @param {string} tag
     * @param {...*} var_args
     */
    ;

    _proto.error = function error(tag, var_args) {
      var error = this.error_.apply(this, arguments);

      if (error) {
        error.name = tag || error.name; // reportError is installed globally per window in the entry point.

        self.reportError(error);
      }
    }
    /**
     * Reports an error message and marks with an expected property. If the
     * logging is disabled, the error is rethrown asynchronously.
     * @param {string} unusedTag
     * @param {...*} var_args
     */
    ;

    _proto.expectedError = function expectedError(unusedTag, var_args) {
      var error = this.error_.apply(this, arguments);

      if (error) {
        error.expected = true; // reportError is installed globally per window in the entry point.

        self.reportError(error);
      }
    }
    /**
     * Creates an error object.
     * @param {...*} var_args
     * @return {!Error}
     */
    ;

    _proto.createError = function createError(var_args) {
      var error = createErrorVargs.apply(null, arguments);
      this.prepareError_(error);
      return error;
    }
    /**
     * Creates an error object with its expected property set to true.
     * @param {...*} var_args
     * @return {!Error}
     */
    ;

    _proto.createExpectedError = function createExpectedError(var_args) {
      var error = createErrorVargs.apply(null, arguments);
      this.prepareError_(error);
      error.expected = true;
      return error;
    }
    /**
     * Throws an error if the first argument isn't trueish.
     *
     * Supports argument substitution into the message via %s placeholders.
     *
     * Throws an error object that has two extra properties:
     * - associatedElement: This is the first element provided in the var args.
     *   It can be used for improved display of error messages.
     * - messageArray: The elements of the substituted message as non-stringified
     *   elements in an array. When e.g. passed to console.error this yields
     *   native displays of things like HTML elements.
     *
     * @param {T} shouldBeTrueish The value to assert. The assert fails if it does
     *     not evaluate to true.
     * @param {string=} opt_message The assertion message
     * @param {...*} var_args Arguments substituted into %s in the message.
     * @return {T} The value of shouldBeTrueish.
     * @template T
     * eslint "google-camelcase/google-camelcase": 0
     */
    ;

    _proto.assert = function assert(shouldBeTrueish, opt_message, var_args) {
      var firstElement;

      if (!shouldBeTrueish) {
        var message = opt_message || 'Assertion failed';
        var splitMessage = message.split('%s');
        var first = splitMessage.shift();
        var formatted = first;
        var messageArray = [];
        var i = 2;
        pushIfNonEmpty(messageArray, first);

        while (splitMessage.length > 0) {
          var nextConstant = splitMessage.shift();
          var val = arguments[i++];

          if (val && val.tagName) {
            firstElement = val;
          }

          messageArray.push(val);
          pushIfNonEmpty(messageArray, nextConstant.trim());
          formatted += toString(val) + nextConstant;
        }

        var e = new Error(formatted);
        e.fromAssert = true;
        e.associatedElement = firstElement;
        e.messageArray = messageArray;
        this.prepareError_(e); // reportError is installed globally per window in the entry point.

        self.reportError(e);
        throw e;
      }

      return shouldBeTrueish;
    }
    /**
     * Throws an error if the first argument isn't an Element
     *
     * Otherwise see `assert` for usage
     *
     * @param {*} shouldBeElement
     * @param {string=} opt_message The assertion message
     * @return {!Element} The value of shouldBeTrueish.
     * @template T
     * eslint "google-camelcase/google-camelcase": 2
     */
    ;

    _proto.assertElement = function assertElement(shouldBeElement, opt_message) {
      var shouldBeTrueish = shouldBeElement && shouldBeElement.nodeType == 1;
      this.assert(shouldBeTrueish, (opt_message || 'Element expected') + ': %s', shouldBeElement);
      return (
        /** @type {!Element} */
        shouldBeElement
      );
    }
    /**
     * Throws an error if the first argument isn't a string. The string can
     * be empty.
     *
     * For more details see `assert`.
     *
     * @param {*} shouldBeString
     * @param {string=} opt_message The assertion message
     * @return {string} The string value. Can be an empty string.
     * eslint "google-camelcase/google-camelcase": 2
     */
    ;

    _proto.assertString = function assertString(shouldBeString, opt_message) {
      this.assert(typeof shouldBeString == 'string', (opt_message || 'String expected') + ': %s', shouldBeString);
      return (
        /** @type {string} */
        shouldBeString
      );
    }
    /**
     * Throws an error if the first argument isn't a number. The allowed values
     * include `0` and `NaN`.
     *
     * For more details see `assert`.
     *
     * @param {*} shouldBeNumber
     * @param {string=} opt_message The assertion message
     * @return {number} The number value. The allowed values include `0`
     *   and `NaN`.
     */
    ;

    _proto.assertNumber = function assertNumber(shouldBeNumber, opt_message) {
      this.assert(typeof shouldBeNumber == 'number', (opt_message || 'Number expected') + ': %s', shouldBeNumber);
      return (
        /** @type {number} */
        shouldBeNumber
      );
    }
    /**
     * Throws an error if the first argument is not an array.
     * The array can be empty.
     *
     * @param {*} shouldBeArray
     * @param {string=} opt_message The assertion message
     * @return {!Array} The array value
     */
    ;

    _proto.assertArray = function assertArray(shouldBeArray, opt_message) {
      this.assert(Array.isArray(shouldBeArray), (opt_message || 'Array expected') + ': %s', shouldBeArray);
      return (
        /** @type {!Array} */
        shouldBeArray
      );
    }
    /**
     * Throws an error if the first argument isn't a boolean.
     *
     * For more details see `assert`.
     *
     * @param {*} shouldBeBoolean
     * @param {string=} opt_message The assertion message
     * @return {boolean} The boolean value.
     */
    ;

    _proto.assertBoolean = function assertBoolean(shouldBeBoolean, opt_message) {
      this.assert(!!shouldBeBoolean === shouldBeBoolean, (opt_message || 'Boolean expected') + ': %s', shouldBeBoolean);
      return (
        /** @type {boolean} */
        shouldBeBoolean
      );
    }
    /**
     * Asserts and returns the enum value. If the enum doesn't contain such a
     * value, the error is thrown.
     *
     * @param {!Object<T>} enumObj
     * @param {string} s
     * @param {string=} opt_enumName
     * @return {T}
     * @template T
     * eslint "google-camelcase/google-camelcase": 2
     */
    ;

    _proto.assertEnumValue = function assertEnumValue(enumObj, s, opt_enumName) {
      if ((0, _types.isEnumValue)(enumObj, s)) {
        return s;
      }

      this.assert(false, 'Unknown %s value: "%s"', opt_enumName || 'enum', s);
    }
    /**
     * @param {!Error} error
     * @private
     */
    ;

    _proto.prepareError_ = function prepareError_(error) {
      error = duplicateErrorIfNecessary(error);

      if (this.suffix_) {
        if (!error.message) {
          error.message = this.suffix_;
        } else if (error.message.indexOf(this.suffix_) == -1) {
          error.message += this.suffix_;
        }
      } else if (isUserErrorMessage(error.message)) {
        error.message = error.message.replace(USER_ERROR_SENTINEL, '');
      }
    };

    return Log;
  }();
  /**
   * @param {string|!Element} val
   * @return {string}
   */


  exports.Log = Log;

  function toString(val) {
    // Do check equivalent to `val instanceof Element` without cross-window bug
    if (val && val.nodeType == 1) {
      return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');
    }

    return (
      /** @type {string} */
      val
    );
  }
  /**
   * @param {!Array} array
   * @param {*} val
   */


  function pushIfNonEmpty(array, val) {
    if (val != '') {
      array.push(val);
    }
  }
  /**
   * Some exceptions (DOMException, namely) have read-only message.
   * @param {!Error} error
   * @return {!Error};
   */


  function duplicateErrorIfNecessary(error) {
    var messageProperty = Object.getOwnPropertyDescriptor(error, 'message');

    if (messageProperty && messageProperty.writable) {
      return error;
    }

    var message = error.message,
        stack = error.stack;
    var e = new Error(message); // Copy all the extraneous things we attach.

    for (var prop in error) {
      e[prop] = error[prop];
    } // Ensure these are copied.


    e.stack = stack;
    return e;
  }
  /**
   * @param {...*} var_args
   * @return {!Error}
   * @visibleForTesting
   */


  function createErrorVargs(var_args) {
    var error = null;
    var message = '';

    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];

      if (arg instanceof Error && !error) {
        error = duplicateErrorIfNecessary(arg);
      } else {
        if (message) {
          message += ' ';
        }

        message += arg;
      }
    }

    if (!error) {
      error = new Error(message);
    } else if (message) {
      error.message = message + ': ' + error.message;
    }

    return error;
  }
  /**
   * Rethrows the error without terminating the current context. This preserves
   * whether the original error designation is a user error or a dev error.
   * @param {...*} var_args
   */


  function rethrowAsync(var_args) {
    var error = createErrorVargs.apply(null, arguments);
    setTimeout(function () {
      // reportError is installed globally per window in the entry point.
      self.reportError(error);
      throw error;
    });
  }
  /**
   * Cache for logs. We do not use a Service since the service module depends
   * on Log and closure literally can't even.
   * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}
   */


  self.log = self.log || {
    user: null,
    dev: null,
    userForEmbed: null
  };
  var logs = self.log;
  /**
   * Eventually holds a constructor for Log objects. Lazily initialized, so we
   * can avoid ever referencing the real constructor except in JS binaries
   * that actually want to include the implementation.
   * @type {?Function}
   */

  var logConstructor = null;
  /**
   * Initializes log contructor.
   */

  function initLogConstructor() {
    logConstructor = Log; // Initialize instances for use. If a binary (an extension for example) that
    // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than
    // the binary that does call `initLogConstructor` (amp.js), the extension will
    // throw an error as that extension will never be able to initialize the log
    // instances and we also don't want it to call `initLogConstructor` either
    // (since that will cause the Log implementation to be bundled into that
    // binary). So we must initialize the instances eagerly so that they are ready
    // for use (stored globally) after the main binary calls `initLogConstructor`.

    dev();
    user();
  }
  /**
   * Resets log contructor for testing.
   */


  function resetLogConstructorForTesting() {
    logConstructor = null;
  }
  /**
   * Publisher level log.
   *
   * Enabled in the following conditions:
   *  1. Not disabled using `#log=0`.
   *  2. Development mode is enabled via `#development=1` or logging is explicitly
   *     enabled via `#log=D` where D >= 1.
   *  3. AMP.setLogLevel(D) is called, where D >= 1.
   *
   * @param {!Element=} opt_element
   * @return {!Log}
   */


  function user(opt_element) {
    if (!logs.user) {
      logs.user = getUserLogger(USER_ERROR_SENTINEL);
    }

    if (!isFromEmbed(logs.user.win, opt_element)) {
      return logs.user;
    } else {
      if (logs.userForEmbed) {
        return logs.userForEmbed;
      }

      return logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL);
    }
  }
  /**
   * Getter for user logger
   * @param {string=} suffix
   * @return {!Log}
   */


  function getUserLogger(suffix) {
    if (!logConstructor) {
      throw new Error('failed to call initLogConstructor');
    }

    return new logConstructor(self, function (mode) {
      var logNum = parseInt(mode.log, 10);

      if (mode.development || logNum >= 1) {
        return LogLevel.FINE;
      }

      return LogLevel.WARN;
    }, suffix);
  }
  /**
   * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped
   * in the PROD binary. However, `devLog().assert` result is preserved in either
   * case.
   *
   * Enabled in the following conditions:
   *  1. Not disabled using `#log=0`.
   *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.
   *  3. AMP.setLogLevel(D) is called, where D >= 2.
   *
   * @return {!Log}
   */


  function dev() {
    if (logs.dev) {
      return logs.dev;
    }

    if (!logConstructor) {
      throw new Error('failed to call initLogConstructor');
    }

    return logs.dev = new logConstructor(self, function (mode) {
      var logNum = parseInt(mode.log, 10);

      if (logNum >= 3) {
        return LogLevel.FINE;
      }

      if (logNum >= 2) {
        return LogLevel.INFO;
      }

      return LogLevel.OFF;
    });
  }
  /**
   * @param {!Window} win
   * @param {!Element=} opt_element
   * @return {boolean} isEmbed
   */


  function isFromEmbed(win, opt_element) {
    if (!opt_element) {
      return false;
    }

    return opt_element.ownerDocument.defaultView != win;
  }
  /**
   * Throws an error if the first argument isn't trueish.
   *
   * Supports argument substitution into the message via %s placeholders.
   *
   * Throws an error object that has two extra properties:
   * - associatedElement: This is the first element provided in the var args.
   *   It can be used for improved display of error messages.
   * - messageArray: The elements of the substituted message as non-stringified
   *   elements in an array. When e.g. passed to console.error this yields
   *   native displays of things like HTML elements.
   *
   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does
   *     not evaluate to true.
   * @param {string=} opt_message The assertion message
   * @param {*=} opt_1 Optional argument (Var arg as individual params for better
   * @param {*=} opt_2 Optional argument inlining)
   * @param {*=} opt_3 Optional argument
   * @param {*=} opt_4 Optional argument
   * @param {*=} opt_5 Optional argument
   * @param {*=} opt_6 Optional argument
   * @param {*=} opt_7 Optional argument
   * @param {*=} opt_8 Optional argument
   * @param {*=} opt_9 Optional argument
   * @return {T} The value of shouldBeTrueish.
   * @template T
   * eslint "google-camelcase/google-camelcase": 0
   */


  function devAssert(shouldBeTrueish, opt_message, opt_1, opt_2, opt_3, opt_4, opt_5, opt_6, opt_7, opt_8, opt_9) {
    if ((0, _mode.getMode)().minified) {
      return shouldBeTrueish;
    }

    return dev().
    /*Orig call*/
    assert(shouldBeTrueish, opt_message, opt_1, opt_2, opt_3, opt_4, opt_5, opt_6, opt_7, opt_8, opt_9);
  }
  /**
   * Throws an error if the first argument isn't trueish.
   *
   * Supports argument substitution into the message via %s placeholders.
   *
   * Throws an error object that has two extra properties:
   * - associatedElement: This is the first element provided in the var args.
   *   It can be used for improved display of error messages.
   * - messageArray: The elements of the substituted message as non-stringified
   *   elements in an array. When e.g. passed to console.error this yields
   *   native displays of things like HTML elements.
   *
   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does
   *     not evaluate to true.
   * @param {string=} opt_message The assertion message
   * @param {*=} opt_1 Optional argument (Var arg as individual params for better
   * @param {*=} opt_2 Optional argument inlining)
   * @param {*=} opt_3 Optional argument
   * @param {*=} opt_4 Optional argument
   * @param {*=} opt_5 Optional argument
   * @param {*=} opt_6 Optional argument
   * @param {*=} opt_7 Optional argument
   * @param {*=} opt_8 Optional argument
   * @param {*=} opt_9 Optional argument
   * @return {T} The value of shouldBeTrueish.
   * @template T
   * eslint "google-camelcase/google-camelcase": 0
   */


  function userAssert(shouldBeTrueish, opt_message, opt_1, opt_2, opt_3, opt_4, opt_5, opt_6, opt_7, opt_8, opt_9) {
    return user().
    /*Orig call*/
    assert(shouldBeTrueish, opt_message, opt_1, opt_2, opt_3, opt_4, opt_5, opt_6, opt_7, opt_8, opt_9);
  }

  },{"./mode":53,"./mode-object":52,"./types":121}],52:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.getModeObject = getModeObject;

  var _mode = require("./mode");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Provides info about the current app. This return value may be cached and
   * passed around as it will always be DCE'd.
   * @param {?Window=} opt_win
   * @return {!./mode.ModeDef}
   */
  function getModeObject(opt_win) {
    return {
      localDev: (0, _mode.getMode)(opt_win).localDev,
      development: (0, _mode.getMode)(opt_win).development,
      filter: (0, _mode.getMode)(opt_win).filter,
      minified: (0, _mode.getMode)(opt_win).minified,
      lite: (0, _mode.getMode)(opt_win).lite,
      test: (0, _mode.getMode)(opt_win).test,
      log: (0, _mode.getMode)(opt_win).log,
      version: (0, _mode.getMode)(opt_win).version,
      rtvVersion: (0, _mode.getMode)(opt_win).rtvVersion,
      singlePassType: (0, _mode.getMode)(opt_win).singlePassType
    };
  }

  },{"./mode":53}],53:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.getMode = getMode;
  exports.getRtvVersionForTesting = getRtvVersionForTesting;
  exports.resetRtvVersionForTesting = resetRtvVersionForTesting;
  exports.ModeDef = void 0;

  var _urlParseQueryString = require("./url-parse-query-string");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @typedef {{
   *   localDev: boolean,
   *   development: boolean,
   *   filter: (string|undefined),
   *   minified: boolean,
   *   lite: boolean,
   *   test: boolean,
   *   log: (string|undefined),
   *   version: string,
   *   rtvVersion: string,
   *   runtime: (null|string|undefined),
   *   a4aId: (null|string|undefined),
   *   singlePassType: (string|undefined)
   * }}
   */
  var ModeDef;
  /** @type {string} */

  exports.ModeDef = ModeDef;
  var version = '1903211831541';
  /**
   * `rtvVersion` is the prefixed version we serve off of the cdn.
   * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).
   * @type {string}
   */

  var rtvVersion = '';
  /**
   * Provides info about the current app.
   * @param {?Window=} opt_win
   * @return {!ModeDef}
   */

  function getMode(opt_win) {
    var win = opt_win || self;

    if (win.AMP_MODE) {
      return win.AMP_MODE;
    }

    return win.AMP_MODE = getMode_(win);
  }
  /**
   * Provides info about the current app.
   * @param {!Window} win
   * @return {!ModeDef}
   */


  function getMode_(win) {
    // TODO(erwinmombay): simplify the logic here
    var AMP_CONFIG = self.AMP_CONFIG || {}; // Magic constants that are replaced by closure compiler.
    // IS_MINIFIED is always replaced with true when closure compiler is used
    // while IS_DEV is only replaced when `gulp dist` is called without the
    // --fortesting flag.

    var IS_DEV = true;
    var IS_MINIFIED = false;
    var localDevEnabled = !!AMP_CONFIG.localDev;
    var runningTests = !!AMP_CONFIG.test || IS_DEV && !!(win.AMP_TEST || win.__karma__);
    var isLocalDev = IS_DEV && (localDevEnabled || runningTests);
    var hashQuery = (0, _urlParseQueryString.parseQueryString_)( // location.originalHash is set by the viewer when it removes the fragment
    // from the URL.
    win.location.originalHash || win.location.hash);
    var singlePassType = AMP_CONFIG.spt;
    var searchQuery = (0, _urlParseQueryString.parseQueryString_)(win.location.search);

    if (!rtvVersion) {
      rtvVersion = getRtvVersion(win, isLocalDev);
    } // The `minified`, `test` and `localDev` properties are replaced
    // as boolean literals when we run `gulp dist` without the `--fortesting`
    // flags. This improved DCE on the production file we deploy as the code
    // paths for localhost/testing/development are eliminated.


    return {
      localDev: isLocalDev,
      // Triggers validation or enable pub level logging. Validation can be
      // bypassed via #validate=0.
      // Note that AMP_DEV_MODE flag is used for testing purposes.
      development: !!(hashQuery['development'] == '1' || win.AMP_DEV_MODE),
      examiner: hashQuery['development'] == '2',
      // Allows filtering validation errors by error category. For the
      // available categories, see ErrorCategory in validator/validator.proto.
      filter: hashQuery['filter'],
      // amp-geo override
      geoOverride: hashQuery['amp-geo'],
      minified: IS_MINIFIED,
      // Whether document is in an amp-lite viewer. It signal that the user
      // would prefer to use less bandwidth.
      lite: searchQuery['amp_lite'] != undefined,
      test: runningTests,
      log: hashQuery['log'],
      version: version,
      rtvVersion: rtvVersion,
      singlePassType: singlePassType
    };
  }
  /**
   * Retrieve the `rtvVersion` which will have a numeric prefix
   * denoting canary/prod/experiment (unless `isLocalDev` is true).
   *
   * @param {!Window} win
   * @param {boolean} isLocalDev
   * @return {string}
   */


  function getRtvVersion(win, isLocalDev) {
    // If it's local dev then we won't actually have a full version so
    // just use the version.
    if (isLocalDev) {
      return version;
    }

    if (win.AMP_CONFIG && win.AMP_CONFIG.v) {
      return win.AMP_CONFIG.v;
    } // Currently `1903211831541` and thus `mode.version` contain only
    // major version. The full version however must also carry the minor version.
    // We will default to production default `01` minor version for now.
    // TODO(erwinmombay): decide whether 1903211831541 should contain
    // minor version.


    return "01" + version;
  }
  /**
   * @param {!Window} win
   * @param {boolean} isLocalDev
   * @return {string}
   * @visibleForTesting
   */


  function getRtvVersionForTesting(win, isLocalDev) {
    return getRtvVersion(win, isLocalDev);
  }
  /** @visibleForTesting */


  function resetRtvVersionForTesting() {
    rtvVersion = '';
  }

  },{"./url-parse-query-string":122}],54:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.Observable = void 0;

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * This class helps to manage observers. Observers can be added, removed or
   * fired through and instance of this class.
   * @template TYPE
   */
  var Observable =
  /*#__PURE__*/
  function () {
    /**
     * Creates an instance of Observable.
     */
    function Observable() {
      /** @type {?Array<function(TYPE)>} */
      this.handlers_ = null;
    }
    /**
     * Adds the observer to this instance.
     * @param {function(TYPE)} handler Observer's handler.
     * @return {!UnlistenDef}
     */


    var _proto = Observable.prototype;

    _proto.add = function add(handler) {
      var _this = this;

      if (!this.handlers_) {
        this.handlers_ = [];
      }

      this.handlers_.push(handler);
      return function () {
        _this.remove(handler);
      };
    }
    /**
     * Removes the observer from this instance.
     * @param {function(TYPE)} handler Observer's instance.
     */
    ;

    _proto.remove = function remove(handler) {
      if (!this.handlers_) {
        return;
      }

      var index = this.handlers_.indexOf(handler);

      if (index > -1) {
        this.handlers_.splice(index, 1);
      }
    }
    /**
     * Removes all observers.
     */
    ;

    _proto.removeAll = function removeAll() {
      if (!this.handlers_) {
        return;
      }

      this.handlers_.length = 0;
    }
    /**
     * Fires an event. All observers are called.
     * @param {TYPE=} opt_event
     */
    ;

    _proto.fire = function fire(opt_event) {
      if (!this.handlers_) {
        return;
      }

      var handlers = this.handlers_;

      for (var i = 0; i < handlers.length; i++) {
        var handler = handlers[i];
        handler(opt_event);
      }
    }
    /**
     * Returns number of handlers. Mostly needed for tests.
     * @return {number}
     */
    ;

    _proto.getHandlerCount = function getHandlerCount() {
      if (!this.handlers_) {
        return 0;
      }

      return this.handlers_.length;
    };

    return Observable;
  }();

  exports.Observable = Observable;

  },{}],55:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.Pass = void 0;

  var _services = require("./services");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Pass class helps to manage single-pass process. A pass is scheduled using
   * delay method. Only one pass can be pending at a time. If no pass is pending
   * the process is considered to be "idle".
   */
  var Pass =
  /*#__PURE__*/
  function () {
    /**
     * Creates a new Pass instance.
     * @param {!Window} win
     * @param {function()} handler Handler to be executed when pass is triggered.
     * @param {number=} opt_defaultDelay Default delay to be used when schedule
     *   is called without one.
     */
    function Pass(win, handler, opt_defaultDelay) {
      var _this = this;

      this.timer_ = _services.Services.timerFor(win);
      /** @private @const {function()} */

      this.handler_ = handler;
      /** @private @const {number} */

      this.defaultDelay_ = opt_defaultDelay || 0;
      /** @private {number|string} */

      this.scheduled_ = -1;
      /** @private {number} */

      this.nextTime_ = 0;
      /** @private {boolean} */

      this.running_ = false;
      /** @private @const {!Function} */

      this.boundPass_ = function () {
        return _this.pass_();
      };
    }
    /**
     * Whether or not a pass is currently pending.
     * @return {boolean}
     */


    var _proto = Pass.prototype;

    _proto.isPending = function isPending() {
      return this.scheduled_ != -1;
    }
    /**
     * Tries to schedule a new pass optionally with specified delay. If the new
     * requested pass is requested before the pending pass, the pending pass is
     * canceled. If the new pass is requested after the pending pass, the newly
     * requested pass is ignored.
     *
     * Returns {@code true} if the pass has been scheduled and {@code false} if
     * ignored.
     *
     * @param {number=} opt_delay Delay to schedule the pass. If not specified
     *   the default delay is used, falling back to 0.
     * @return {boolean}
     */
    ;

    _proto.schedule = function schedule(opt_delay) {
      var delay = opt_delay || this.defaultDelay_;

      if (this.running_ && delay < 10) {
        // If we get called recursively, wait at least 10ms for the next
        // execution.
        delay = 10;
      }

      var nextTime = Date.now() + delay; // Schedule anew if nothing is scheduled currently or if the new time is
      // sooner then previously requested.

      if (!this.isPending() || nextTime - this.nextTime_ < -10) {
        this.cancel();
        this.nextTime_ = nextTime;
        this.scheduled_ = this.timer_.delay(this.boundPass_, delay);
        return true;
      }

      return false;
    }
    /**
     *
     */
    ;

    _proto.pass_ = function pass_() {
      this.scheduled_ = -1;
      this.nextTime_ = 0;
      this.running_ = true;
      this.handler_();
      this.running_ = false;
    }
    /**
     * Cancels the pending pass if any.
     */
    ;

    _proto.cancel = function cancel() {
      if (this.isPending()) {
        this.timer_.cancel(this.scheduled_);
        this.scheduled_ = -1;
      }
    };

    return Pass;
  }();

  exports.Pass = Pass;

  },{"./services":112}],56:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.createPixel = createPixel;

  var _windowInterface = require("../src/window-interface");

  var _dom = require("../src/dom");

  var _object = require("../src/utils/object");

  var _log = require("../src/log");

  /**
   * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @const {string} */
  var TAG = 'pixel';
  /**
   * @param {!Window} win
   * @param {string} src
   * @param {?string=} referrerPolicy
   * @return {!Element}
   */

  function createPixel(win, src, referrerPolicy) {
    if (referrerPolicy && referrerPolicy !== 'no-referrer') {
      (0, _log.user)().error(TAG, 'Unsupported referrerPolicy: %s', referrerPolicy);
    }

    return referrerPolicy === 'no-referrer' ? createNoReferrerPixel(win, src) : createImagePixel(win, src);
  }
  /**
   * @param {!Window} win
   * @param {string} src
   * @return {!Element}
   */


  function createNoReferrerPixel(win, src) {
    if (isReferrerPolicySupported()) {
      return createImagePixel(win, src, true);
    } else {
      // if "referrerPolicy" is not supported, use iframe wrapper
      // to scrub the referrer.
      var iframe = (0, _dom.createElementWithAttributes)(
      /** @type {!Document} */
      win.document, 'iframe', (0, _object.dict)({
        'src': 'about:blank',
        'style': 'display:none'
      }));
      win.document.body.appendChild(iframe);
      createImagePixel(iframe.contentWindow, src);
      return iframe;
    }
  }
  /**
   * @param {!Window} win
   * @param {string} src
   * @param {boolean=} noReferrer
   * @return {!Image}
   */


  function createImagePixel(win, src, noReferrer) {
    if (noReferrer === void 0) {
      noReferrer = false;
    }

    var Image = _windowInterface.WindowInterface.getImage(win);

    var image = new Image();

    if (noReferrer) {
      image.referrerPolicy = 'no-referrer';
    }

    image.src = src;
    return image;
  }
  /**
   * Check if element attribute "referrerPolicy" is supported by the browser.
   * Safari 11.1 does not support it yet.
   *
   * @return {boolean}
   */


  function isReferrerPolicySupported() {
    return 'referrerPolicy' in Image.prototype;
  }

  },{"../src/dom":26,"../src/log":51,"../src/utils/object":132,"../src/window-interface":141}],57:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.erwinmHack = void 0;

  var _mode = require("./mode");

  var _arrayIncludes = require("./polyfills/array-includes");

  var _customElements = require("./polyfills/custom-elements");

  var _domtokenlistToggle = require("./polyfills/domtokenlist-toggle");

  var _documentContains = require("./polyfills/document-contains");

  var _fetch = require("./polyfills/fetch");

  var _getBoundingClientRect = require("./get-bounding-client-rect");

  var _mathSign = require("./polyfills/math-sign");

  var _objectAssign = require("./polyfills/object-assign");

  var _objectValues = require("./polyfills/object-values");

  var _promise = require("./polyfills/promise");

  var _documentRegisterElement = require("document-register-element/build/document-register-element.patched");

  var _experiments = require("./experiments");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  (0, _domtokenlistToggle.install)(self);
  (0, _fetch.install)(self);
  (0, _mathSign.install)(self);
  (0, _objectAssign.install)(self);
  (0, _objectValues.install)(self);
  (0, _promise.install)(self);
  (0, _documentContains.install)(self);
  (0, _arrayIncludes.install)(self);
  (0, _getBoundingClientRect.install)(self); // isExperimentOn() must be called after Object.assign polyfill is installed.
  // TODO(jridgewell): Ship custom-elements-v1. For now, we use this hack so it
  // is DCE'd from production builds.

  if (false && (0, _experiments.isExperimentOn)(self, 'custom-elements-v1') || (0, _mode.getMode)().test) {
    (0, _customElements.install)(self);
  } else {
    (0, _documentRegisterElement.installCustomElements)(self, 'auto');
  } // TODO(#18268, erwinm): For whatever reason imports to modules that have no
  // export currently break for singlepass runs. This is a temporary workaround
  // until we figure the issue out.


  var erwinmHack = 'this export is a temporary hack for single pass';
  exports.erwinmHack = erwinmHack;

  },{"./experiments":32,"./get-bounding-client-rect":40,"./mode":53,"./polyfills/array-includes":58,"./polyfills/custom-elements":59,"./polyfills/document-contains":60,"./polyfills/domtokenlist-toggle":61,"./polyfills/fetch":62,"./polyfills/math-sign":63,"./polyfills/object-assign":64,"./polyfills/object-values":65,"./polyfills/promise":66,"document-register-element/build/document-register-element.patched":5}],58:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.install = install;

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Returns true if the element is in the array and false otherwise.
   *
   * @param {*} value
   * @param {number=} opt_fromIndex
   * @return {boolean}
   * @this {Array}
   */
  function includes(value, opt_fromIndex) {
    var fromIndex = opt_fromIndex || 0;
    var len = this.length;
    var i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);

    for (; i < len; i++) {
      var other = this[i]; // If value has been found OR (value is NaN AND other is NaN)

      /*eslint "no-self-compare": 0*/

      if (other === value || value !== value && other !== other) {
        return true;
      }
    }

    return false;
  }
  /**
  * Sets the Array.contains polyfill if it does not exist.
  * @param {!Window} win
  */


  function install(win) {
    if (!win.Array.prototype.includes) {
      win.Object.defineProperty(Array.prototype, 'includes', {
        enumerable: false,
        configurable: true,
        writable: true,
        value: includes
      });
    }
  }

  },{}],59:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.install = install;

  /**
   * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @typedef {{
   *   promise: !Promise<undefined>,
   *   resolve: function(),
   * }}
   */
  var DeferredDef;
  /**
   * @typedef {!Function}
   */

  var CustomElementConstructorDef;
  /**
   * @typedef {{
   *  name: string,
   *  ctor: !CustomElementConstructorDef,
   * }}
   */

  var CustomElementDef;
  /**
   * Validates the custom element's name.
   * This intentionally ignores "valid" higher Unicode Code Points.
   * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
   */

  var VALID_NAME = /^[a-z][a-z0-9._]*-[a-z0-9._-]*$/;
  var INVALID_NAMES = ['annotation-xml', 'color-profile', 'font-face', 'font-face-src', 'font-face-uri', 'font-face-format', 'font-face-name', 'missing-glyph'];
  /**
   * A MutationObserverInit dictionary to track subtree modifications.
   */

  var TRACK_SUBTREE = {
    'childList': true,
    'subtree': true
  };
  /**
   * Asserts that the custom element name conforms to the spec.
   *
   * @param {!Function} SyntaxError
   * @param {string} name
   */

  function assertValidName(SyntaxError, name) {
    if (!VALID_NAME.test(name) || INVALID_NAMES.includes(name)) {
      throw new SyntaxError("invalid custom element name \"" + name + "\"");
    }
  }
  /**
   * Does win have a full Custom Elements registry?
   *
   * @param {!Window} win
   * @return {boolean}
   */


  function hasCustomElements(win) {
    var customElements = win.customElements;
    return !!(customElements && customElements.define && customElements.get && customElements.whenDefined);
  }
  /**
   * Was HTMLElement already patched for this window?
   *
   * @param {!Window} win
   * @return {boolean}
   */


  function isPatched(win) {
    var tag = win.HTMLElement.toString();
    return tag.indexOf('[native code]') === -1;
  }
  /**
   * Throws the error outside the current event loop.
   *
   * @param {!Error} error
   */


  function rethrowAsync(error) {
    new
    /*OK*/
    Promise(function () {
      throw error;
    });
  }
  /**
   * The public Custom Elements API.
   */


  var CustomElementRegistry =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     * @param {!Registry} registry
     */
    function CustomElementRegistry(win, registry) {
      /**
       * @const @private
       */
      this.win_ = win;
      /**
       * @const @private
       */

      this.registry_ = registry;
      /**
       * @type {!Object<string, DeferredDef>}
       * @private
       * @const
       */

      this.pendingDefines_ = win.Object.create(null);
    }
    /**
     * Register the custom element.
     *
     * @param {string} name
     * @param {!CustomElementConstructorDef} ctor
     * @param {!Object=} options
     */


    var _proto = CustomElementRegistry.prototype;

    _proto.define = function define(name, ctor, options) {
      this.registry_.define(name, ctor, options); // If anyone is waiting for this custom element to be defined, resolve
      // their promise.

      var pending = this.pendingDefines_;
      var deferred = pending[name];

      if (deferred) {
        deferred.resolve();
        delete pending[name];
      }
    }
    /**
     * Get the constructor of the (already defined) custom element.
     *
     * @param {string} name
     * @return {!CustomElementConstructorDef|undefined}
     */
    ;

    _proto.get = function get(name) {
      var def = this.registry_.getByName(name);

      if (def) {
        return def.ctor;
      }
    }
    /**
     * Returns a promise that waits until the custom element is defined.
     * If the custom element is already defined, returns a resolved promise.
     *
     * @param {string} name
     * @return {!Promise<undefined>}
     */
    ;

    _proto.whenDefined = function whenDefined(name) {
      var _this$win_ = this.win_,
          Promise = _this$win_.Promise,
          SyntaxError = _this$win_.SyntaxError;
      assertValidName(SyntaxError, name);

      if (this.registry_.getByName(name)) {
        return Promise.resolve();
      }

      var pending = this.pendingDefines_;
      var deferred = pending[name];

      if (deferred) {
        return deferred.promise;
      }

      var resolve;
      var promise = new
      /*OK*/
      Promise(function (res) {
        return resolve = res;
      });
      pending[name] = {
        promise: promise,
        resolve: resolve
      };
      return promise;
    }
    /**
     * Upgrade all custom elements inside root.
     *
     * @param {!Node} root
     */
    ;

    _proto.upgrade = function upgrade(root) {
      this.registry_.upgrade(root);
    };

    return CustomElementRegistry;
  }();
  /**
   * This internal APIs necessary to run the CustomElementRegistry.
   * Since Registry is never exposed externally, all methods are actually
   * available on the instance.
   */


  var Registry =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function Registry(win) {
      /**
       * @private @const
       */
      this.win_ = win;
      /**
       * @private @const
       */

      this.doc_ = win.document;
      /**
       * @type {!Object<string, !CustomElementDef>}
       * @private
       * @const
       */

      this.definitions_ = win.Object.create(null);
      /**
       * A up-to-date DOM selector for all custom elements.
       * @type {string}
       */

      this.query_ = '';
      /**
       * The currently upgrading element.
       * @private {Element}
       */

      this.current_ = null;
      /**
       * Once started (after the first Custom Element definition), this tracks
       * DOM append and removals.
       *
       * @private {MutationObserver}
       */

      this.mutationObserver_ = null;
      /**
       * All the observed DOM trees, including shadow trees. This is cleared out
       * when the mutation observer is created.
       *
       * @private @const {!Array<!Node>}
       */

      this.observed_ = [win.document];
    }
    /**
     * The currently-being-upgraded custom element.
     *
     * When an already created (through the DOM parsing APIs, or innerHTML)
     * custom element node is being upgraded, we can't just create a new node
     * (it's illegal in the spec). But we still need to run the custom element's
     * constructor code on the node. We avoid this conundrum by running the
     * constructor while returning this current node in the HTMLElement
     * class constructor (the base class of all custom elements).
     *
     * @return {Element}
     */


    var _proto2 = Registry.prototype;

    _proto2.current = function current() {
      var current = this.current_;
      this.current_ = null;
      return current;
    }
    /**
     * Finds the custom element definition by name.
     *
     * @param {string} name
     * @return {CustomElementDef|undefined}
     */
    ;

    _proto2.getByName = function getByName(name) {
      var definition = this.definitions_[name];

      if (definition) {
        return definition;
      }
    }
    /**
     * Finds the custom element definition by constructor instance.
     *
     * @param {CustomElementConstructorDef} ctor
     * @return {CustomElementDef|undefined}
     */
    ;

    _proto2.getByConstructor = function getByConstructor(ctor) {
      var definitions = this.definitions_;

      for (var name in definitions) {
        var def = definitions[name];

        if (def.ctor === ctor) {
          return def;
        }
      }
    }
    /**
     * Registers the custom element definition, and upgrades all elements by that
     * name in the root document.
     *
     * @param {string} name
     * @param {!CustomElementConstructorDef} ctor
     * @param {!Object|undefined} options
     */
    ;

    _proto2.define = function define(name, ctor, options) {
      var _this$win_2 = this.win_,
          Error = _this$win_2.Error,
          SyntaxError = _this$win_2.SyntaxError;

      if (options) {
        throw new Error('Extending native custom elements is not supported');
      }

      assertValidName(SyntaxError, name);

      if (this.getByName(name) || this.getByConstructor(ctor)) {
        throw new Error("duplicate definition \"" + name + "\"");
      } // TODO(jridgewell): Record connectedCallback, disconnectedCallback,
      // adoptedCallback, attributeChangedCallback, and observedAttributes.
      // TODO(jridgewell): If attributeChangedCallback, gather observedAttributes


      this.definitions_[name] = {
        name: name,
        ctor: ctor
      };
      this.observe_(name);
      this.upgrade(this.doc_, name);
    }
    /**
     * Upgrades custom elements descendants of root (but not including root).
     *
     * When called with an opt_query, it both upgrades and connects the custom
     * elements (this is used during the custom element define algorithm).
     *
     * @param {!Node} root
     * @param {string=} opt_query
     */
    ;

    _proto2.upgrade = function upgrade(root, opt_query) {
      // Only CustomElementRegistry.p.define provides a query (the newly defined
      // custom element). In this case, we are both upgrading _and_ connecting
      // the custom elements.
      var newlyDefined = !!opt_query;
      var query = opt_query || this.query_;
      var upgradeCandidates = this.queryAll_(root, query);

      for (var i = 0; i < upgradeCandidates.length; i++) {
        var candidate = upgradeCandidates[i];

        if (newlyDefined) {
          this.connectedCallback_(candidate);
        } else {
          this.upgradeSelf(candidate);
        }
      }
    }
    /**
     * Upgrades the custom element node, if a custom element has been registered
     * by this name.
     *
     * @param {!Node} node
     */
    ;

    _proto2.upgradeSelf = function upgradeSelf(node) {
      var def = this.getByName(node.localName);

      if (!def) {
        return;
      }

      this.upgradeSelf_(
      /** @type {!Element} */
      node, def);
    }
    /**
     * @param {!Node} root
     * @param {string} query
     * @return {!Array|!NodeList}
     */
    ;

    _proto2.queryAll_ = function queryAll_(root, query) {
      if (!query || !root.querySelectorAll) {
        // Nothing to do...
        return [];
      }

      return root.querySelectorAll(query);
    }
    /**
     * Upgrades the (already created via DOM parsing) custom element.
     *
     * @param {!Element} node
     * @param {!CustomElementDef} def
     */
    ;

    _proto2.upgradeSelf_ = function upgradeSelf_(node, def) {
      var ctor = def.ctor;

      if (node instanceof ctor) {
        return;
      } // Despite how it looks, this is not a useless construction.
      // HTMLElementPolyfill (the base class of all custom elements) will return
      // the current node, allowing the custom element's subclass constructor to
      // run on the node. The node itself is already constructed, so the return
      // value is just the node.


      this.current_ = node;

      try {
        var el = new ctor();

        if (el !== node) {
          throw new this.win_.Error('Constructor illegally returned a different instance.');
        }
      } catch (e) {
        rethrowAsync(e);
      }
    }
    /**
     * Fires connectedCallback on the custom element, if it has one.
     * This also upgrades the custom element, since it may not have been
     * accessible via the root document before (a detached DOM tree).
     *
     * @param {!Node} node
     */
    ;

    _proto2.connectedCallback_ = function connectedCallback_(node) {
      var def = this.getByName(node.localName);

      if (!def) {
        return;
      }

      this.upgradeSelf_(
      /** @type {!Element} */
      node, def); // TODO(jridgewell): It may be appropriate to adoptCallback, if the node
      // used to be in another doc.
      // TODO(jridgewell): I should be calling the definitions connectedCallback
      // with node as the context.

      if (node.connectedCallback) {
        try {
          node.connectedCallback();
        } catch (e) {
          rethrowAsync(e);
        }
      }
    }
    /**
     * Fires disconnectedCallback on the custom element, if it has one.
     *
     * @param {!Node} node
     */
    ;

    _proto2.disconnectedCallback_ = function disconnectedCallback_(node) {
      // TODO(jridgewell): I should be calling the definitions connectedCallback
      // with node as the context.
      if (node.disconnectedCallback) {
        try {
          node.disconnectedCallback();
        } catch (e) {
          rethrowAsync(e);
        }
      }
    }
    /**
     * Records name as a registered custom element to observe.
     *
     * Starts the Mutation Observer if this is the first registered custom
     * element. This is deferred until the first custom element is defined to
     * speed up initial rendering of the page.
     *
     * Mutation Observers are conveniently available in every browser we care
     * about. When a node is connected to the root document, all custom
     * elements (including that node iteself) will be upgraded and call
     * connectedCallback. When a node is disconnectedCallback from the root
     * document, all custom elements will call disconnectedCallback.
     *
     * @param {string} name
     */
    ;

    _proto2.observe_ = function observe_(name) {
      var _this = this;

      if (this.query_) {
        this.query_ += "," + name;
        return;
      }

      this.query_ = name; // The first registered name starts the mutation observer.

      var mo = new this.win_.MutationObserver(function (records) {
        if (records) {
          _this.handleRecords_(records);
        }
      });
      this.mutationObserver_ = mo;
      this.observed_.forEach(function (tree) {
        mo.observe(tree, TRACK_SUBTREE);
      });
      this.observed_.length = 0;
      installPatches(this.win_, this);
    }
    /**
     * Adds the shadow tree to be observed by the polyfill.
     *
     * @param {!Node} tree
     */
    ;

    _proto2.observe = function observe(tree) {
      if (this.mutationObserver_) {
        this.mutationObserver_.observe(tree, TRACK_SUBTREE);
      } else {
        this.observed_.push(tree);
      }
    }
    /**
     * This causes a synchronous handling of all the Mutation Observer's tracked
     * mutations. This does nothing until the mutation observer is actually
     * registered on the first Custom Element definition.
     */
    ;

    _proto2.sync = function sync() {
      if (this.mutationObserver_) {
        this.handleRecords_(this.mutationObserver_.takeRecords());
      }
    }
    /**
     * Handle all the Mutation Observer's Mutation Records.
     * All added custom elements will be upgraded (if not already) and call
     * connectedCallback. All removed custom elements will call
     * disconnectedCallback.
     *
     * @param {!Array<!MutationRecord>} records
     */
    ;

    _proto2.handleRecords_ = function handleRecords_(records) {
      for (var i = 0; i < records.length; i++) {
        var record = records[i];

        if (!record) {
          continue;
        }

        var addedNodes = record.addedNodes,
            removedNodes = record.removedNodes;

        for (var _i = 0; _i < addedNodes.length; _i++) {
          var node = addedNodes[_i];
          var connectedCandidates = this.queryAll_(node, this.query_);
          this.connectedCallback_(node);

          for (var _i2 = 0; _i2 < connectedCandidates.length; _i2++) {
            this.connectedCallback_(connectedCandidates[_i2]);
          }
        }

        for (var _i3 = 0; _i3 < removedNodes.length; _i3++) {
          var _node = removedNodes[_i3];
          var disconnectedCandidates = this.queryAll_(_node, this.query_);
          this.disconnectedCallback_(_node);

          for (var _i4 = 0; _i4 < disconnectedCandidates.length; _i4++) {
            this.disconnectedCallback_(disconnectedCandidates[_i4]);
          }
        }
      }
    };

    return Registry;
  }();
  /**
   * Patches the DOM APIs to support synchronous Custom Elements.
   * @param {!Window} win
   * @param {!Registry} registry
   */


  function installPatches(win, registry) {
    var Document = win.Document,
        Element = win.Element,
        Node = win.Node,
        Object = win.Object;
    var docProto = Document.prototype;
    var elProto = Element.prototype;
    var nodeProto = Node.prototype;
    var createElement = docProto.createElement,
        importNode = docProto.importNode;
    var appendChild = nodeProto.appendChild,
        cloneNode = nodeProto.cloneNode,
        insertBefore = nodeProto.insertBefore,
        removeChild = nodeProto.removeChild,
        replaceChild = nodeProto.replaceChild; // Patch createElement to immediately upgrade the custom element.
    // This has the added benefit that it avoids the "already created but needs
    // constructor code run" chicken-and-egg problem.

    docProto.createElement = function (name) {
      var def = registry.getByName(name);

      if (def) {
        return new def.ctor();
      }

      return createElement.apply(this, arguments);
    }; // Patch importNode to immediately upgrade custom elements.
    // TODO(jridgewell): Can fire adoptedCallback for cross doc imports.


    docProto.importNode = function () {
      var imported = importNode.apply(this, arguments);

      if (imported) {
        registry.upgradeSelf(imported);
        registry.upgrade(imported);
      }

      return imported;
    }; // Patch appendChild to upgrade custom elements before returning.


    nodeProto.appendChild = function () {
      var appended = appendChild.apply(this, arguments);
      registry.sync();
      return appended;
    }; // Patch insertBefore to upgrade custom elements before returning.


    nodeProto.insertBefore = function () {
      var inserted = insertBefore.apply(this, arguments);
      registry.sync();
      return inserted;
    }; // Patch removeChild to upgrade custom elements before returning.


    nodeProto.removeChild = function () {
      var removed = removeChild.apply(this, arguments);
      registry.sync();
      return removed;
    }; // Patch replaceChild to upgrade and detach custom elements before returning.


    nodeProto.replaceChild = function () {
      var replaced = replaceChild.apply(this, arguments);
      registry.sync();
      return replaced;
    }; // Patch cloneNode to immediately upgrade custom elements.


    nodeProto.cloneNode = function () {
      var cloned = cloneNode.apply(this, arguments);
      registry.upgradeSelf(cloned);
      registry.upgrade(cloned);
      return cloned;
    }; // Patch the innerHTML setter to immediately upgrade custom elements.
    // Note, this could technically fire connectedCallbacks if this node was
    // connected, but we leave that to the Mutation Observer.


    var innerHTMLDesc = Object.getOwnPropertyDescriptor(elProto, 'innerHTML');
    var innerHTMLSetter = innerHTMLDesc.set;

    innerHTMLDesc.set = function (html) {
      innerHTMLSetter.call(this, html);
      registry.upgrade(this);
    };

    Object.defineProperty(elProto, 'innerHTML', innerHTMLDesc);
  }
  /**
   * Does the polyfilling.
   * @param {!Window} win
   */


  function polyfill(win) {
    var Element = win.Element,
        HTMLElement = win.HTMLElement,
        Object = win.Object,
        document = win.document;
    var createElement = document.createElement;
    var registry = new Registry(win);
    var customElements = new CustomElementRegistry(win, registry); // Expose the custom element registry.
    // Object.getOwnPropertyDescriptor(window, 'customElements')
    // {get: ƒ, set: undefined, enumerable: true, configurable: true}

    Object.defineProperty(win, 'customElements', {
      enumerable: true,
      configurable: true,
      // writable: false,
      value: customElements
    }); // Have to patch shadow methods now, since there's no way to find shadow trees
    // later.

    var elProto = Element.prototype;
    var attachShadow = elProto.attachShadow,
        createShadowRoot = elProto.createShadowRoot;

    if (attachShadow) {
      /**
      * @param {!{mode: string}} unused
      * @return {!ShadowRoot}
      */
      elProto.attachShadow = function (unused) {
        var shadow = attachShadow.apply(this, arguments);
        registry.observe(shadow);
        return shadow;
      }; // Necessary for Shadow AMP


      elProto.attachShadow.toString = function () {
        return attachShadow.toString();
      };
    }

    if (createShadowRoot) {
      /**
      * @return {!ShadowRoot}
      */
      elProto.createShadowRoot = function () {
        var shadow = createShadowRoot.apply(this, arguments);
        registry.observe(shadow);
        return shadow;
      }; // Necessary for Shadow AMP


      elProto.createShadowRoot.toString = function () {
        return createShadowRoot.toString();
      };
    }
    /**
     * You can't use the real HTMLElement constructor, because you can't subclass
     * it without using native classes. So, mock its approximation using
     * createElement.
     */


    function HTMLElementPolyfill() {
      var constructor = this.constructor; // If we're upgrading an already created custom element, we can't create
      // another new node (by the spec, it must be the same node).

      var el = registry.current(); // If there's not a already created custom element, we're being invoked via
      // `new`ing the constructor.
      //
      // Technically, we could get here via createElement, but we patched that.
      // If it the custom element was registered, the patch turned it into a
      // `new` call.
      // If it was not registered, the native createElement is used. And if
      // native createElement is being used and we got to this code, we're really
      // in an infinite loop (a native createElement call just below) so we've
      // got bigger problems.
      //
      // So just take my word we got here via `new`.

      if (!el) {
        // The custom element definition is an invariant. If the custom element
        // is registered, everything works. If it's not, it throws in the member
        // property access (only defined custom elements can be directly
        // constructed via `new`).
        var def = registry.getByConstructor(constructor);
        el = createElement.call(document, def.name);
      } // Finally, if the node was already constructed, we need to reset it's
      // prototype to the custom element prototype. And if it wasn't already
      // constructed, we created a new node via native createElement, and we need
      // to reset it's prototype. Basically always reset the prototype.


      Object.setPrototypeOf(el, constructor.prototype);
      return el;
    }

    subClass(Object, HTMLElement, HTMLElementPolyfill); // Expose the polyfilled HTMLElement constructor for everyone to extend from.

    win.HTMLElement = HTMLElementPolyfill;
  }
  /**
   * Wraps HTMLElement in a Reflect.construct constructor, so that transpiled
   * classes can `_this = superClass.call(this)` during their construction.
   *
   * This is only used when Custom Elements v1 is already available _and_ we're
   * using transpiled classes (which use ES5 construction idioms).
   *
   * @param {!Window} win
   * @suppress {globalThis}
   */


  function wrapHTMLElement(win) {
    var HTMLElement = win.HTMLElement,
        Reflect = win.Reflect,
        Object = win.Object;
    /**
     */

    function HTMLElementWrapper() {
      var ctor =
      /** @type {function(...?):?|undefined} */
      this.constructor; // Reflect.construct allows us to construct a new HTMLElement without using
      // `new` (which will always fail because native HTMLElement is a restricted
      // constructor).

      return Reflect.construct(HTMLElement, [], ctor);
    }

    subClass(Object, HTMLElement, HTMLElementWrapper); // Expose the wrapped HTMLElement constructor for everyone to extend from.

    win.HTMLElement = HTMLElementWrapper;
  }
  /**
   * Setups up prototype inheritance
   *
   * @param {!Object} Object
   * @param {!Function} superClass
   * @param {!Function} subClass
   */


  function subClass(Object, superClass, subClass) {
    // Object.getOwnPropertyDescriptor(superClass.prototype, 'constructor')
    // {value: ƒ, writable: true, enumerable: false, configurable: true}
    subClass.prototype = Object.create(superClass.prototype, {
      constructor: {
        // enumerable: false,
        configurable: true,
        writable: true,
        value: subClass
      }
    });
  }
  /**
   * Polyfills Custom Elements v1 API. This has 5 modes:
   *
   * 1. Custom elements v1 already supported, using native classes
   * 2. Custom elements v1 already supported, using transpiled classes
   * 3. Custom elements v1 not supported, using native classes
   * 4. Custom elements v1 not supported, using transpiled classes
   * 5. No sample class constructor provided
   *
   * In mode 1, nothing is done. In mode 2, a minimal polyfill is used to support
   * extending the HTMLElement base class. In mode 3, 4, and 5 a full polyfill is
   * done.
   *
   * @param {!Window} win
   * @param {!Function=} opt_ctor
   */


  function install(win, opt_ctor) {
    if (isPatched(win)) {
      return;
    }

    var install = true;
    var installWrapper = false;

    if (opt_ctor && hasCustomElements(win)) {
      // If ctor is constructable without new, it's a function. That means it was
      // compiled down, and we need to do the minimal polyfill because all you
      // cannot extend HTMLElement without native classes.
      try {
        var _Object = win.Object,
            _Reflect = win.Reflect; // "Construct" ctor using ES5 idioms

        var instance = _Object.create(opt_ctor.prototype);

        opt_ctor.call(instance); // If that succeeded, we're in a transpiled environment
        // Let's find out if we can wrap HTMLElement and avoid a full patch.

        installWrapper = !!(_Reflect && _Reflect.construct);
      } catch (e) {
        // The ctor threw when we constructed is via ES5, so it's a real class.
        // We're ok to not install the polyfill.
        install = false;
      }
    }

    if (installWrapper) {
      wrapHTMLElement(win);
    } else if (install) {
      polyfill(win);
    }
  }

  },{}],60:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.install = install;

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Polyfill for `document.contains()` method. Notice that according to spec
   * `document.contains` is inclusionary.
   * See https://developer.mozilla.org/en-US/docs/Web/API/Node/contains
   * @param {?Node} node
   * @return {boolean}
   * @this {Node}
   */
  function documentContainsPolyfill(node) {
    // Per spec, "contains" method is inclusionary
    // i.e. `node.contains(node) == true`. However, we still need to test
    // equality to the document itself.
    return node == this || this.documentElement.contains(node);
  }
  /**
   * Polyfills `HTMLDocument.contains` API.
   * @param {!Window} win
   */


  function install(win) {
    // HTMLDocument is undefined in Internet Explorer 10, but it has Document,
    // so we use that as a fallback.
    var documentClass = win.HTMLDocument || win.Document;

    if (!documentClass.prototype.contains) {
      win.Object.defineProperty(documentClass.prototype, 'contains', {
        enumerable: false,
        configurable: true,
        writable: true,
        value: documentContainsPolyfill
      });
    }
  }

  },{}],61:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.install = install;

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Polyfill for `DOMTokenList.prototype.toggle(token, opt_force)` method. This
   * is specially important because IE does not support `opt_force` attribute. See
   * https://goo.gl/hgKNYY for details.
   * @param {string} token
   * @param {boolean=} opt_force
   * @this {DOMTokenList}
   * @return {boolean}
   */
  function domTokenListTogglePolyfill(token, opt_force) {
    var remove = opt_force === undefined ? this.contains(token) : !opt_force;

    if (remove) {
      this.remove(token);
      return false;
    } else {
      this.add(token);
      return true;
    }
  }
  /**
   * Polyfills `DOMTokenList.prototype.toggle` API in IE.
   * @param {!Window} win
   */


  function install(win) {
    if (isIe(win) && win.DOMTokenList) {
      win.Object.defineProperty(win.DOMTokenList.prototype, 'toggle', {
        enumerable: false,
        configurable: true,
        writable: true,
        value: domTokenListTogglePolyfill
      });
    }
  }
  /**
   * Whether the current browser is a IE browser.
   * @param {!Window} win
   * @return {boolean}
   */


  function isIe(win) {
    return /Trident|MSIE|IEMobile/i.test(win.navigator.userAgent);
  }

  },{}],62:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.fetchPolyfill = fetchPolyfill;
  exports.install = install;
  exports.Response = void 0;

  var _log = require("../log");

  var _object = require("../utils/object");

  var _types = require("../types");

  var _json = require("../json");

  var _bytes = require("../utils/bytes");

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  /** @enum {number} Allowed fetch responses. */
  var allowedFetchTypes = {
    document: 1,
    text: 2
  };
  /** @const {!Array<string>} */

  var allowedMethods = ['GET', 'POST'];
  /**
   * A record version of `XMLHttpRequest` that has all the necessary properties
   * and methods of `XMLHttpRequest` to construct a `FetchResponse` from a
   * serialized response returned by the viewer.
   * @typedef {{
   *   status: number,
   *   statusText: string,
   *   responseText: string,
   *   getResponseHeader: function(this:XMLHttpRequestDef, string): string,
   * }}
   */

  var XMLHttpRequestDef;
  /**
   * A minimal polyfill of Fetch API. It only polyfills what we currently use.
   *
   * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch
   *
   * Notice that the "fetch" method itself is not exported as that would require
   * us to immediately support a much wide API.
   *
   * @param {string} input
   * @param {!Object|RequestInit=} init
   * @return {!Promise<!FetchResponse>}
   */

  function fetchPolyfill(input, init) {
    if (init === void 0) {
      init = {};
    }

    return new Promise(function (resolve, reject) {
      var requestMethod = normalizeMethod(init.method || 'GET');
      var xhr = createXhrRequest(requestMethod, input);

      if (init.credentials == 'include') {
        xhr.withCredentials = true;
      }

      if (init.responseType in allowedFetchTypes) {
        xhr.responseType = init.responseType;
      }

      if (init.headers) {
        Object.keys(init.headers).forEach(function (header) {
          xhr.setRequestHeader(header, init.headers[header]);
        });
      }

      xhr.onreadystatechange = function () {
        if (xhr.readyState <
        /* STATUS_RECEIVED */
        2) {
          return;
        }

        if (xhr.status < 100 || xhr.status > 599) {
          xhr.onreadystatechange = null;
          reject((0, _log.user)().createExpectedError("Unknown HTTP status " + xhr.status));
          return;
        } // TODO(dvoytenko): This is currently simplified: we will wait for the
        // whole document loading to complete. This is fine for the use cases
        // we have now, but may need to be reimplemented later.


        if (xhr.readyState ==
        /* COMPLETE */
        4) {
          resolve(new FetchResponse(xhr));
        }
      };

      xhr.onerror = function () {
        reject((0, _log.user)().createExpectedError('Network failure'));
      };

      xhr.onabort = function () {
        reject((0, _log.user)().createExpectedError('Request aborted'));
      };

      if (requestMethod == 'POST') {
        xhr.send(init.body);
      } else {
        xhr.send();
      }
    });
  }
  /**
   * @param {string} method
   * @param {string} url
   * @return {!XMLHttpRequest}
   */


  function createXhrRequest(method, url) {
    var xhr = new XMLHttpRequest();

    if ('withCredentials' in xhr) {
      xhr.open(method, url, true);
    } else {
      throw (0, _log.dev)().createExpectedError('CORS is not supported');
    }

    return xhr;
  }
  /**
   * Response object in the Fetch API.
   *
   * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch
   */


  var FetchResponse =
  /*#__PURE__*/
  function () {
    /**
     * @param {!XMLHttpRequest|!XMLHttpRequestDef} xhr
     */
    function FetchResponse(xhr) {
      /** @private @const {!XMLHttpRequest|!XMLHttpRequestDef} */
      this.xhr_ = xhr;
      /** @const {number} */

      this.status = this.xhr_.status;
      /** @const {string} */

      this.statusText = this.xhr_.statusText;
      /** @const {boolean} */

      this.ok = this.status >= 200 && this.status < 300;
      /** @const {!FetchResponseHeaders} */

      this.headers = new FetchResponseHeaders(xhr);
      /** @type {boolean} */

      this.bodyUsed = false;
      /** @type {?ReadableStream} */

      this.body = null;
    }
    /**
     * Create a copy of the response and return it.
     * @return {!FetchResponse}
     */


    var _proto = FetchResponse.prototype;

    _proto.clone = function clone() {
      (0, _log.devAssert)(!this.bodyUsed, 'Body already used');
      return new FetchResponse(this.xhr_);
    }
    /**
     * Drains the response and returns the text.
     * @return {!Promise<string>}
     * @private
     */
    ;

    _proto.drainText_ = function drainText_() {
      (0, _log.devAssert)(!this.bodyUsed, 'Body already used');
      this.bodyUsed = true;
      return Promise.resolve(this.xhr_.responseText);
    }
    /**
     * Drains the response and returns a promise that resolves with the response
     * text.
     * @return {!Promise<string>}
     */
    ;

    _proto.text = function text() {
      return this.drainText_();
    }
    /**
     * Drains the response and returns the JSON object.
     * @return {!Promise<!JsonObject>}
     */
    ;

    _proto.json = function json() {
      return (
        /** @type {!Promise<!JsonObject>} */
        this.drainText_().then(_json.parseJson)
      );
    }
    /**
     * Drains the response and returns a promise that resolves with the response
     * ArrayBuffer.
     * @return {!Promise<!ArrayBuffer>}
     */
    ;

    _proto.arrayBuffer = function arrayBuffer() {
      return (
        /** @type {!Promise<!ArrayBuffer>} */
        this.drainText_().then(_bytes.utf8Encode)
      );
    };

    return FetchResponse;
  }();
  /**
   * Normalized method name by uppercasing.
   * @param {string|undefined} method
   * @return {string}
   * @private
   */


  function normalizeMethod(method) {
    if (method === undefined) {
      return 'GET';
    }

    method = method.toUpperCase();
    (0, _log.devAssert)(allowedMethods.includes(method), 'Only one of %s is currently allowed. Got %s', allowedMethods.join(', '), method);
    return method;
  }
  /**
   * Provides access to the response headers as defined in the Fetch API.
   * @private Visible for testing.
   */


  var FetchResponseHeaders =
  /*#__PURE__*/
  function () {
    /**
     * @param {!XMLHttpRequest|!XMLHttpRequestDef} xhr
     */
    function FetchResponseHeaders(xhr) {
      /** @private @const {!XMLHttpRequest|!XMLHttpRequestDef} */
      this.xhr_ = xhr;
    }
    /**
     * @param {string} name
     * @return {string}
     */


    var _proto2 = FetchResponseHeaders.prototype;

    _proto2.get = function get(name) {
      return this.xhr_.getResponseHeader(name);
    }
    /**
     * @param {string} name
     * @return {boolean}
     */
    ;

    _proto2.has = function has(name) {
      return this.xhr_.getResponseHeader(name) != null;
    };

    return FetchResponseHeaders;
  }();

  var Response =
  /*#__PURE__*/
  function (_FetchResponse) {
    _inheritsLoose(Response, _FetchResponse);

    /**
     * Returns instance of Response.
     * @param {?ResponseBodyInit=} body
     * @param {!ResponseInit=} init
     */
    function Response(body, init) {
      if (init === void 0) {
        init = {};
      }

      var lowercasedHeaders = (0, _object.map)();
      var data = Object.assign({
        status: 200,
        statusText: 'OK',
        responseText: body ? String(body) : '',

        /**
         * @param {string} name
         * @return {string}
         */
        getResponseHeader: function getResponseHeader(name) {
          var headerName = String(name).toLowerCase();
          return (0, _object.hasOwn)(lowercasedHeaders, headerName) ? lowercasedHeaders[headerName] : null;
        }
      }, init);
      data.status = init.status === undefined ? 200 : parseInt(init.status, 10);

      if ((0, _types.isArray)(init.headers)) {
        init.headers.forEach(function (entry) {
          var headerName = entry[0];
          var headerValue = entry[1];
          lowercasedHeaders[String(headerName).toLowerCase()] = String(headerValue);
        });
      } else if ((0, _types.isObject)(init.headers)) {
        for (var key in init.headers) {
          lowercasedHeaders[String(key).toLowerCase()] = String(init.headers[key]);
        }
      }

      if (init.statusText) {
        data.statusText = String(init.statusText);
      }

      return _FetchResponse.call(this,
      /** @type {XMLHttpRequestDef} */
      data) || this;
    }

    return Response;
  }(FetchResponse);
  /**
   * Installs fetch and Response polyfill
   *
   * @export
   * @param {Window} win
   */


  exports.Response = Response;

  function install(win) {
    if (!win.fetch) {
      Object.defineProperty(win, 'fetch', {
        value: fetchPolyfill,
        writable: true,
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(win, 'Response', {
        value: Response,
        writable: true,
        enumerable: false,
        configurable: true
      });
    }
  }

  },{"../json":46,"../log":51,"../types":121,"../utils/bytes":127,"../utils/object":132}],63:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.sign = sign;
  exports.install = install;

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Parses the number x and returns its sign. For positive x returns 1, for
   * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number
   * that parses to NaN, returns NaN.
   *
   * @param {number} x
   * @return {number}
   */
  function sign(x) {
    x = Number(x); // If x is 0, -0, or NaN, return it.

    if (!x) {
      return x;
    }

    return x > 0 ? 1 : -1;
  }
  /**
   * Sets the Math.sign polyfill if it does not exist.
   * @param {!Window} win
   */


  function install(win) {
    if (!win.Math.sign) {
      win.Object.defineProperty(win.Math, 'sign', {
        enumerable: false,
        configurable: true,
        writable: true,
        value: sign
      });
    }
  }

  },{}],64:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.assign = assign;
  exports.install = install;

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  /**
   * Copies values of all enumerable own properties from one or more source
   * objects (provided as extended arguments to the function) to a target object.
   *
   * @param {!Object} target
   * @param {...Object} var_args
   * @return {!Object}
   */

  function assign(target, var_args) {
    if (target == null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }

    var output = Object(target);

    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      if (source != null) {
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            output[key] = source[key];
          }
        }
      }
    }

    return output;
  }
  /**
   * Sets the Object.assign polyfill if it does not exist.
   * @param {!Window} win
   */


  function install(win) {
    if (!win.Object.assign) {
      win.Object.defineProperty(win.Object, 'assign', {
        enumerable: false,
        configurable: true,
        writable: true,
        value: assign
      });
    }
  }

  },{}],65:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.values = values;
  exports.install = install;

  /**
   * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Implements `Object.values` API.
   * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values.
   *
   * @param {!Object} target
   * @return {!Array<*>}
   */
  function values(target) {
    return Object.keys(target).map(function (k) {
      return target[k];
    });
  }
  /**
   * Sets the Object.values polyfill if it does not exist.
   * @param {!Window} win
   */


  function install(win) {
    if (!win.Object.values) {
      win.Object.defineProperty(win.Object, 'values', {
        configurable: true,
        writable: true,
        value: values
      });
    }
  }

  },{}],66:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.install = install;

  var _promise = _interopRequireDefault(require("promise-pjs/promise"));

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Sets the Promise polyfill if it does not exist.
   * @param {!Window} win
   */
  function install(win) {
    if (!win.Promise) {
      win.Promise =
      /** @type {?} */
      _promise.default; // In babel the * export is an Object with a default property.
      // In closure compiler it is the Promise function itself.

      if (_promise.default.default) {
        win.Promise = _promise.default.default;
      } // We copy the individual static methods, because closure
      // compiler flattens the polyfill namespace.


      win.Promise.resolve = _promise.default.resolve;
      win.Promise.reject = _promise.default.reject;
      win.Promise.all = _promise.default.all;
      win.Promise.race = _promise.default.race;
    }
  }

  },{"promise-pjs/promise":6}],67:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.setPreconnectFeaturesForTesting = setPreconnectFeaturesForTesting;
  exports.preconnectForElement = preconnectForElement;
  exports.Preconnect = void 0;

  var _services = require("./services");

  var _log = require("./log");

  var _service = require("./service");

  var _staticTemplate = require("./static-template");

  var _url3 = require("./url");

  var _string = require("./string");

  var _types = require("./types");

  function _templateObject() {
    var data = _taggedTemplateLiteralLoose(["\n        <link rel=\"preload\" referrerpolicy=\"origin\" />"]);

    _templateObject = function _templateObject() {
      return data;
    };

    return data;
  }

  function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

  var ACTIVE_CONNECTION_TIMEOUT_MS = 180 * 1000;
  var PRECONNECT_TIMEOUT_MS = 10 * 1000;
  /**
   * @typedef {{
   *   preload: (boolean|undefined),
   *   preconnect: (boolean|undefined)
   * }}
   */

  var PreconnectFeaturesDef;
  /** @private {?PreconnectFeaturesDef} */

  var preconnectFeatures = null;
  /**
   * Detect related features if feature detection is supported by the
   * browser. Even if this fails, the browser may support the feature.
   * @param {!Window} win
   * @return {!PreconnectFeaturesDef}
   */

  function getPreconnectFeatures(win) {
    if (!preconnectFeatures) {
      var linkTag = win.document.createElement('link');
      var tokenList = linkTag['relList'];
      linkTag.as = 'invalid-value';

      if (!tokenList || !tokenList.supports) {
        return {};
      }

      preconnectFeatures = {
        preconnect: tokenList.supports('preconnect'),
        preload: tokenList.supports('preload'),
        onlyValidAs: linkTag.as != 'invalid-value'
      };
    }

    return preconnectFeatures;
  }
  /**
   * @param {?PreconnectFeaturesDef} features
   */


  function setPreconnectFeaturesForTesting(features) {
    preconnectFeatures = features;
  }

  var PreconnectService =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function PreconnectService(win) {
      /** @private @const {!Document} */
      this.document_ = win.document;
      /** @private @const {!Element} */

      this.head_ = (0, _log.dev)().assertElement(win.document.head);
      /**
       * Origin we've preconnected to and when that connection
       * expires as a timestamp in MS.
       * @private @const {!Object<string, number>}
       */

      this.origins_ = {};
      /**
       * Urls we've prefetched.
       * @private @const {!Object<string, boolean>}
       */

      this.urls_ = {};
      /** @private @const {!./service/platform-impl.Platform}  */

      this.platform_ = _services.Services.platformFor(win); // Mark current origin as preconnected.

      this.origins_[(0, _url3.parseUrlDeprecated)(win.location.href).origin] = true;
      /**
       * Detect support for the given resource hints.
       * Unfortunately not all browsers support this, so this can only
       * be used as an affirmative signal.
       * @private @const {!PreconnectFeaturesDef}
       */

      this.features_ = getPreconnectFeatures(win);
      /** @private @const {!./service/timer-impl.Timer} */

      this.timer_ = _services.Services.timerFor(win);
    }
    /**
     * Preconnects to a URL. Always also does a dns-prefetch because
     * browser support for that is better.
     * @param {!./service/viewer-impl.Viewer} viewer
     * @param {string} url
     * @param {boolean=} opt_alsoConnecting Set this flag if you also just
     *    did or are about to connect to this host. This is for the case
     *    where preconnect is issued immediate before or after actual connect
     *    and preconnect is used to flatten a deep HTTP request chain.
     *    E.g. when you preconnect to a host that an embed will connect to
     *    when it is more fully rendered, you already know that the connection
     *    will be used very soon.
     */


    var _proto = PreconnectService.prototype;

    _proto.url = function url(viewer, _url, opt_alsoConnecting) {
      var _this = this;

      viewer.whenFirstVisible().then(function () {
        _this.url_(viewer, _url, opt_alsoConnecting);
      });
    }
    /**
     * Preconnects to a URL. Always also does a dns-prefetch because
     * browser support for that is better.
     * @param {!./service/viewer-impl.Viewer} viewer
     * @param {string} url
     * @param {boolean=} opt_alsoConnecting Set this flag if you also just
     *    did or are about to connect to this host. This is for the case
     *    where preconnect is issued immediate before or after actual connect
     *    and preconnect is used to flatten a deep HTTP request chain.
     *    E.g. when you preconnect to a host that an embed will connect to
     *    when it is more fully rendered, you already know that the connection
     *    will be used very soon.
     */
    ;

    _proto.url_ = function url_(viewer, url, opt_alsoConnecting) {
      if (!this.isInterestingUrl_(url)) {
        return;
      }

      var _parseUrlDeprecated = (0, _url3.parseUrlDeprecated)(url),
          origin = _parseUrlDeprecated.origin;

      var now = Date.now();
      var lastPreconnectTimeout = this.origins_[origin];

      if (lastPreconnectTimeout && now < lastPreconnectTimeout) {
        if (opt_alsoConnecting) {
          this.origins_[origin] = now + ACTIVE_CONNECTION_TIMEOUT_MS;
        }

        return;
      } // If we are about to use the connection, don't re-preconnect for
      // 180 seconds.


      var timeout = opt_alsoConnecting ? ACTIVE_CONNECTION_TIMEOUT_MS : PRECONNECT_TIMEOUT_MS;
      this.origins_[origin] = now + timeout; // If we know that preconnect is supported, there is no need to do
      // dedicated dns-prefetch.

      var dns;

      if (!this.features_.preconnect) {
        dns = this.document_.createElement('link');
        dns.setAttribute('rel', 'dns-prefetch');
        dns.setAttribute('href', origin);
        this.head_.appendChild(dns);
      }

      var preconnect = this.document_.createElement('link');
      preconnect.setAttribute('rel', 'preconnect');
      preconnect.setAttribute('href', origin);
      preconnect.setAttribute('referrerpolicy', 'origin');
      this.head_.appendChild(preconnect); // Remove the tags eventually to free up memory.

      this.timer_.delay(function () {
        if (dns && dns.parentNode) {
          dns.parentNode.removeChild(dns);
        }

        if (preconnect.parentNode) {
          preconnect.parentNode.removeChild(preconnect);
        }
      }, 10000);
      this.preconnectPolyfill_(viewer, origin);
    }
    /**
     * Asks the browser to preload a URL. Always also does a preconnect
     * because browser support for that is better.
     *
     * @param {!./service/viewer-impl.Viewer} viewer
     * @param {string} url
     * @param {string=} opt_preloadAs
     */
    ;

    _proto.preload = function preload(viewer, url, opt_preloadAs) {
      var _this2 = this;

      if (!this.isInterestingUrl_(url)) {
        return;
      }

      if (this.urls_[url]) {
        return;
      }

      this.urls_[url] = true;
      this.url(viewer, url,
      /* opt_alsoConnecting */
      true);

      if (!this.features_.preload) {
        return;
      }

      if (opt_preloadAs == 'document' && this.platform_.isSafari()) {
        // Preloading documents currently does not work in Safari,
        // because it
        // - does not support preloading iframes
        // - and uses a different cache for iframes (when loaded without
        //   as attribute).
        return;
      }

      viewer.whenFirstVisible().then(function () {
        _this2.performPreload_(url);
      });
    }
    /**
     * Performs a preload using `<link rel="preload">`.
     * @param {string} url
     * @private
     */
    ;

    _proto.performPreload_ = function performPreload_(url) {
      var preload = (0, _staticTemplate.htmlFor)(this.document_)(_templateObject());
      preload.setAttribute('href', url); // Do not set 'as' attribute to correct value for now, for 2 reasons
      // - document value is not yet supported and dropped
      // - script is blocked due to CSP.
      // Due to spec change we now have to also preload with the "as"
      // being set to `fetch` when it would previously would be empty.
      // See https://github.com/w3c/preload/issues/80
      // for details.

      if (this.features_.onlyValidAs) {
        preload.as = 'fetch';
      } else {
        preload.as = '';
      }

      this.head_.appendChild(preload); // As opposed to preconnect we do not clean this tag up, because there is
      // no expectation as to it having an immediate effect.
    }
    /**
     * Skips over non HTTP/HTTPS URL.
     * @param {string} url
     * @return {boolean}
     */
    ;

    _proto.isInterestingUrl_ = function isInterestingUrl_(url) {
      if ((0, _string.startsWith)(url, 'https:') || (0, _string.startsWith)(url, 'http:')) {
        return true;
      }

      return false;
    }
    /**
     * Safari does not support preconnecting, but due to its significant
     * performance benefits we implement this crude polyfill.
     *
     * We make an image connection to a "well-known" file on the origin adding
     * a random query string to bust the cache (no caching because we do want to
     * actually open the connection).
     *
     * This should get us an open SSL connection to these hosts and significantly
     * speed up the next connections.
     *
     * The actual URL is expected to 404. If you see errors for
     * amp_preconnect_polyfill in your DevTools console or server log:
     * This is expected and fine to leave as is. Its fine to send a non 404
     * response, but please make it small :)
     *
     * @param {!./service/viewer-impl.Viewer} viewer
     * @param {string} origin
     * @private
     */
    ;

    _proto.preconnectPolyfill_ = function preconnectPolyfill_(viewer, origin) {
      // Unfortunately there is no reliable way to feature detect whether
      // preconnect is supported, so we do this only in Safari, which is
      // the most important browser without support for it.
      if (this.features_.preconnect || !(this.platform_.isSafari() || this.platform_.isIos())) {
        return;
      } // Don't attempt to preconnect for ACTIVE_CONNECTION_TIMEOUT_MS since
      // we effectively create an active connection.
      // TODO(@cramforce): Confirm actual http2 timeout in Safari.


      var now = Date.now();
      this.origins_[origin] = now + ACTIVE_CONNECTION_TIMEOUT_MS; // Make the URL change whenever we want to make a new request,
      // but make it stay stable in between. While a given page
      // would not actually make a new request, another page might
      // and with this it has the same URL. If (and that is a big if)
      // the server responds with a cacheable response, this reduces
      // requests we make. More importantly, though, it reduces URL
      // entropy as seen by servers and thus allows reverse proxies
      // (read CDNs) to respond more efficiently.

      var cacheBust = now - now % ACTIVE_CONNECTION_TIMEOUT_MS;
      var url = origin + '/amp_preconnect_polyfill_404_or_other_error_expected.' + '_Do_not_worry_about_it?' + cacheBust;
      var xhr = new XMLHttpRequest();
      xhr.open('HEAD', url, true); // We only support credentialed preconnect for now.

      xhr.withCredentials = true;
      xhr.send();
    };

    return PreconnectService;
  }();

  var Preconnect =
  /*#__PURE__*/
  function () {
    /**
     * @param {!PreconnectService} preconnectService
     * @param {!Element} element
     */
    function Preconnect(preconnectService, element) {
      /** @const @private {!PreconnectService} */
      this.preconnectService_ = preconnectService;
      /** @const @private {!Element} */

      this.element_ = element;
      /** @private {?./service/viewer-impl.Viewer} */

      this.viewer_ = null;
    }
    /**
     * @return {!./service/viewer-impl.Viewer}
     * @private
     */


    var _proto2 = Preconnect.prototype;

    _proto2.getViewer_ = function getViewer_() {
      if (!this.viewer_) {
        this.viewer_ = _services.Services.viewerForDoc(this.element_);
      }

      return this.viewer_;
    }
    /**
     * Preconnects to a URL. Always also does a dns-prefetch because
     * browser support for that is better.
     * @param {string} url
     * @param {boolean=} opt_alsoConnecting Set this flag if you also just
     *    did or are about to connect to this host. This is for the case
     *    where preconnect is issued immediate before or after actual connect
     *    and preconnect is used to flatten a deep HTTP request chain.
     *    E.g. when you preconnect to a host that an embed will connect to
     *    when it is more fully rendered, you already know that the connection
     *    will be used very soon.
     */
    ;

    _proto2.url = function url(_url2, opt_alsoConnecting) {
      this.preconnectService_.url(this.getViewer_(), _url2, opt_alsoConnecting);
    }
    /**
     * Asks the browser to preload a URL. Always also does a preconnect
     * because browser support for that is better.
     *
     * @param {string} url
     * @param {string=} opt_preloadAs
     */
    ;

    _proto2.preload = function preload(url, opt_preloadAs) {
      this.preconnectService_.preload(this.getViewer_(), url, opt_preloadAs);
    };

    return Preconnect;
  }();
  /**
   * @param {!Element} element
   * @return {!Preconnect}
   */


  exports.Preconnect = Preconnect;

  function preconnectForElement(element) {
    var serviceHolder = (0, _types.toWin)(element.ownerDocument.defaultView);
    (0, _service.registerServiceBuilder)(serviceHolder, 'preconnect', PreconnectService);
    var preconnectService = (0, _service.getService)(serviceHolder, 'preconnect');
    return new Preconnect(preconnectService, element);
  }

  },{"./log":51,"./service":71,"./services":112,"./static-template":115,"./string":116,"./types":121,"./url":124}],68:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installPullToRefreshBlocker = installPullToRefreshBlocker;
  exports.PullToRefreshBlocker = void 0;

  var _services = require("./services");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Installs "pull-to-refresh" (P2R) blocker if viewer has requested. P2R can
   * be very disruptive for different viewer scenarios. This is currently only
   * done on Chrome (both Android and iOS).
   * @param {!Window} win
   */
  function installPullToRefreshBlocker(win) {
    // Only do when requested and don't even try it on Safari!
    // This mode is only executed in the single-doc mode.
    var documentElement = win.document.documentElement;

    if (_services.Services.viewerForDoc(documentElement).getParam('p2r') == '0' && _services.Services.platformFor(win).isChrome()) {
      new PullToRefreshBlocker(win.document, _services.Services.viewportForDoc(documentElement));
    }
  }
  /**
   * Visible for testing only.
   * @private
   */


  var PullToRefreshBlocker =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Document} doc
     * @param {!./service/viewport/viewport-impl.Viewport} viewport
     */
    function PullToRefreshBlocker(doc, viewport) {
      /** @private {!Document} */
      this.doc_ = doc;
      /** @private @const */

      this.viewport_ = viewport;
      /** @private {boolean} */

      this.tracking_ = false;
      /** @private {number} */

      this.startPos_ = 0;
      /** @private {!Function} */

      this.boundTouchStart_ = this.onTouchStart_.bind(this);
      /** @private {!Function} */

      this.boundTouchMove_ = this.onTouchMove_.bind(this);
      /** @private {!Function} */

      this.boundTouchEnd_ = this.onTouchEnd_.bind(this);
      /** @private {!Function} */

      this.boundTouchCancel_ = this.onTouchCancel_.bind(this);
      this.doc_.addEventListener('touchstart', this.boundTouchStart_, true);
    }
    /** */


    var _proto = PullToRefreshBlocker.prototype;

    _proto.cleanup = function cleanup() {
      this.stopTracking_();
      this.doc_.removeEventListener('touchstart', this.boundTouchStart_, true);
    }
    /**
     * @param {!Event} event
     * @private
     */
    ;

    _proto.onTouchStart_ = function onTouchStart_(event) {
      // P2R won't trigger when document is scrolled. Also can ignore when we are
      // already tracking this touch and for non-single-touch events.
      if (this.tracking_ || !(event.touches && event.touches.length == 1) || this.viewport_.getScrollTop() > 0) {
        return;
      }

      this.startTracking_(event.touches[0].clientY);
    }
    /**
     * @param {number} startPos
     * @private
     */
    ;

    _proto.startTracking_ = function startTracking_(startPos) {
      this.tracking_ = true;
      this.startPos_ = startPos;
      this.doc_.addEventListener('touchmove', this.boundTouchMove_, true);
      this.doc_.addEventListener('touchend', this.boundTouchEnd_, true);
      this.doc_.addEventListener('touchcancel', this.boundTouchCancel_, true);
    }
    /** @private */
    ;

    _proto.stopTracking_ = function stopTracking_() {
      this.tracking_ = false;
      this.startPos_ = 0;
      this.doc_.removeEventListener('touchmove', this.boundTouchMove_, true);
      this.doc_.removeEventListener('touchend', this.boundTouchEnd_, true);
      this.doc_.removeEventListener('touchcancel', this.boundTouchCancel_, true);
    }
    /**
     * @param {!Event} event
     * @private
     */
    ;

    _proto.onTouchMove_ = function onTouchMove_(event) {
      if (!this.tracking_) {
        return;
      }

      var dy = event.touches[0].clientY - this.startPos_; // Immediately cancel the P2R if dragging down.

      if (dy > 0) {
        event.preventDefault();
      } // Stop tracking if there was any motion at all.


      if (dy != 0) {
        this.stopTracking_();
      }
    }
    /**
     * @param {!Event} unusedEvent
     * @private
     */
    ;

    _proto.onTouchEnd_ = function onTouchEnd_(unusedEvent) {
      this.stopTracking_();
    }
    /**
     * @param {!Event} unusedEvent
     * @private
     */
    ;

    _proto.onTouchCancel_ = function onTouchCancel_(unusedEvent) {
      this.stopTracking_();
    };

    return PullToRefreshBlocker;
  }();

  exports.PullToRefreshBlocker = PullToRefreshBlocker;

  },{"./services":112}],69:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.waitForServices = waitForServices;
  exports.hasRenderDelayingServices = hasRenderDelayingServices;
  exports.isRenderDelayingService = isRenderDelayingService;
  exports.includedServices = includedServices;
  exports.RenderDelayingService = void 0;

  var _services = require("./services");

  var _log = require("./log");

  var _service = require("./service");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * A map of services that delay rendering. The key is the name of the service
   * and the value is a DOM query which is used to check if the service is needed
   * in the current document.
   * Do not add a service unless absolutely necessary.
   *
   * \   \  /  \  /   / /   \     |   _  \     |  \ |  | |  | |  \ |  |  / _____|
   *  \   \/    \/   / /  ^  \    |  |_)  |    |   \|  | |  | |   \|  | |  |  __
   *   \            / /  /_\  \   |      /     |  . `  | |  | |  . `  | |  | |_ |
   *    \    /\    / /  _____  \  |  |\  \----.|  |\   | |  | |  |\   | |  |__| |
   *     \__/  \__/ /__/     \__\ | _| `._____||__| \__| |__| |__| \__|  \______|
   *
   * The equivalent of this list is used for server-side rendering (SSR) and any
   * changes made to it must be made in coordination with caches that implement
   * SSR. For more information on SSR see bit.ly/amp-ssr.
   *
   * @const {!Object<string, string>}
   */
  var SERVICES = {
    'amp-dynamic-css-classes': '[custom-element=amp-dynamic-css-classes]',
    'variant': 'amp-experiment'
  };
  /**
   * Base class for render delaying services.
   * This should be extended to ensure the service
   * is properly handled
   *
   * @interface
   */

  var RenderDelayingService =
  /*#__PURE__*/
  function () {
    function RenderDelayingService() {}

    var _proto = RenderDelayingService.prototype;

    /**
     * Function to return a promise for when
     * it is finished delaying render, and is ready.
     * NOTE: This should simply return Promise.resolve,
     * if your service does not need to perform any logic
     * after being registered.
     * @return {!Promise}
     */
    _proto.whenReady = function whenReady() {};

    return RenderDelayingService;
  }();
  /**
   * Maximum milliseconds to wait for all extensions to load before erroring.
   * @const
   */


  exports.RenderDelayingService = RenderDelayingService;
  var LOAD_TIMEOUT = 3000;
  /**
   * Detects any render delaying services that are required on the page, and
   * returns a promise with a timeout.
   * @param {!Window} win
   * @return {!Promise<!Array<*>>} resolves to an Array that has the same length
   *     as the detected render delaying services
   */

  function waitForServices(win) {
    var promises = includedServices(win).map(function (serviceId) {
      var serviceReadyPromise = (0, _service.getServicePromise)(win, serviceId).then(function (service) {
        if (service && isRenderDelayingService(service)) {
          return service.whenReady().then(function () {
            return service;
          });
        }

        return service;
      });
      return _services.Services.timerFor(win).timeoutPromise(LOAD_TIMEOUT, serviceReadyPromise, "Render timeout waiting for service " + serviceId + " " + 'to be ready.');
    });
    return Promise.all(promises);
  }
  /**
   * Returns true if the page has a render delaying service.
   * @param {!Window} win
   * @return {boolean}
   */


  function hasRenderDelayingServices(win) {
    return includedServices(win).length > 0;
  }
  /**
   * Function to determine if the passed
   * Object is a Render Delaying Service
   * @param {!Object} service
   * @return {boolean}
   */


  function isRenderDelayingService(service) {
    var maybeRenderDelayingService =
    /** @type {!RenderDelayingService}*/
    service;
    return typeof maybeRenderDelayingService.whenReady == 'function';
  }
  /**
   * Detects which, if any, render-delaying extensions are included on the page.
   * @param {!Window} win
   * @return {!Array<string>}
   */


  function includedServices(win) {
    /** @const {!Document} */
    var doc = win.document;
    (0, _log.devAssert)(doc.body);
    return Object.keys(SERVICES).filter(function (service) {
      return doc.querySelector(SERVICES[service]);
    });
  }

  },{"./log":51,"./service":71,"./services":112}],70:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installRuntimeServices = installRuntimeServices;
  exports.installAmpdocServices = installAmpdocServices;
  exports.installBuiltins = installBuiltins;
  exports.adopt = adopt;
  exports.adoptShadowMode = adoptShadowMode;
  exports.MultidocManager = void 0;

  var _baseElement = require("./base-element");

  var _templateImpl = require("./service/template-impl");

  var _commonSignals = require("./common-signals");

  var _log = require("./log");

  var _services = require("./services");

  var _visibilityState = require("./visibility-state");

  var _dom = require("./dom");

  var _config = require("./config");

  var _shadowEmbed = require("./shadow-embed");

  var _css = require("../build/css");

  var _service = require("./service");

  var _mode = require("./mode");

  var _renderDelayingServices = require("./render-delaying-services");

  var _actionImpl = require("./service/action-impl");

  var _batchedXhrImpl = require("./service/batched-xhr-impl");

  var _extensionsImpl = require("./service/extensions-impl");

  var _cidImpl = require("./service/cid-impl");

  var _cryptoImpl = require("./service/crypto-impl");

  var _documentInfoImpl = require("./service/document-info-impl");

  var _documentState = require("./service/document-state");

  var _navigation = require("./service/navigation");

  var _documentSubmit = require("./document-submit");

  var _historyImpl = require("./service/history-impl");

  var _input = require("./input");

  var _platformImpl = require("./service/platform-impl");

  var _resourcesImpl = require("./service/resources-impl");

  var _standardActionsImpl = require("./service/standard-actions-impl");

  var _storageImpl = require("./service/storage-impl");

  var _styleInstaller = require("./style-installer");

  var _timerImpl = require("./service/timer-impl");

  var _urlImpl = require("./service/url-impl");

  var _urlReplacementsImpl = require("./service/url-replacements-impl");

  var _viewerImpl = require("./service/viewer-impl");

  var _viewportImpl = require("./service/viewport/viewport-impl");

  var _vsyncImpl = require("./service/vsync-impl");

  var _xhrImpl = require("./service/xhr-impl");

  var _experiments = require("./experiments");

  var _url = require("./url");

  var _error = require("./error");

  var _style = require("./style");

  var _chunk = require("./chunk");

  var _customElementRegistry = require("./service/custom-element-registry");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  (0, _log.initLogConstructor)();
  (0, _log.setReportError)(_error.reportErrorForWin.bind(null, self));
  /** @const @private {string} */

  var TAG = 'runtime';
  /**
   * Install runtime-level services.
   * @param {!Window} global Global scope to adopt.
   */

  function installRuntimeServices(global) {
    (0, _cryptoImpl.installCryptoService)(global);
    (0, _batchedXhrImpl.installBatchedXhrService)(global);
    (0, _documentState.installDocumentStateService)(global);
    (0, _platformImpl.installPlatformService)(global);
    (0, _templateImpl.installTemplatesService)(global);
    (0, _timerImpl.installTimerService)(global);
    (0, _vsyncImpl.installVsyncService)(global);
    (0, _xhrImpl.installXhrService)(global);
    (0, _input.installInputService)(global);
  }
  /**
   * Install ampdoc-level services.
   * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
   * @param {!Object<string, string>=} opt_initParams
   */


  function installAmpdocServices(ampdoc, opt_initParams) {
    (0, _urlImpl.installUrlForDoc)(ampdoc);
    (0, _cidImpl.installCidService)(ampdoc);
    (0, _documentInfoImpl.installDocumentInfoServiceForDoc)(ampdoc);
    (0, _viewerImpl.installViewerServiceForDoc)(ampdoc, opt_initParams);
    (0, _viewportImpl.installViewportServiceForDoc)(ampdoc);
    (0, _historyImpl.installHistoryServiceForDoc)(ampdoc);
    (0, _resourcesImpl.installResourcesServiceForDoc)(ampdoc);
    (0, _urlReplacementsImpl.installUrlReplacementsServiceForDoc)(ampdoc);
    (0, _actionImpl.installActionServiceForDoc)(ampdoc);
    (0, _standardActionsImpl.installStandardActionsForDoc)(ampdoc);
    (0, _storageImpl.installStorageServiceForDoc)(ampdoc);
    (0, _navigation.installGlobalNavigationHandlerForDoc)(ampdoc);
    (0, _documentSubmit.installGlobalSubmitListenerForDoc)(ampdoc);
  }
  /**
   * Install builtins.
   * @param {!Window} global Global scope to adopt.
   */


  function installBuiltins(global) {
    (0, _extensionsImpl.installBuiltinElements)(global);
  }
  /**
   * Applies the runtime to a given global scope for a single-doc mode. Multi
   * frame support is currently incomplete.
   * @param {!Window} global Global scope to adopt.
   * @param {function(!Window, !./service/extensions-impl.Extensions):!Promise} callback
   * @return {!Promise}
   */


  function adoptShared(global, callback) {
    // Tests can adopt the same window twice. sigh.
    if (global.AMP_TAG) {
      return Promise.resolve();
    }

    global.AMP_TAG = true; // If there is already a global AMP object we assume it is an array
    // of functions

    /** @const {!Array<function(!Object)|!ExtensionPayload>} */

    var preregisteredExtensions = global.AMP || [];
    (0, _extensionsImpl.installExtensionsService)(global);
    /** @const {!./service/extensions-impl.Extensions} */

    var extensions = _services.Services.extensionsFor(global);

    installRuntimeServices(global);
    (0, _extensionsImpl.stubLegacyElements)(global);
    global.AMP = {
      win: global,
      // Might not be available in tests.
      '_': global.AMP ? global.AMP['_'] : undefined
    }; // `AMP.extension()` function is only installed in a non-minified mode.
    // This function is meant to play the same role for development and testing
    // as `AMP.push()` in production.

    if (!(0, _mode.getMode)().minified) {
      /**
       * @param {string} unusedName
       * @param {string} unusedVersion
       * @param {function(!Object)} installer
       * @const
       */
      global.AMP.extension = function (unusedName, unusedVersion, installer) {
        installer(global.AMP);
      };
    }
    /** @const */


    global.AMP.config = _config.config;
    global.AMP.BaseElement = _baseElement.BaseElement;
    global.AMP.BaseTemplate = _templateImpl.BaseTemplate;
    /**
     * Registers an extended element and installs its styles.
     * @param {string} name
     * @param {function(new:BaseElement, !Element)} implementationClass
     * @param {?string|undefined} css
     */

    global.AMP.registerElement = extensions.addElement.bind(extensions);
    /**
     * Registers an extended template.
     * @param {string} name
     * @param {function(new:BaseTemplate)} implementationClass
     */

    global.AMP.registerTemplate = function (name, implementationClass) {
      (0, _templateImpl.registerExtendedTemplate)(global, name, implementationClass);
    };
    /**
     * Registers an ampdoc service.
     * @param {string} name
     * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} implementationClass
     */


    global.AMP.registerServiceForDoc = extensions.addService.bind(extensions); // Experiments.

    /**
     * @param {string} experimentId
     * @return {boolean}
     */

    global.AMP.isExperimentOn = _experiments.isExperimentOn.bind(null, global);
    /**
     * @param {string} experimentId
     * @param {boolean=} opt_on
     * @return {boolean}
     */

    global.AMP.toggleExperiment = _experiments.toggleExperiment.bind(null, global);
    /**
     * @param {!LogLevel} level
     */

    global.AMP.setLogLevel = _log.overrideLogLevel.bind(null);
    /**
     * Sets the function to forward tick events to.
     * @param {function(string,?string=,number=)} unusedFn
     * @param {function()=} opt_flush
     * @deprecated
     * @export
     */

    global.AMP.setTickFunction = function (unusedFn, opt_flush) {}; // Run specific setup for a single-doc or shadow-doc mode.


    var iniPromise = callback(global, extensions);
    /**
     * @param {function(!Object,!Object)|!ExtensionPayload} fnOrStruct
     */

    function installExtension(fnOrStruct) {
      var register = function register() {
        iniPromise.then(function () {
          if (typeof fnOrStruct == 'function') {
            fnOrStruct(global.AMP, global.AMP._);
          } else {
            extensions.registerExtension(fnOrStruct.n, fnOrStruct.f, global.AMP);
          }
        });
      }; // We support extension declarations which declare they have an
      // "intermediate" dependency that needs to be loaded before they
      // can execute.


      if (!(typeof fnOrStruct == 'function') && fnOrStruct.i) {
        preloadDeps(extensions, fnOrStruct).then(function () {
          return startRegisterOrChunk(global, fnOrStruct, register);
        });
      } else {
        startRegisterOrChunk(global, fnOrStruct, register);
      }
    } // Handle high priority extensions now, and if necessary issue
    // requests for new extensions (used for experimental version
    // locking).


    for (var i = 0; i < preregisteredExtensions.length; i++) {
      var fnOrStruct = preregisteredExtensions[i];

      if (maybeLoadCorrectVersion(global, fnOrStruct)) {
        preregisteredExtensions.splice(i--, 1);
      } else if (typeof fnOrStruct == 'function' || fnOrStruct.p == 'high') {
        try {
          installExtension(fnOrStruct);
        } catch (e) {
          // Throw errors outside of loop in its own micro task to
          // avoid on error stopping other extensions from loading.
          (0, _log.dev)().error(TAG, 'Extension failed: ', e, fnOrStruct.n);
        } // We handled the entry. Remove from set for future execution.


        preregisteredExtensions.splice(i--, 1);
      }
    }

    maybePumpEarlyFrame(global, function () {
      /**
       * Registers a new custom element.
       * @param {function(!Object, !Object)|!ExtensionPayload} fnOrStruct
       */
      global.AMP.push = function (fnOrStruct) {
        if (maybeLoadCorrectVersion(global, fnOrStruct)) {
          return;
        }

        installExtension(fnOrStruct);
      }; // Execute asynchronously scheduled elements.


      for (var _i = 0; _i < preregisteredExtensions.length; _i++) {
        var _fnOrStruct = preregisteredExtensions[_i];

        if (maybeLoadCorrectVersion(global, _fnOrStruct)) {
          continue;
        }

        try {
          installExtension(_fnOrStruct);
        } catch (e) {
          // Throw errors outside of loop in its own micro task to
          // avoid on error stopping other extensions from loading.
          (0, _log.dev)().error(TAG, 'Extension failed: ', e, _fnOrStruct.n);
        }
      } // Make sure we empty the array of preregistered extensions.
      // Technically this is only needed for testing, as everything should
      // go out of scope here, but just making sure.


      preregisteredExtensions.length = 0;
    }); // If the closure passed to maybePumpEarlyFrame didn't execute
    // immediately we need to keep pushing onto preregisteredExtensions

    if (!global.AMP.push) {
      global.AMP.push = preregisteredExtensions.push.bind(preregisteredExtensions);
    } // For iOS we need to set `cursor:pointer` to ensure that click events are
    // delivered.


    if (_services.Services.platformFor(global).isIos()) {
      (0, _style.setStyle)(global.document.documentElement, 'cursor', 'pointer');
    }

    return iniPromise;
  }
  /**
   * @param {!./service/extensions-impl.Extensions} extensions
   * @param {function(!Object, !Object)|!ExtensionPayload} fnOrStruct
   * @return {!Promise}
   */


  function preloadDeps(extensions, fnOrStruct) {
    // Allow a single string as the intermediate dependency OR allow
    // for an array if intermediate dependencies that needs to be
    // resolved first before executing this current extension.
    if (Array.isArray(fnOrStruct.i)) {
      var promises = fnOrStruct.i.map(function (dep) {
        return extensions.preloadExtension(dep);
      });
      return Promise.all(promises);
    } else if (typeof fnOrStruct.i == 'string') {
      return extensions.preloadExtension(fnOrStruct.i);
    }

    (0, _log.dev)().error('RUNTIME', 'dependency is neither an array or a string', fnOrStruct.i);
    return Promise.resolve();
  }
  /**
   * @param {!Window} global Global scope to adopt.
   * @param {function(!Object, !Object)|!ExtensionPayload} fnOrStruct
   * @param {function()} register
   */


  function startRegisterOrChunk(global, fnOrStruct, register) {
    if (typeof fnOrStruct == 'function' || fnOrStruct.p == 'high') {
      // "High priority" extensions do not go through chunking.
      // This should be used for extensions that need to run early.
      // One example would be viewer communication that is required
      // to transition document from pre-render to visible (which
      // affects chunking itself).
      // We consider functions as high priority, because
      // - if in doubt, that is a better default
      // - the only actual  user is a viewer integration that should
      //   be high priority.
      Promise.resolve().then(register);
    } else {
      register.displayName = fnOrStruct.n;
      (0, _chunk.startupChunk)(global.document, register);
    }
  }
  /**
   * Applies the runtime to a given global scope for a single-doc mode.
   * Multi frame support is currently incomplete.
   * @param {!Window} global Global scope to adopt.
   * @return {!Promise}
   */


  function adopt(global) {
    return adoptShared(global, function (global) {
      var documentElement = global.document.documentElement;

      var ampdocService = _services.Services.ampdocServiceFor(global);

      var ampdoc = ampdocService.getAmpDoc();
      global.AMP.ampdoc = ampdoc;

      var viewer = _services.Services.viewerForDoc(documentElement);

      global.AMP.viewer = viewer;

      if ((0, _mode.getMode)().development) {
        global.AMP.toggleRuntime = viewer.toggleRuntime.bind(viewer);
        global.AMP.resources = _services.Services.resourcesForDoc(documentElement);
      }

      var viewport = _services.Services.viewportForDoc(documentElement);

      global.AMP.viewport = {};
      global.AMP.viewport.getScrollLeft = viewport.getScrollLeft.bind(viewport);
      global.AMP.viewport.getScrollWidth = viewport.getScrollWidth.bind(viewport);
      global.AMP.viewport.getWidth = viewport.getWidth.bind(viewport);
      return (0, _dom.waitForBodyPromise)(global.document).then(function () {
        // Ensure that all declared extensions are marked and stubbed.
        (0, _customElementRegistry.stubElementsForDoc)(ampdoc);
      });
    });
  }
  /**
   * Applies the runtime to a given global scope for shadow mode.
   * @param {!Window} global Global scope to adopt.
   * @return {!Promise}
   */


  function adoptShadowMode(global) {
    return adoptShared(global, function (global, extensions) {
      var manager = new MultidocManager(global, _services.Services.ampdocServiceFor(global), extensions, _services.Services.timerFor(global));
      /**
       * Registers a shadow root document via a fully fetched document.
       * @param {!Element} hostElement
       * @param {!Document} doc
       * @param {string} url
       * @param {!Object<string, string>=} opt_initParams
       * @return {!Object}
       */

      global.AMP.attachShadowDoc = manager.attachShadowDoc.bind(manager);
      /**
       * Registers a shadow root document via a stream.
       * @param {!Element} hostElement
       * @param {string} url
       * @param {!Object<string, string>=} opt_initParams
       * @return {!Object}
       */

      global.AMP.attachShadowDocAsStream = manager.attachShadowDocAsStream.bind(manager);
      return (0, _dom.waitForBodyPromise)(global.document);
    });
  }
  /**
   * A manager for documents in the multi-doc environment.
   */


  var MultidocManager =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     * @param {!./service/ampdoc-impl.AmpDocService} ampdocService
     * @param {!./service/extensions-impl.Extensions} extensions
     * @param {!./service/timer-impl.Timer} timer
     */
    function MultidocManager(win, ampdocService, extensions, timer) {
      /** @const */
      this.win = win;
      /** @private @const */

      this.ampdocService_ = ampdocService;
      /** @private @const */

      this.extensions_ = extensions;
      /** @private @const */

      this.timer_ = timer;
      /** @private @const {!Array<!ShadowRoot>} */

      this.shadowRoots_ = [];
    }
    /**
     * Attaches the shadow root and calls the supplied DOM builder.
     * @param {!Element} hostElement
     * @param {string} url
     * @param {!Object<string, string>|undefined} initParams
     * @param {function(!Object, !ShadowRoot,
     * !./service/ampdoc-impl.AmpDocShadow):!Promise} builder
     * @return {!Object}
     * @private
     */


    var _proto = MultidocManager.prototype;

    _proto.attachShadowDoc_ = function attachShadowDoc_(hostElement, url, initParams, builder) {
      var _this = this;

      this.purgeShadowRoots_();
      (0, _style.setStyle)(hostElement, 'visibility', 'hidden');
      var shadowRoot = (0, _shadowEmbed.createShadowRoot)(hostElement);

      if (shadowRoot.AMP) {
        (0, _log.user)().warn(TAG, 'Shadow doc wasn\'t previously closed');
        this.closeShadowRoot_(shadowRoot);
      }

      var amp = {};
      shadowRoot.AMP = amp;
      amp.url = url;

      var _parseUrlDeprecated = (0, _url.parseUrlDeprecated)(url),
          origin = _parseUrlDeprecated.origin;

      var ampdoc = this.ampdocService_.installShadowDoc(url, shadowRoot);
      /** @const {!./service/ampdoc-impl.AmpDocShadow} */

      amp.ampdoc = ampdoc;
      (0, _log.dev)().fine(TAG, 'Attach to shadow root:', shadowRoot, ampdoc); // Install runtime CSS.

      (0, _styleInstaller.installStylesForDoc)(ampdoc, _css.cssText,
      /* callback */
      null,
      /* opt_isRuntimeCss */
      true); // Instal doc services.

      installAmpdocServices(ampdoc, initParams || Object.create(null));

      var viewer = _services.Services.viewerForDoc(ampdoc);
      /**
       * Sets the document's visibility state.
       * @param {!VisibilityState} state
       */


      amp['setVisibilityState'] = function (state) {
        (0, _viewerImpl.setViewerVisibilityState)(viewer, state);
      }; // Messaging pipe.

      /**
       * Posts message to the ampdoc.
       * @param {string} eventType
       * @param {!JsonObject} data
       * @param {boolean} unusedAwaitResponse
       * @return {(!Promise<*>|undefined)}
       */


      amp['postMessage'] = viewer.receiveMessage.bind(viewer);
      /** @type {function(string, *, boolean):(!Promise<*>|undefined)} */

      var onMessage;
      /**
       * Provides a message delivery mechanism by which AMP document can send
       * messages to the viewer.
       * @param {function(string, *, boolean):(!Promise<*>|undefined)} callback
       */

      amp['onMessage'] = function (callback) {
        onMessage = callback;
      };

      viewer.setMessageDeliverer(function (eventType, data, awaitResponse) {
        // Special messages.
        if (eventType == 'broadcast') {
          _this.broadcast_(data, shadowRoot);

          return awaitResponse ? Promise.resolve() : undefined;
        } // All other messages.


        if (onMessage) {
          return onMessage(eventType, data, awaitResponse);
        }
      }, origin);
      /**
       * Closes the document. The document can no longer be activated again.
       */

      amp['close'] = function () {
        _this.closeShadowRoot_(shadowRoot);
      };

      if ((0, _mode.getMode)().development) {
        amp.toggleRuntime = viewer.toggleRuntime.bind(viewer);
        amp.resources = _services.Services.resourcesForDoc(ampdoc);
      } // Start building the shadow doc DOM.


      builder(amp, shadowRoot, ampdoc).then(function () {
        // Document is ready.
        ampdoc.setReady();
        ampdoc.signals().signal(_commonSignals.CommonSignals.RENDER_START);
        (0, _style.setStyle)(hostElement, 'visibility', 'visible');
      }); // Store reference.

      if (!this.shadowRoots_.includes(shadowRoot)) {
        this.shadowRoots_.push(shadowRoot);
      }

      (0, _log.dev)().fine(TAG, 'Shadow root initialization is done:', shadowRoot, ampdoc);
      return amp;
    }
    /**
     * Implementation for `attachShadowDoc` function. Attaches the shadow doc and
     * configures ampdoc for it.
     * @param {!Element} hostElement
     * @param {!Document} doc
     * @param {string} url
     * @param {!Object<string, string>=} opt_initParams
     * @return {!Object}
     */
    ;

    _proto.attachShadowDoc = function attachShadowDoc(hostElement, doc, url, opt_initParams) {
      var _this2 = this;

      (0, _log.dev)().fine(TAG, 'Attach shadow doc:', doc); // TODO(dvoytenko, #9490): once stable, port full document case to emulated
      // stream.

      return this.attachShadowDoc_(hostElement, url, opt_initParams, function (amp, shadowRoot, ampdoc) {
        // Install extensions.
        var extensionIds = _this2.mergeShadowHead_(ampdoc, shadowRoot, doc);

        _this2.extensions_.installExtensionsInDoc(ampdoc, extensionIds); // Append body.


        if (doc.body) {
          var body = (0, _shadowEmbed.importShadowBody)(shadowRoot, doc.body,
          /* deep */
          true);
          body.classList.add('amp-shadow');
          ampdoc.setBody(body);
        } // TODO(dvoytenko): find a better and more stable way to make content
        // visible. E.g. integrate with dynamic classes. In shadow case
        // specifically, we have to wait for stubbing to complete, which may
        // take awhile due to importNode.


        setTimeout(function () {
          ampdoc.signals().signal(_commonSignals.CommonSignals.RENDER_START);
          (0, _style.setStyle)(hostElement, 'visibility', 'visible');
        }, 50);
        return Promise.resolve();
      });
    }
    /**
     * Implementation for `attachShadowDocAsStream` function. Attaches the shadow
     * doc and configures ampdoc for it.
     * @param {!Element} hostElement
     * @param {string} url
     * @param {!Object<string, string>=} opt_initParams
     * @return {!Object}
     */
    ;

    _proto.attachShadowDocAsStream = function attachShadowDocAsStream(hostElement, url, opt_initParams) {
      var _this3 = this;

      (0, _log.dev)().fine(TAG, 'Attach shadow doc as stream');
      return this.attachShadowDoc_(hostElement, url, opt_initParams, function (amp, shadowRoot, ampdoc) {
        // Start streaming.
        var renderStarted = false;
        var writer = (0, _shadowEmbed.createShadowDomWriter)(_this3.win);
        amp['writer'] = writer;
        writer.onBody(function (doc) {
          // Install extensions.
          var extensionIds = _this3.mergeShadowHead_(ampdoc, shadowRoot, doc); // Apply all doc extensions.


          _this3.extensions_.installExtensionsInDoc(ampdoc, extensionIds); // Append shallow body.


          var body = (0, _shadowEmbed.importShadowBody)(shadowRoot, (0, _log.dev)().assertElement(doc.body),
          /* deep */
          false);
          body.classList.add('amp-shadow');
          ampdoc.setBody(body);
          return body;
        });
        writer.onBodyChunk(function () {
          // TODO(dvoytenko): find a better and more stable way to make
          // content visible. E.g. integrate with dynamic classes. In shadow
          // case specifically, we have to wait for stubbing to complete,
          // which may take awhile due to node importing.
          if (!renderStarted) {
            renderStarted = true;
            setTimeout(function () {
              ampdoc.signals().signal(_commonSignals.CommonSignals.RENDER_START);
              (0, _style.setStyle)(hostElement, 'visibility', 'visible');
            }, 50);
          }
        });
        return new Promise(function (resolve) {
          writer.onEnd(function () {
            resolve();
            amp.writer = null;
          });
        });
      });
    }
    /**
     * Processes the contents of the shadow document's head.
     * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
     * @param {!ShadowRoot} shadowRoot
     * @param {!Document} doc
     * @return {!Array<string>}
     * @private
     */
    ;

    _proto.mergeShadowHead_ = function mergeShadowHead_(ampdoc, shadowRoot, doc) {
      var extensionIds = [];

      if (doc.head) {
        var parentLinks = {};
        var links = (0, _dom.childElementsByTag)((0, _log.dev)().assertElement(this.win.document.head), 'link');

        for (var i = 0; i < links.length; i++) {
          var href = links[i].getAttribute('href');

          if (href) {
            parentLinks[href] = true;
          }
        }

        for (var n = doc.head.firstElementChild; n; n = n.nextElementSibling) {
          var _n = n,
              tagName = _n.tagName;
          var name = n.getAttribute('name');
          var rel = n.getAttribute('rel');

          switch (tagName) {
            case 'TITLE':
              shadowRoot.AMP.title = n.textContent;
              (0, _log.dev)().fine(TAG, '- set title: ', shadowRoot.AMP.title);
              break;

            case 'META':
              if (n.hasAttribute('charset')) {// Ignore.
              } else if (name == 'viewport') {// Ignore.
              } else {
                // TODO(dvoytenko): copy other meta tags.
                (0, _log.dev)().warn(TAG, 'meta ignored: ', n);
              }

              break;

            case 'LINK':
              /** @const {string} */
              var _href = n.getAttribute('href');

              if (rel == 'canonical') {
                shadowRoot.AMP.canonicalUrl = _href;
                (0, _log.dev)().fine(TAG, '- set canonical: ', shadowRoot.AMP.canonicalUrl);
              } else if (rel == 'stylesheet') {
                // Must be a font definition: no other stylesheets are allowed.
                if (parentLinks[_href]) {
                  (0, _log.dev)().fine(TAG, '- stylesheet already included: ', _href);
                } else {
                  parentLinks[_href] = true;
                  var el = this.win.document.createElement('link');
                  el.setAttribute('rel', 'stylesheet');
                  el.setAttribute('type', 'text/css');
                  el.setAttribute('href', _href);
                  this.win.document.head.appendChild(el);
                  (0, _log.dev)().fine(TAG, '- import font to parent: ', _href, el);
                }
              } else {
                (0, _log.dev)().fine(TAG, '- ignore link rel=', rel);
              }

              break;

            case 'STYLE':
              if (n.hasAttribute('amp-boilerplate')) {
                // Ignore.
                (0, _log.dev)().fine(TAG, '- ignore boilerplate style: ', n);
              } else if (n.hasAttribute('amp-custom')) {
                (0, _styleInstaller.installStylesForDoc)(ampdoc, n.textContent,
                /* callback */
                null,
                /* isRuntimeCss */
                false, 'amp-custom');
                (0, _log.dev)().fine(TAG, '- import style: ', n);
              } else if (n.hasAttribute('amp-keyframes')) {
                (0, _styleInstaller.installStylesForDoc)(ampdoc, n.textContent,
                /* callback */
                null,
                /* isRuntimeCss */
                false, 'amp-keyframes');
                (0, _log.dev)().fine(TAG, '- import style: ', n);
              }

              break;

            case 'SCRIPT':
              if (n.hasAttribute('src')) {
                (0, _log.dev)().fine(TAG, '- src script: ', n);
                var src = n.getAttribute('src');
                var isRuntime = src.indexOf('/amp.js') != -1 || src.indexOf('/v0.js') != -1;
                var customElement = n.getAttribute('custom-element');
                var customTemplate = n.getAttribute('custom-template');
                var versionRe = /-(\d+.\d+)(.max)?\.js$/;
                var match = versionRe.exec(src);
                var version = match ? match[1] : '0.1';

                if (isRuntime) {
                  (0, _log.dev)().fine(TAG, '- ignore runtime script: ', src);
                } else if (customElement || customTemplate) {
                  // This is an extension.
                  this.extensions_.installExtensionForDoc(ampdoc, customElement || customTemplate, version);
                  (0, _log.dev)().fine(TAG, '- load extension: ', customElement || customTemplate, ' ', version);

                  if (customElement) {
                    extensionIds.push(customElement);
                  }
                } else if (!n.hasAttribute('data-amp-report-test')) {
                  (0, _log.user)().error(TAG, '- unknown script: ', n, src);
                }
              } else {
                // Non-src version of script.
                var type = n.getAttribute('type') || 'application/javascript';

                if (type.indexOf('javascript') == -1) {
                  shadowRoot.appendChild(this.win.document.importNode(n, true));
                  (0, _log.dev)().fine(TAG, '- non-src script: ', n);
                } else {
                  (0, _log.user)().error(TAG, '- unallowed inline javascript: ', n);
                }
              }

              break;

            case 'NOSCRIPT':
              // Ignore.
              break;

            default:
              (0, _log.user)().error(TAG, '- UNKNOWN head element:', n);
              break;
          }
        }
      }

      return extensionIds;
    }
    /**
     * @param {*} data
     * @param {!ShadowRoot} sender
     * @private
     */
    ;

    _proto.broadcast_ = function broadcast_(data, sender) {
      var _this4 = this;

      this.purgeShadowRoots_();
      this.shadowRoots_.forEach(function (shadowRoot) {
        if (shadowRoot == sender) {
          // Don't broadcast to the sender.
          return;
        } // Broadcast message asynchronously.


        var viewer = _services.Services.viewerForDoc(shadowRoot.AMP.ampdoc);

        _this4.timer_.delay(function () {
          viewer.receiveMessage('broadcast',
          /** @type {!JsonObject} */
          data,
          /* awaitResponse */
          false);
        }, 0);
      });
    }
    /**
     * @param {!ShadowRoot} shadowRoot
     * @private
     */
    ;

    _proto.closeShadowRoot_ = function closeShadowRoot_(shadowRoot) {
      this.removeShadowRoot_(shadowRoot);
      var amp = shadowRoot.AMP;
      delete shadowRoot.AMP;
      var ampdoc = amp.ampdoc;
      (0, _viewerImpl.setViewerVisibilityState)(_services.Services.viewerForDoc(ampdoc), _visibilityState.VisibilityState.INACTIVE);
      (0, _service.disposeServicesForDoc)(ampdoc);
    }
    /**
     * @param {!ShadowRoot} shadowRoot
     * @private
     */
    ;

    _proto.removeShadowRoot_ = function removeShadowRoot_(shadowRoot) {
      var index = this.shadowRoots_.indexOf(shadowRoot);

      if (index != -1) {
        this.shadowRoots_.splice(index, 1);
      }
    }
    /**
     * @param {!ShadowRoot} shadowRoot
     * @private
     */
    ;

    _proto.closeShadowRootAsync_ = function closeShadowRootAsync_(shadowRoot) {
      var _this5 = this;

      this.timer_.delay(function () {
        _this5.closeShadowRoot_(shadowRoot);
      }, 0);
    }
    /** @private */
    ;

    _proto.purgeShadowRoots_ = function purgeShadowRoots_() {
      var _this6 = this;

      this.shadowRoots_.forEach(function (shadowRoot) {
        // The shadow root has been disconnected. Force it closed.
        if (!shadowRoot.host || !(0, _dom.isConnectedNode)(shadowRoot.host)) {
          (0, _log.user)().warn(TAG, 'Shadow doc wasn\'t previously closed');

          _this6.removeShadowRoot_(shadowRoot);

          _this6.closeShadowRootAsync_(shadowRoot);
        }
      });
    };

    return MultidocManager;
  }();
  /**
   * For a given extension, checks that its version is the same
   * as the version of the main AMP binary.
   * If yes, returns false and does nothing else.
   * If they are different, returns false, and initiates a load
   * of the respective extension via a versioned URL.
   *
   * This is currently guarded by the 'version-locking' experiment.
   * With this active, all scripts in a given page are guaranteed
   * to have the same AMP release version.
   *
   * @param {!Window} win
   * @param {function(!Object, !Object)|!ExtensionPayload} fnOrStruct
   * @return {boolean}
   */


  exports.MultidocManager = MultidocManager;

  function maybeLoadCorrectVersion(win, fnOrStruct) {
    if (!(0, _experiments.isExperimentOn)(win, 'version-locking')) {
      return false;
    }

    if (typeof fnOrStruct == 'function') {
      return false;
    }

    var version = fnOrStruct.v; // This is non-obvious, but we only care about the release version,
    // not about the full rtv version, because these only differ
    // in the config that is fully determined by the primary binary.

    if ('1903211831541' == version) {
      return false;
    } // The :not is an extra prevention of recursion because it will be
    // added to script tags that go into the code path below.


    var scriptInHead = win.document.head.
    /*OK*/
    querySelector("[custom-element=\"" + fnOrStruct.n + "\"]:not([i-amphtml-inserted])");
    (0, _log.devAssert)(scriptInHead, 'Expected to find script for extension: %s', fnOrStruct.n);

    if (!scriptInHead) {
      return false;
    } // Mark the element as being replaced, so that the installExtension code
    // assumes it as not-present.


    _services.Services.extensionsFor(win).reloadExtension(fnOrStruct.n, scriptInHead);

    return true;
  }
  /**
   * If it makes sense, let the browser paint the current frame before
   * executing the callback.
   * @param {!Window} win
   * @param {function()} cb Callback that should run after a frame was
   *     pumped.
   */


  function maybePumpEarlyFrame(win, cb) {
    if (!(0, _experiments.isExperimentOn)(win, 'pump-early-frame')) {
      cb();
      return;
    } // There is definitely nothing to draw yet, so we might as well
    // proceed.


    if (!win.document.body) {
      cb();
      return;
    }

    if ((0, _renderDelayingServices.hasRenderDelayingServices)(win)) {
      cb();
      return;
    }

    _services.Services.timerFor(win).delay(cb, 1);
  }

  },{"../build/css":1,"./base-element":14,"./chunk":15,"./common-signals":16,"./config":17,"./document-submit":25,"./dom":26,"./error":29,"./experiments":32,"./input":44,"./log":51,"./mode":53,"./render-delaying-services":69,"./service":71,"./service/action-impl":72,"./service/batched-xhr-impl":74,"./service/cid-impl":77,"./service/crypto-impl":78,"./service/custom-element-registry":79,"./service/document-info-impl":80,"./service/document-state":81,"./service/extensions-impl":83,"./service/history-impl":85,"./service/navigation":89,"./service/platform-impl":91,"./service/resources-impl":93,"./service/standard-actions-impl":94,"./service/storage-impl":95,"./service/template-impl":97,"./service/timer-impl":98,"./service/url-impl":100,"./service/url-replacements-impl":101,"./service/viewer-impl":104,"./service/viewport/viewport-impl":109,"./service/vsync-impl":110,"./service/xhr-impl":111,"./services":112,"./shadow-embed":113,"./style":118,"./style-installer":117,"./url":124,"./visibility-state":139}],71:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.getExistingServiceForDocInEmbedScope = getExistingServiceForDocInEmbedScope;
  exports.installServiceInEmbedScope = installServiceInEmbedScope;
  exports.registerServiceBuilder = registerServiceBuilder;
  exports.registerServiceBuilderForDoc = registerServiceBuilderForDoc;
  exports.rejectServicePromiseForDoc = rejectServicePromiseForDoc;
  exports.getService = getService;
  exports.getServicePromise = getServicePromise;
  exports.getExistingServiceOrNull = getExistingServiceOrNull;
  exports.getServicePromiseOrNull = getServicePromiseOrNull;
  exports.getServiceForDoc = getServiceForDoc;
  exports.getServicePromiseForDoc = getServicePromiseForDoc;
  exports.getServicePromiseOrNullForDoc = getServicePromiseOrNullForDoc;
  exports.setParentWindow = setParentWindow;
  exports.getParentWindow = getParentWindow;
  exports.getTopWindow = getTopWindow;
  exports.getParentWindowFrameElement = getParentWindowFrameElement;
  exports.getAmpdoc = getAmpdoc;
  exports.isDisposable = isDisposable;
  exports.assertDisposable = assertDisposable;
  exports.disposeServicesForDoc = disposeServicesForDoc;
  exports.disposeServicesForEmbed = disposeServicesForEmbed;
  exports.installServiceInEmbedIfEmbeddable = installServiceInEmbedIfEmbeddable;
  exports.resetServiceForTesting = resetServiceForTesting;
  exports.EmbeddableService = exports.Disposable = void 0;

  require("./polyfills");

  var _promise = require("./utils/promise");

  var _log = require("./log");

  var _types = require("./types");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @fileoverview Registration and getter functions for AMP services.
   *
   * Invariant: Service getters never return null for registered services.
   */
  // src/polyfills.js must be the first import.
  // eslint-disable-line sort-imports-es6-autofix/sort-imports-es6

  /**
   * Holds info about a service.
   * - obj: Actual service implementation when available.
   * - promise: Promise for the obj.
   * - resolve: Function to resolve the promise with the object.
   * - context: Argument for ctor, either a window or an ampdoc.
   * - ctor: Function that constructs and returns the service.
   * @typedef {{
   *   obj: (?Object),
   *   promise: (?Promise),
   *   resolve: (?function(!Object)),
   *   reject: (?function((*))),
   *   context: (?Window|?./service/ampdoc-impl.AmpDoc),
   *   ctor: (?function(new:Object, !Window)|
   *          ?function(new:Object, !./service/ampdoc-impl.AmpDoc)),
   * }}
   */
  var ServiceHolderDef;
  /**
   * This interface provides a `dispose` method that will be called by
   * runtime when a service needs to be disposed of.
   * @interface
   */

  var Disposable =
  /*#__PURE__*/
  function () {
    function Disposable() {}

    var _proto = Disposable.prototype;

    /**
     * Instructs the service to release any resources it might be holding. Can
     * be called only once in the lifecycle of a service.
     */
    _proto.dispose = function dispose() {};

    return Disposable;
  }();
  /**
   * Services must implement this interface to be embeddable in FIEs.
   * @interface
   */


  exports.Disposable = Disposable;

  var EmbeddableService =
  /*#__PURE__*/
  function () {
    function EmbeddableService() {}

    /**
     * Installs a new instance of the service in the given FIE window.
     * @param {!Window} unusedEmbedWin
     * @param {!./service/ampdoc-impl.AmpDoc} unusedAmpDoc
     */
    EmbeddableService.installInEmbedWindow = function installInEmbedWindow(unusedEmbedWin, unusedAmpDoc) {};

    return EmbeddableService;
  }();
  /**
   * Returns a service with the given id. Assumes that it has been constructed
   * already.
   *
   * @param {!Element|!ShadowRoot} element
   * @param {string} id
   * @param {boolean=} opt_fallbackToTopWin
   * @return {?Object}
   */


  exports.EmbeddableService = EmbeddableService;

  function getExistingServiceForDocInEmbedScope(element, id, opt_fallbackToTopWin) {
    var document = element.ownerDocument;
    var win = (0, _types.toWin)(document.defaultView); // First, try to resolve via local embed window (if applicable).

    var isEmbed = win != getTopWindow(win);

    if (isEmbed) {
      if (isServiceRegistered(win, id)) {
        var embedService = getServiceInternal(win, id);

        if (embedService) {
          return embedService;
        }
      } // Don't continue if fallback is not allowed.


      if (!opt_fallbackToTopWin) {
        return null;
      }
    } // Resolve via the element's ampdoc. This falls back to the top-level service.


    return getServiceForDocOrNullInternal(element, id);
  }
  /**
   * Installs a service override on amp-doc level.
   * @param {!Window} embedWin
   * @param {string} id
   * @param {!Object} service The service.
   */


  function installServiceInEmbedScope(embedWin, id, service) {
    var topWin = getTopWindow(embedWin);
    (0, _log.devAssert)(embedWin != topWin, 'Service override can only be installed in embed window: %s', id);
    (0, _log.devAssert)(!isServiceRegistered(embedWin, id), 'Service override has already been installed: %s', id);
    registerServiceInternal(embedWin, embedWin, id, function () {
      return service;
    });
    getServiceInternal(embedWin, id); // Force service to build.
  }
  /**
   * Registers a service given a class to be used as implementation.
   * @param {!Window} win
   * @param {string} id of the service.
   * @param {function(new:Object, !Window)} constructor
   * @param {boolean=} opt_instantiate Whether to immediately create the service
   */


  function registerServiceBuilder(win, id, constructor, opt_instantiate) {
    win = getTopWindow(win);
    registerServiceInternal(win, win, id, constructor);

    if (opt_instantiate) {
      getServiceInternal(win, id);
    }
  }
  /**
   * Returns a service and registers it given a class to be used as
   * implementation.
   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc
   * @param {string} id of the service.
   * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} constructor
   * @param {boolean=} opt_instantiate Whether to immediately create the service
   */


  function registerServiceBuilderForDoc(nodeOrDoc, id, constructor, opt_instantiate) {
    var ampdoc = getAmpdoc(nodeOrDoc);
    var holder = getAmpdocServiceHolder(ampdoc);
    registerServiceInternal(holder, ampdoc, id, constructor);

    if (opt_instantiate) {
      getServiceInternal(holder, id);
    }
  }
  /**
   * Reject a service promise.
   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc
   * @param {string} id
   * @param {*} error
   */


  function rejectServicePromiseForDoc(nodeOrDoc, id, error) {
    var ampdoc = getAmpdoc(nodeOrDoc);
    var holder = getAmpdocServiceHolder(ampdoc);
    rejectServicePromiseInternal(holder, id, error);
  }
  /**
   * Returns a service for the given id and window (a per-window singleton). Users
   * should typically wrap this as a special purpose function (e.g.
   * `Services.vsyncFor(win)`) for type safety and because the factory should not
   * be passed around.
   * @param {!Window} win
   * @param {string} id of the service.
   * @template T
   * @return {T}
   */


  function getService(win, id) {
    win = getTopWindow(win);
    return getServiceInternal(win, id);
  }
  /**
   * Returns a promise for a service for the given id and window. Also expects an
   * element that has the actual implementation. The promise resolves when the
   * implementation loaded. Users should typically wrap this as a special purpose
   * function (e.g. `Services.vsyncFor(win)`) for type safety and because the
   * factory should not be passed around.
   * @param {!Window} win
   * @param {string} id of the service.
   * @return {!Promise<!Object>}
   */


  function getServicePromise(win, id) {
    return getServicePromiseInternal(win, id);
  }
  /**
   * Returns a service or null with the given id.
   * @param {!Window} win
   * @param {string} id
   * @return {?Object} The service.
   */


  function getExistingServiceOrNull(win, id) {
    win = getTopWindow(win);

    if (isServiceRegistered(win, id)) {
      return getServiceInternal(win, id);
    } else {
      return null;
    }
  }
  /**
   * Like getServicePromise but returns null if the service was never registered.
   * @param {!Window} win
   * @param {string} id
   * @return {?Promise<!Object>}
   */


  function getServicePromiseOrNull(win, id) {
    return getServicePromiseOrNullInternal(win, id);
  }
  /**
   * Returns a service for the given id and ampdoc (a per-ampdoc singleton).
   * Expects service `id` to be registered.
   * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
   * @param {string} id
   * @return {T}
   * @template T
   */


  function getServiceForDoc(elementOrAmpDoc, id) {
    var ampdoc = getAmpdoc(elementOrAmpDoc);
    var holder = getAmpdocServiceHolder(ampdoc);
    return getServiceInternal(holder, id);
  }
  /**
   * Returns a service for the given id and ampdoc (a per-ampdoc singleton).
   * If service `id` is not registered, returns null.
   * @param {!Element|!ShadowRoot} element
   * @param {string} id
   */


  function getServiceForDocOrNullInternal(element, id) {
    var ampdoc = getAmpdoc(element);
    var holder = getAmpdocServiceHolder(ampdoc);

    if (isServiceRegistered(holder, id)) {
      return getServiceInternal(holder, id);
    } else {
      return null;
    }
  }
  /**
   * Returns a promise for a service for the given id and ampdoc. Also expects
   * a service that has the actual implementation. The promise resolves when
   * the implementation loaded.
   * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
   * @param {string} id
   * @return {!Promise<!Object>}
   */


  function getServicePromiseForDoc(elementOrAmpDoc, id) {
    return getServicePromiseInternal(getAmpdocServiceHolder(elementOrAmpDoc), id);
  }
  /**
   * Like getServicePromiseForDoc but returns null if the service was never
   * registered for this ampdoc.
   * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
   * @param {string} id
   * @return {?Promise<!Object>}
   */


  function getServicePromiseOrNullForDoc(elementOrAmpDoc, id) {
    return getServicePromiseOrNullInternal(getAmpdocServiceHolder(elementOrAmpDoc), id);
  }
  /**
   * Set the parent and top windows on a child window (friendly iframe).
   * @param {!Window} win
   * @param {!Window} parentWin
   */


  function setParentWindow(win, parentWin) {
    win.__AMP_PARENT = parentWin;
    win.__AMP_TOP = getTopWindow(parentWin);
  }
  /**
   * Returns the parent window for a child window (friendly iframe).
   * @param {!Window} win
   * @return {!Window}
   */


  function getParentWindow(win) {
    return win.__AMP_PARENT || win;
  }
  /**
   * Returns the top window where AMP Runtime is installed for a child window
   * (friendly iframe).
   * @param {!Window} win
   * @return {!Window}
   */


  function getTopWindow(win) {
    return win.__AMP_TOP || win;
  }
  /**
   * Returns the parent "friendly" iframe if the node belongs to a child window.
   * @param {!Node} node
   * @param {!Window} topWin
   * @return {?HTMLIFrameElement}
   */


  function getParentWindowFrameElement(node, topWin) {
    var childWin = (node.ownerDocument || node).defaultView;

    if (childWin && childWin != topWin && getTopWindow(childWin) == topWin) {
      try {
        return (
          /** @type {?HTMLIFrameElement} */
          childWin.frameElement
        );
      } catch (e) {// Ignore the error.
      }
    }

    return null;
  }
  /**
   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc
   * @return {!./service/ampdoc-impl.AmpDoc}
   */


  function getAmpdoc(nodeOrDoc) {
    if (nodeOrDoc.nodeType) {
      var win = (0, _types.toWin)(
      /** @type {!Document} */
      (nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);
      return getAmpdocService(win).getAmpDoc(
      /** @type {!Node} */
      nodeOrDoc);
    }

    return (
      /** @type {!./service/ampdoc-impl.AmpDoc} */
      nodeOrDoc
    );
  }
  /**
   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc
   * @return {!./service/ampdoc-impl.AmpDoc|!Window}
   */


  function getAmpdocServiceHolder(nodeOrDoc) {
    var ampdoc = getAmpdoc(nodeOrDoc);
    return ampdoc.isSingleDoc() ? ampdoc.win : ampdoc;
  }
  /**
   * This is essentially a duplicate of `ampdoc.js`, but necessary to avoid
   * circular dependencies.
   * @param {!Window} win
   * @return {!./service/ampdoc-impl.AmpDocService}
   */


  function getAmpdocService(win) {
    return (
      /** @type {!./service/ampdoc-impl.AmpDocService} */
      getService(win, 'ampdoc')
    );
  }
  /**
   * Get service `id` from `holder`. Assumes the service
   * has already been registered.
   * @param {!Object} holder Object holding the service instance.
   * @param {string} id of the service.
   * @return {Object}
   * @template T
   */


  function getServiceInternal(holder, id) {
    (0, _log.devAssert)(isServiceRegistered(holder, id), "Expected service " + id + " to be registered");
    var services = getServices(holder);
    var s = services[id];

    if (!s.obj) {
      (0, _log.devAssert)(s.ctor, "Service " + id + " registered without ctor nor impl.");
      (0, _log.devAssert)(s.context, "Service " + id + " registered without context.");
      s.obj = new s.ctor(s.context);
      (0, _log.devAssert)(s.obj, "Service " + id + " constructed to null.");
      s.ctor = null;
      s.context = null; // The service may have been requested already, in which case we have a
      // pending promise we need to fulfill.

      if (s.resolve) {
        s.resolve(s.obj);
      }
    }

    return s.obj;
  }
  /**
   * @param {!Object} holder Object holding the service instance.
   * @param {!Window|!./service/ampdoc-impl.AmpDoc} context Win or AmpDoc.
   * @param {string} id of the service.
   * @param {?function(new:Object, !Window)|?function(new:Object, !./service/ampdoc-impl.AmpDoc)} ctor Constructor function to new the service. Called with context.
   */


  function registerServiceInternal(holder, context, id, ctor) {
    var services = getServices(holder);
    var s = services[id];

    if (!s) {
      s = services[id] = {
        obj: null,
        promise: null,
        resolve: null,
        reject: null,
        context: null,
        ctor: null
      };
    }

    if (s.ctor || s.obj) {
      // Service already registered.
      return;
    }

    s.ctor = ctor;
    s.context = context; // The service may have been requested already, in which case there is a
    // pending promise that needs to fulfilled.

    if (s.resolve) {
      // getServiceInternal will resolve the promise.
      getServiceInternal(holder, id);
    }
  }
  /**
   * @param {!Object} holder
   * @param {string} id of the service.
   * @return {!Promise<!Object>}
   */


  function getServicePromiseInternal(holder, id) {
    var cached = getServicePromiseOrNullInternal(holder, id);

    if (cached) {
      return cached;
    } // Service is not registered.
    // TODO(@cramforce): Add a check that if the element is eventually registered
    // that the service is actually provided and this promise resolves.


    var services = getServices(holder);
    services[id] = emptyServiceHolderWithPromise();
    return (
      /** @type {!Promise<!Object>} */
      services[id].promise
    );
  }
  /**
   * @param {!Object} holder
   * @param {string} id of the service.
   * @param {*} error
   */


  function rejectServicePromiseInternal(holder, id, error) {
    var services = getServices(holder);
    var s = services[id];

    if (s) {
      if (s.reject) {
        s.reject(error);
      }

      return;
    }

    services[id] = emptyServiceHolderWithPromise();
    services[id].reject(error);
  }
  /**
   * Returns a promise for service `id` if the service has been registered
   * on `holder`.
   * @param {!Object} holder
   * @param {string} id of the service.
   * @return {?Promise<!Object>}
   */


  function getServicePromiseOrNullInternal(holder, id) {
    var services = getServices(holder);
    var s = services[id];

    if (s) {
      if (s.promise) {
        return s.promise;
      } else {
        // Instantiate service if not already instantiated.
        getServiceInternal(holder, id);
        return s.promise = Promise.resolve(
        /** @type {!Object} */
        s.obj);
      }
    }

    return null;
  }
  /**
   * Returns the object that holds the services registered in a holder.
   * @param {!Object} holder
   * @return {!Object<string,!ServiceHolderDef>}
   */


  function getServices(holder) {
    var services = holder.services;

    if (!services) {
      services = holder.services = {};
    }

    return services;
  }
  /**
   * Whether the specified service implements `Disposable` interface.
   * @param {!Object} service
   * @return {boolean}
   */


  function isDisposable(service) {
    return typeof service.dispose == 'function';
  }
  /**
   * Asserts that the specified service implements `Disposable` interface and
   * typecasts the instance to `Disposable`.
   * @param {!Object} service
   * @return {!Disposable}
   */


  function assertDisposable(service) {
    (0, _log.devAssert)(isDisposable(service), 'required to implement Disposable');
    return (
      /** @type {!Disposable} */
      service
    );
  }
  /**
   * Disposes all disposable (implements `Disposable` interface) services in
   * ampdoc scope.
   * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
   */


  function disposeServicesForDoc(ampdoc) {
    disposeServicesInternal(ampdoc);
  }
  /**
   * Disposes all disposable (implements `Disposable` interface) services in
   * embed scope.
   * @param {!Window} embedWin
   */


  function disposeServicesForEmbed(embedWin) {
    disposeServicesInternal(embedWin);
  }
  /**
   * @param {!Object} holder Object holding the service instances.
   */


  function disposeServicesInternal(holder) {
    // TODO(dvoytenko): Consider marking holder as destroyed for later-arriving
    // service to be canceled automatically.
    var services = getServices(holder);

    var _loop = function _loop(id) {
      if (!Object.prototype.hasOwnProperty.call(services, id)) {
        return "continue";
      }

      var serviceHolder = services[id];

      if (serviceHolder.obj) {
        disposeServiceInternal(id, serviceHolder.obj);
      } else if (serviceHolder.promise) {
        serviceHolder.promise.then(function (instance) {
          return disposeServiceInternal(id, instance);
        });
      }
    };

    for (var id in services) {
      var _ret = _loop(id);

      if (_ret === "continue") continue;
    }
  }
  /**
   * @param {string} id
   * @param {!Object} service
   */


  function disposeServiceInternal(id, service) {
    if (!isDisposable(service)) {
      return;
    }

    try {
      assertDisposable(service).dispose();
    } catch (e) {
      // Ensure that a failure to dispose a service does not disrupt other
      // services.
      (0, _log.dev)().error('SERVICE', 'failed to dispose service', id, e);
    }
  }
  /**
   * Adopts an embeddable (implements `EmbeddableService` interface) service
   * in embed scope.
   * @param {!Window} embedWin
   * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} serviceClass
   * @return {boolean}
   */


  function installServiceInEmbedIfEmbeddable(embedWin, serviceClass) {
    var isEmbeddableService = typeof serviceClass.installInEmbedWindow === 'function';

    if (!isEmbeddableService) {
      return false;
    }

    var frameElement = (0, _log.dev)().assertElement(embedWin.frameElement, 'frameElement not found for embed');
    var ampdoc = getAmpdoc(frameElement);
    serviceClass.installInEmbedWindow(embedWin, ampdoc);
    return true;
  }
  /**
   * Resets a single service, so it gets recreated on next getService invocation.
   * @param {!Object} holder
   * @param {string} id of the service.
   */


  function resetServiceForTesting(holder, id) {
    if (holder.services) {
      holder.services[id] = null;
    }
  }
  /**
   * @param {!Object} holder Object holding the service instance.
   * @param {string} id of the service.
   * @return {boolean}
   */


  function isServiceRegistered(holder, id) {
    var service = holder.services && holder.services[id]; // All registered services must have an implementation or a constructor.

    return !!(service && (service.ctor || service.obj));
  }
  /** @return {!ServiceHolderDef} */


  function emptyServiceHolderWithPromise() {
    var deferred = new _promise.Deferred();
    var promise = deferred.promise,
        resolve = deferred.resolve,
        reject = deferred.reject;
    promise.catch(function () {}); // avoid uncaught exception when service gets rejected

    return {
      obj: null,
      promise: promise,
      resolve: resolve,
      reject: reject,
      context: null,
      ctor: null
    };
  }

  },{"./log":51,"./polyfills":57,"./types":121,"./utils/promise":134}],72:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.parseActionMap = parseActionMap;
  exports.dereferenceArgsVariables = dereferenceArgsVariables;
  exports.installActionServiceForDoc = installActionServiceForDoc;
  exports.DeferredEvent = exports.ActionService = exports.ActionInvocation = exports.ActionEventDef = exports.ActionInfoDef = exports.TAPPABLE_ARIA_ROLES = void 0;

  var _actionConstants = require("../action-constants");

  var _keyCodes = require("../utils/key-codes");

  var _services = require("../services");

  var _rateLimit = require("../utils/rate-limit");

  var _log = require("../log");

  var _object = require("../utils/object");

  var _eventHelper = require("../event-helper");

  var _mode = require("../mode");

  var _json = require("../json");

  var _service = require("../service");

  var _types = require("../types");

  var _dom = require("../dom");

  var _error = require("../error");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @const {string} */
  var TAG_ = 'Action';
  /** @const {string} */

  var ACTION_MAP_ = '__AMP_ACTION_MAP__' + Math.random();
  /** @const {string} */

  var ACTION_QUEUE_ = '__AMP_ACTION_QUEUE__';
  /** @const {string} */

  var ACTION_HANDLER_ = '__AMP_ACTION_HANDLER__';
  /** @const {number} */

  var DEFAULT_DEBOUNCE_WAIT = 300; // ms

  /** @const {number} */

  var DEFAULT_THROTTLE_INTERVAL = 100; // ms

  /** @const {!Object<string,!Array<string>>} */

  var ELEMENTS_ACTIONS_MAP_ = {
    'form': ['submit', 'clear']
  };
  /**
   * Interactable widgets which should trigger tap events when the user clicks
   * or activates via the keyboard. Not all are here, e.g. progressbar, tabpanel,
   * since they are text inputs, readonly, or composite widgets that shouldn't
   * need to trigger tap events from spacebar or enter on their own.
   * See https://www.w3.org/TR/wai-aria-1.1/#widget_roles
   * @const {!Object<boolean>}
   */

  var TAPPABLE_ARIA_ROLES = {
    'button': true,
    'checkbox': true,
    'link': true,
    'listbox': true,
    'menuitem': true,
    'menuitemcheckbox': true,
    'menuitemradio': true,
    'option': true,
    'radio': true,
    'scrollbar': true,
    'slider': true,
    'spinbutton': true,
    'switch': true,
    'tab': true,
    'treeitem': true
  };
  /**
   * An expression arg value, e.g. `foo.bar` in `e:t.m(arg=foo.bar)`.
   * @typedef {{expression: string}}
   */

  exports.TAPPABLE_ARIA_ROLES = TAPPABLE_ARIA_ROLES;
  var ActionInfoArgExpressionDef;
  /**
   * An arg value.
   * @typedef {(boolean|number|string|ActionInfoArgExpressionDef)}
   */

  var ActionInfoArgValueDef;
  /**
   * Map of arg names to their values, e.g. {arg: 123} in `e:t.m(arg=123)`.
   * @typedef {Object<string, ActionInfoArgValueDef>}
   */

  var ActionInfoArgsDef;
  /**
   * @typedef {{
   *   event: string,
   *   target: string,
   *   method: string,
   *   args: ?ActionInfoArgsDef,
   *   str: string
   * }}
   */

  var ActionInfoDef;
  /**
   * Function called when an action is invoked.
   *
   * Optionally, takes this action's position within all actions triggered by
   * the same event, as well as said action array, as params.
   *
   * If the action is chainable, returns a Promise which resolves when the
   * action is complete. Otherwise, returns null.
   *
   * @typedef {function(!ActionInvocation, number=, !Array<!ActionInfoDef>=):?Promise}
   */

  exports.ActionInfoDef = ActionInfoDef;
  var ActionHandlerDef;
  /**
   * @typedef {Event|DeferredEvent}
   */

  var ActionEventDef;
  /**
   * The structure that contains all details of the action method invocation.
   * @struct @const @package For type.
   */

  exports.ActionEventDef = ActionEventDef;

  var ActionInvocation =
  /*#__PURE__*/
  function () {
    /**
     * For example:
     *
     *   <div id="div" on="tap:myForm.submit(foo=bar)">
     *     <button id="btn">Submit</button>
     *   </div>
     *
     * `node` is #myForm.
     * `method` is "submit".
     * `args` is {'foo': 'bar'}.
     * `source` is #btn.
     * `caller` is #div.
     * `event` is a "click" Event object.
     * `actionEventType` is "tap".
     * `trust` depends on whether this action was a result of a user gesture.
     * `tagOrTarget` is "amp-form".
     * `sequenceId` is a pseudo-UUID.
     *
     * @param {!Node} node Element whose action is being invoked.
     * @param {string} method Name of the action being invoked.
     * @param {?JsonObject} args Named action arguments.
     * @param {?Element} source Element that generated the `event`.
     * @param {?Element} caller Element containing the on="..." action handler.
     * @param {?ActionEventDef} event The event object that triggered this action.
     * @param {!ActionTrust} trust The trust level of this invocation's trigger.
     * @param {?string} actionEventType The AMP event name that triggered this.
     * @param {?string} tagOrTarget The global target name or the element tagName.
     * @param {number} sequenceId An identifier for this action's sequence (all
     *   actions triggered by one event e.g. "tap:form1.submit, form2.submit").
     */
    function ActionInvocation(node, method, args, source, caller, event, trust, actionEventType, tagOrTarget, sequenceId) {
      if (actionEventType === void 0) {
        actionEventType = '?';
      }

      if (tagOrTarget === void 0) {
        tagOrTarget = null;
      }

      if (sequenceId === void 0) {
        sequenceId = Math.random();
      }

      /** @type {!Node} */
      this.node = node;
      /** @const {string} */

      this.method = method;
      /** @const {?JsonObject} */

      this.args = args;
      /** @const {?Element} */

      this.source = source;
      /** @const {?Element} */

      this.caller = caller;
      /** @const {?ActionEventDef} */

      this.event = event;
      /** @const {!ActionTrust} */

      this.trust = trust;
      /** @const {?string} */

      this.actionEventType = actionEventType;
      /** @const {string} */

      this.tagOrTarget = tagOrTarget || node.tagName;
      /** @const {number} */

      this.sequenceId = sequenceId;
    }
    /**
     * Returns true if the trigger event has a trust equal to or greater than
     * `minimumTrust`. Otherwise, logs a user error and returns false.
     * @param {ActionTrust} minimumTrust
     * @return {boolean}
     */


    var _proto = ActionInvocation.prototype;

    _proto.satisfiesTrust = function satisfiesTrust(minimumTrust) {
      // Sanity check.
      if (!(0, _types.isFiniteNumber)(this.trust)) {
        (0, _log.dev)().error(TAG_, "Invalid trust for '" + this.method + "': " + this.trust);
        return false;
      }

      if (this.trust < minimumTrust) {
        (0, _log.user)().error(TAG_, "\"" + this.actionEventType + "\" is not allowed to invoke " + ("\"" + this.tagOrTarget + "." + this.method + "\"."));
        return false;
      }

      return true;
    };

    return ActionInvocation;
  }();
  /**
   * TODO(dvoytenko): consider splitting this class into two:
   * 1. A class that has a method "trigger(element, eventType, data)" and
   *    simply can search target in DOM and trigger methods on it.
   * 2. A class that configures event recognizers and rules and then
   *    simply calls action.trigger.
   * @implements {../service.EmbeddableService}
   */


  exports.ActionInvocation = ActionInvocation;

  var ActionService =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {(!Document|!ShadowRoot)=} opt_root
     */
    function ActionService(ampdoc, opt_root) {
      /** @const {!./ampdoc-impl.AmpDoc} */
      this.ampdoc = ampdoc;
      /** @const {!Document|!ShadowRoot} */

      this.root_ = opt_root || ampdoc.getRootNode();
      /**
       * Optional whitelist of actions, e.g.:
       *
       *     [{tagOrTarget: 'AMP', method: 'navigateTo'},
       *      {tagOrTarget: 'AMP-FORM', method: 'submit'},
       *      {tagOrTarget: '*', method: 'show'}]
       *
       * If not null, any actions that are not in the whitelist will be ignored
       * and throw a user error at invocation time. Note that `tagOrTarget` is
       * always the canonical uppercased form (same as
       * `Element.prototype.tagName`). If `tagOrTarget` is the wildcard '*', then
       * the whitelisted method is allowed on any tag or target.
       * @private {?Array<{tagOrTarget: string, method: string}>}
       */

      this.whitelist_ = this.queryWhitelist_();
      /** @const @private {!Object<string, ActionHandlerDef>} */

      this.globalTargets_ = (0, _object.map)();
      /**
       * @const @private {!Object<string, {handler: ActionHandlerDef, minTrust: ActionTrust}>}
       */

      this.globalMethodHandlers_ = (0, _object.map)(); // Add core events.

      this.addEvent('tap');
      this.addEvent('submit');
      this.addEvent('change');
      this.addEvent('input-debounced');
      this.addEvent('input-throttled');
      this.addEvent('valid');
      this.addEvent('invalid');
    }
    /** @override @nocollapse */


    ActionService.installInEmbedWindow = function installInEmbedWindow(embedWin, ampdoc) {
      (0, _service.installServiceInEmbedScope)(embedWin, 'action', new ActionService(ampdoc, embedWin.document));
    }
    /**
     * @param {string} name
     * TODO(dvoytenko): switch to a system where the event recognizers are
     * registered with Action instead, e.g. "doubletap", "tap to zoom".
     */
    ;

    var _proto2 = ActionService.prototype;

    _proto2.addEvent = function addEvent(name) {
      var _this = this;

      if (name == 'tap') {
        // TODO(dvoytenko): if needed, also configure touch-based tap, e.g. for
        // fast-click.
        this.root_.addEventListener('click', function (event) {
          if (!event.defaultPrevented) {
            var element = (0, _log.dev)().assertElement(event.target);

            _this.trigger(element, name, event, _actionConstants.ActionTrust.HIGH);
          }
        });
        this.root_.addEventListener('keydown', function (event) {
          var element = (0, _log.dev)().assertElement(event.target);
          var key = event.key;

          if (key == _keyCodes.Keys.ENTER || key == _keyCodes.Keys.SPACE) {
            var role = element.getAttribute('role');
            var isTapEventRole = role && (0, _object.hasOwn)(TAPPABLE_ARIA_ROLES, role.toLowerCase());

            if (!event.defaultPrevented && isTapEventRole) {
              event.preventDefault();

              _this.trigger(element, name, event, _actionConstants.ActionTrust.HIGH);
            }
          }
        });
      } else if (name == 'submit') {
        this.root_.addEventListener(name, function (event) {
          var element = (0, _log.dev)().assertElement(event.target); // For get requests, the delegating to the viewer needs to happen
          // before this.

          _this.trigger(element, name, event, _actionConstants.ActionTrust.HIGH);
        });
      } else if (name == 'change') {
        this.root_.addEventListener(name, function (event) {
          var element = (0, _log.dev)().assertElement(event.target);

          _this.addTargetPropertiesAsDetail_(event);

          _this.trigger(element, name, event, _actionConstants.ActionTrust.HIGH);
        });
      } else if (name == 'input-debounced') {
        var debouncedInput = (0, _rateLimit.debounce)(this.ampdoc.win, function (event) {
          var target = (0, _log.dev)().assertElement(event.target);

          _this.trigger(target, name,
          /** @type {!ActionEventDef} */
          event, _actionConstants.ActionTrust.HIGH);
        }, DEFAULT_DEBOUNCE_WAIT);
        this.root_.addEventListener('input', function (event) {
          // Create a DeferredEvent to avoid races where the browser cleans up
          // the event object before the async debounced function is called.
          var deferredEvent = new DeferredEvent(event);

          _this.addTargetPropertiesAsDetail_(deferredEvent);

          debouncedInput(deferredEvent);
        });
      } else if (name == 'input-throttled') {
        var throttledInput = (0, _rateLimit.throttle)(this.ampdoc.win, function (event) {
          var target = (0, _log.dev)().assertElement(event.target);

          _this.trigger(target, name,
          /** @type {!ActionEventDef} */
          event, _actionConstants.ActionTrust.HIGH);
        }, DEFAULT_THROTTLE_INTERVAL);
        this.root_.addEventListener('input', function (event) {
          var deferredEvent = new DeferredEvent(event);

          _this.addTargetPropertiesAsDetail_(deferredEvent);

          throttledInput(deferredEvent);
        });
      } else if (name == 'valid' || name == 'invalid') {
        this.root_.addEventListener(name, function (event) {
          var element = (0, _log.dev)().assertElement(event.target);

          _this.trigger(element, name, event, _actionConstants.ActionTrust.HIGH);
        });
      }
    }
    /**
     * Registers the action target that will receive all designated actions.
     * @param {string} name
     * @param {ActionHandlerDef} handler
     */
    ;

    _proto2.addGlobalTarget = function addGlobalTarget(name, handler) {
      this.globalTargets_[name] = handler;
    }
    /**
     * Registers the action handler for a common method.
     * @param {string} name
     * @param {ActionHandlerDef} handler
     * @param {ActionTrust} minTrust
     */
    ;

    _proto2.addGlobalMethodHandler = function addGlobalMethodHandler(name, handler, minTrust) {
      if (minTrust === void 0) {
        minTrust = _actionConstants.ActionTrust.HIGH;
      }

      this.globalMethodHandlers_[name] = {
        handler: handler,
        minTrust: minTrust
      };
    }
    /**
     * Triggers the specified event on the target element.
     * @param {!Element} target
     * @param {string} eventType
     * @param {?ActionEventDef} event
     * @param {!ActionTrust} trust
     * @param {?JsonObject=} opt_args
     */
    ;

    _proto2.trigger = function trigger(target, eventType, event, trust, opt_args) {
      this.action_(target, eventType, event, trust, opt_args);
    }
    /**
     * Triggers execution of the method on a target/method.
     * @param {!Element} target
     * @param {string} method
     * @param {?JsonObject} args
     * @param {?Element} source
     * @param {?Element} caller
     * @param {?ActionEventDef} event
     * @param {ActionTrust} trust
     */
    ;

    _proto2.execute = function execute(target, method, args, source, caller, event, trust) {
      var invocation = new ActionInvocation(target, method, args, source, caller, event, trust);
      this.invoke_(invocation);
    }
    /**
     * Installs action handler for the specified element.
     * @param {!Element} target
     * @param {ActionHandlerDef} handler
     * @param {ActionTrust} minTrust
     */
    ;

    _proto2.installActionHandler = function installActionHandler(target, handler, minTrust) {
      if (minTrust === void 0) {
        minTrust = _actionConstants.ActionTrust.HIGH;
      }

      // TODO(dvoytenko, #7063): switch back to `target.id` with form proxy.
      var targetId = target.getAttribute('id') || '';
      var debugId = target.tagName + '#' + targetId;
      (0, _log.devAssert)(targetId && targetId.substring(0, 4) == 'amp-' || target.tagName.toLowerCase() in ELEMENTS_ACTIONS_MAP_, 'AMP element or a whitelisted target element is expected: %s', debugId);

      if (target[ACTION_HANDLER_]) {
        (0, _log.dev)().error(TAG_, "Action handler already installed for " + target);
        return;
      }
      /** @const {Array<!ActionInvocation>} */


      var currentQueue = target[ACTION_QUEUE_];
      target[ACTION_HANDLER_] = {
        handler: handler,
        minTrust: minTrust
      }; // Dequeue the current queue.

      if ((0, _types.isArray)(currentQueue)) {
        _services.Services.timerFor((0, _types.toWin)(target.ownerDocument.defaultView)).delay(function () {
          // TODO(dvoytenko, #1260): dedupe actions.
          currentQueue.forEach(function (invocation) {
            try {
              if (invocation.satisfiesTrust(
              /** @type {ActionTrust} */
              minTrust)) {
                handler(invocation);
              }
            } catch (e) {
              (0, _log.dev)().error(TAG_, 'Action execution failed:', invocation, e);
            }
          });
          target[ACTION_QUEUE_].length = 0;
        }, 1);
      }
    }
    /**
     * Checks if the given element has registered a particular action type.
     * @param {!Element} element
     * @param {string} actionEventType
     * @param {!Element=} opt_stopAt
     * @return {boolean}
     */
    ;

    _proto2.hasAction = function hasAction(element, actionEventType, opt_stopAt) {
      return !!this.findAction_(element, actionEventType, opt_stopAt);
    }
    /**
     * Checks if the given element's registered action resolves to at least one
     * existing element by id or a global target (e.g. "AMP").
     * @param {!Element} element
     * @param {string} actionEventType
     * @param {!Element=} opt_stopAt
     * @return {boolean}
     */
    ;

    _proto2.hasResolvableAction = function hasResolvableAction(element, actionEventType, opt_stopAt) {
      var _this2 = this;

      var action = this.findAction_(element, actionEventType, opt_stopAt);

      if (!action) {
        return false;
      }

      return action.actionInfos.some(function (_ref) {
        var target = _ref.target;
        return !!_this2.getActionNode_(target);
      });
    }
    /**
     * For global targets e.g. "AMP", returns the document root. Otherwise,
     * `target` is an element id and the corresponding element is returned.
     * @param {string} target
     * @return {?Document|?Element|?ShadowRoot}
     * @private
     */
    ;

    _proto2.getActionNode_ = function getActionNode_(target) {
      return this.globalTargets_[target] ? this.root_ : this.root_.getElementById(target);
    }
    /**
     * Sets the action whitelist. Can be used to clear it.
     * @param {!Array<{tagOrTarget: string, method: string}>} whitelist
     */
    ;

    _proto2.setWhitelist = function setWhitelist(whitelist) {
      this.whitelist_ = whitelist;
    }
    /**
     * Adds an action to the whitelist.
     * @param {string} tagOrTarget The tag or target to whitelist, e.g.
     *     'AMP-LIST', '*'.
     * @param {string} method The method to whitelist, e.g. 'show', 'hide'.
     */
    ;

    _proto2.addToWhitelist = function addToWhitelist(tagOrTarget, method) {
      if (!this.whitelist_) {
        this.whitelist_ = [];
      }

      this.whitelist_.push({
        tagOrTarget: tagOrTarget,
        method: method
      });
    }
    /**
     * @param {!Element} source
     * @param {string} actionEventType
     * @param {?ActionEventDef} event
     * @param {!ActionTrust} trust
     * @param {?JsonObject=} opt_args
     * @private
     */
    ;

    _proto2.action_ = function action_(source, actionEventType, event, trust, opt_args) {
      var _this3 = this;

      var action = this.findAction_(source, actionEventType);

      if (!action) {
        return;
      } // Use a pseudo-UUID to uniquely identify this sequence of actions.
      // A sequence is all actions triggered by a single event.


      var sequenceId = Math.random(); // Invoke actions serially, where each action waits for its predecessor
      // to complete. `currentPromise` is the i'th promise in the chain.

      var currentPromise = null;
      action.actionInfos.forEach(function (_ref2) {
        var target = _ref2.target,
            args = _ref2.args,
            method = _ref2.method,
            str = _ref2.str;
        var dereferencedArgs = dereferenceArgsVariables(args, event, opt_args);

        var invokeAction = function invokeAction() {
          var node = _this3.getActionNode_(target);

          if (!node) {
            _this3.error_("Target \"" + target + "\" not found for action [" + str + "].");

            return;
          }

          var invocation = new ActionInvocation(node, method, dereferencedArgs, source, action.node, event, trust, actionEventType, node.tagName || target, sequenceId);
          return _this3.invoke_(invocation);
        }; // Wait for the previous action, if any.


        currentPromise = currentPromise ? currentPromise.then(invokeAction) : invokeAction();
      });
    }
    /**
     * @param {string} message
     * @param {?Element=} opt_element
     * @private
     */
    ;

    _proto2.error_ = function error_(message, opt_element) {
      if (opt_element) {
        // reportError() supports displaying the element in dev console.
        var e = (0, _log.user)().createError("[" + TAG_ + "] " + message);
        (0, _error.reportError)(e, opt_element);
        throw e;
      } else {
        (0, _log.user)().error(TAG_, message);
      }
    }
    /**
     * @param {!ActionInvocation} invocation
     * @return {?Promise}
     * @private
     */
    ;

    _proto2.invoke_ = function invoke_(invocation) {
      var method = invocation.method,
          tagOrTarget = invocation.tagOrTarget; // Check that this action is whitelisted (if a whitelist is set).

      if (this.whitelist_) {
        if (!isActionWhitelisted_(invocation, this.whitelist_)) {
          this.error_("\"" + tagOrTarget + "." + method + "\" is not whitelisted " + JSON.stringify(this.whitelist_) + ".");
          return null;
        }
      } // Handle global targets e.g. "AMP".


      var globalTarget = this.globalTargets_[tagOrTarget];

      if (globalTarget) {
        return globalTarget(invocation);
      } // Subsequent handlers assume that invocation target is an Element.


      var node = (0, _log.dev)().assertElement(invocation.node); // Handle global actions e.g. "<any-element-id>.toggle".

      var globalMethod = this.globalMethodHandlers_[method];

      if (globalMethod && invocation.satisfiesTrust(globalMethod.minTrust)) {
        return globalMethod.handler(invocation);
      } // Handle element-specific actions.


      var lowerTagName = node.tagName.toLowerCase();

      if (lowerTagName.substring(0, 4) == 'amp-') {
        if (node.enqueAction) {
          node.enqueAction(invocation);
        } else {
          this.error_("Unrecognized AMP element \"" + lowerTagName + "\".", node);
        }

        return null;
      } // Special elements with AMP ID or known supported actions.


      var supportedActions = ELEMENTS_ACTIONS_MAP_[lowerTagName]; // TODO(dvoytenko, #7063): switch back to `target.id` with form proxy.

      var targetId = node.getAttribute('id') || '';

      if (targetId && targetId.substring(0, 4) == 'amp-' || supportedActions && supportedActions.indexOf(method) > -1) {
        var holder = node[ACTION_HANDLER_];

        if (holder) {
          var handler = holder.handler,
              minTrust = holder.minTrust;

          if (invocation.satisfiesTrust(minTrust)) {
            handler(invocation);
          }
        } else {
          node[ACTION_QUEUE_] = node[ACTION_QUEUE_] || [];
          node[ACTION_QUEUE_].push(invocation);
        }

        return null;
      } // Unsupported method.


      this.error_("Target (" + tagOrTarget + ") doesn't support \"" + method + "\" action.", invocation.caller);
      return null;
    }
    /**
     * @param {!Element} target
     * @param {string} actionEventType
     * @param {!Element=} opt_stopAt
     * @return {?{node: !Element, actionInfos: !Array<!ActionInfoDef>}}
     */
    ;

    _proto2.findAction_ = function findAction_(target, actionEventType, opt_stopAt) {
      // Go from target up the DOM tree and find the applicable action.
      var n = target;

      while (n) {
        if (opt_stopAt && n == opt_stopAt) {
          return null;
        }

        var actionInfos = this.matchActionInfos_(n, actionEventType);

        if (actionInfos && (0, _dom.isEnabled)(n)) {
          return {
            node: n,
            actionInfos: (0, _log.devAssert)(actionInfos)
          };
        }

        n = n.parentElement;
      }

      return null;
    }
    /**
     * @param {!Element} node
     * @param {string} actionEventType
     * @return {?Array<!ActionInfoDef>}
     */
    ;

    _proto2.matchActionInfos_ = function matchActionInfos_(node, actionEventType) {
      var actionMap = this.getActionMap_(node, actionEventType);

      if (!actionMap) {
        return null;
      }

      return actionMap[actionEventType] || null;
    }
    /**
     * @param {!Element} node
     * @param {string} actionEventType
     * @return {?Object<string, !Array<!ActionInfoDef>>}
     */
    ;

    _proto2.getActionMap_ = function getActionMap_(node, actionEventType) {
      var actionMap = node[ACTION_MAP_];

      if (actionMap === undefined) {
        actionMap = null;

        if (node.hasAttribute('on')) {
          var action = node.getAttribute('on');
          actionMap = parseActionMap(action, node);
          node[ACTION_MAP_] = actionMap;
        } else if (node.hasAttribute('execute')) {
          var _action = node.getAttribute('execute');

          actionMap = parseActionMap(actionEventType + ":" + _action, node);
          node[ACTION_MAP_] = actionMap;
        }
      }

      return actionMap;
    }
    /**
     * Resets a node's actions with those defined in the given actions string.
     * @param {!Element} node
     * @param {string} actionsStr
     */
    ;

    _proto2.setActions = function setActions(node, actionsStr) {
      node.setAttribute('on', actionsStr); // Clear cache.

      delete node[ACTION_MAP_];
    }
    /**
     * Searches for a whitelist meta tag, parses and returns its contents.
     *
     * For example:
     * <meta name="amp-action-whitelist" content="AMP.setState, amp-form.submit">
     *
     * Returns:
     * [{tagOrTarget: 'AMP', method: 'setState'},
     *  {tagOrTarget: 'AMP-FORM', method: 'submit'}]
     *
     * @return {?Array<{tagOrTarget: string, method: string}>}
     * @private
     */
    ;

    _proto2.queryWhitelist_ = function queryWhitelist_() {
      var _this4 = this;

      var _this$ampdoc$getRootN = this.ampdoc.getRootNode(),
          head = _this$ampdoc$getRootN.head;

      if (!head) {
        return null;
      }

      var meta = head.querySelector('meta[name="amp-action-whitelist"]');

      if (!meta) {
        return null;
      }

      return meta.getAttribute('content').split(',') // Turn an empty string whitelist into an empty array, otherwise the
      // parse error in the mapper below would trigger.
      .filter(function (action) {
        return action;
      }).map(function (action) {
        var parts = action.split('.');

        if (parts.length < 2) {
          _this4.error_("Invalid action whitelist entry: " + action + ".");

          return;
        }

        var tagOrTarget = parts[0].trim();
        var method = parts[1].trim();
        return {
          tagOrTarget: tagOrTarget,
          method: method
        };
      }) // Filter out undefined elements because of the parse error above.
      .filter(function (action) {
        return action;
      });
    }
    /**
     * Given a browser 'change' or 'input' event, add `details` property to it
     * containing whitelisted properties of the target element.
     * @param {!ActionEventDef} event
     * @private
     */
    ;

    _proto2.addTargetPropertiesAsDetail_ = function addTargetPropertiesAsDetail_(event) {
      var detail =
      /** @type {!JsonObject} */
      (0, _object.map)();
      var target = event.target;

      if (target.value !== undefined) {
        detail['value'] = target.value;
      } // Check tagName instead since `valueAsNumber` isn't supported on IE.


      if (target.tagName == 'INPUT') {
        // Probably supported natively but convert anyways for consistency.
        detail['valueAsNumber'] = Number(target.value);
      }

      if (target.checked !== undefined) {
        detail['checked'] = target.checked;
      }

      if (target.min !== undefined || target.max !== undefined) {
        detail['min'] = target.min;
        detail['max'] = target.max;
      }

      if (Object.keys(detail).length > 0) {
        event.detail = detail;
      }
    };

    return ActionService;
  }();
  /**
   * Returns `true` if the given action invocation is whitelisted in the given
   * whitelist. Default actions' alias, 'activate', are automatically
   * whitelisted if their corresponding registered alias is whitelisted.
   * @param {!ActionInvocation} invocation
   * @param {!Array<{tagOrTarget: string, method: string}>} whitelist
   * @return {boolean}
   * @private
   */


  exports.ActionService = ActionService;

  function isActionWhitelisted_(invocation, whitelist) {
    var method = invocation.method;
    var node = invocation.node,
        tagOrTarget = invocation.tagOrTarget; // Use alias if default action is invoked.

    if (method === _actionConstants.DEFAULT_ACTION && typeof node.getDefaultActionAlias == 'function') {
      method = node.getDefaultActionAlias();
    }

    var lcMethod = method.toLowerCase();
    var lcTagOrTarget = tagOrTarget.toLowerCase();
    return whitelist.some(function (w) {
      if (w.tagOrTarget.toLowerCase() === lcTagOrTarget || w.tagOrTarget === '*') {
        if (w.method.toLowerCase() === lcMethod) {
          return true;
        }
      }

      return false;
    });
  }
  /**
   * A clone of an event object with its function properties replaced.
   * This is useful e.g. for event objects that need to be passed to an async
   * context, but the browser might have cleaned up the original event object.
   * This clone replaces functions with error throws since they won't behave
   * normally after the original object has been destroyed.
   * @private visible for testing
   */


  var DeferredEvent =
  /**
   * @param {!Event} event
   */
  function DeferredEvent(event) {
    /** @type {?Object} */
    this.detail = null;
    cloneWithoutFunctions(event, this);
  };
  /**
   * Clones an object and replaces its function properties with throws.
   * @param {!T} original
   * @param {!T=} opt_dest
   * @return {!T}
   * @template T
   * @private
   */


  exports.DeferredEvent = DeferredEvent;

  function cloneWithoutFunctions(original, opt_dest) {
    var clone = opt_dest || (0, _object.map)();

    for (var prop in original) {
      var value = original[prop];

      if (typeof value === 'function') {
        clone[prop] = notImplemented;
      } else {
        clone[prop] = original[prop];
      }
    }

    return clone;
  }
  /** @private */


  function notImplemented() {
    (0, _log.devAssert)(null, 'Deferred events cannot access native event functions.');
  }
  /**
   * @param {string} action
   * @param {!Element} context
   * @return {?Object<string, !Array<!ActionInfoDef>>}
   * @private Visible for testing only.
   */


  function parseActionMap(action, context) {
    var assertAction = assertActionForParser.bind(null, action, context);
    var assertToken = assertTokenForParser.bind(null, action, context);
    var actionMap = null;
    var toks = new ParserTokenizer(action);
    var tok;
    var peek;

    do {
      tok = toks.next();

      if (tok.type == TokenType.EOF || tok.type == TokenType.SEPARATOR && tok.value == ';') {// Expected, ignore.
      } else if (tok.type == TokenType.LITERAL || tok.type == TokenType.ID) {
        // Format: event:target.method
        // Event: "event:"
        var event = tok.value; // Target: ":target." separator

        assertToken(toks.next(), [TokenType.SEPARATOR], ':');
        var actions = []; // Handlers for event.

        do {
          var target = assertToken(toks.next(), [TokenType.LITERAL, TokenType.ID]).value; // Method: ".method". Method is optional.

          var method = _actionConstants.DEFAULT_ACTION;
          var args = null;
          peek = toks.peek();

          if (peek.type == TokenType.SEPARATOR && peek.value == '.') {
            toks.next(); // Skip '.'

            method = assertToken(toks.next(), [TokenType.LITERAL, TokenType.ID]).value || method; // Optionally, there may be arguments: "(key = value, key = value)".

            peek = toks.peek();

            if (peek.type == TokenType.SEPARATOR && peek.value == '(') {
              toks.next(); // Skip '('

              args = tokenizeMethodArguments(toks, assertToken, assertAction);
            }
          }

          actions.push({
            event: event,
            target: target,
            method: method,
            args: args && (0, _mode.getMode)().test && Object.freeze ? Object.freeze(args) : args,
            str: action
          });
          peek = toks.peek();
        } while (peek.type == TokenType.SEPARATOR && peek.value == ',' && toks.next()); // skip "," when found


        if (!actionMap) {
          actionMap = (0, _object.map)();
        }

        actionMap[event] = actions;
      } else {
        // Unexpected token.
        assertAction(false, "; unexpected token [" + (tok.value || '') + "]");
      }
    } while (tok.type != TokenType.EOF);

    return actionMap;
  }
  /**
   * Tokenizes and returns method arguments, e.g. target.method(arguments).
   * @param {!ParserTokenizer} toks
   * @param {!Function} assertToken
   * @param {!Function} assertAction
   * @return {?ActionInfoArgsDef}
   * @private
   */


  function tokenizeMethodArguments(toks, assertToken, assertAction) {
    var peek = toks.peek();
    var tok;
    var args = null; // Object literal. Format: {...}

    if (peek.type == TokenType.OBJECT) {
      // Don't parse object literals. Tokenize as a single expression
      // fragment and delegate to specific action handler.
      args = (0, _object.map)();

      var _toks$next = toks.next(),
          value = _toks$next.value;

      args[_actionConstants.RAW_OBJECT_ARGS_KEY] = value;
      assertToken(toks.next(), [TokenType.SEPARATOR], ')');
    } else {
      // Key-value pairs. Format: key = value, ....
      do {
        tok = toks.next();
        var _tok = tok,
            type = _tok.type,
            _value = _tok.value;

        if (type == TokenType.SEPARATOR && (_value == ',' || _value == ')')) {// Expected: ignore.
        } else if (type == TokenType.LITERAL || type == TokenType.ID) {
          // Key: "key = "
          assertToken(toks.next(), [TokenType.SEPARATOR], '='); // Value is either a literal or an expression: "foo.bar.baz"

          tok = assertToken(toks.next(
          /* convertValue */
          true), [TokenType.LITERAL, TokenType.ID]);
          var argValueTokens = [tok]; // Expressions have one or more dereferences: ".identifier"

          if (tok.type == TokenType.ID) {
            for (peek = toks.peek(); peek.type == TokenType.SEPARATOR && peek.value == '.'; peek = toks.peek()) {
              toks.next(); // Skip '.'.

              tok = assertToken(toks.next(false), [TokenType.ID]);
              argValueTokens.push(tok);
            }
          }

          var argValue = argValueForTokens(argValueTokens);

          if (!args) {
            args = (0, _object.map)();
          }

          args[_value] = argValue;
          peek = toks.peek();
          assertAction(peek.type == TokenType.SEPARATOR && (peek.value == ',' || peek.value == ')'), 'Expected either [,] or [)]');
        } else {
          // Unexpected token.
          assertAction(false, "; unexpected token [" + (tok.value || '') + "]");
        }
      } while (!(tok.type == TokenType.SEPARATOR && tok.value == ')'));
    }

    return args;
  }
  /**
   * @param {Array<!TokenDef>} tokens
   * @return {?ActionInfoArgValueDef}
   * @private
   */


  function argValueForTokens(tokens) {
    if (tokens.length == 0) {
      return null;
    } else if (tokens.length == 1) {
      return (
        /** @type {(boolean|number|string)} */
        tokens[0].value
      );
    } else {
      var values = tokens.map(function (token) {
        return token.value;
      });
      var expression = values.join('.');
      return (
        /** @type {ActionInfoArgExpressionDef} */
        {
          expression: expression
        }
      );
    }
  }
  /**
   * Dereferences expression args in `args` using values in data.
   * @param {?ActionInfoArgsDef} args
   * @param {?ActionEventDef} event
   * @param {?JsonObject=} opt_args
   * @return {?JsonObject}
   * @private
   */


  function dereferenceArgsVariables(args, event, opt_args) {
    if (!args) {
      return args;
    }

    var data = opt_args || (0, _object.dict)({});

    if (event) {
      var detail = (0, _eventHelper.getDetail)(
      /** @type {!Event} */
      event);

      if (detail) {
        data['event'] = detail;
      }
    }

    var applied = (0, _object.map)();
    Object.keys(args).forEach(function (key) {
      var value = args[key]; // Only JSON expression strings that contain dereferences (e.g. `foo.bar`)
      // are processed as ActionInfoArgExpressionDef. We also support
      // dereferencing strings like `foo` iff there is a corresponding key in
      // `data`. Otherwise, `foo` is treated as a string "foo".

      if (typeof value == 'object' && value.expression) {
        var expr =
        /** @type {ActionInfoArgExpressionDef} */
        value.expression;
        var exprValue = (0, _json.getValueForExpr)(data, expr); // If expr can't be found in data, use null instead of undefined.

        value = exprValue === undefined ? null : exprValue;
      }

      if (data[value]) {
        applied[key] = data[value];
      } else {
        applied[key] = value;
      }
    });
    return applied;
  }
  /**
   * @param {string} s
   * @param {!Element} context
   * @param {?T} condition
   * @param {string=} opt_message
   * @return {T}
   * @template T
   * @private
   */


  function assertActionForParser(s, context, condition, opt_message) {
    return (0, _log.userAssert)(condition, 'Invalid action definition in %s: [%s] %s', context, s, opt_message || '');
  }
  /**
   * @param {string} s
   * @param {!Element} context
   * @param {!TokenDef} tok
   * @param {Array<TokenType>} types
   * @param {*=} opt_value
   * @return {!TokenDef}
   * @private
   */


  function assertTokenForParser(s, context, tok, types, opt_value) {
    if (opt_value !== undefined) {
      assertActionForParser(s, context, types.includes(tok.type) && tok.value == opt_value, "; expected [" + opt_value + "]");
    } else {
      assertActionForParser(s, context, types.includes(tok.type));
    }

    return tok;
  }
  /**
   * @enum {number}
   */


  var TokenType = {
    INVALID: 0,
    EOF: 1,
    SEPARATOR: 2,
    LITERAL: 3,
    ID: 4,
    OBJECT: 5
  };
  /**
   * @typedef {{type: TokenType, value: *}}
   */

  var TokenDef;
  /** @private @const {string} */

  var WHITESPACE_SET = " \t\n\r\f\x0B\xA0\u2028\u2029";
  /** @private @const {string} */

  var SEPARATOR_SET = ';:.()=,|!';
  /** @private @const {string} */

  var STRING_SET = '"\'';
  /** @private @const {string} */

  var OBJECT_SET = '{}';
  /** @private @const {string} */

  var SPECIAL_SET = WHITESPACE_SET + SEPARATOR_SET + STRING_SET + OBJECT_SET;
  /** @private */

  var ParserTokenizer =
  /*#__PURE__*/
  function () {
    /**
     * @param {string} str
     */
    function ParserTokenizer(str) {
      /** @private @const {string} */
      this.str_ = str;
      /** @private {number} */

      this.index_ = -1;
    }
    /**
     * Returns the next token and advances the position.
     * @param {boolean=} opt_convertValues
     * @return {!TokenDef}
     */


    var _proto3 = ParserTokenizer.prototype;

    _proto3.next = function next(opt_convertValues) {
      var tok = this.next_(opt_convertValues || false);
      this.index_ = tok.index;
      return tok;
    }
    /**
     * Returns the next token but keeps the current position.
     * @param {boolean=} opt_convertValues
     * @return {!TokenDef}
     */
    ;

    _proto3.peek = function peek(opt_convertValues) {
      return this.next_(opt_convertValues || false);
    }
    /**
     * @param {boolean} convertValues
     * @return {!{type: TokenType, value: *, index: number}}
     */
    ;

    _proto3.next_ = function next_(convertValues) {
      var newIndex = this.index_ + 1;

      if (newIndex >= this.str_.length) {
        return {
          type: TokenType.EOF,
          index: this.index_
        };
      }

      var c = this.str_.charAt(newIndex); // Whitespace: standard set.

      if (WHITESPACE_SET.indexOf(c) != -1) {
        newIndex++;

        for (; newIndex < this.str_.length; newIndex++) {
          if (WHITESPACE_SET.indexOf(this.str_.charAt(newIndex)) == -1) {
            break;
          }
        }

        if (newIndex >= this.str_.length) {
          return {
            type: TokenType.EOF,
            index: newIndex
          };
        }

        c = this.str_.charAt(newIndex);
      } // A numeric. Notice that it steals the `.` from separators.


      if (convertValues && (isNum(c) || c == '.' && newIndex + 1 < this.str_.length && isNum(this.str_[newIndex + 1]))) {
        var hasFraction = c == '.';

        var _end = newIndex + 1;

        for (; _end < this.str_.length; _end++) {
          var c2 = this.str_.charAt(_end);

          if (c2 == '.') {
            hasFraction = true;
            continue;
          }

          if (!isNum(c2)) {
            break;
          }
        }

        var _s = this.str_.substring(newIndex, _end);

        var value = hasFraction ? parseFloat(_s) : parseInt(_s, 10);
        newIndex = _end - 1;
        return {
          type: TokenType.LITERAL,
          value: value,
          index: newIndex
        };
      } // Different separators.


      if (SEPARATOR_SET.indexOf(c) != -1) {
        return {
          type: TokenType.SEPARATOR,
          value: c,
          index: newIndex
        };
      } // String literal.


      if (STRING_SET.indexOf(c) != -1) {
        var _end2 = -1;

        for (var i = newIndex + 1; i < this.str_.length; i++) {
          if (this.str_.charAt(i) == c) {
            _end2 = i;
            break;
          }
        }

        if (_end2 == -1) {
          return {
            type: TokenType.INVALID,
            index: newIndex
          };
        }

        var _value2 = this.str_.substring(newIndex + 1, _end2);

        newIndex = _end2;
        return {
          type: TokenType.LITERAL,
          value: _value2,
          index: newIndex
        };
      } // Object literal.


      if (c == '{') {
        var numberOfBraces = 1;

        var _end3 = -1;

        for (var _i = newIndex + 1; _i < this.str_.length; _i++) {
          var char = this.str_[_i];

          if (char == '{') {
            numberOfBraces++;
          } else if (char == '}') {
            numberOfBraces--;
          }

          if (numberOfBraces <= 0) {
            _end3 = _i;
            break;
          }
        }

        if (_end3 == -1) {
          return {
            type: TokenType.INVALID,
            index: newIndex
          };
        }

        var _value3 = this.str_.substring(newIndex, _end3 + 1);

        newIndex = _end3;
        return {
          type: TokenType.OBJECT,
          value: _value3,
          index: newIndex
        };
      } // Advance until next special character.


      var end = newIndex + 1;

      for (; end < this.str_.length; end++) {
        if (SPECIAL_SET.indexOf(this.str_.charAt(end)) != -1) {
          break;
        }
      }

      var s = this.str_.substring(newIndex, end);
      newIndex = end - 1; // Boolean literal.

      if (convertValues && (s == 'true' || s == 'false')) {
        var _value4 = s == 'true';

        return {
          type: TokenType.LITERAL,
          value: _value4,
          index: newIndex
        };
      } // Identifier.


      if (!isNum(s.charAt(0))) {
        return {
          type: TokenType.ID,
          value: s,
          index: newIndex
        };
      } // Key.


      return {
        type: TokenType.LITERAL,
        value: s,
        index: newIndex
      };
    };

    return ParserTokenizer;
  }();
  /**
   * Tests whether a chacter is a number.
   * @param {string} c
   * @return {boolean}
   */


  function isNum(c) {
    return c >= '0' && c <= '9';
  }
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   */


  function installActionServiceForDoc(ampdoc) {
    (0, _service.registerServiceBuilderForDoc)(ampdoc, 'action', ActionService,
    /* opt_instantiate */
    true);
  }

  },{"../action-constants":8,"../dom":26,"../error":29,"../event-helper":31,"../json":46,"../log":51,"../mode":53,"../service":71,"../services":112,"../types":121,"../utils/key-codes":129,"../utils/object":132,"../utils/rate-limit":135}],73:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installDocService = installDocService;
  exports.AmpDocShell = exports.AmpDocShadow = exports.AmpDocSingle = exports.AmpDoc = exports.AmpDocService = void 0;

  var _promise = require("../utils/promise");

  var _signals = require("../utils/signals");

  var _log = require("../log");

  var _service = require("../service");

  var _shadowEmbed = require("../shadow-embed");

  var _documentReady = require("../document-ready");

  var _experiments = require("../experiments");

  var _dom = require("../dom");

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  /** @const {string} */
  var AMPDOC_PROP = '__AMPDOC';
  /**
   * This service helps locate an ampdoc (`AmpDoc` instance) for any node,
   * either in the single-doc or shadow-doc environments.
   *
   * In the single-doc environment an ampdoc is equivalent to the
   * `window.document`. In the shadow-doc mode, any number of AMP documents
   * could be hosted in shadow roots in the same global `window.document`.
   *
   * @package
   */

  var AmpDocService =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     * @param {boolean} isSingleDoc
     */
    function AmpDocService(win, isSingleDoc) {
      /** @const {!Window} */
      this.win = win;
      /** @private {?AmpDoc} */

      this.singleDoc_ = null;

      if (isSingleDoc) {
        this.singleDoc_ = new AmpDocSingle(win);
      }
      /** @private @const */


      this.alwaysClosestAmpDoc_ = (0, _experiments.isExperimentOn)(win, 'ampdoc-closest');
      /** Guarded by 'ampdoc-shell' experiment
       * @private {?AmpDocShell}
       */

      this.shellShadowDoc_ = null;
    }
    /**
     * Whether the runtime in the single-doc mode. Alternative is the shadow-doc
     * mode that supports multiple documents per a single window.
     * @return {boolean}
     */


    var _proto = AmpDocService.prototype;

    _proto.isSingleDoc = function isSingleDoc() {
      return !!this.singleDoc_;
    }
    /**
     * Whether if an `AmpDocShell` has been installed for the runtime.
     * @return {boolean}
     */
    ;

    _proto.hasAmpDocShell = function hasAmpDocShell() {
      return !!this.shellShadowDoc_;
    }
    /**
     * Returns the instance of the ampdoc (`AmpDoc`) that contains the specified
     * node. If the runtime is in the single-doc mode, the one global `AmpDoc`
     * instance is returned, unless specfically looking for a closer `AmpDoc`.
     * Otherwise, this method locates the `AmpDoc` that contains the specified
     * node and, if necessary, initializes it.
     *
     * TODO(#17614): We should always look for the closest AmpDoc (make
     * closestAmpDoc always true).
     *
     * @param {!Node=} opt_node
     * @param {{
     *  closestAmpDoc: boolean
     * }=} opt_options
     * @return {?AmpDoc}
     */
    ;

    _proto.getAmpDocIfAvailable = function getAmpDocIfAvailable(opt_node, _temp) {
      if (opt_node === void 0) {
        opt_node = undefined;
      }

      var _ref = _temp === void 0 ? {} : _temp,
          _ref$closestAmpDoc = _ref.closestAmpDoc,
          closestAmpDoc = _ref$closestAmpDoc === void 0 ? false : _ref$closestAmpDoc;

      // Single document: return it immediately.
      if (this.singleDoc_ && !closestAmpDoc && !this.alwaysClosestAmpDoc_) {
        return this.singleDoc_;
      } // Multiple documents and AmpDocShell requested


      if ((0, _experiments.isExperimentOn)(this.win, 'ampdoc-shell') && opt_node === this.win.document) {
        if (this.shellShadowDoc_) {
          return this.shellShadowDoc_;
        } else {
          throw (0, _log.dev)().createError('Ampdoc for shell has not been installed');
        }
      } // TODO(sparhami) Should we always require a node to be passed? This will
      // make sure any functionality that works for a standalone AmpDoc works if
      // the AmpDoc is loaded in a shadow doc.


      if (!this.singleDoc_) {
        (0, _log.devAssert)(opt_node);
      } // Otherwise discover and possibly create the ampdoc.


      var n = opt_node;

      while (n) {
        // A custom element may already have the reference. If we are looking
        // for the closest AmpDoc, the element might have a reference to the
        // global AmpDoc, which we do not want. This occurs when using
        // <amp-next-page>.
        if (n.ampdoc_ && (this.alwaysClosestAmpDoc_ || !closestAmpDoc)) {
          return n.ampdoc_;
        } // Traverse the boundary of a friendly iframe.


        var frameElement = (0, _service.getParentWindowFrameElement)(n, this.win);

        if (frameElement) {
          n = frameElement;
          continue;
        } // Shadow doc.


        var shadowRoot = (0, _shadowEmbed.getShadowRootNode)(n);

        if (!shadowRoot) {
          // If not inside a shadow root, it may belong to AmpDocShell
          if (this.shellShadowDoc_) {
            return this.shellShadowDoc_;
          }

          break;
        }

        var ampdoc = shadowRoot[AMPDOC_PROP];

        if (ampdoc) {
          return ampdoc;
        }

        n = shadowRoot.host;
      } // If we were looking for the closest AmpDoc, then fall back to the single
      // doc if there is no other AmpDoc that is closer.


      if (this.singleDoc_) {
        return this.singleDoc_;
      }

      return null;
    }
    /**
     * Returns the instance of the ampdoc (`AmpDoc`) that contains the specified
     * node. If the runtime is in the single-doc mode, the one global `AmpDoc`
     * instance is returned, unless specfically looking for a closer `AmpDoc`.
     * Otherwise, this method locates the `AmpDoc` that contains the specified
     * node and, if necessary, initializes it.
     *
     * An Error is thrown in development if no `AmpDoc` is found.
     * @param {!Node=} opt_node
     * @param {{
     *  closestAmpDoc: boolean
     * }=} opt_options
     * @return {!AmpDoc}
     */
    ;

    _proto.getAmpDoc = function getAmpDoc(opt_node, opt_options) {
      // Ensure that node is attached if specified. This check uses a new and
      // fast `isConnected` API and thus only checked on platforms that have it.
      // See https://www.chromestatus.com/feature/5676110549352448.
      if (opt_node) {
        (0, _log.devAssert)(opt_node['isConnected'] === undefined || opt_node['isConnected'] === true, 'The node must be attached to request ampdoc.');
      }

      var ampdoc = this.getAmpDocIfAvailable(opt_node, opt_options);

      if (!ampdoc) {
        throw (0, _log.dev)().createError('No ampdoc found for', opt_node);
      }

      return ampdoc;
    }
    /**
     * Creates and installs the ampdoc for the shadow root.
     * @param {string} url
     * @param {!ShadowRoot} shadowRoot
     * @return {!AmpDocShadow}
     * @restricted
     */
    ;

    _proto.installShadowDoc = function installShadowDoc(url, shadowRoot) {
      (0, _log.devAssert)(!shadowRoot[AMPDOC_PROP], 'The shadow root already contains ampdoc');
      var ampdoc = new AmpDocShadow(this.win, url, shadowRoot);
      shadowRoot[AMPDOC_PROP] = ampdoc;
      return ampdoc;
    }
    /**
     * Creates and installs an ampdoc for the shell in shadow-doc mode.
     * `AmpDocShell` is a subclass of `AmpDocShadow` that is installed for
     * `window.document` and allows to use AMP components as part of the shell,
     * outside shadow roots
     *
     * Currently guarded by 'ampdoc-shell' experiment
     *
     * @return {!AmpDocShell}
     * @restricted
     */
    ;

    _proto.installShellShadowDoc = function installShellShadowDoc() {
      var _this = this;

      (0, _log.devAssert)(this.singleDoc_ === null, 'AmpDocShell cannot be installed in single-doc mode');
      this.shellShadowDoc_ = new AmpDocShell(this.win);
      this.win.document[AMPDOC_PROP] = this.shellShadowDoc_;
      (0, _documentReady.whenDocumentReady)(this.win.document).then(function (document) {
        _this.shellShadowDoc_.setBody((0, _log.dev)().assertElement(document.body));

        _this.shellShadowDoc_.setReady();
      });
      return this.shellShadowDoc_;
    };

    return AmpDocService;
  }();
  /**
   * This class represents a single ampdoc. `AmpDocService` can contain only one
   * global ampdoc or multiple, depending on the runtime mode: single-doc or
   * shadow-doc.
   * @abstract
   * @package
   */


  exports.AmpDocService = AmpDocService;

  var AmpDoc =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function AmpDoc(win) {
      /** @public @const {!Window} */
      this.win = win;
      /** @private @const */

      this.signals_ = new _signals.Signals();
      /** @private @const {!Array<string>} */

      this.declaredExtensions_ = [];
    }
    /**
     * Whether the runtime in the single-doc mode. Alternative is the shadow-doc
     * mode that supports multiple documents per a single window.
     * @return {boolean}
     */


    var _proto2 = AmpDoc.prototype;

    _proto2.isSingleDoc = function isSingleDoc() {
      return (
        /** @type {?} */
        (0, _log.devAssert)(null, 'not implemented')
      );
    }
    /**
     * DO NOT CALL. Retained for backward compat during rollout.
     * @return {!Window}
     * @deprecated Use `ampdoc.win` instead.
     */
    ;

    _proto2.getWin = function getWin() {
      return this.win;
    }
    /** @return {!Signals} */
    ;

    _proto2.signals = function signals() {
      return this.signals_;
    }
    /**
     * Returns whether the specified extension has been declared on this ampdoc.
     * @param {string} extensionId
     * @return {boolean}
     */
    ;

    _proto2.declaresExtension = function declaresExtension(extensionId) {
      return this.declaredExtensions_.indexOf(extensionId) != -1;
    }
    /**
     * Adds a declared extension to an ampdoc.
     * @param {string} extensionId
     * @restricted
     */
    ;

    _proto2.declareExtension = function declareExtension(extensionId) {
      if (!this.declaresExtension(extensionId)) {
        this.declaredExtensions_.push(extensionId);
      }
    }
    /**
     * Returns the root node for this ampdoc. It will either be a `Document` for
     * the single-doc runtime mode, or a `ShadowRoot` for shadow-doc mode. This
     * node can be used, among other things, to add ampdoc-wide event listeners.
     *
     * @return {!Document|!ShadowRoot}
     */
    ;

    _proto2.getRootNode = function getRootNode() {
      return (
        /** @type {?} */
        (0, _log.devAssert)(null, 'not implemented')
      );
    }
    /**
     * Returns the head node. It's either an element or a shadow root.
     * @return {!Element|!ShadowRoot}
     * @abstract
     */
    ;

    _proto2.getHeadNode = function getHeadNode() {}
    /**
     * Returns `true` if the ampdoc's body is available.
     *
     * @return {boolean}
     */
    ;

    _proto2.isBodyAvailable = function isBodyAvailable() {
      return (
        /** @type {?} */
        (0, _log.devAssert)(false, 'not implemented')
      );
    }
    /**
     * Returns the ampdoc's body. Requires the body to already be available.
     *
     * See `isBodyAvailable` and `whenBodyAvailable`.
     *
     * @return {!Element}
     */
    ;

    _proto2.getBody = function getBody() {
      return (0, _log.dev)().assertElement(null, 'not implemented');
    }
    /**
     * Returns a promise that will be resolved when the ampdoc's body is
     * available.
     * @return {!Promise<!Element>}
     */
    ;

    _proto2.whenBodyAvailable = function whenBodyAvailable() {
      return (
        /** @type {?} */
        (0, _log.devAssert)(null, 'not implemented')
      );
    }
    /**
     * Returns `true` if document is ready.
     *
     * See `whenReady`.
     *
     * @return {boolean}
     */
    ;

    _proto2.isReady = function isReady() {
      return (
        /** @type {?} */
        (0, _log.devAssert)(null, 'not implemented')
      );
    }
    /**
     * Returns a promise that will be resolved when the ampdoc's DOM is fully
     * ready.
     * @return {!Promise}
     */
    ;

    _proto2.whenReady = function whenReady() {
      return (
        /** @type {?} */
        (0, _log.devAssert)(null, 'not implemented')
      );
    }
    /**
     * Returns the URL from which the document was loaded.
     * @return {string}
     */
    ;

    _proto2.getUrl = function getUrl() {
      return (0, _log.dev)().assertString(null, 'not implemented');
    }
    /**
     * Locates an element with the specified ID within the ampdoc. In the
     * shadow-doc mode, when multiple documents could be present, this method
     * localizes search only to the DOM subtree specific to this ampdoc.
     *
     * @param {string} id
     * @return {?Element}
     */
    ;

    _proto2.getElementById = function getElementById(id) {
      return this.getRootNode().getElementById(id);
    }
    /**
     * Whether the node is currently contained in the DOM of the root.
     * @param {?Node} node
     * @return {boolean}
     */
    ;

    _proto2.contains = function contains(node) {
      return this.getRootNode().contains(node);
    };

    return AmpDoc;
  }();
  /**
   * The version of `AmpDoc` in the single-doc mode that corresponds to the
   * global `window.document`.
   * @package @visibleForTesting
   */


  exports.AmpDoc = AmpDoc;

  var AmpDocSingle =
  /*#__PURE__*/
  function (_AmpDoc) {
    _inheritsLoose(AmpDocSingle, _AmpDoc);

    /**
     * @param {!Window} win
     */
    function AmpDocSingle(win) {
      var _this2;

      _this2 = _AmpDoc.call(this, win) || this;
      /** @private @const {!Promise<!Element>} */

      _this2.bodyPromise_ = _this2.win.document.body ? Promise.resolve(_this2.win.document.body) : (0, _dom.waitForBodyPromise)(_this2.win.document).then(function () {
        return _this2.getBody();
      });
      /** @private @const {!Promise} */

      _this2.readyPromise_ = (0, _documentReady.whenDocumentReady)(_this2.win.document);
      return _this2;
    }
    /** @override */


    var _proto3 = AmpDocSingle.prototype;

    _proto3.isSingleDoc = function isSingleDoc() {
      return true;
    }
    /** @override */
    ;

    _proto3.getRootNode = function getRootNode() {
      return this.win.document;
    }
    /** @override */
    ;

    _proto3.getUrl = function getUrl() {
      return this.win.location.href;
    }
    /** @override */
    ;

    _proto3.getHeadNode = function getHeadNode() {
      return (0, _log.dev)().assertElement(this.win.document.head);
    }
    /** @override */
    ;

    _proto3.isBodyAvailable = function isBodyAvailable() {
      return !!this.win.document.body;
    }
    /** @override */
    ;

    _proto3.getBody = function getBody() {
      return (0, _log.dev)().assertElement(this.win.document.body, 'body not available');
    }
    /** @override */
    ;

    _proto3.whenBodyAvailable = function whenBodyAvailable() {
      return this.bodyPromise_;
    }
    /** @override */
    ;

    _proto3.isReady = function isReady() {
      return (0, _documentReady.isDocumentReady)(this.win.document);
    }
    /** @override */
    ;

    _proto3.whenReady = function whenReady() {
      return this.readyPromise_;
    };

    return AmpDocSingle;
  }(AmpDoc);
  /**
   * The version of `AmpDoc` in the shadow-doc mode that is allocated for each
   * ampdoc hosted within a shadow root.
   * @package @visibleForTesting
   */


  exports.AmpDocSingle = AmpDocSingle;

  var AmpDocShadow =
  /*#__PURE__*/
  function (_AmpDoc2) {
    _inheritsLoose(AmpDocShadow, _AmpDoc2);

    /**
     * @param {!Window} win
     * @param {string} url
     * @param {!ShadowRoot} shadowRoot
     */
    function AmpDocShadow(win, url, shadowRoot) {
      var _this3;

      _this3 = _AmpDoc2.call(this, win) || this;
      /** @private @const {string} */

      _this3.url_ = url;
      /** @private @const {!ShadowRoot} */

      _this3.shadowRoot_ = shadowRoot;
      /** @private {?Element} */

      _this3.body_ = null;
      var bodyDeferred = new _promise.Deferred();
      /** @private {!Promise<!Element>} */

      _this3.bodyPromise_ = bodyDeferred.promise;
      /** @private {function(!Element)|undefined} */

      _this3.bodyResolver_ = bodyDeferred.resolve;
      /** @private {boolean} */

      _this3.ready_ = false;
      var readyDeferred = new _promise.Deferred();
      /** @private {!Promise} */

      _this3.readyPromise_ = readyDeferred.promise;
      /** @private {function()|undefined} */

      _this3.readyResolver_ = readyDeferred.resolve;
      return _this3;
    }
    /** @override */


    var _proto4 = AmpDocShadow.prototype;

    _proto4.isSingleDoc = function isSingleDoc() {
      return false;
    }
    /** @override */
    ;

    _proto4.getRootNode = function getRootNode() {
      return this.shadowRoot_;
    }
    /** @override */
    ;

    _proto4.getUrl = function getUrl() {
      return this.url_;
    }
    /** @override */
    ;

    _proto4.getHeadNode = function getHeadNode() {
      return this.shadowRoot_;
    }
    /** @override */
    ;

    _proto4.isBodyAvailable = function isBodyAvailable() {
      return !!this.body_;
    }
    /** @override */
    ;

    _proto4.getBody = function getBody() {
      return (0, _log.dev)().assertElement(this.body_, 'body not available');
    }
    /**
     * Signals that the shadow doc has a body.
     * @param {!Element} body
     * @restricted
     */
    ;

    _proto4.setBody = function setBody(body) {
      (0, _log.devAssert)(!this.body_, 'Duplicate body');
      this.body_ = body;
      this.bodyResolver_(body);
      this.bodyResolver_ = undefined;
    }
    /** @override */
    ;

    _proto4.whenBodyAvailable = function whenBodyAvailable() {
      return this.bodyPromise_;
    }
    /** @override */
    ;

    _proto4.isReady = function isReady() {
      return this.ready_;
    }
    /**
     * Signals that the shadow doc is ready.
     * @restricted
     */
    ;

    _proto4.setReady = function setReady() {
      (0, _log.devAssert)(!this.ready_, 'Duplicate ready state');
      this.ready_ = true;
      this.readyResolver_();
      this.readyResolver_ = undefined;
    }
    /** @override */
    ;

    _proto4.whenReady = function whenReady() {
      return this.readyPromise_;
    };

    return AmpDocShadow;
  }(AmpDoc);
  /**
   * AmpDocShadow for the shell
   * @package @visibleForTesting
   */


  exports.AmpDocShadow = AmpDocShadow;

  var AmpDocShell =
  /*#__PURE__*/
  function (_AmpDocShadow) {
    _inheritsLoose(AmpDocShell, _AmpDocShadow);

    // TODO(choumx): win.document is not a ShadowRoot, which is required by the
    // super constructor.
    // eslint-disable-next-line require-jsdoc
    function AmpDocShell(win) {
      return _AmpDocShadow.call(this, win, win.location.href, win.document) || this;
    }
    /** @override */


    var _proto5 = AmpDocShell.prototype;

    _proto5.getHeadNode = function getHeadNode() {
      return (0, _log.dev)().assertElement(this.win.document.head);
    };

    return AmpDocShell;
  }(AmpDocShadow);
  /**
   * Install the ampdoc service and immediately configure it for either a
   * single-doc or a shadow-doc mode. The mode cannot be changed after the
   * initial configuration.
   * @param {!Window} win
   * @param {boolean} isSingleDoc
   */


  exports.AmpDocShell = AmpDocShell;

  function installDocService(win, isSingleDoc) {
    (0, _service.registerServiceBuilder)(win, 'ampdoc', function () {
      return new AmpDocService(win, isSingleDoc);
    });
  }

  },{"../document-ready":24,"../dom":26,"../experiments":32,"../log":51,"../service":71,"../shadow-embed":113,"../utils/promise":134,"../utils/signals":136}],74:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.batchedXhrServiceForTesting = batchedXhrServiceForTesting;
  exports.installBatchedXhrService = installBatchedXhrService;
  exports.BatchedXhr = void 0;

  var _xhrImpl = require("./xhr-impl");

  var _service = require("../service");

  var _object = require("../utils/object");

  var _url = require("../url");

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  /**
   * A wrapper around the Xhr service which batches the result of GET requests
   *
   * @package Visible for type.
   * @visibleForTesting
   */
  var BatchedXhr =
  /*#__PURE__*/
  function (_Xhr) {
    _inheritsLoose(BatchedXhr, _Xhr);

    /**
     * @param {!Window} win
     */
    function BatchedXhr(win) {
      var _this;

      _this = _Xhr.call(this, win) || this;
      /** @const {!Object<!Promise<!Response>>} */

      _this.fetchPromises_ = (0, _object.map)();
      return _this;
    }
    /**
     * Fetch and batch the requests if possible.
     *
     * @param {string} input URL
     * @param {?FetchInitDef=} opt_init Fetch options object.
     * @return {!Promise<!Response>}
     * @override
     */


    var _proto = BatchedXhr.prototype;

    _proto.fetch = function fetch(input, opt_init) {
      var _this2 = this;

      var accept = opt_init && opt_init.headers && opt_init.headers['Accept'] || '';
      var isBatchable = !opt_init || !opt_init.method || opt_init.method === 'GET';
      var key = this.getMapKey_(input, accept);
      var isBatched = !!this.fetchPromises_[key];

      if (isBatchable && isBatched) {
        return this.fetchPromises_[key].then(function (response) {
          return response.clone();
        });
      }

      var fetchPromise = _Xhr.prototype.fetch.call(this, input, opt_init);

      if (isBatchable) {
        this.fetchPromises_[key] = fetchPromise.then(function (response) {
          delete _this2.fetchPromises_[key];
          return response.clone();
        }, function (err) {
          delete _this2.fetchPromises_[key];
          throw err;
        });
      }

      return fetchPromise;
    }
    /**
     * Creates a map key for a fetch.
     *
     * @param {string} input URL
     * @param {string} responseType
     * @return {string}
     * @private
     */
    ;

    _proto.getMapKey_ = function getMapKey_(input, responseType) {
      return (0, _url.removeFragment)(input) + responseType;
    };

    return BatchedXhr;
  }(_xhrImpl.Xhr);
  /**
   * @param {!Window} window
   * @return {!BatchedXhr}
   */


  exports.BatchedXhr = BatchedXhr;

  function batchedXhrServiceForTesting(window) {
    installBatchedXhrService(window);
    return (0, _service.getService)(window, 'batched-xhr');
  }
  /**
   * @param {!Window} window
   */


  function installBatchedXhrService(window) {
    (0, _service.registerServiceBuilder)(window, 'batched-xhr', BatchedXhr);
  }

  },{"../service":71,"../url":124,"../utils/object":132,"./xhr-impl":111}],75:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.CacheCidApi = void 0;

  var _services = require("../services");

  var _log = require("../log");

  var _object = require("../utils/object");

  var _url = require("../url");

  /**
   * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * The Client ID service key.
   * @const @private {string}
   */
  var SERVICE_KEY_ = 'AIzaSyDKtqGxnoeIqVM33Uf7hRSa3GJxuzR7mLc';
  /**
   * Tag for debug logging.
   * @const @private {string}
   */

  var TAG_ = 'CacheCidApi';
  /**
   * The URL for the cache-served CID API.
   * @const @private {string}
   */

  var CACHE_API_URL = 'https://ampcid.google.com/v1/cache:getClientId?key=';
  /**
   * The XHR timeout in milliseconds for requests to the CID API.
   * @const @private {number}
   */

  var TIMEOUT_ = 30000;
  /**
   * Exposes CID API for cache-served pages without a viewer.
   */

  var CacheCidApi =
  /*#__PURE__*/
  function () {
    /** @param {!./ampdoc-impl.AmpDoc} ampdoc */
    function CacheCidApi(ampdoc) {
      /** @private {!./ampdoc-impl.AmpDoc} */
      this.ampdoc_ = ampdoc;
      /** @private {!./viewer-impl.Viewer} */

      this.viewer_ = _services.Services.viewerForDoc(this.ampdoc_);
      /** @private {?Promise<?string>} */

      this.publisherCidPromise_ = null;
      /** @private {!./timer-impl.Timer} */

      this.timer_ = _services.Services.timerFor(this.ampdoc_.win);
    }
    /**
     * Returns true if the page is embedded in CCT and is served by a proxy.
     * @return {boolean}
     */


    var _proto = CacheCidApi.prototype;

    _proto.isSupported = function isSupported() {
      return this.viewer_.isCctEmbedded() && this.viewer_.isProxyOrigin();
    }
    /**
     * Returns scoped CID retrieved from the Viewer.
     * @param {string} scope
     * @return {!Promise<?string>}
     */
    ;

    _proto.getScopedCid = function getScopedCid(scope) {
      var _this = this;

      if (!this.viewer_.isCctEmbedded()) {
        return (
          /** @type {!Promise<?string>} */
          Promise.resolve(null)
        );
      }

      if (!this.publisherCidPromise_) {
        var url = CACHE_API_URL + SERVICE_KEY_;
        this.publisherCidPromise_ = this.fetchCid_(url);
      }

      return this.publisherCidPromise_.then(function (publisherCid) {
        return publisherCid ? _this.scopeCid_(publisherCid, scope) : null;
      });
    }
    /**
     * Returns scoped CID retrieved from the Viewer.
     * @param {string} url
     * @param {boolean=} useAlternate
     * @return {!Promise<?string>}
     */
    ;

    _proto.fetchCid_ = function fetchCid_(url, useAlternate) {
      var _this2 = this;

      if (useAlternate === void 0) {
        useAlternate = true;
      }

      var payload = (0, _object.dict)({
        'publisherOrigin': (0, _url.getSourceOrigin)(this.ampdoc_.win.location)
      }); // Make the XHR request to the cache endpoint.

      return this.timer_.timeoutPromise(TIMEOUT_, _services.Services.xhrFor(this.ampdoc_.win).fetchJson(url, {
        method: 'POST',
        ampCors: false,
        credentials: 'include',
        mode: 'cors',
        body: payload
      })).then(function (res) {
        return res.json().then(function (response) {
          if (response['optOut']) {
            return null;
          }

          var cid = response['publisherClientId'];

          if (!cid && useAlternate && response['alternateUrl']) {
            // If an alternate url is provided, try again with the alternate url
            // The client is still responsible for appending API keys to the URL.
            var alt = response['alternateUrl'] + "?key=" + SERVICE_KEY_;
            return _this2.fetchCid_((0, _log.dev)().assertString(alt), false);
          }

          return cid;
        });
      }).catch(function (e) {
        if (e && e.response) {
          e.response.json().then(function (res) {
            (0, _log.dev)().error(TAG_, JSON.stringify(res));
          });
        } else {
          (0, _log.dev)().error(TAG_, e);
        }

        return null;
      });
    }
    /**
     * Returns scoped CID extracted from the fetched publisherCid.
     * @param {string} publisherCid
     * @param {string} scope
     * @return {!Promise<string>}
     */
    ;

    _proto.scopeCid_ = function scopeCid_(publisherCid, scope) {
      var text = publisherCid + ';' + scope;
      return _services.Services.cryptoFor(this.ampdoc_.win).sha384Base64(text).then(function (enc) {
        return 'amp-' + enc;
      });
    };

    return CacheCidApi;
  }();

  exports.CacheCidApi = CacheCidApi;

  },{"../log":51,"../services":112,"../url":124,"../utils/object":132}],76:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.GoogleCidApi = exports.TokenStatus = void 0;

  var _services = require("../services");

  var _windowInterface = require("../window-interface");

  var _log = require("../log");

  var _object = require("../utils/object");

  var _cookies = require("../cookies");

  var _url = require("../url");

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var GOOGLE_API_URL = 'https://ampcid.google.com/v1/publisher:getClientId?key=';
  var TAG = 'GoogleCidApi';
  var AMP_TOKEN = 'AMP_TOKEN';
  /** @enum {string} */

  var TokenStatus = {
    RETRIEVING: '$RETRIEVING',
    OPT_OUT: '$OPT_OUT',
    NOT_FOUND: '$NOT_FOUND',
    ERROR: '$ERROR'
  };
  exports.TokenStatus = TokenStatus;
  var TIMEOUT = 30000;
  var HOUR = 60 * 60 * 1000;
  var DAY = 24 * HOUR;
  var YEAR = 365 * DAY;
  /**
   * Client impl for Google CID API
   */

  var GoogleCidApi =
  /*#__PURE__*/
  function () {
    /** @param {!./ampdoc-impl.AmpDoc} ampdoc */
    function GoogleCidApi(ampdoc) {
      /**
       * @private {!Window}
       */
      this.win_ = ampdoc.win;
      /**
       * @private {!./timer-impl.Timer}
       */

      this.timer_ = _services.Services.timerFor(this.win_);
      /**
       * @private {!Object<string, !Promise<?string>>}
       */

      this.cidPromise_ = {};

      var _Services$documentInf = _services.Services.documentInfoForDoc(ampdoc),
          canonicalUrl = _Services$documentInf.canonicalUrl;
      /** @private {?string} */


      this.canonicalOrigin_ = canonicalUrl ? (0, _url.parseUrlDeprecated)(canonicalUrl).origin : null;
    }
    /**
     * @param {string} apiKey
     * @param {string} scope
     * @return {!Promise<?string>}
     */


    var _proto = GoogleCidApi.prototype;

    _proto.getScopedCid = function getScopedCid(apiKey, scope) {
      var _this = this;

      if (this.cidPromise_[scope]) {
        return this.cidPromise_[scope];
      }

      var token; // Block the request if a previous request is on flight
      // Poll every 200ms. Longer interval means longer latency for the 2nd CID.

      return this.cidPromise_[scope] = this.timer_.poll(200, function () {
        token = (0, _cookies.getCookie)(_this.win_, AMP_TOKEN);
        return token !== TokenStatus.RETRIEVING;
      }).then(function () {
        if (token === TokenStatus.OPT_OUT) {
          return TokenStatus.OPT_OUT;
        } // If the page referrer is proxy origin, we force to use API even the
        // token indicates a previous fetch returned nothing


        var forceFetch = token === TokenStatus.NOT_FOUND && _this.isReferrerProxyOrigin_(); // Token is in a special state, fallback to existing cookie


        if (!forceFetch && _this.isStatusToken_(token)) {
          return null;
        }

        if (!token || _this.isStatusToken_(token)) {
          _this.persistToken_(TokenStatus.RETRIEVING, TIMEOUT);
        }

        var url = GOOGLE_API_URL + apiKey;
        return _this.fetchCid_((0, _log.dev)().assertString(url), scope, token).then(function (response) {
          var cid = _this.handleResponse_(response);

          if (!cid && response['alternateUrl']) {
            // If an alternate url is provided, try again with the alternate
            // url The client is still responsible for appending API keys to
            // the URL.
            var altUrl = response['alternateUrl'] + "?key=" + apiKey;
            return _this.fetchCid_((0, _log.dev)().assertString(altUrl), scope, token).then(_this.handleResponse_.bind(_this));
          }

          return cid;
        }).catch(function (e) {
          _this.persistToken_(TokenStatus.ERROR, TIMEOUT);

          if (e && e.response) {
            e.response.json().then(function (res) {
              (0, _log.dev)().error(TAG, JSON.stringify(res));
            });
          } else {
            (0, _log.dev)().error(TAG, e);
          }

          return null;
        });
      });
    }
    /**
     * @param {string} url
     * @param {string} scope
     * @param {?string} token
     * @return {!Promise<!JsonObject>}
     */
    ;

    _proto.fetchCid_ = function fetchCid_(url, scope, token) {
      var payload = (0, _object.dict)({
        'originScope': scope,
        'canonicalOrigin': this.canonicalOrigin_
      });

      if (token) {
        payload['securityToken'] = token;
      }

      return this.timer_.timeoutPromise(TIMEOUT, _services.Services.xhrFor(this.win_).fetchJson(url, {
        method: 'POST',
        ampCors: false,
        credentials: 'include',
        mode: 'cors',
        body: payload
      }).then(function (res) {
        return res.json();
      }));
    }
    /**
     * @param {!JsonObject} res
     * @return {?string}
     */
    ;

    _proto.handleResponse_ = function handleResponse_(res) {
      if (res['optOut']) {
        this.persistToken_(TokenStatus.OPT_OUT, YEAR);
        return TokenStatus.OPT_OUT;
      }

      if (res['clientId']) {
        this.persistToken_(res['securityToken'], YEAR);
        return res['clientId'];
      }

      if (res['alternateUrl']) {
        return null;
      }

      this.persistToken_(TokenStatus.NOT_FOUND, HOUR);
      return null;
    }
    /**
     * @param {string|undefined} tokenValue
     * @param {number} expires
     */
    ;

    _proto.persistToken_ = function persistToken_(tokenValue, expires) {
      if (tokenValue) {
        (0, _cookies.setCookie)(this.win_, AMP_TOKEN, tokenValue, this.expiresIn_(expires), {
          highestAvailableDomain: true
        });
      }
    }
    /**
     * @param {number} time
     * @return {number}
     */
    ;

    _proto.expiresIn_ = function expiresIn_(time) {
      return this.win_.Date.now() + time;
    }
    /**
     * @return {boolean}
     */
    ;

    _proto.isReferrerProxyOrigin_ = function isReferrerProxyOrigin_() {
      return (0, _url.isProxyOrigin)(_windowInterface.WindowInterface.getDocumentReferrer(this.win_));
    }
    /**
     * @param {?string} token
     * @return {boolean}
     */
    ;

    _proto.isStatusToken_ = function isStatusToken_(token) {
      return (
        /** @type boolean */
        token && token[0] === '$'
      );
    };

    return GoogleCidApi;
  }();

  exports.GoogleCidApi = GoogleCidApi;

  },{"../cookies":20,"../log":51,"../services":112,"../url":124,"../utils/object":132,"../window-interface":141}],77:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.optOutOfCid = optOutOfCid;
  exports.isOptedOutOfCid = isOptedOutOfCid;
  exports.getProxySourceOrigin = getProxySourceOrigin;
  exports.viewerBaseCid = viewerBaseCid;
  exports.installCidService = installCidService;
  exports.cidServiceForDocForTesting = cidServiceForDocForTesting;
  exports.Cid = exports.BASE_CID_MAX_AGE_MILLIS = void 0;

  var _cacheCidApi = require("./cache-cid-api");

  var _cidApi = require("./cid-api");

  var _services = require("../services");

  var _viewerCidApi = require("./viewer-cid-api");

  var _base = require("../utils/base64");

  var _log = require("../log");

  var _object = require("../utils/object");

  var _cookies = require("../cookies");

  var _bytes = require("../utils/bytes");

  var _service = require("../service");

  var _url = require("../url");

  var _dom = require("../dom");

  var _json = require("../json");

  var _promise = require("../utils/promise");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @fileoverview Provides per AMP document source origin and use case
   * persistent client identifiers for use in analytics and similar use
   * cases.
   *
   * For details, see https://goo.gl/Mwaacs
   */
  var ONE_DAY_MILLIS = 24 * 3600 * 1000;
  /**
   * We ignore base cids that are older than (roughly) one year.
   */

  var BASE_CID_MAX_AGE_MILLIS = 365 * ONE_DAY_MILLIS;
  exports.BASE_CID_MAX_AGE_MILLIS = BASE_CID_MAX_AGE_MILLIS;
  var SCOPE_NAME_VALIDATOR = /^[a-zA-Z0-9-_.]+$/;
  var CID_OPTOUT_STORAGE_KEY = 'amp-cid-optout';
  var CID_OPTOUT_VIEWER_MESSAGE = 'cidOptOut';
  /**
   * Tag for debug logging.
   * @const @private {string}
   */

  var TAG_ = 'CID';
  /**
   * The name of the Google CID API as it appears in the meta tag to opt-in.
   * @const @private {string}
   */

  var GOOGLE_CID_API_META_NAME = 'amp-google-client-id-api';
  /**
   * The mapping from analytics providers to CID scopes.
   * @const @private {Object<string, string>}
   */

  var CID_API_SCOPE_WHITELIST = {
    'googleanalytics': 'AMP_ECID_GOOGLE'
  };
  /**
   * The mapping from analytics providers to their CID API service keys.
   * @const @private {Object<string, string>}
   */

  var API_KEYS = {
    'googleanalytics': 'AIzaSyA65lEHUEizIsNtlbNo-l2K18dT680nsaM'
  };
  /**
   * A base cid string value and the time it was last read / stored.
   * @typedef {{time: time, cid: string}}
   */

  var BaseCidInfoDef;
  /**
   * The "get CID" parameters.
   * - createCookieIfNotPresent: Whether CID is allowed to create a cookie when.
   *   Default value is `false`.
   * @typedef {{
   *   scope: string,
   *   createCookieIfNotPresent: (boolean|undefined),
   *   cookieName: (string|undefined),
   * }}
   */

  var GetCidDef;

  var Cid =
  /*#__PURE__*/
  function () {
    /** @param {!./ampdoc-impl.AmpDoc} ampdoc */
    function Cid(ampdoc) {
      /** @const */
      this.ampdoc = ampdoc;
      /**
       * Cached base cid once read from storage to avoid repeated
       * reads.
       * @private {?Promise<string>}
       * @restricted
       */

      this.baseCid_ = null;
      /**
       * Cache to store external cids. Scope is used as the key and cookie value
       * is the value.
       * @private {!Object<string, !Promise<string>>}
       * @restricted
       */

      this.externalCidCache_ = Object.create(null);
      /**
       * @private @const {!CacheCidApi}
       */

      this.cacheCidApi_ = new _cacheCidApi.CacheCidApi(ampdoc);
      /**
       * @private {!ViewerCidApi}
       */

      this.viewerCidApi_ = new _viewerCidApi.ViewerCidApi(ampdoc);
      this.cidApi_ = new _cidApi.GoogleCidApi(ampdoc);
      /** @private {?Object<string, string>} */

      this.apiKeyMap_ = null;
    }
    /**
     * @param {!GetCidDef} getCidStruct an object provides CID scope name for
     *     proxy case and cookie name for non-proxy case.
     * @param {!Promise} consent Promise for when the user has given consent
     *     (if deemed necessary by the publisher) for use of the client
     *     identifier.
     * @param {!Promise=} opt_persistenceConsent Dedicated promise for when
     *     it is OK to persist a new tracking identifier. This could be
     *     supplied ONLY by the code that supplies the actual consent
     *     cookie.
     *     If this is given, the consent param should be a resolved promise
     *     because this call should be only made in order to get consent.
     *     The consent promise passed to other calls should then itself
     *     depend on the opt_persistenceConsent promise (and the actual
     *     consent, of course).
     * @return {!Promise<?string>} A client identifier that should be used
     *      within the current source origin and externalCidScope. Might be
     *      null if user has opted out of cid or no identifier was found
     *      or it could be made.
     *      This promise may take a long time to resolve if consent isn't
     *      given.
     */


    var _proto = Cid.prototype;

    _proto.get = function get(getCidStruct, consent, opt_persistenceConsent) {
      var _this = this;

      (0, _log.userAssert)(SCOPE_NAME_VALIDATOR.test(getCidStruct.scope) && SCOPE_NAME_VALIDATOR.test(getCidStruct.cookieName), 'The CID scope and cookie name must only use the characters ' + '[a-zA-Z0-9-_.]+\nInstead found: %s', getCidStruct.scope);
      return consent.then(function () {
        return _services.Services.viewerForDoc(_this.ampdoc).whenFirstVisible();
      }).then(function () {
        // Check if user has globally opted out of CID, we do this after
        // consent check since user can optout during consent process.
        return isOptedOutOfCid(_this.ampdoc);
      }).then(function (optedOut) {
        if (optedOut) {
          return '';
        }

        var cidPromise = _this.getExternalCid_(getCidStruct, opt_persistenceConsent || consent); // Getting the CID might involve an HTTP request. We timeout after 10s.


        return _services.Services.timerFor(_this.ampdoc.win).timeoutPromise(10000, cidPromise, "Getting cid for \"" + getCidStruct.scope + "\" timed out").catch(function (error) {
          (0, _log.rethrowAsync)(error);
        });
      });
    }
    /**
     * User will be opted out of Cid issuance for all scopes.
     * When opted-out Cid service will reject all `get` requests.
     *
     * @return {!Promise}
     */
    ;

    _proto.optOut = function optOut() {
      return optOutOfCid(this.ampdoc);
    }
    /**
     * Returns the "external cid". This is a cid for a specific purpose
     * (Say Analytics provider X). It is unique per user, userAssert, that purpose
     * and the AMP origin site.
     * @param {!GetCidDef} getCidStruct
     * @param {!Promise} persistenceConsent
     * @return {!Promise<?string>}
     */
    ;

    _proto.getExternalCid_ = function getExternalCid_(getCidStruct, persistenceConsent) {
      var _this2 = this;

      var scope = getCidStruct.scope;
      /** @const {!Location} */

      var url = (0, _url.parseUrlDeprecated)(this.ampdoc.win.location.href);

      if (!(0, _url.isProxyOrigin)(url)) {
        var apiKey = this.isScopeOptedIn_(scope);

        if (apiKey) {
          return this.cidApi_.getScopedCid(apiKey, scope).then(function (scopedCid) {
            if (scopedCid == _cidApi.TokenStatus.OPT_OUT) {
              return null;
            }

            if (scopedCid) {
              var cookieName = getCidStruct.cookieName || scope;
              setCidCookie(_this2.ampdoc.win, cookieName, scopedCid);
              return scopedCid;
            }

            return getOrCreateCookie(_this2, getCidStruct, persistenceConsent);
          });
        }

        return getOrCreateCookie(this, getCidStruct, persistenceConsent);
      }

      return this.viewerCidApi_.isSupported().then(function (supported) {
        if (supported) {
          var _apiKey = _this2.isScopeOptedIn_(scope);

          return _this2.viewerCidApi_.getScopedCid(_apiKey, scope);
        }

        if (_this2.cacheCidApi_.isSupported() && _this2.isScopeOptedIn_(scope)) {
          return _this2.cacheCidApi_.getScopedCid(scope).then(function (scopedCid) {
            if (scopedCid) {
              return scopedCid;
            }

            return _this2.scopeBaseCid_(persistenceConsent, scope, url);
          });
        }

        return _this2.scopeBaseCid_(persistenceConsent, scope, url);
      });
    }
    /**
     *
     * @param {!Promise} persistenceConsent
     * @param {*} scope
     * @param {!Location} url
     * @return {*}
     */
    ;

    _proto.scopeBaseCid_ = function scopeBaseCid_(persistenceConsent, scope, url) {
      var _this3 = this;

      return getBaseCid(this, persistenceConsent).then(function (baseCid) {
        return _services.Services.cryptoFor(_this3.ampdoc.win).sha384Base64(baseCid + getProxySourceOrigin(url) + scope);
      });
    }
    /**
     * Checks if the page has opted in CID API for the given scope.
     * Returns the API key that should be used, or null if page hasn't opted in.
     *
     * @param {string} scope
     * @return {string|undefined}
     */
    ;

    _proto.isScopeOptedIn_ = function isScopeOptedIn_(scope) {
      if (!this.apiKeyMap_) {
        this.apiKeyMap_ = this.getOptedInScopes_();
      }

      return this.apiKeyMap_[scope];
    }
    /**
     * Reads meta tags for opted in scopes.  Meta tags will have the form
     * <meta name="provider-api-name" content="provider-name">
     * @return {!Object<string, string>}
     */
    ;

    _proto.getOptedInScopes_ = function getOptedInScopes_() {
      var apiKeyMap = {};
      var optInMeta = this.ampdoc.win.document.head.
      /*OK*/
      querySelector("meta[name=" + GOOGLE_CID_API_META_NAME + "]");

      if (optInMeta && optInMeta.hasAttribute('content')) {
        var list = optInMeta.getAttribute('content').split(',');
        list.forEach(function (item) {
          item = item.trim();

          if (item.indexOf('=') > 0) {
            var pair = item.split('=');
            var scope = pair[0].trim();
            apiKeyMap[scope] = pair[1].trim();
          } else {
            var clientName = item;
            var _scope = CID_API_SCOPE_WHITELIST[clientName];

            if (_scope) {
              apiKeyMap[_scope] = API_KEYS[clientName];
            } else {
              (0, _log.user)().error(TAG_, "Unsupported client for Google CID API: " + clientName);
            }
          }
        });
      }

      return apiKeyMap;
    };

    return Cid;
  }();
  /**
   * User will be opted out of Cid issuance for all scopes.
   * When opted-out Cid service will reject all `get` requests.
   *
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @return {!Promise}
   * @visibleForTesting
   */


  exports.Cid = Cid;

  function optOutOfCid(ampdoc) {
    // Tell the viewer that user has opted out.
    _services.Services.viewerForDoc(ampdoc).
    /*OK*/
    sendMessage(CID_OPTOUT_VIEWER_MESSAGE, (0, _object.dict)()); // Store the optout bit in storage


    return _services.Services.storageForDoc(ampdoc).then(function (storage) {
      return storage.set(CID_OPTOUT_STORAGE_KEY, true);
    });
  }
  /**
   * Whether user has opted out of Cid issuance for all scopes.
   *
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @return {!Promise<boolean>}
   * @visibleForTesting
   */


  function isOptedOutOfCid(ampdoc) {
    return _services.Services.storageForDoc(ampdoc).then(function (storage) {
      return storage.get(CID_OPTOUT_STORAGE_KEY).then(function (val) {
        return !!val;
      });
    }).catch(function () {
      // If we fail to read the flag, assume not opted out.
      return false;
    });
  }
  /**
   * Sets a new CID cookie for expire 1 year from now.
   * @param {!Window} win
   * @param {string} scope
   * @param {string} cookie
   */


  function setCidCookie(win, scope, cookie) {
    var expiration = Date.now() + BASE_CID_MAX_AGE_MILLIS;
    (0, _cookies.setCookie)(win, scope, cookie, expiration, {
      highestAvailableDomain: true
    });
  }
  /**
   * If cookie exists it's returned immediately. Otherwise, if instructed, the
   * new cookie is created.
   *
   * @param {!Cid} cid
   * @param {!GetCidDef} getCidStruct
   * @param {!Promise} persistenceConsent
   * @return {!Promise<?string>}
   */


  function getOrCreateCookie(cid, getCidStruct, persistenceConsent) {
    var win = cid.ampdoc.win;
    var scope = getCidStruct.scope;
    var cookieName = getCidStruct.cookieName || scope;
    var existingCookie = (0, _cookies.getCookie)(win, cookieName);

    if (!existingCookie && !getCidStruct.createCookieIfNotPresent) {
      return (
        /** @type {!Promise<?string>} */
        Promise.resolve(null)
      );
    }

    if (cid.externalCidCache_[scope]) {
      return (
        /** @type {!Promise<?string>} */
        cid.externalCidCache_[scope]
      );
    }

    if (existingCookie) {
      // If we created the cookie, update it's expiration time.
      if (/^amp-/.test(existingCookie)) {
        setCidCookie(win, cookieName, existingCookie);
      }

      return (
        /** @type {!Promise<?string>} */
        Promise.resolve(existingCookie)
      );
    }

    var newCookiePromise = getNewCidForCookie(win) // Create new cookie, always prefixed with "amp-", so that we can see from
    // the value whether we created it.
    .then(function (randomStr) {
      return 'amp-' + randomStr;
    }); // Store it as a cookie based on the persistence consent.

    Promise.all([newCookiePromise, persistenceConsent]).then(function (results) {
      // The initial CID generation is inherently racy. First one that gets
      // consent wins.
      var newCookie = results[0];
      var relookup = (0, _cookies.getCookie)(win, cookieName);

      if (!relookup) {
        setCidCookie(win, cookieName, newCookie);
      }
    });
    return cid.externalCidCache_[scope] = newCookiePromise;
  }
  /**
   * Returns the source origin of an AMP document for documents served
   * on a proxy origin. Throws an error if the doc is not on a proxy origin.
   * @param {!Location} url URL of an AMP document.
   * @return {string} The source origin of the URL.
   * @visibleForTesting BUT if this is needed elsewhere it could be
   *     factored into its own package.
   */


  function getProxySourceOrigin(url) {
    (0, _log.userAssert)((0, _url.isProxyOrigin)(url), 'Expected proxy origin %s', url.origin);
    return (0, _url.getSourceOrigin)(url);
  }
  /**
   * Returns the base cid for the current user(). This string must not
   * be exposed to users without hashing with the current source origin
   * and the externalCidScope.
   * On a proxy this value is the same for a user across all source
   * origins.
   * @param {!Cid} cid
   * @param {!Promise} persistenceConsent
   * @return {!Promise<string>}
   */


  function getBaseCid(cid, persistenceConsent) {
    if (cid.baseCid_) {
      return cid.baseCid_;
    }

    var win = cid.ampdoc.win;
    return cid.baseCid_ = read(cid.ampdoc).then(function (stored) {
      var needsToStore = false;
      var baseCid; // See if we have a stored base cid and whether it is still valid
      // in terms of expiration.

      if (stored && !isExpired(stored)) {
        baseCid = Promise.resolve(stored.cid);

        if (shouldUpdateStoredTime(stored)) {
          needsToStore = true;
        }
      } else {
        // We need to make a new one.
        baseCid = _services.Services.cryptoFor(win).sha384Base64(getEntropy(win));
        needsToStore = true;
      }

      if (needsToStore) {
        baseCid.then(function (baseCid) {
          store(cid.ampdoc, persistenceConsent, baseCid);
        });
      }

      return baseCid;
    });
  }
  /**
   * Stores a new cidString in localStorage. Adds the current time to the
   * stored value.
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @param {!Promise} persistenceConsent
   * @param {string} cidString Actual cid string to store.
   */


  function store(ampdoc, persistenceConsent, cidString) {
    var win = ampdoc.win;

    if ((0, _dom.isIframed)(win)) {
      // If we are being embedded, try to save the base cid to the viewer.
      viewerBaseCid(ampdoc, createCidData(cidString));
    } else {
      // To use local storage, we need user's consent.
      persistenceConsent.then(function () {
        try {
          win.localStorage.setItem('amp-cid', createCidData(cidString));
        } catch (ignore) {// Setting localStorage may fail. In practice we don't expect that to
          // happen a lot (since we don't go anywhere near the quota, but
          // in particular in Safari private browsing mode it always fails.
          // In that case we just don't store anything, which is just fine.
        }
      });
    }
  }
  /**
   * Get/set the Base CID from/to the viewer.
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @param {string=} opt_data Stringified JSON object {cid, time}.
   * @return {!Promise<string|undefined>}
   */


  function viewerBaseCid(ampdoc, opt_data) {
    var viewer = _services.Services.viewerForDoc(ampdoc);

    return viewer.isTrustedViewer().then(function (trusted) {
      if (!trusted) {
        return undefined;
      } // TODO(lannka, #11060): clean up when all Viewers get migrated


      (0, _log.dev)().expectedError('CID', 'Viewer does not provide cap=cid');
      return viewer.sendMessageAwaitResponse('cid', opt_data).then(function (data) {
        // For backward compatibility: #4029
        if (data && !(0, _json.tryParseJson)(data)) {
          // TODO(lannka, #11060): clean up when all Viewers get migrated
          (0, _log.dev)().expectedError('CID', 'invalid cid format');
          return JSON.stringify((0, _object.dict)({
            'time': Date.now(),
            // CID returned from old API is always fresh
            'cid': data
          }));
        }

        return data;
      });
    });
  }
  /**
   * Creates a JSON object that contains the given CID and the current time as
   * a timestamp.
   * @param {string} cidString
   * @return {string}
   */


  function createCidData(cidString) {
    return JSON.stringify((0, _object.dict)({
      'time': Date.now(),
      'cid': cidString
    }));
  }
  /**
   * Gets the persisted CID data as a promise. It tries to read from
   * localStorage first then from viewer if it is in embedded mode.
   * Returns null if none was found.
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @return {!Promise<?BaseCidInfoDef>}
   */


  function read(ampdoc) {
    var win = ampdoc.win;
    var data;

    try {
      data = win.localStorage.getItem('amp-cid');
    } catch (ignore) {// If reading from localStorage fails, we assume it is empty.
    }

    var dataPromise = Promise.resolve(data);

    if (!data && (0, _dom.isIframed)(win)) {
      // If we are being embedded, try to get the base cid from the viewer.
      dataPromise = viewerBaseCid(ampdoc);
    }

    return dataPromise.then(function (data) {
      if (!data) {
        return null;
      }

      var item = (0, _json.parseJson)(data);
      return {
        time: item['time'],
        cid: item['cid']
      };
    });
  }
  /**
   * Whether the retrieved cid object is expired and should be ignored.
   * @param {!BaseCidInfoDef} storedCidInfo
   * @return {boolean}
   */


  function isExpired(storedCidInfo) {
    var createdTime = storedCidInfo.time;
    var now = Date.now();
    return createdTime + BASE_CID_MAX_AGE_MILLIS < now;
  }
  /**
   * Whether we should write a new timestamp to the stored cid value.
   * We say yes if it is older than 1 day, so we only do this max once
   * per day to avoid writing to localStorage all the time.
   * @param {!BaseCidInfoDef} storedCidInfo
   * @return {boolean}
   */


  function shouldUpdateStoredTime(storedCidInfo) {
    var createdTime = storedCidInfo.time;
    var now = Date.now();
    return createdTime + ONE_DAY_MILLIS < now;
  }
  /**
   * Returns an array with a total of 128 of random values based on the
   * `win.crypto.getRandomValues` API. If that is not available concatenates
   * a string of other values that might be hard to guess including
   * `Math.random` and the current time.
   * @param {!Window} win
   * @return {!Uint8Array|string} Entropy.
   */


  function getEntropy(win) {
    // Use win.crypto.getRandomValues to get 128 bits of random value
    var uint8array = (0, _bytes.getCryptoRandomBytesArray)(win, 16); // 128 bit

    if (uint8array) {
      return uint8array;
    } // Support for legacy browsers.


    return String(win.location.href + Date.now() + win.Math.random() + win.screen.width + win.screen.height);
  }
  /**
   * Produces an external CID for use in a cookie.
   * @param {!Window} win
   * @return {!Promise<string>} The cid
   */


  function getNewCidForCookie(win) {
    var entropy = getEntropy(win);

    if (typeof entropy == 'string') {
      return _services.Services.cryptoFor(win).sha384Base64(entropy);
    } else {
      // If our entropy is a pure random number, we can just directly turn it
      // into base 64
      var cast =
      /** @type {!Uint8Array} */
      entropy;
      return (0, _promise.tryResolve)(function () {
        return (0, _base.base64UrlEncodeFromBytes)(cast) // Remove trailing padding
        .replace(/\.+$/, '');
      });
    }
  }
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   */


  function installCidService(ampdoc) {
    return (0, _service.registerServiceBuilderForDoc)(ampdoc, 'cid', Cid);
  }
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @return {!Cid}
   * @private visible for testing
   */


  function cidServiceForDocForTesting(ampdoc) {
    (0, _service.registerServiceBuilderForDoc)(ampdoc, 'cid', Cid);
    return (0, _service.getServiceForDoc)(ampdoc, 'cid');
  }

  },{"../cookies":20,"../dom":26,"../json":46,"../log":51,"../service":71,"../services":112,"../url":124,"../utils/base64":126,"../utils/bytes":127,"../utils/object":132,"../utils/promise":134,"./cache-cid-api":75,"./cid-api":76,"./viewer-cid-api":103}],78:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installCryptoService = installCryptoService;
  exports.Crypto = void 0;

  var _services = require("../services");

  var _base = require("../utils/base64");

  var _log = require("../log");

  var _service = require("../service");

  var _bytes = require("../utils/bytes");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @const {string} */
  var TAG = 'Crypto';
  var FALLBACK_MSG = 'SubtleCrypto failed, fallback to closure lib.';
  /**
   * @typedef {function((string|Uint8Array))}
   */

  var CryptoPolyfillDef;

  var Crypto =
  /*#__PURE__*/
  function () {
    /**
     * Creates an instance of Crypto.
     * @param {!Window} win
     */
    function Crypto(win) {
      /** @private {!Window} */
      this.win_ = win;
      var subtle = null;
      var isLegacyWebkit = false;

      if (win.crypto) {
        if (win.crypto.subtle) {
          subtle = win.crypto.subtle;
        } else if (win.crypto.webkitSubtle) {
          subtle = win.crypto.webkitSubtle;
          isLegacyWebkit = true;
        }
      }
      /** @const {{name: string}} */


      this.pkcsAlgo = {
        name: 'RSASSA-PKCS1-v1_5',
        hash: {
          name: 'SHA-256'
        }
      };
      /** @const {?webCrypto.SubtleCrypto} */

      this.subtle = subtle;
      /** @private @const {boolean} */

      this.isLegacyWebkit_ = isLegacyWebkit;
      /** @private {?Promise<!CryptoPolyfillDef>} */

      this.polyfillPromise_ = null;
    }
    /**
     * Returns the SHA-384 hash of the input string in a number array.
     * Input string cannot contain chars out of range [0,255].
     * @param {string|!Uint8Array} input
     * @return {!Promise<!Uint8Array>}
     * @throws {!Error} when input string contains chars out of range [0,255]
     */


    var _proto = Crypto.prototype;

    _proto.sha384 = function sha384(input) {
      var _this = this;

      if (typeof input === 'string') {
        input = (0, _bytes.stringToBytes)(input);
      }

      if (!this.subtle || this.polyfillPromise_) {
        // means native Crypto API is not available or failed before.
        return (this.polyfillPromise_ || this.loadPolyfill_()).then(function (polyfillSha384) {
          return polyfillSha384(input);
        });
      }

      try {
        return this.subtle.digest({
          name: 'SHA-384'
        }, input)
        /** @param {?} buffer */
        .then(function (buffer) {
          return new Uint8Array(buffer);
        }, function (e) {
          // Chrome doesn't allow the usage of Crypto API under
          // non-secure origin: https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features
          if (e.message && e.message.indexOf('secure origin') < 0) {
            // Log unexpected fallback.
            (0, _log.user)().error(TAG, FALLBACK_MSG, e);
          }

          return _this.loadPolyfill_().then(function () {
            return _this.sha384(input);
          });
        });
      } catch (e) {
        (0, _log.dev)().error(TAG, FALLBACK_MSG, e);
        return this.loadPolyfill_().then(function () {
          return _this.sha384(input);
        });
      }
    }
    /**
     * Returns the SHA-384 hash of the input string in the format of web safe
     * base64 (using -_. instead of +/=).
     * Input string cannot contain chars out of range [0,255].
     * @param {string|!Uint8Array} input
     * @return {!Promise<string>}
     * @throws {!Error} when input string contains chars out of range [0,255]
     */
    ;

    _proto.sha384Base64 = function sha384Base64(input) {
      return this.sha384(input).then(function (buffer) {
        return (0, _base.base64UrlEncodeFromBytes)(buffer);
      });
    }
    /**
     * Returns a uniform hash of the input string as a float number in the range
     * of [0, 1).
     * Input string cannot contain chars out of range [0,255].
     * @param {string|!Uint8Array} input
     * @return {!Promise<number>}
     */
    ;

    _proto.uniform = function uniform(input) {
      return this.sha384(input).then(function (buffer) {
        // Consider the Uint8 array as a base256 fraction number,
        // then convert it to the decimal form.
        var result = 0;

        for (var i = 2; i >= 0; i--) {
          // 3 base256 digits give enough precision
          result = (result + buffer[i]) / 256;
        }

        return result;
      });
    }
    /**
     * Loads Crypto polyfill library.
     * @return {!Promise<!CryptoPolyfillDef>}
     * @private
     */
    ;

    _proto.loadPolyfill_ = function loadPolyfill_() {
      var _this2 = this;

      if (this.polyfillPromise_) {
        return this.polyfillPromise_;
      }

      return this.polyfillPromise_ = _services.Services.extensionsFor(this.win_).preloadExtension('amp-crypto-polyfill').then(function () {
        return (0, _service.getService)(_this2.win_, 'crypto-polyfill');
      });
    }
    /**
     * Checks whether Web Cryptography is available, which is required for PKCS 1
     * operations. SHA-384 operations do not need this because there's a polyfill.
     * This could be false if the browser does not support Web Cryptography, or if
     * the current browsing context is not secure (e.g., it's on an insecure HTTP
     * page, or an HTTPS iframe embedded in an insecure HTTP page).
     *
     * @return {boolean} whether Web Cryptography is available
     */
    ;

    _proto.isPkcsAvailable = function isPkcsAvailable() {
      return Boolean(this.subtle) && this.win_['isSecureContext'] !== false;
    }
    /**
     * Converts an RSA JSON Web Key object to a browser-native cryptographic key.
     * As a precondition, `isPkcsAvailable()` must be `true`.
     *
     * @param {!Object} jwk a deserialized RSA JSON Web Key, as specified in
     *     Section 6.3 of RFC 7518
     * @return {!Promise<!webCrypto.CryptoKey>}
     * @throws {TypeError} if `jwk` is not an RSA JSON Web Key
     */
    ;

    _proto.importPkcsKey = function importPkcsKey(jwk) {
      (0, _log.devAssert)(this.isPkcsAvailable()); // Safari 10 and earlier want this as an ArrayBufferView.

      var keyData = this.isLegacyWebkit_ ? (0, _bytes.utf8Encode)(JSON.stringify(
      /** @type {!JsonObject} */
      jwk)) :
      /** @type {!webCrypto.JsonWebKey} */
      jwk;
      return (
        /** @type {!Promise<!webCrypto.CryptoKey>} */
        this.subtle.importKey('jwk', keyData, this.pkcsAlgo, true, ['verify'])
      );
    }
    /**
     * Verifies an RSASSA-PKCS1-v1_5 signature with a SHA-256 hash. As a
     * precondition, `isPkcsAvailable()` must be `true`.
     *
     * @param {!webCrypto.CryptoKey} key an RSA public key
     * @param {!Uint8Array} signature an RSASSA-PKCS1-v1_5 signature
     * @param {!BufferSource} data the data that was signed
     * @return {!Promise<boolean>} whether the signature is correct for the given
     *     data and public key
     */
    ;

    _proto.verifyPkcs = function verifyPkcs(key, signature, data) {
      (0, _log.devAssert)(this.isPkcsAvailable());
      return (
        /** @type {!Promise<boolean>} */
        this.subtle.verify(this.pkcsAlgo, key, signature, data)
      );
    };

    return Crypto;
  }();
  /**
   * @param {!Window} win
   */


  exports.Crypto = Crypto;

  function installCryptoService(win) {
    return (0, _service.registerServiceBuilder)(win, 'crypto', Crypto);
  }

  },{"../log":51,"../service":71,"../services":112,"../utils/base64":126,"../utils/bytes":127}],79:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.upgradeOrRegisterElement = upgradeOrRegisterElement;
  exports.stubElementsForDoc = stubElementsForDoc;
  exports.stubElementIfNotKnown = stubElementIfNotKnown;
  exports.copyElementToChildWindow = copyElementToChildWindow;
  exports.registerElement = registerElement;
  exports.markElementScheduledForTesting = markElementScheduledForTesting;
  exports.resetScheduledElementForTesting = resetScheduledElementForTesting;
  exports.getElementClassForTesting = getElementClassForTesting;

  var _elementStub = require("../element-stub");

  var _customElement = require("../custom-element");

  var _elementService = require("../element-service");

  var _error = require("../error");

  var _log = require("../log");

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @param {!Window} win
   * @return {!Object<string, function(new:../base-element.BaseElement, !Element)>}
   */
  function getExtendedElements(win) {
    if (!win.ampExtendedElements) {
      win.ampExtendedElements = {};
    }

    return win.ampExtendedElements;
  }
  /**
   * Registers an element. Upgrades it if has previously been stubbed.
   * @param {!Window} win
   * @param {string} name
   * @param {function(new:../base-element.BaseElement, !Element)} toClass
   */


  function upgradeOrRegisterElement(win, name, toClass) {
    var knownElements = getExtendedElements(win);

    if (!knownElements[name]) {
      registerElement(win, name,
      /** @type {!Function} */
      toClass);
      return;
    }

    if (knownElements[name] == toClass) {
      // Already registered this instance.
      return;
    }

    (0, _log.userAssert)(knownElements[name] == _elementStub.ElementStub, '%s is already registered. The script tag for ' + '%s is likely included twice in the page.', name, name);
    knownElements[name] = toClass;

    for (var i = 0; i < _elementStub.stubbedElements.length; i++) {
      var stub = _elementStub.stubbedElements[i]; // There are 3 possible states here:
      // 1. We never made the stub because the extended impl. loaded first.
      //    In that case the element won't be in the array.
      // 2. We made a stub but the browser didn't attach it yet. In
      //    that case we don't need to upgrade but simply switch to the new
      //    implementation.
      // 3. A stub was attached. We upgrade which means we replay the
      //    implementation.

      var element = stub.element;

      if (element.tagName.toLowerCase() == name && element.ownerDocument.defaultView == win) {
        tryUpgradeElementNoInline(element, toClass); // Remove element from array.

        _elementStub.stubbedElements.splice(i--, 1);
      }
    }
  }
  /**
   * This method should not be inlined to prevent TryCatch deoptimization.
   * NoInline keyword at the end of function name also prevents Closure compiler
   * from inlining the function.
   * @param {Element} element
   * @param {function(new:../base-element.BaseElement, !Element)} toClass
   * @private
   */


  function tryUpgradeElementNoInline(element, toClass) {
    try {
      element.upgrade(toClass);
    } catch (e) {
      (0, _error.reportError)(e, element);
    }
  }
  /**
   * Stub extended elements missing an implementation. It can be called multiple
   * times and on partial document in order to start stubbing as early as
   * possible.
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   */


  function stubElementsForDoc(ampdoc) {
    var extensions = (0, _elementService.extensionScriptsInNode)(ampdoc.getHeadNode());
    extensions.forEach(function (name) {
      ampdoc.declareExtension(name);
      stubElementIfNotKnown(ampdoc.win, name);
    });
  }
  /**
   * Stub element if not yet known.
   * @param {!Window} win
   * @param {string} name
   */


  function stubElementIfNotKnown(win, name) {
    var knownElements = getExtendedElements(win);

    if (!knownElements[name]) {
      registerElement(win, name, _elementStub.ElementStub);
    }
  }
  /**
   * Copies the specified element to child window (friendly iframe). This way
   * all implementations of the AMP elements are shared between all friendly
   * frames.
   * @param {!Window} parentWin
   * @param {!Window} childWin
   * @param {string} name
   */


  function copyElementToChildWindow(parentWin, childWin, name) {
    var toClass = getExtendedElements(parentWin)[name];
    registerElement(childWin, name, toClass || _elementStub.ElementStub);
  }
  /**
   * Registers a new custom element with its implementation class.
   * @param {!Window} win The window in which to register the elements.
   * @param {string} name Name of the custom element
   * @param {function(new:../base-element.BaseElement, !Element)} implementationClass
   */


  function registerElement(win, name, implementationClass) {
    var knownElements = getExtendedElements(win);
    knownElements[name] = implementationClass;
    var klass = (0, _customElement.createCustomElementClass)(win, name);
    var supportsCustomElementsV1 = 'customElements' in win;

    if (supportsCustomElementsV1) {
      win['customElements'].define(name, klass);
    } else {
      win.document.registerElement(name, {
        prototype: klass.prototype
      });
    }
  }
  /**
   * In order to provide better error messages we only allow to retrieve
   * services from other elements if those elements are loaded in the page.
   * This makes it possible to mark an element as loaded in a test.
   * @param {!Window} win
   * @param {string} elementName Name of an extended custom element.
   * @visibleForTesting
   */


  function markElementScheduledForTesting(win, elementName) {
    var knownElements = getExtendedElements(win);

    if (!knownElements[elementName]) {
      knownElements[elementName] = _elementStub.ElementStub;
    }
  }
  /**
   * Resets our scheduled elements.
   * @param {!Window} win
   * @param {string} elementName Name of an extended custom element.
   * @visibleForTesting
   */


  function resetScheduledElementForTesting(win, elementName) {
    if (win.ampExtendedElements) {
      delete win.ampExtendedElements[elementName];
    }
  }
  /**
   * Returns a currently registered element class.
   * @param {!Window} win
   * @param {string} elementName Name of an extended custom element.
   * @return {?function()}
   * @visibleForTesting
   */


  function getElementClassForTesting(win, elementName) {
    var knownElements = win.ampExtendedElements;
    return knownElements && knownElements[elementName] || null;
  }

  },{"../custom-element":23,"../element-service":27,"../element-stub":28,"../error":29,"../log":51}],80:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installDocumentInfoServiceForDoc = installDocumentInfoServiceForDoc;
  exports.DocInfo = exports.DocumentInfoDef = void 0;

  var _url = require("../url");

  var _types = require("../types");

  var _object = require("../utils/object");

  var _service = require("../service");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @private @const {!Array<string>} */
  var filteredLinkRels = ['prefetch', 'preload', 'preconnect', 'dns-prefetch'];
  /**
   * Properties:
   *     - sourceUrl: the source url of an amp document.
   *     - canonicalUrl: The doc's canonical.
   *     - pageViewId: Id for this page view. Low entropy but should be unique
   *       for concurrent page views of a user().
   *     - linkRels: A map object of link tag's rel (key) and corresponding
   *       hrefs (value). rel could be 'canonical', 'icon', etc.
   *     - metaTags: A map object of meta tag's name (key) and corresponding
   *       contents (value).
   *     - replaceParams: A map object of extra query string parameter names (key)
   *       to corresponding values, used for custom analytics.
   *       Null if not applicable.
   *
   * @typedef {{
   *   sourceUrl: string,
   *   canonicalUrl: string,
   *   pageViewId: string,
   *   linkRels: !Object<string, string|!Array<string>>,
   *   metaTags: !Object<string, string|!Array<string>>,
   *   replaceParams: ?Object<string, string|!Array<string>>
   * }}
   */

  var DocumentInfoDef;
  /**
   * @param {!Node|!./ampdoc-impl.AmpDoc} nodeOrDoc
   */

  exports.DocumentInfoDef = DocumentInfoDef;

  function installDocumentInfoServiceForDoc(nodeOrDoc) {
    return (0, _service.registerServiceBuilderForDoc)(nodeOrDoc, 'documentInfo', DocInfo);
  }

  var DocInfo =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     */
    function DocInfo(ampdoc) {
      /** @private @const  */
      this.ampdoc_ = ampdoc;
      /** @private {?DocumentInfoDef} */

      this.info_ = null;
    }
    /** @return {!DocumentInfoDef} */


    var _proto = DocInfo.prototype;

    _proto.get = function get() {
      if (this.info_) {
        return this.info_;
      }

      var ampdoc = this.ampdoc_;
      var url = ampdoc.getUrl();
      var sourceUrl = (0, _url.getSourceUrl)(url);
      var rootNode = ampdoc.getRootNode();
      var canonicalUrl = rootNode && rootNode.AMP && rootNode.AMP.canonicalUrl;

      if (!canonicalUrl) {
        var canonicalTag = rootNode.querySelector('link[rel=canonical]');
        canonicalUrl = canonicalTag ? (0, _url.parseUrlDeprecated)(canonicalTag.href).href : sourceUrl;
      }

      var pageViewId = getPageViewId(ampdoc.win);
      var linkRels = getLinkRels(ampdoc.win.document);
      var metaTags = getMetaTags(ampdoc.win.document);
      var replaceParams = getReplaceParams(ampdoc);
      return this.info_ = {
        /** @return {string} */
        get sourceUrl() {
          return (0, _url.getSourceUrl)(ampdoc.getUrl());
        },

        canonicalUrl: canonicalUrl,
        pageViewId: pageViewId,
        linkRels: linkRels,
        metaTags: metaTags,
        replaceParams: replaceParams
      };
    };

    return DocInfo;
  }();
  /**
   * Returns a relatively low entropy random string.
   * This should be called once per window and then cached for subsequent
   * access to the same value to be persistent per page.
   * @param {!Window} win
   * @return {string}
   */


  exports.DocInfo = DocInfo;

  function getPageViewId(win) {
    return String(Math.floor(win.Math.random() * 10000));
  }
  /**
   * Returns a map object of link tag relations in document head.
   * Key is the link rel, value is a list of corresponding hrefs.
   * @param {!Document} doc
   * @return {!JsonObject<string, string|!Array<string>>}
   */


  function getLinkRels(doc) {
    var linkRels = (0, _object.map)();

    if (doc.head) {
      var links = doc.head.querySelectorAll('link[rel]');

      var _loop = function _loop(i) {
        var link = links[i];
        var href = link.href;
        var rels = link.getAttribute('rel');

        if (!rels || !href) {
          return "continue";
        }

        rels.split(/\s+/).forEach(function (rel) {
          if (filteredLinkRels.indexOf(rel) != -1) {
            return;
          }

          var value = linkRels[rel];

          if (value) {
            // Change to array if more than one href for the same rel
            if (!(0, _types.isArray)(value)) {
              value = linkRels[rel] = [value];
            }

            value.push(href);
          } else {
            linkRels[rel] = href;
          }
        });
      };

      for (var i = 0; i < links.length; i++) {
        var _ret = _loop(i);

        if (_ret === "continue") continue;
      }
    }

    return linkRels;
  }
  /**
   * Returns a map object of meta tags in document head.
   * Key is the meta name, value is a list of corresponding content values.
   * @param {!Document} doc
   * @return {!JsonObject<string, string|!Array<string>>}
   */


  function getMetaTags(doc) {
    var metaTags = (0, _object.map)();

    if (doc.head) {
      var metas = doc.head.querySelectorAll('meta[name]');

      for (var i = 0; i < metas.length; i++) {
        var meta = metas[i];
        var content = meta.getAttribute('content');
        var name = meta.getAttribute('name');

        if (!name || !content) {
          continue;
        }

        var value = metaTags[name];

        if (value) {
          // Change to array if more than one content for the same name
          if (!(0, _types.isArray)(value)) {
            value = metaTags[name] = [value];
          }

          value.push(content);
        } else {
          metaTags[name] = content;
        }
      }
    }

    return metaTags;
  }
  /**
   * Attempts to retrieve extra parameters from the "amp_r" query param,
   * returning null if invalid.
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @return {?JsonObject<string, string|!Array<string>>}
   */


  function getReplaceParams(ampdoc) {
    // The "amp_r" parameter is only supported for ads.
    if (!ampdoc.isSingleDoc() || (0, _url.getProxyServingType)(ampdoc.win.location.href) != 'a') {
      return null;
    }

    var url = (0, _url.parseUrlDeprecated)(ampdoc.win.location.href);
    var replaceRaw = (0, _url.parseQueryString)(url.search)['amp_r'];

    if (replaceRaw === undefined) {
      // Differentiate the case between empty replace params and invalid result
      return null;
    }

    return (0, _url.parseQueryString)(replaceRaw);
  }

  },{"../service":71,"../types":121,"../url":124,"../utils/object":132}],81:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installDocumentStateService = installDocumentStateService;
  exports.DocumentState = void 0;

  var _observable = require("../observable");

  var _style = require("../style");

  var _service = require("../service");

  var _dom = require("../dom");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   */
  var DocumentState =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function DocumentState(win) {
      /** @const {!Window} */
      this.win = win;
      /** @private @const {!Document} */

      this.document_ = win.document;
      /** @private {string|null} */

      this.hiddenProp_ = (0, _style.getVendorJsPropertyName)(this.document_, 'hidden', true);

      if (this.document_[this.hiddenProp_] === undefined) {
        this.hiddenProp_ = null;
      }
      /** @private {string|null} */


      this.visibilityStateProp_ = (0, _style.getVendorJsPropertyName)(this.document_, 'visibilityState', true);

      if (this.document_[this.visibilityStateProp_] === undefined) {
        this.visibilityStateProp_ = null;
      }
      /** @private @const {!Observable} */


      this.visibilityObservable_ = new _observable.Observable();
      /** @private {string|null} */

      this.visibilityChangeEvent_ = null;

      if (this.hiddenProp_) {
        this.visibilityChangeEvent_ = 'visibilitychange';
        var vendorStop = this.hiddenProp_.indexOf('Hidden');

        if (vendorStop != -1) {
          this.visibilityChangeEvent_ = this.hiddenProp_.substring(0, vendorStop) + 'Visibilitychange';
        }
      }
      /** @private @const {!Function} */


      this.boundOnVisibilityChanged_ = this.onVisibilityChanged_.bind(this);

      if (this.visibilityChangeEvent_) {
        this.document_.addEventListener(this.visibilityChangeEvent_, this.boundOnVisibilityChanged_);
      }
      /** @private {?Observable} */


      this.bodyAvailableObservable_ = null;
    }
    /**
     * Returns the value of "document.hidden" property. The reasons why it may
     * not be visible include document in a non-active tab or when the document
     * is being pre-rendered via link with rel="prerender".
     * @return {boolean}
     */


    var _proto = DocumentState.prototype;

    _proto.isHidden = function isHidden() {
      if (!this.hiddenProp_) {
        return false;
      }

      return this.document_[this.hiddenProp_];
    }
    /**
     * Returns the value of "document.visibilityState" property. Possible values
     * are: 'hidden', 'visible', 'prerender', and 'unloaded'.
     * @return {string}
     */
    ;

    _proto.getVisibilityState = function getVisibilityState() {
      if (!this.visibilityStateProp_) {
        return this.isHidden() ? 'hidden' : 'visible';
      }

      return this.document_[this.visibilityStateProp_];
    }
    /**
     * @param {function()} handler
     * @return {!UnlistenDef}
     */
    ;

    _proto.onVisibilityChanged = function onVisibilityChanged(handler) {
      return this.visibilityObservable_.add(handler);
    }
    /** @private */
    ;

    _proto.onVisibilityChanged_ = function onVisibilityChanged_() {
      this.visibilityObservable_.fire();
    }
    /**
     * If body is already available, callback is called synchronously and null
     * is returned.
     * @param {function()} handler
     * @return {?UnlistenDef}
     */
    ;

    _proto.onBodyAvailable = function onBodyAvailable(handler) {
      var doc = this.document_;

      if (doc.body) {
        handler();
        return null;
      }

      if (!this.bodyAvailableObservable_) {
        this.bodyAvailableObservable_ = new _observable.Observable();
        (0, _dom.waitForChild)(doc.documentElement, function () {
          return !!doc.body;
        }, this.onBodyAvailable_.bind(this));
      }

      return this.bodyAvailableObservable_.add(handler);
    }
    /** @private */
    ;

    _proto.onBodyAvailable_ = function onBodyAvailable_() {
      this.bodyAvailableObservable_.fire();
      this.bodyAvailableObservable_.removeAll();
      this.bodyAvailableObservable_ = null;
    };

    return DocumentState;
  }();
  /**
   * @param {!Window} window
   */


  exports.DocumentState = DocumentState;

  function installDocumentStateService(window) {
    (0, _service.registerServiceBuilder)(window, 'documentState', DocumentState);
  }

  },{"../dom":26,"../observable":54,"../service":71,"../style":118}],82:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.calculateExtensionScriptUrl = calculateExtensionScriptUrl;
  exports.calculateEntryPointScriptUrl = calculateEntryPointScriptUrl;
  exports.parseExtensionUrl = parseExtensionUrl;

  var _mode = require("../mode");

  var _config = require("../config");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Internal structure that maintains the state of an extension through loading.
   *
   * @typedef {{
   *   extensionId: (string|undefined),
   *   extensionVersion: (string|undefined),
   * }}
   * @private
   */
  var ExtensionInfoDef;
  /**
   * Calculate the base url for any scripts.
   * @param {!Location} location The window's location
   * @param {boolean=} opt_isLocalDev
   * @return {string}
   */

  function calculateScriptBaseUrl(location, opt_isLocalDev) {
    if (opt_isLocalDev) {
      var prefix = location.protocol + "//" + location.host;

      if (location.protocol == 'about:') {
        prefix = '';
      }

      return prefix + "/dist";
    }

    return _config.urls.cdn;
  }
  /**
   * Calculates if we need a single pass folder or not.
   *
   * @return {string}
   */


  function getSinglePassExperimentPath() {
    return (0, _mode.getMode)().singlePassType ? (0, _mode.getMode)().singlePassType + "/" : '';
  }
  /**
   * Calculate script url for an extension.
   * @param {!Location} location The window's location
   * @param {string} extensionId
   * @param {string=} opt_extensionVersion
   * @param {boolean=} opt_isLocalDev
   * @return {string}
   */


  function calculateExtensionScriptUrl(location, extensionId, opt_extensionVersion, opt_isLocalDev) {
    var base = calculateScriptBaseUrl(location, opt_isLocalDev);
    var rtv = (0, _mode.getMode)().rtvVersion;

    if (opt_extensionVersion == null) {
      opt_extensionVersion = '0.1';
    }

    var extensionVersion = opt_extensionVersion ? '-' + opt_extensionVersion : '';
    var spPath = getSinglePassExperimentPath();
    return base + "/rtv/" + rtv + "/" + spPath + "v0/" + extensionId + extensionVersion + ".js";
  }
  /**
   * Calculate script url for an entry point.
   * If `opt_rtv` is true, returns the URL matching the current RTV.
   * @param {!Location} location The window's location
   * @param {string} entryPoint
   * @param {boolean=} isLocalDev
   * @param {boolean=} opt_rtv
   * @return {string}
   */


  function calculateEntryPointScriptUrl(location, entryPoint, isLocalDev, opt_rtv) {
    var base = calculateScriptBaseUrl(location, isLocalDev);

    if (opt_rtv) {
      var spPath = getSinglePassExperimentPath();
      return base + "/rtv/" + (0, _mode.getMode)().rtvVersion + "/" + spPath + entryPoint + ".js";
    }

    return base + "/" + entryPoint + ".js";
  }
  /**
   * Parse the extension version from a given script URL.
   * @param {string} scriptUrl
   * @return {!ExtensionInfoDef}
   */


  function parseExtensionUrl(scriptUrl) {
    var regex = /^(.*)\/(.*)-([0-9.]+)\.js$/i;
    var matches = scriptUrl.match(regex);
    return {
      extensionId: matches ? matches[2] : undefined,
      extensionVersion: matches ? matches[3] : undefined
    };
  }

  },{"../config":17,"../mode":53}],83:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.isTemplateExtension = isTemplateExtension;
  exports.installExtensionsService = installExtensionsService;
  exports.installBuiltinElements = installBuiltinElements;
  exports.stubLegacyElements = stubLegacyElements;
  exports.installStandardServicesInEmbed = installStandardServicesInEmbed;
  exports.Extensions = void 0;

  var _promise = require("../utils/promise");

  var _services = require("../services");

  var _extensionLocation = require("./extension-location");

  var _customElementRegistry = require("./custom-element-registry");

  var _css = require("../../build/css");

  var _log = require("../log");

  var _service = require("../service");

  var _mode = require("../mode");

  var _customElements = require("../polyfills/custom-elements");

  var _domtokenlistToggle = require("../polyfills/domtokenlist-toggle");

  var _documentContains = require("../polyfills/document-contains");

  var _ampImg = require("../../builtins/amp-img");

  var _ampLayout = require("../../builtins/amp-layout");

  var _ampPixel = require("../../builtins/amp-pixel");

  var _documentRegisterElement = require("document-register-element/build/document-register-element.patched");

  var _styleInstaller = require("../style-installer");

  var _experiments = require("../experiments");

  var _object = require("../utils/object");

  var _string = require("../string");

  var _types = require("../types");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TAG = 'extensions';
  var UNKNOWN_EXTENSION = '_UNKNOWN_';
  var LEGACY_ELEMENTS = ['amp-ad', 'amp-embed', 'amp-video'];
  var CUSTOM_TEMPLATES = ['amp-mustache'];
  var LOADER_PROP = '__AMP_EXT_LDR';
  /**
   * Default milliseconds to wait for all extensions to load before erroring.
   * (8 seconds is the same as the CSS boilerplate timoeout)
   * @const
   */

  var LOAD_TIMEOUT = 8000;
  /**
   * Contains data for the declaration of a custom element.
   *
   * @typedef {{
   *   implementationClass:
   *       function(new:../base-element.BaseElement, !Element),
   *   css: (?string|undefined),
   * }}
   */

  var ExtensionElementDef;
  /**
   * Contains data for the declaration of an extension service.
   *
   * @typedef {{serviceName: string, serviceClass: function(new:Object, !./ampdoc-impl.AmpDoc)}}
   */

  var ExtensionServiceDef;
  /**
   * The structure that contains the resources declared by an extension.
   *
   * @typedef {{
   *   elements: !Object<string, !ExtensionElementDef>,
   *   services: !Object<string, !ExtensionServiceDef>,
   * }}
   */

  var ExtensionDef;
  /**
   * Internal structure that maintains the state of an extension through loading.
   *
   * @typedef {{
   *   extension: !ExtensionDef,
   *   auto: boolean,
   *   docFactories: !Array<function(!./ampdoc-impl.AmpDoc)>,
   *   promise: (!Promise<!ExtensionDef>|undefined),
   *   resolve: (function(!ExtensionDef)|undefined),
   *   reject: (function(!Error)|undefined),
   *   loaded: (boolean|undefined),
   *   error: (!Error|undefined),
   *   scriptPresent: (boolean|undefined),
   * }}
   * @private
   */

  var ExtensionHolderDef;
  /**
   * @param {string} extensionId
   * @return {boolean}
   */

  function isTemplateExtension(extensionId) {
    return CUSTOM_TEMPLATES.indexOf(extensionId) >= 0;
  }
  /**
   * @param {string} extensionId
   * @return {boolean}
   */


  function isIntermediateExtension(extensionId) {
    return (0, _string.startsWith)(extensionId, '_');
  }
  /**
   * Install extensions service.
   * @param {!Window} window
   * @restricted
   */


  function installExtensionsService(window) {
    (0, _service.registerServiceBuilder)(window, 'extensions', Extensions);
  }
  /**
   * The services that manages extensions in the runtime.
   * @visibleForTesting
   */


  var Extensions =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function Extensions(win) {
      /** @const {!Window} */
      this.win = win;
      /** @const @private */

      this.ampdocService_ = _services.Services.ampdocServiceFor(win);
      /** @private @const {!Object<string, !ExtensionHolderDef>} */

      this.extensions_ = {};
      /** @private {?string} */

      this.currentExtensionId_ = null;
    }
    /**
     * Register and process the specified extension. The factory is called
     * immediately, which in turn is expected to register elements, templates,
     * services and document factories. This method is called by the extension's
     * script itself when it's loaded using the regular `AMP.push()` callback.
     * @param {string} extensionId
     * @param {function(!Object, !Object)} factory
     * @param {!Object} arg
     * @restricted
     */


    var _proto = Extensions.prototype;

    _proto.registerExtension = function registerExtension(extensionId, factory, arg) {
      var holder = this.getExtensionHolder_(extensionId,
      /* auto */
      true);

      try {
        this.currentExtensionId_ = extensionId;
        factory(arg, arg['_']);

        if ((0, _mode.getMode)().localDev || (0, _mode.getMode)().test) {
          if (Object.freeze) {
            var m = holder.extension;
            m.elements = Object.freeze(m.elements);
            holder.extension = Object.freeze(m);
          }
        }

        holder.loaded = true;

        if (holder.resolve) {
          holder.resolve(holder.extension);
        }
      } catch (e) {
        holder.error = e;

        if (holder.reject) {
          holder.reject(e);
        }

        throw e;
      } finally {
        this.currentExtensionId_ = null;
      }
    }
    /**
     * Waits for the previously included extension to complete
     * loading/registration.
     * @param {!Window} win
     * @param {string} extensionId
     * @param {number=} opt_timeout
     * @return {!Promise<?ExtensionDef>}
     */
    ;

    _proto.waitForExtension = function waitForExtension(win, extensionId, opt_timeout) {
      return (
        /** @type {!Promise<?ExtensionDef>} */
        _services.Services.timerFor(win).timeoutPromise(opt_timeout || LOAD_TIMEOUT, this.waitFor_(this.getExtensionHolder_(extensionId,
        /* auto */
        false)), "Render timeout waiting for extension " + extensionId + " to be load.")
      );
    }
    /**
     * Returns the promise that will be resolved when the extension has been
     * loaded. If necessary, adds the extension script to the page.
     * @param {string} extensionId
     * @param {string=} opt_extensionVersion
     * @return {!Promise<!ExtensionDef>}
     */
    ;

    _proto.preloadExtension = function preloadExtension(extensionId, opt_extensionVersion) {
      if (extensionId == 'amp-embed') {
        extensionId = 'amp-ad';
      }

      var holder = this.getExtensionHolder_(extensionId,
      /* auto */
      false);
      this.insertExtensionScriptIfNeeded_(extensionId, holder, opt_extensionVersion);
      return this.waitFor_(holder);
    }
    /**
     * Returns the promise that will be resolved when the extension has been
     * loaded. If necessary, adds the extension script to the page.
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {string} extensionId
     * @param {string=} opt_extensionVersion
     * @return {!Promise<!ExtensionDef>}
     */
    ;

    _proto.installExtensionForDoc = function installExtensionForDoc(ampdoc, extensionId, opt_extensionVersion) {
      var _this = this;

      var rootNode = ampdoc.getRootNode();
      var extLoaders = rootNode[LOADER_PROP];

      if (!extLoaders) {
        extLoaders = rootNode[LOADER_PROP] = (0, _object.map)();
      }

      if (extLoaders[extensionId]) {
        return extLoaders[extensionId];
      }

      (0, _customElementRegistry.stubElementIfNotKnown)(ampdoc.win, extensionId);
      return extLoaders[extensionId] = this.preloadExtension(extensionId, opt_extensionVersion).then(function () {
        return _this.installExtensionInDoc_(ampdoc, extensionId);
      });
    }
    /**
     * Reloads the new version of the extension.
     * @param {string} extensionId
     * @param {!Element} oldScriptElement
     * @return {!Promise<!ExtensionDef>}
     */
    ;

    _proto.reloadExtension = function reloadExtension(extensionId, oldScriptElement) {
      // "Disconnect" the old script element and extension record.
      var holder = this.extensions_[extensionId];

      if (holder) {
        (0, _log.devAssert)(!holder.loaded && !holder.error);
        delete this.extensions_[extensionId];
      }

      oldScriptElement.removeAttribute('custom-element');
      oldScriptElement.setAttribute('i-amphtml-loaded-new-version', extensionId);
      var urlParts = (0, _extensionLocation.parseExtensionUrl)(oldScriptElement.src);
      return this.preloadExtension(extensionId, urlParts.extensionVersion);
    }
    /**
     * Returns the promise that will be resolved with the extension element's
     * class when the extension has been loaded. If necessary, adds the extension
     * script to the page.
     * @param {string} elementName
     * @return {!Promise<function(new:../base-element.BaseElement, !Element)>}
     */
    ;

    _proto.loadElementClass = function loadElementClass(elementName) {
      return this.preloadExtension(elementName).then(function (extension) {
        var element = (0, _log.devAssert)(extension.elements[elementName], 'Element not found: %s', elementName);
        return element.implementationClass;
      });
    }
    /**
     * Add an element to the extension currently being registered. This is a
     * restricted method and it's allowed to be called only during the overall
     * extension registration.
     * @param {string} name
     * @param {function(new:../base-element.BaseElement, !Element)} implementationClass
     * @param {?string|undefined} css
     * @restricted
     */
    ;

    _proto.addElement = function addElement(name, implementationClass, css) {
      var _this2 = this;

      var holder = this.getCurrentExtensionHolder_(name);
      holder.extension.elements[name] = {
        implementationClass: implementationClass,
        css: css
      };
      this.addDocFactory(function (ampdoc) {
        _this2.installElement_(ampdoc, name, implementationClass, css);
      });
    }
    /**
     * Installs the specified element implementation in the ampdoc.
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {string} name
     * @param {!Function} implementationClass
     * @param {?string|undefined} css
     * @private
     */
    ;

    _proto.installElement_ = function installElement_(ampdoc, name, implementationClass, css) {
      var _this3 = this;

      if (css) {
        (0, _styleInstaller.installStylesForDoc)(ampdoc, css, function () {
          _this3.registerElementInWindow_(ampdoc.win, name, implementationClass);
        },
        /* isRuntimeCss */
        false, name);
      } else {
        this.registerElementInWindow_(ampdoc.win, name, implementationClass);
      }
    }
    /**
     * @param {!Window} win
     * @param {string} name
     * @param {!Function} implementationClass
     * @private
     */
    ;

    _proto.registerElementInWindow_ = function registerElementInWindow_(win, name, implementationClass) {
      // Register the element in the window.
      (0, _customElementRegistry.upgradeOrRegisterElement)(win, name, implementationClass); // Register this extension to resolve its Service Promise.

      (0, _service.registerServiceBuilder)(win, name, emptyService);
    }
    /**
     * Add a service to the extension currently being registered. This is a
     * restricted method and it's allowed to be called only during the overall
     * extension registration.
     * @param {string} name
     * @param {function(new:Object, !./ampdoc-impl.AmpDoc)} implementationClass
     */
    ;

    _proto.addService = function addService(name, implementationClass) {
      var holder = this.getCurrentExtensionHolder_();
      holder.extension.services.push(
      /** @type {!ExtensionServiceDef} */
      {
        serviceName: name,
        serviceClass: implementationClass
      });
      this.addDocFactory(function (ampdoc) {
        (0, _service.registerServiceBuilderForDoc)(ampdoc, name, implementationClass,
        /* instantiate */
        true);
      });
    }
    /**
     * Add a ampdoc factory to the extension currently being registered. This is a
     * restricted method and it's allowed to be called only during the overall
     * extension registration.
     * @param {function(!./ampdoc-impl.AmpDoc)} factory
     * @param {string=} opt_forName
     * @restricted
     */
    ;

    _proto.addDocFactory = function addDocFactory(factory, opt_forName) {
      var holder = this.getCurrentExtensionHolder_(opt_forName);
      holder.docFactories.push(factory); // If a single-doc mode, or is shadow-doc mode and has AmpDocShell,
      // run factory right away if it's included by the doc.

      if (this.currentExtensionId_ && (this.ampdocService_.isSingleDoc() || this.ampdocService_.hasAmpDocShell())) {
        var ampdoc = this.ampdocService_.getAmpDoc(this.win.document);
        var extensionId = (0, _log.dev)().assertString(this.currentExtensionId_); // Note that this won't trigger for FIE extensions that are not present
        // in the parent doc.

        if (ampdoc.declaresExtension(extensionId) || holder.auto) {
          factory(ampdoc);
        }
      }
    }
    /**
     * Installs all ampdoc factories previously registered with
     * `addDocFactory`.
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {!Array<string>} extensionIds
     * @return {!Promise}
     * @restricted
     */
    ;

    _proto.installExtensionsInDoc = function installExtensionsInDoc(ampdoc, extensionIds) {
      var _this4 = this;

      var promises = [];
      extensionIds.forEach(function (extensionId) {
        promises.push(_this4.installExtensionInDoc_(ampdoc, extensionId));
      });
      return Promise.all(promises);
    }
    /**
     * Installs all ampdoc factories for the specified extension.
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {string} extensionId
     * @return {!Promise}
     * @private
     */
    ;

    _proto.installExtensionInDoc_ = function installExtensionInDoc_(ampdoc, extensionId) {
      var holder = this.getExtensionHolder_(extensionId,
      /* auto */
      false);
      return this.waitFor_(holder).then(function () {
        ampdoc.declareExtension(extensionId);
        holder.docFactories.forEach(function (factory) {
          try {
            factory(ampdoc);
          } catch (e) {
            (0, _log.rethrowAsync)('Doc factory failed: ', e, extensionId);
          }
        });
      });
    }
    /**
     * Install extensions in the child window (friendly iframe). The pre-install
     * callback, if specified, is executed after polyfills have been configured
     * but before the first extension is installed.
     * @param {!Window} childWin
     * @param {!Array<string>} extensionIds
     * @param {function(!Window)=} opt_preinstallCallback
     * @return {!Promise}
     * @restricted
     */
    ;

    _proto.installExtensionsInChildWindow = function installExtensionsInChildWindow(childWin, extensionIds, opt_preinstallCallback) {
      var _this5 = this;

      var topWin = this.win;
      var parentWin = (0, _types.toWin)(childWin.frameElement.ownerDocument.defaultView);
      (0, _service.setParentWindow)(childWin, parentWin); // Install necessary polyfills.

      installPolyfillsInChildWindow(parentWin, childWin); // Install runtime styles.

      (0, _styleInstaller.installStylesLegacy)(childWin.document, _css.cssText,
      /* callback */
      null,
      /* opt_isRuntimeCss */
      true,
      /* opt_ext */
      'amp-runtime'); // Run pre-install callback.

      if (opt_preinstallCallback) {
        opt_preinstallCallback(childWin);
      } // Install embeddable standard services.


      installStandardServicesInEmbed(childWin, parentWin); // Install built-ins and legacy elements.

      copyBuiltinElementsToChildWindow(topWin, childWin);
      stubLegacyElements(childWin);
      var promises = [];
      extensionIds.forEach(function (extensionId) {
        // This will extend automatic upgrade of custom elements from top
        // window to the child window.
        if (!LEGACY_ELEMENTS.includes(extensionId)) {
          (0, _customElementRegistry.stubElementIfNotKnown)(childWin, extensionId);
        } // Install CSS.


        var promise = _this5.preloadExtension(extensionId).then(function (extension) {
          // Adopt embeddable extension services.
          extension.services.forEach(function (service) {
            (0, _service.installServiceInEmbedIfEmbeddable)(childWin, service.serviceClass);
          }); // Adopt the custom elements.

          var elementPromises = null;

          var _loop = function _loop(elementName) {
            var elementDef = extension.elements[elementName];
            var elementPromise = new Promise(function (resolve) {
              if (elementDef.css) {
                (0, _styleInstaller.installStylesLegacy)(childWin.document, elementDef.css,
                /* completeCallback */
                resolve,
                /* isRuntime */
                false, extensionId);
              } else {
                resolve();
              }
            }).then(function () {
              (0, _customElementRegistry.upgradeOrRegisterElement)(childWin, elementName, elementDef.implementationClass);
            });

            if (elementPromises) {
              elementPromises.push(elementPromise);
            } else {
              elementPromises = [elementPromise];
            }
          };

          for (var elementName in extension.elements) {
            _loop(elementName);
          }

          if (elementPromises) {
            return Promise.all(elementPromises).then(function () {
              return extension;
            });
          }

          return extension;
        });

        promises.push(promise);
      });
      return Promise.all(promises);
    }
    /**
     * Creates or returns an existing extension holder.
     * @param {string} extensionId
     * @param {boolean} auto
     * @return {!ExtensionHolderDef}
     * @private
     */
    ;

    _proto.getExtensionHolder_ = function getExtensionHolder_(extensionId, auto) {
      var holder = this.extensions_[extensionId];

      if (!holder) {
        var extension =
        /** @type {ExtensionDef} */
        {
          elements: {},
          services: []
        };
        holder =
        /** @type {ExtensionHolderDef} */
        {
          extension: extension,
          auto: auto,
          docFactories: [],
          promise: undefined,
          resolve: undefined,
          reject: undefined,
          loaded: undefined,
          error: undefined,
          scriptPresent: undefined
        };
        this.extensions_[extensionId] = holder;
      }

      return holder;
    }
    /**
     * Returns the holder for the extension currently being registered.
     * @param {string=} opt_forName Used for logging only.
     * @return {!ExtensionHolderDef}
     * @private
     */
    ;

    _proto.getCurrentExtensionHolder_ = function getCurrentExtensionHolder_(opt_forName) {
      if (!this.currentExtensionId_ && !(0, _mode.getMode)().test) {
        (0, _log.dev)().error(TAG, 'unknown extension for ', opt_forName);
      }

      return this.getExtensionHolder_(this.currentExtensionId_ || UNKNOWN_EXTENSION,
      /* auto */
      true);
    }
    /**
     * Creates or returns an existing promise that will yield as soon as the
     * extension has been loaded.
     * @param {!ExtensionHolderDef} holder
     * @return {!Promise<!ExtensionDef>}
     * @private
     */
    ;

    _proto.waitFor_ = function waitFor_(holder) {
      if (!holder.promise) {
        if (holder.loaded) {
          holder.promise = Promise.resolve(holder.extension);
        } else if (holder.error) {
          holder.promise = Promise.reject(holder.error);
        } else {
          var deferred = new _promise.Deferred();
          holder.promise = deferred.promise;
          holder.resolve = deferred.resolve;
          holder.reject = deferred.reject;
        }
      }

      return holder.promise;
    }
    /**
     * Ensures that the script has already been injected in the page.
     * @param {string} extensionId
     * @param {!ExtensionHolderDef} holder
     * @param {string=} opt_extensionVersion
     * @private
     */
    ;

    _proto.insertExtensionScriptIfNeeded_ = function insertExtensionScriptIfNeeded_(extensionId, holder, opt_extensionVersion) {
      if (this.isExtensionScriptRequired_(extensionId, holder)) {
        var scriptElement = this.createExtensionScript_(extensionId, opt_extensionVersion);
        this.win.document.head.appendChild(scriptElement);
        holder.scriptPresent = true;
      }
    }
    /**
     * Determine the need to add amp extension script to document.
     * @param {string} extensionId
     * @param {!ExtensionHolderDef} holder
     * @return {boolean}
     * @private
     */
    ;

    _proto.isExtensionScriptRequired_ = function isExtensionScriptRequired_(extensionId, holder) {
      if (holder.loaded || holder.error) {
        return false;
      }

      if (holder.scriptPresent === undefined) {
        var scriptInHead = this.win.document.head.
        /*OK*/
        querySelector("[custom-element=\"" + extensionId + "\"]");
        holder.scriptPresent = !!scriptInHead;
      }

      return !holder.scriptPresent;
    }
    /**
     * Create the missing amp extension HTML script element.
     * @param {string} extensionId
     * @param {string=} opt_extensionVersion
     * @return {!Element} Script object
     * @private
     */
    ;

    _proto.createExtensionScript_ = function createExtensionScript_(extensionId, opt_extensionVersion) {
      var scriptElement = this.win.document.createElement('script');
      scriptElement.async = true;

      if (isIntermediateExtension(extensionId)) {
        opt_extensionVersion = '';
      } else {
        scriptElement.setAttribute(isTemplateExtension(extensionId) ? 'custom-template' : 'custom-element', extensionId);
      }

      scriptElement.setAttribute('data-script', extensionId);
      scriptElement.setAttribute('i-amphtml-inserted', '');
      var loc = this.win.location;

      if ((0, _mode.getMode)().test && this.win.testLocation) {
        loc = this.win.testLocation;
      }

      var scriptSrc = (0, _extensionLocation.calculateExtensionScriptUrl)(loc, extensionId, opt_extensionVersion, (0, _mode.getMode)().localDev);
      scriptElement.src = scriptSrc;
      return scriptElement;
    };

    return Extensions;
  }();
  /**
   * Install builtins.
   * @param {!Window} win
   * @restricted
   */


  exports.Extensions = Extensions;

  function installBuiltinElements(win) {
    (0, _ampImg.installImg)(win);
    (0, _ampPixel.installPixel)(win);
    (0, _ampLayout.installLayout)(win);
  }
  /**
   * Copy builtins to a child window.
   * @param {!Window} parentWin
   * @param {!Window} childWin
   */


  function copyBuiltinElementsToChildWindow(parentWin, childWin) {
    (0, _customElementRegistry.copyElementToChildWindow)(parentWin, childWin, 'amp-img');
    (0, _customElementRegistry.copyElementToChildWindow)(parentWin, childWin, 'amp-pixel');
  }
  /**
   * @param {!Window} win
   */


  function stubLegacyElements(win) {
    LEGACY_ELEMENTS.forEach(function (name) {
      (0, _customElementRegistry.stubElementIfNotKnown)(win, name);
    });
  }
  /**
   * Install polyfills in the child window (friendly iframe).
   * @param {!Window} parentWin
   * @param {!Window} childWin
   */


  function installPolyfillsInChildWindow(parentWin, childWin) {
    (0, _documentContains.install)(childWin);
    (0, _domtokenlistToggle.install)(childWin); // TODO(jridgewell): Ship custom-elements-v1. For now, we use this hack so it
    // is DCE'd from production builds.

    if (false && (0, _experiments.isExperimentOn)(parentWin, 'custom-elements-v1') || (0, _mode.getMode)().test) {
      (0, _customElements.install)(childWin);
    } else {
      (0, _documentRegisterElement.installCustomElements)(childWin, 'auto');
    }
  }
  /**
   * Adopt predefined core services for the child window (friendly iframe).
   * @param {!Window} childWin
   * @param {!Window} parentWin
   * @visibleForTesting
   */


  function installStandardServicesInEmbed(childWin, parentWin) {
    var frameElement = (0, _log.dev)().assertElement(childWin.frameElement, 'frameElement not found for embed');
    var standardServices = [// The order of service adoptations is important.
    _services.Services.urlForDoc(frameElement), _services.Services.actionServiceForDoc(frameElement), _services.Services.standardActionsForDoc(frameElement), _services.Services.navigationForDoc(frameElement), _services.Services.timerFor(parentWin)];
    var ampdoc = (0, _service.getAmpdoc)(frameElement);
    standardServices.forEach(function (service) {
      // Static functions must be invoked on the class, not the instance.
      service.constructor.installInEmbedWindow(childWin, ampdoc);
    });
  }
  /**
   * @return {!Object}
   */


  function emptyService() {
    // All services need to resolve to an object.
    return {};
  }

  },{"../../build/css":1,"../../builtins/amp-img":2,"../../builtins/amp-layout":3,"../../builtins/amp-pixel":4,"../experiments":32,"../log":51,"../mode":53,"../polyfills/custom-elements":59,"../polyfills/document-contains":60,"../polyfills/domtokenlist-toggle":61,"../service":71,"../services":112,"../string":116,"../style-installer":117,"../types":121,"../utils/object":132,"../utils/promise":134,"./custom-element-registry":79,"./extension-location":82,"document-register-element/build/document-register-element.patched":5}],84:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.FixedLayer = void 0;

  var _pass = require("../pass");

  var _services = require("../services");

  var _style = require("../style");

  var _dom = require("../dom");

  var _log = require("../log");

  var _string = require("../string");

  var _experiments = require("../experiments");

  var _array = require("../utils/array");

  var _types = require("../types");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TAG = 'FixedLayer';
  var DECLARED_FIXED_PROP = '__AMP_DECLFIXED';
  var DECLARED_STICKY_PROP = '__AMP_DECLSTICKY';
  var LIGHTBOX_MODE_ATTR = 'i-amphtml-lightbox';
  var LIGHTBOX_ELEMENT_CLASS = 'i-amphtml-lightbox-element';
  /**
   * @param {!Element} el
   */

  function isLightbox(el) {
    return el.tagName.indexOf('LIGHTBOX') !== -1;
  }
  /**
   * The fixed layer is a *sibling* of the body element. I.e. it's a direct
   * child of documentElement. It's used to manage the `position:fixed` and
   * `position:sticky` elements in iOS-iframe case due to the
   * https://bugs.webkit.org/show_bug.cgi?id=154399 bug, which is itself
   * a result of workaround for the issue where scrolling is not supported
   * in iframes (https://bugs.webkit.org/show_bug.cgi?id=149264).
   * This implementation finds all elements that could be `fixed` or `sticky`
   * and checks on major relayouts if they are indeed `fixed`/`sticky`.
   * Some `fixed` elements may be moved into the "transfer layer".
   */


  var FixedLayer =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {!./vsync-impl.Vsync} vsync
     * @param {number} borderTop
     * @param {number} paddingTop
     * @param {boolean} transfer
     */
    function FixedLayer(ampdoc, vsync, borderTop, paddingTop, transfer) {
      var _this = this;

      /** @const {!./ampdoc-impl.AmpDoc} */
      this.ampdoc = ampdoc;
      /** @private @const */

      this.vsync_ = vsync;
      /** @const @private {number} */

      this.borderTop_ = borderTop;
      /** @private {number} */

      this.paddingTop_ = paddingTop;
      /** @private {number} */

      this.committedPaddingTop_ = paddingTop;
      /** @private @const {boolean} */

      this.transfer_ = transfer && ampdoc.isSingleDoc();
      /** @private {?TransferLayerDef} */

      this.transferLayer_ = null;
      /** @private {number} */

      this.counter_ = 0;
      /** @const @private {!Array<!ElementDef>} */

      this.elements_ = [];
      /** @const @private {!Pass} */

      this.updatePass_ = new _pass.Pass(ampdoc.win, function () {
        _this.update();
      });
      /** @private {?MutationObserver} */

      this.mutationObserver_ = null;
      /** @private {!Array<string>} */

      this.fixedSelectors_ = [];
      /** @private {!Array<string>} */

      this.stickySelectors_ = [];
    }
    /**
     * Informs FixedLayer that a lightbox was opened.
     *
     * - FixedLayer hides any transfer layer elements that may be overlayed on
     *   top of the lightbox, which is confusing UX.
     * - When `onComplete` resolves, FixedLayer scans and transfers any fixed
     *   descendants of `lightbox`. This enables unjanky fixed elements in
     *   lightboxes on iOS.
     *
     * @param {!Element=} opt_lightbox
     * @param {!Promise=} opt_onComplete Promise that resolves when lightbox
     *   UX completes e.g. open transition animation.
     */


    var _proto = FixedLayer.prototype;

    _proto.enterLightbox = function enterLightbox(opt_lightbox, opt_onComplete) {
      var _this2 = this;

      var transferLayer = this.getTransferLayer_();

      if (transferLayer) {
        transferLayer.setLightboxMode(true);
      }

      if ((0, _experiments.isExperimentOn)(this.ampdoc.win, 'fixed-elements-in-lightbox') && opt_lightbox && opt_onComplete) {
        opt_onComplete.then(function () {
          _this2.scanNode_((0, _log.dev)().assertElement(opt_lightbox),
          /* lightboxMode */
          true);
        });
      }
    }
    /**
     * Reverses the actions performed by `enterLightbox()`.
     */
    ;

    _proto.leaveLightbox = function leaveLightbox() {
      var transferLayer = this.getTransferLayer_();

      if (transferLayer) {
        transferLayer.setLightboxMode(false);
      }

      if ((0, _experiments.isExperimentOn)(this.ampdoc.win, 'fixed-elements-in-lightbox')) {
        var fes = (0, _array.remove)(this.elements_, function (fe) {
          return !!fe.lightboxed;
        });
        this.returnFixedElements_(fes);

        if (!this.elements_.length) {
          this.unobserveHiddenMutations_();
        }
      }
    }
    /**
     * Must be always called after DOMReady.
     */
    ;

    _proto.setup = function setup() {
      var root = this.ampdoc.getRootNode();
      var stylesheets = root.styleSheets;

      if (!stylesheets) {
        return;
      }

      this.fixedSelectors_.length = 0;
      this.stickySelectors_.length = 0;

      for (var i = 0; i < stylesheets.length; i++) {
        var stylesheet = stylesheets[i]; // Rare but may happen if the document is being concurrently disposed.

        if (!stylesheet) {
          (0, _log.dev)().error(TAG, 'Aborting setup due to null stylesheet.');
          return;
        }

        var disabled = stylesheet.disabled,
            ownerNode = stylesheet.ownerNode;

        if (disabled || !ownerNode || ownerNode.tagName != 'STYLE' || ownerNode.hasAttribute('amp-boilerplate') || ownerNode.hasAttribute('amp-runtime') || ownerNode.hasAttribute('amp-extension')) {
          continue;
        } // Don't dereference cssRules early to avoid "Cannot access rules"
        // DOMException due to reading a CORS stylesheet e.g. font.


        this.discoverSelectors_(stylesheet.cssRules);
      }

      this.scanNode_(root);

      if (this.elements_.length > 0) {
        this.observeHiddenMutations();
      }

      var platform = _services.Services.platformFor(this.ampdoc.win);

      if (this.elements_.length > 0 && !this.transfer_ && platform.isIos()) {
        (0, _log.user)().warn(TAG, 'Please test this page inside of an AMP Viewer such' + ' as Google\'s because the fixed or sticky positioning might have' + ' slightly different layout.');
      }
    }
    /**
     * @param {!Node} node
     * @param {boolean=} opt_lightboxMode
     * @private
     */
    ;

    _proto.scanNode_ = function scanNode_(node, opt_lightboxMode) {
      this.trySetupSelectorsNoInline(node, opt_lightboxMode); // Sort tracked elements in document order.

      this.sortInDomOrder_();
      this.update();
    }
    /**
     * Begin observing changes to the hidden attribute.
     * @visibleForTesting
     */
    ;

    _proto.observeHiddenMutations = function observeHiddenMutations() {
      if (!(0, _experiments.isExperimentOn)(this.ampdoc.win, 'hidden-mutation-observer')) {
        return;
      }

      var mo = this.initMutationObserver_();
      mo.observe(this.ampdoc.getRootNode(), {
        attributes: true,
        subtree: true
      });
    }
    /**
     * Stop observing changes to the hidden attribute. Does not destroy the
     * mutation observer.
     */
    ;

    _proto.unobserveHiddenMutations_ = function unobserveHiddenMutations_() {
      this.clearMutationObserver_();
      var mo = this.mutationObserver_;

      if (mo) {
        mo.disconnect();
      }
    }
    /**
     * Clears the mutation observer and its pass queue.
     */
    ;

    _proto.clearMutationObserver_ = function clearMutationObserver_() {
      this.updatePass_.cancel();
      var mo = this.mutationObserver_;

      if (mo) {
        mo.takeRecords();
      }
    }
    /**
     * @return {!MutationObserver}
     */
    ;

    _proto.initMutationObserver_ = function initMutationObserver_() {
      var _this3 = this;

      if (this.mutationObserver_) {
        return this.mutationObserver_;
      }

      var mo = new this.ampdoc.win.MutationObserver(function (mutations) {
        if (_this3.updatePass_.isPending()) {
          return;
        }

        for (var i = 0; i < mutations.length; i++) {
          var mutation = mutations[i];

          if (mutation.attributeName === 'hidden') {
            // Wait one animation frame so that other mutations may arrive.
            _this3.updatePass_.schedule(16);

            return;
          }
        }
      });
      return this.mutationObserver_ = mo;
    }
    /**
     * Updates the viewer's padding-top position and recalculates offsets of
     * all elements. The padding update can be transient, in which case the
     * UI itself is not updated leaving the blank space up top, which is invisible
     * due to scroll position. This mode saves significant resources. However,
     * eventhough layout is not updated, the fixed/sticky coordinates still need
     * to be recalculated.
     * @param {number} paddingTop
     * @param {boolean} opt_transient
     */
    ;

    _proto.updatePaddingTop = function updatePaddingTop(paddingTop, opt_transient) {
      this.paddingTop_ = paddingTop;

      if (!opt_transient) {
        this.committedPaddingTop_ = paddingTop;
      }

      this.update();
    }
    /**
     * Apply or reset transform style to fixed elements. The existing transition,
     * if any, is disabled when custom transform is supplied.
     * @param {?string} transform
     */
    ;

    _proto.transformMutate = function transformMutate(transform) {
      // Unfortunately, we can't do anything with sticky elements here. Updating
      // `top` in animation frames causes reflow on all platforms and we can't
      // determine whether an element is currently docked to apply transform.
      if (transform) {
        // Apply transform style to all fixed elements
        this.elements_.forEach(function (e) {
          if (e.fixedNow && e.top) {
            (0, _style.setStyle)(e.element, 'transition', 'none');

            if (e.transform && e.transform != 'none') {
              (0, _style.setStyle)(e.element, 'transform', e.transform + ' ' + transform);
            } else {
              (0, _style.setStyle)(e.element, 'transform', transform);
            }
          }
        });
      } else {
        // Reset transform style to all fixed elements
        this.elements_.forEach(function (e) {
          if (e.fixedNow && e.top) {
            (0, _style.setStyles)(e.element, {
              transform: '',
              transition: ''
            });
          }
        });
      }
    }
    /**
     * Adds the element directly into the fixed/sticky layer, bypassing discovery.
     * @param {!Element} element
     * @param {boolean=} opt_forceTransfer If set to true, then the element needs
     *    to be forcefully transferred to the transfer layer. If false, then it
     *    will only receive top-padding compensation for the header and never be
     *    transferred.
     * @return {!Promise}
     */
    ;

    _proto.addElement = function addElement(element, opt_forceTransfer) {
      this.setupElement_(element,
      /* selector */
      '*',
      /* position */
      'fixed', opt_forceTransfer);
      this.sortInDomOrder_(); // If this is the first element, we need to start the mutation observer.
      // This'll only be created once.

      this.observeHiddenMutations();
      return this.update();
    }
    /**
     * Removes the element from the fixed/sticky layer.
     * @param {!Element} element
     */
    ;

    _proto.removeElement = function removeElement(element) {
      var fes = this.tearDownElement_(element);
      this.returnFixedElements_(fes);
    }
    /**
     * Returns fixed elements from the transfer layer.
     * @param {!Array<ElementDef>} fes
     * @private
     */
    ;

    _proto.returnFixedElements_ = function returnFixedElements_(fes) {
      var _this4 = this;

      if (fes.length > 0 && this.transferLayer_) {
        this.vsync_.mutate(function () {
          for (var i = 0; i < fes.length; i++) {
            var fe = fes[i];

            if (fe.position == 'fixed') {
              _this4.transferLayer_.returnFrom(fe);
            }
          }
        });
      }
    }
    /**
     * Whether the element is declared as fixed in any of the user's stylesheets.
     * Will include any matches, not necessarily currently fixed elements.
     * @param {!Element} element
     * @return {boolean}
     */
    ;

    _proto.isDeclaredFixed = function isDeclaredFixed(element) {
      return !!element[DECLARED_FIXED_PROP];
    }
    /**
     * Whether the element is declared as sticky in any of the user's stylesheets.
     * Will include any matches, not necessarily currently sticky elements.
     * @param {!Element} element
     * @return {boolean}
     */
    ;

    _proto.isDeclaredSticky = function isDeclaredSticky(element) {
      return !!element[DECLARED_STICKY_PROP];
    }
    /**
     * Performs fixed/sticky actions.
     * 1. Updates `top` styling if necessary.
     * 2. On iOS/Iframe moves elements between fixed layer and BODY depending on
     * whether they are currently visible and fixed
     * @return {!Promise}
     */
    ;

    _proto.update = function update() {
      var _this5 = this;

      // Some of the elements may no longer be in DOM.

      /** @type {!Array<!ElementDef>} */
      var toRemove = this.elements_.filter(function (fe) {
        return !_this5.ampdoc.contains(fe.element);
      });
      toRemove.forEach(function (fe) {
        return _this5.tearDownElement_(fe.element);
      });

      if (this.elements_.length == 0) {
        return Promise.resolve();
      } // Clear out the mutation observer's queue since we're doing the work now.


      this.clearMutationObserver_(); // Next, the positioning-related properties will be measured. If a
      // potentially fixed/sticky element turns out to be actually fixed/sticky,
      // it will be decorated and possibly moved to a separate layer.

      var hasTransferables = false;
      return this.vsync_.runPromise({
        measure: function measure(state) {
          var elements = _this5.elements_;
          var autoTops = [];
          var win = _this5.ampdoc.win; // Notice that this code intentionally breaks vsync contract.
          // Unfortunately, there's no way to reliably test whether or not
          // `top` has been set to a non-auto value on all platforms. To work
          // this around, this code compares `style.top` values with a new
          // `style.bottom` value.
          // 1. Unset top from previous mutates and set bottom to an extremely
          // large value (to catch cases where sticky-tops are in a long way
          // down inside a scroller).

          for (var i = 0; i < elements.length; i++) {
            (0, _style.setImportantStyles)(elements[i].element, {
              top: '',
              bottom: '-9999vh',
              transition: 'none'
            });
          } // 2. Capture the `style.top` with this new `style.bottom` value. If
          // this element has a non-auto top, this value will remain constant
          // regardless of bottom.


          for (var _i = 0; _i < elements.length; _i++) {
            autoTops.push((0, _style.computedStyle)(win, elements[_i].element).top);
          } // 3. Cleanup the `style.bottom`.


          for (var _i2 = 0; _i2 < elements.length; _i2++) {
            (0, _style.setStyle)(elements[_i2].element, 'bottom', '');
          }

          for (var _i3 = 0; _i3 < elements.length; _i3++) {
            var fe = elements[_i3];
            var element = fe.element,
                forceTransfer = fe.forceTransfer;
            var style = (0, _style.computedStyle)(win, element);
            var offsetWidth = element.offsetWidth,
                offsetHeight = element.offsetHeight,
                offsetTop = element.offsetTop;
            var _style$position = style.position,
                position = _style$position === void 0 ? '' : _style$position,
                _style$display = style.display,
                display = _style$display === void 0 ? '' : _style$display,
                bottom = style.bottom,
                zIndex = style.zIndex;
            var opacity = parseFloat(style.opacity);
            var transform = style[(0, _style.getVendorJsPropertyName)(style, 'transform')];
            var top = style.top;
            var isFixed = position === 'fixed' && (forceTransfer || offsetWidth > 0 && offsetHeight > 0);
            var isSticky = (0, _string.endsWith)(position, 'sticky');
            var isDisplayed = display !== 'none';

            if (!isDisplayed || !(isFixed || isSticky)) {
              state[fe.id] = {
                fixed: false,
                sticky: false,
                transferrable: false,
                top: '',
                zIndex: ''
              };
              continue;
            }

            if (top === 'auto' || autoTops[_i3] !== top) {
              if (isFixed && offsetTop === _this5.committedPaddingTop_ + _this5.borderTop_) {
                top = '0px';
              } else {
                top = '';
              }
            } // Transferability requires an element to be:
            // 1. Greater than 0% opacity. That's a lot of work for no benefit.
            //    Additionally, transparent elements used for "service" needs and
            //    thus best kept in the original tree. The visibility, however,
            //    is not considered because `visibility` CSS is inherited.
            // 2. Height < 300. This avoids transferring large sections of UI,
            //    e.g. publisher-customized amp-consent UI (#17995).
            // 3. Has `top` or `bottom` CSS set. This ensures we only transfer
            //    fixed elements that are _not_ auto-positioned to avoid jumping
            //    position after transferring to the fixed layer (due to loss of
            //    parent positioning context). We could calculate this offset, but
            //    we don't (yet).


            var isTransferrable = false;

            if (isFixed) {
              if (forceTransfer === true) {
                isTransferrable = true;
              } else if (forceTransfer === false) {
                isTransferrable = false;
              } else {
                isTransferrable = opacity > 0 && offsetHeight < 300 && !!(top || bottom);
              }
            }

            if (isTransferrable) {
              hasTransferables = true;
            }

            state[fe.id] = {
              fixed: isFixed,
              sticky: isSticky,
              transferrable: isTransferrable,
              top: top,
              zIndex: zIndex,
              transform: transform
            };
          }
        },
        mutate: function mutate(state) {
          if (hasTransferables && _this5.transfer_) {
            _this5.getTransferLayer_().update();
          }

          var elements = _this5.elements_;

          for (var i = 0; i < elements.length; i++) {
            var fe = elements[i];
            var feState = state[fe.id]; // Fix a bug with Safari. For some reason, you cannot unset
            // transition when it's important. You can, however, set it to a valid
            // non-important value, then unset it.

            (0, _style.setStyle)(fe.element, 'transition', 'none'); // Note: This MUST be done after measurements are taken.
            // Transitions will mess up everything and, depending on when paints
            // happen, mutates of transition and bottom at the same time may be
            // make the transition active.

            (0, _style.setStyle)(fe.element, 'transition', '');

            if (feState) {
              _this5.mutateElement_(fe, i, feState);
            }
          }
        }
      }, {}).catch(function (error) {
        // Fail silently.
        (0, _log.dev)().error(TAG, 'Failed to mutate fixed elements:', error);
      });
    }
    /**
     * Calls `setupSelectors_` in a try-catch.
     * Fails quietly with a dev error if call fails.
     * This method should not be inlined to prevent TryCatch deoptimization.
     * NoInline keyword at the end of function name also prevents Closure compiler
     * from inlining the function.
     * @param {!Node} root
     * @param {boolean=} opt_lightboxMode
     * @private
     */
    ;

    _proto.trySetupSelectorsNoInline = function trySetupSelectorsNoInline(root, opt_lightboxMode) {
      try {
        this.setupSelectors_(root, opt_lightboxMode);
      } catch (e) {
        // Fail quietly.
        (0, _log.dev)().error(TAG, 'Failed to setup fixed elements:', e);
      }
    }
    /**
     * Calls `setupElement_` for up to 10 elements matching each selector
     * in `fixedSelectors` and for all selectors in `stickySelectors`.
     * @param {!Node} root
     * @param {boolean=} opt_lightboxMode
     * @private
     */
    ;

    _proto.setupSelectors_ = function setupSelectors_(root, opt_lightboxMode) {
      for (var i = 0; i < this.fixedSelectors_.length; i++) {
        var fixedSelector = this.fixedSelectors_[i];
        var elements = root.querySelectorAll(fixedSelector);

        for (var j = 0; j < elements.length; j++) {
          if (this.elements_.length > 10) {
            // We shouldn't have too many of `fixed` elements.
            break;
          }

          this.setupElement_(elements[j], fixedSelector, 'fixed',
          /* opt_forceTransfer */
          undefined, opt_lightboxMode);
        }
      }

      for (var _i4 = 0; _i4 < this.stickySelectors_.length; _i4++) {
        var stickySelector = this.stickySelectors_[_i4];

        var _elements = root.querySelectorAll(stickySelector);

        for (var _j = 0; _j < _elements.length; _j++) {
          this.setupElement_(_elements[_j], stickySelector, 'sticky',
          /* opt_forceTransfer */
          undefined, opt_lightboxMode);
        }
      }
    }
    /**
     * If the given element has a `style` attribute with a top/bottom CSS rule,
     * display a user error. FixedLayer's implementation currently overrides
     * top, bottom and a few other CSS rules.
     * @param {!Element} element
     * @private
     */
    ;

    _proto.warnAboutInlineStylesIfNecessary_ = function warnAboutInlineStylesIfNecessary_(element) {
      if (element.hasAttribute('style') && ((0, _style.getStyle)(element, 'top') || (0, _style.getStyle)(element, 'bottom'))) {
        (0, _log.user)().error(TAG, 'Inline styles with `top`, `bottom` and other ' + 'CSS rules are not supported yet for fixed or sticky elements ' + '(#14186). Unexpected behavior may occur.', element);
      }
    }
    /**
     * This method records the potentially fixed or sticky element. One of a more
     * critical functions - it records all selectors that may apply "fixed"
     * or "sticky" to this element to check them later.
     *
     * @param {!Element} element
     * @param {string} selector
     * @param {string} position
     * @param {boolean=} opt_forceTransfer If true, then the element will
     *    be forcibly transferred to the transfer layer.
     * @param {boolean=} opt_lightboxMode If true, then descendants of lightboxes
     *    are allowed to be set up. Default is false.
     * @private
     */
    ;

    _proto.setupElement_ = function setupElement_(element, selector, position, opt_forceTransfer, opt_lightboxMode) {
      // Warn that pub-authored inline styles may be overriden by FixedLayer.
      this.warnAboutInlineStylesIfNecessary_(element); // Ignore lightboxes because FixedLayer can interfere with their
      // opening/closing animations (#19149).

      if (isLightbox(element)) {
        return;
      }

      var isLightboxDescendant = (0, _dom.closest)(element, isLightbox);

      if (!opt_lightboxMode && isLightboxDescendant) {
        return;
      }

      var fe = null;

      for (var i = 0; i < this.elements_.length; i++) {
        var el = this.elements_[i];

        if (el.element == element && el.position == position) {
          fe = el;
          break;
        }
      }

      var isFixed = position == 'fixed';

      if (fe) {
        if (!fe.selectors.includes(selector)) {
          // Already seen.
          fe.selectors.push(selector);
        }
      } else {
        // A new entry.
        var id = 'F' + this.counter_++;
        element.setAttribute('i-amphtml-fixedid', id);

        if (isFixed) {
          element[DECLARED_FIXED_PROP] = true;
        } else {
          element[DECLARED_STICKY_PROP] = true;
        }

        fe = {
          id: id,
          element: element,
          position: position,
          selectors: [selector],
          fixedNow: false,
          stickyNow: false,
          lightboxed: !!isLightboxDescendant
        };
        this.elements_.push(fe);
      }

      fe.forceTransfer = isFixed ? opt_forceTransfer : false;
    }
    /**
     * Undoes set up by removing element record and and resets `top` style.
     * Does _not_ return the element from the transfer layer.
     *
     * @param {!Element} element
     * @return {!Array<!ElementDef>}
     * @private
     */
    ;

    _proto.tearDownElement_ = function tearDownElement_(element) {
      var removed = [];

      for (var i = 0; i < this.elements_.length; i++) {
        var fe = this.elements_[i];

        if (fe.element === element) {
          if (!fe.lightboxed) {
            this.vsync_.mutate(function () {
              (0, _style.setStyle)(element, 'top', '');
            });
          }

          this.elements_.splice(i, 1);
          removed.push(fe);
        }
      }

      if (!this.elements_.length) {
        this.unobserveHiddenMutations_();
      }

      return removed;
    }
    /**
     * @private
     */
    ;

    _proto.sortInDomOrder_ = function sortInDomOrder_() {
      this.elements_.sort(function (fe1, fe2) {
        return (0, _dom.domOrderComparator)(fe1.element, fe2.element);
      });
    }
    /**
     * Mutates the fixed/sticky element. At this point it's determined that the
     * element is indeed fixed/sticky. There are two main functions here:
     *  1. `top` has to be updated to reflect viewer's paddingTop.
     *  2. The element may need to be transfered to the separate fixed layer.
     *
     * @param {!ElementDef} fe
     * @param {number} index
     * @param {!ElementStateDef} state
     * @private
     */
    ;

    _proto.mutateElement_ = function mutateElement_(fe, index, state) {
      var element = fe.element,
          oldFixed = fe.fixedNow;
      fe.fixedNow = state.fixed;
      fe.stickyNow = state.sticky;
      fe.top = state.fixed || state.sticky ? state.top : '';
      fe.transform = state.transform; // Move back to the BODY layer and reset transfer z-index.

      if (oldFixed && (!state.fixed || !state.transferrable) && this.transferLayer_) {
        this.transferLayer_.returnFrom(fe);
      } // Update `top` to adjust position to the viewer's paddingTop. However,
      // ignore lightboxed elements since lightboxes ignore the viewer header.


      if (state.top && (state.fixed || state.sticky) && !fe.lightboxed) {
        if (state.fixed || !this.transfer_) {
          // Fixed positions always need top offsetting, as well as stickies on
          // non iOS Safari.
          (0, _style.setStyle)(element, 'top', "calc(" + state.top + " + " + this.paddingTop_ + "px)");
        } else {
          // On iOS Safari (this.transfer_ = true), stickies cannot
          // have an offset because they are already offset by the padding-top.
          if (this.committedPaddingTop_ === this.paddingTop_) {
            // So, when the header is shown, just use top.
            (0, _style.setStyle)(element, 'top', state.top);
          } else {
            // When the header is not shown, we need to subtract the padding top.
            (0, _style.setStyle)(element, 'top', "calc(" + state.top + " - " + this.committedPaddingTop_ + "px)");
          }
        }
      } // Move element to the fixed layer.


      if (this.transfer_ && state.fixed && state.transferrable) {
        this.getTransferLayer_().transferTo(fe, index, state);
      }
    }
    /**
     * @return {?TransferLayerDef}
     */
    ;

    _proto.getTransferLayer_ = function getTransferLayer_() {
      // This mode is only allowed for a single-doc case.
      if (!this.transfer_ || this.transferLayer_) {
        return this.transferLayer_;
      }

      var doc = this.ampdoc.win.document;
      this.transferLayer_ = doc.body.shadowRoot ? new TransferLayerShadow(doc, this.vsync_) : new TransferLayerBody(doc, this.vsync_);
      return this.transferLayer_;
    }
    /**
     * Find all `position:fixed` and `position:sticky` elements.
     * @param {!Array<CSSRule>} rules
     * @private
     */
    ;

    _proto.discoverSelectors_ = function discoverSelectors_(rules) {
      for (var i = 0; i < rules.length; i++) {
        var rule = rules[i];

        if (rule.type ==
        /* CSSMediaRule */
        4 || rule.type ==
        /* CSSSupportsRule */
        12) {
          this.discoverSelectors_(rule.cssRules);
          continue;
        }

        if (rule.type ==
        /* CSSStyleRule */
        1) {
          var selectorText = rule.selectorText;
          var position = rule.style.position;

          if (selectorText === '*' || !position) {
            continue;
          }

          if (position === 'fixed') {
            this.fixedSelectors_.push(selectorText);
          } else if ((0, _string.endsWith)(position, 'sticky')) {
            this.stickySelectors_.push(selectorText);
          }
        }
      }
    };

    return FixedLayer;
  }();
  /**
   * @typedef {{
   *   id: string,
   *   selectors: !Array,
   *   element: !Element,
   *   position: string,
   *   placeholder: (?Element|undefined),
   *   fixedNow: boolean,
   *   stickyNow: boolean,
   *   top: (string|undefined),
   *   transform: (string|undefined),
   *   forceTransfer: (boolean|undefined),
   *   lightboxed: (boolean|undefined),
   * }}
   */


  exports.FixedLayer = FixedLayer;
  var ElementDef;
  /**
   * @typedef {{
   *   fixed: boolean,
   *   sticky: boolean,
   *   transferrable: boolean,
   *   top: string,
   *   zIndex: string,
   * }}
   */

  var ElementStateDef;
  /**
   * The contract for transfer layer.
   * @interface
   */

  var TransferLayerDef =
  /*#__PURE__*/
  function () {
    function TransferLayerDef() {}

    var _proto2 = TransferLayerDef.prototype;

    /**
     * @return {!Element}
     */
    _proto2.getRoot = function getRoot() {}
    /**
     * Update most current styles for the transfer layer.
     */
    ;

    _proto2.update = function update() {}
    /**
     * Toggles internal state after entering or leaving lightbox mode.
     * @param {boolean} unusedOn
     */
    ;

    _proto2.setLightboxMode = function setLightboxMode(unusedOn) {}
    /**
     * Transfer the element from the body into the transfer layer.
     * @param {!ElementDef} unusedFe
     * @param {number} unusedIndex
     * @param {!ElementStateDef} unusedState
     */
    ;

    _proto2.transferTo = function transferTo(unusedFe, unusedIndex, unusedState) {}
    /**
     * Return the element from the transfer layer back to the body.
     * @param {!ElementDef} unusedFe
     */
    ;

    _proto2.returnFrom = function returnFrom(unusedFe) {};

    return TransferLayerDef;
  }();
  /**
   * The parallel `<body>` element is created and fixed elements are moved into
   * this element.
   * @implements {TransferLayerDef}
   */


  var TransferLayerBody =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Document} doc
     * @param {!./vsync-impl.Vsync} vsync
     */
    function TransferLayerBody(doc, vsync) {
      /** @private @const {!Document} */
      this.doc_ = doc;
      /** @private @const {!./vsync-impl.Vsync} */

      this.vsync_ = vsync;
      /** @private @const {boolean} */

      this.isLightboxExperimentOn_ = (0, _experiments.isExperimentOn)((0, _types.toWin)(doc.defaultView), 'fixed-elements-in-lightbox');
      /** @private @const {!Element} */

      this.layer_ = doc.body.cloneNode(
      /* deep */
      false);
      this.layer_.removeAttribute('style');
      var styles = {
        position: 'absolute',
        top: 0,
        left: 0,
        height: 0,
        width: 0,
        pointerEvents: 'none',
        overflow: 'hidden',
        // Reset possible BODY styles.
        animation: 'none',
        background: 'none',
        border: 'none',
        borderImage: 'none',
        boxSizing: 'border-box',
        boxShadow: 'none',
        float: 'none',
        margin: 0,
        opacity: 1,
        outline: 'none',
        padding: 'none',
        transform: 'none',
        transition: 'none',
        visibility: 'visible'
      }; // This experiment uses a CSS rule for toggling transfer layer visibility,
      // which has lower specificity than an inline style.

      if (this.isLightboxExperimentOn_) {
        delete styles.visibility;
      }

      (0, _style.setStyles)(this.layer_, (0, _style.assertDoesNotContainDisplay)(styles));
      (0, _style.setInitialDisplay)(this.layer_, 'block');
      doc.documentElement.appendChild(this.layer_);
    }
    /** @override */


    var _proto3 = TransferLayerBody.prototype;

    _proto3.getRoot = function getRoot() {
      return this.layer_;
    }
    /** @override */
    ;

    _proto3.setLightboxMode = function setLightboxMode(on) {
      var _this6 = this;

      this.vsync_.mutate(function () {
        var root = _this6.getRoot();

        if (_this6.isLightboxExperimentOn_) {
          if (on) {
            root.setAttribute(LIGHTBOX_MODE_ATTR, '');
          } else {
            root.removeAttribute(LIGHTBOX_MODE_ATTR);
          }
        } else {
          // Legacy behavior is to hide transfer layer when entering lightbox
          // and unhide when exiting.
          (0, _style.setStyle)(root, 'visibility', on ? 'hidden' : 'visible');
        }
      });
    }
    /**
     * Synchronizes any attribute mutations done on the real body to the layer.
     * This is to better simulate the body in CSS selectors.
     * @override
     */
    ;

    _proto3.update = function update() {
      var body = this.doc_.body;
      var layer = this.layer_;
      var bodyAttrs = body.attributes;
      var layerAttrs = layer.attributes;

      for (var i = 0; i < bodyAttrs.length; i++) {
        var attr = bodyAttrs[i]; // Style is not copied because the fixed-layer must have very precise
        // styles to enable smooth scrolling.

        if (attr.name === 'style') {
          continue;
        } // Use cloneNode to get around invalid attribute names. Ahem, amp-bind.


        layerAttrs.setNamedItem(attr.cloneNode(false));
      }

      for (var _i5 = 0; _i5 < layerAttrs.length; _i5++) {
        var name = layerAttrs[_i5].name;

        if (name === 'style' || name === LIGHTBOX_MODE_ATTR || body.hasAttribute(name)) {
          continue;
        }

        layer.removeAttribute(name);
        _i5--;
      }
    }
    /** @override */
    ;

    _proto3.transferTo = function transferTo(fe, index, state) {
      var _this7 = this;

      var element = fe.element;

      if (element.parentElement == this.layer_) {
        return;
      }

      (0, _log.dev)().fine(TAG, 'transfer to fixed:', fe.id, fe.element);
      (0, _log.user)().warn(TAG, 'In order to improve scrolling performance in Safari,' + ' we now move the element to a fixed positioning layer:', fe.element);

      if (!fe.placeholder) {
        // Never been transfered before: ensure that it's properly configured.
        (0, _style.setStyle)(element, 'pointer-events', 'initial');
        var placeholder = fe.placeholder = this.doc_.createElement('i-amphtml-fpa');
        (0, _style.toggle)(placeholder, false);
        placeholder.setAttribute('i-amphtml-fixedid', fe.id);
      } // Calculate z-index based on the declared z-index and DOM position.


      (0, _style.setStyle)(element, 'zIndex', "calc(" + (10000 + index) + " + " + (state.zIndex || 0) + ")"); // Identify lightboxed elements so they can be visible when the transfer
      // layer is "hidden", and hidden with the transfer layer is "visible".

      if (fe.lightboxed) {
        element.classList.add(LIGHTBOX_ELEMENT_CLASS);
      }

      element.parentElement.replaceChild(fe.placeholder, element);
      this.layer_.appendChild(element); // Test if the element still matches one of the `fixed` selectors. If not
      // return it back to BODY.

      var matches = fe.selectors.some(function (selector) {
        return _this7.matches_(element, selector);
      });

      if (!matches) {
        (0, _log.user)().warn(TAG, 'Failed to move the element to the fixed position layer.' + ' This is most likely due to the compound CSS selector:', fe.element);
        this.returnFrom(fe);
      }
    }
    /** @override */
    ;

    _proto3.returnFrom = function returnFrom(fe) {
      if (!fe.placeholder || !this.doc_.contains(fe.placeholder)) {
        return;
      }

      var element = fe.element,
          placeholder = fe.placeholder;
      (0, _log.dev)().fine(TAG, 'return from fixed:', fe.id, element);

      if (fe.lightboxed) {
        element.classList.remove(LIGHTBOX_ELEMENT_CLASS);
      }

      if (this.doc_.contains(element)) {
        (0, _style.setStyle)(fe.element, 'zIndex', '');
        placeholder.parentElement.replaceChild(element, placeholder);
      } else {
        placeholder.parentElement.removeChild(placeholder);
      }
    }
    /**
     * @param {!Element} element
     * @param {string} selector
     * @return {boolean}
     * @private
     */
    ;

    _proto3.matches_ = function matches_(element, selector) {
      try {
        return (0, _dom.matches)(element, selector);
      } catch (e) {
        // Fail silently.
        (0, _log.dev)().error(TAG, 'Failed to test query match:', e);
        return false;
      }
    };

    return TransferLayerBody;
  }();

  var FIXED_LAYER_SLOT = 'i-amphtml-fixed';
  /**
   * The fixed layer is created inside the shadow root of the `<body>` element
   * and fixed elements are distributed into this element via slots.
   * @implements {TransferLayerDef}
   */

  var TransferLayerShadow =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Document} doc
     * @param {!./vsync-impl.Vsync} vsync
     */
    function TransferLayerShadow(doc, vsync) {
      /** @private @const {!./vsync-impl.Vsync} */
      this.vsync_ = vsync;
      /** @private @const {!Element} */

      this.layer_ = doc.createElement('div');
      this.layer_.id = 'i-amphtml-fixed-layer';
      (0, _style.setImportantStyles)(this.layer_, {
        position: 'absolute',
        top: 0,
        left: 0,
        height: 0,
        width: 0,
        overflow: 'hidden'
      }); // The slot where all fixed elements will be distributed.

      var slot = doc.createElement('slot');
      slot.setAttribute('name', FIXED_LAYER_SLOT);
      this.layer_.appendChild(slot);
      doc.body.shadowRoot.appendChild(this.layer_);
    }
    /** @override */


    var _proto4 = TransferLayerShadow.prototype;

    _proto4.getRoot = function getRoot() {
      return this.layer_;
    }
    /** @override */
    ;

    _proto4.setLightboxMode = function setLightboxMode(on) {
      var _this8 = this;

      this.vsync_.mutate(function () {
        (0, _style.setStyle)(_this8.getRoot(), 'visibility', on ? 'hidden' : 'visible');
      });
    }
    /** @override */
    ;

    _proto4.update = function update() {} // Nothing to do.

    /** @override */
    ;

    _proto4.transferTo = function transferTo(fe) {
      var element = fe.element;
      (0, _log.dev)().fine(TAG, 'transfer to fixed:', fe.id, fe.element);
      (0, _log.user)().warn(TAG, 'In order to improve scrolling performance in Safari,' + ' we now move the element to a fixed positioning layer:', fe.element); // Distribute to the slot.

      element.setAttribute('slot', FIXED_LAYER_SLOT);
    }
    /** @override */
    ;

    _proto4.returnFrom = function returnFrom(fe) {
      (0, _log.dev)().fine(TAG, 'return from fixed:', fe.id, fe.element);
      fe.element.removeAttribute('slot');
    };

    return TransferLayerShadow;
  }();

  },{"../dom":26,"../experiments":32,"../log":51,"../pass":55,"../services":112,"../string":116,"../style":118,"../types":121,"../utils/array":125}],85:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installHistoryServiceForDoc = installHistoryServiceForDoc;
  exports.HistoryBindingVirtual_ = exports.HistoryBindingNatural_ = exports.History = void 0;

  var _promise = require("../utils/promise");

  var _services = require("../services");

  var _log = require("../log");

  var _object = require("../utils/object");

  var _mode = require("../mode");

  var _service = require("../service");

  var _history = require("../history");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @private @const {string} */
  var TAG_ = 'History';
  /** @private @const {string} */

  var HISTORY_PROP_ = 'AMP.History';
  /** @typedef {number} */

  var HistoryIdDef;
  /**
   * @typedef {{stackIndex: HistoryIdDef, title: string, fragment: string, data: (!JsonObject|undefined)}}
   */

  var HistoryStateDef;
  /**
   * @typedef {{title: (string|undefined), fragment: (string|undefined), url: (string|undefined), canonicalUrl: (string|undefined), data: (!JsonObject|undefined)}}
   */

  var HistoryStateUpdateDef;
  /**
   * Wraps the browser's History API for viewer support and necessary polyfills.
   */

  var History =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {!HistoryBindingInterface} binding
     */
    function History(ampdoc, binding) {
      /** @private @const {!./ampdoc-impl.AmpDoc} */
      this.ampdoc_ = ampdoc;
      /** @private @const {!../service/timer-impl.Timer} */

      this.timer_ = _services.Services.timerFor(ampdoc.win);
      /** @private @const {!HistoryBindingInterface} */

      this.binding_ = binding;
      /** @private {number} */

      this.stackIndex_ = 0;
      /** @private {!Array<!Function|undefined>} */

      this.stackOnPop_ = [];
      /**
       * @private {!Array<!{
       *   callback: function():!Promise,
       *   resolve: !Function,
       *   reject: !Function,
       *   trace: (!Error|undefined)
       * }>} */

      this.queue_ = [];
      this.binding_.setOnStateUpdated(this.onStateUpdated_.bind(this));
    }
    /** @visibleForTesting */


    var _proto = History.prototype;

    _proto.cleanup = function cleanup() {
      this.binding_.cleanup();
    }
    /**
     * Pushes new state into history stack with an optional callback to be called
     * when this state is popped as well as an object with updates to be applied
     * to the state.
     * @param {!Function=} opt_onPop
     * @param {!HistoryStateUpdateDef=} opt_stateUpdate
     * @return {!Promise<!HistoryIdDef>}
     */
    ;

    _proto.push = function push(opt_onPop, opt_stateUpdate) {
      var _this = this;

      return this.enque_(function () {
        return _this.binding_.push(opt_stateUpdate).then(function (historyState) {
          _this.onStateUpdated_(historyState);

          if (opt_onPop) {
            _this.stackOnPop_[historyState.stackIndex] = opt_onPop;
          }

          return historyState.stackIndex;
        });
      }, 'push');
    }
    /**
     * Pops a previously pushed state from the history stack. If onPop callback
     * has been registered, it will be called with the state that was associated
     * with the new head state within the history stack. All states coming
     * after the supplied state will also be popped, and their
     * callbacks executed in the same fashion.
     * @param {!HistoryIdDef} stateId
     * @return {!Promise}
     */
    ;

    _proto.pop = function pop(stateId) {
      var _this2 = this;

      return this.enque_(function () {
        return _this2.binding_.pop(stateId).then(function (historyState) {
          _this2.onStateUpdated_(historyState);
        });
      }, 'pop');
    }
    /**
     * Replaces the current state, optionally specifying updates to the state
     * object to be associated with the replacement.
     * @param {!HistoryStateUpdateDef=} opt_stateUpdate
     * @return {!Promise}
     */
    ;

    _proto.replace = function replace(opt_stateUpdate) {
      var _this3 = this;

      return this.enque_(function () {
        return _this3.binding_.replace(opt_stateUpdate);
      }, 'replace');
    }
    /**
     * Retrieves the current state, containing the current fragment, title,
     * and amp-bind state.
     * @return {!Promise<!HistoryStateDef>}
     */
    ;

    _proto.get = function get() {
      var _this4 = this;

      return this.enque_(function () {
        return _this4.binding_.get();
      }, 'get');
    }
    /**
     * Requests navigation one step back. This request is only satisifed
     * when the history has at least one step to go back in the context
     * of this document.
     * @return {!Promise}
     */
    ;

    _proto.goBack = function goBack() {
      var _this5 = this;

      return this.enque_(function () {
        if (_this5.stackIndex_ <= 0) {
          // Nothing left to pop.
          return Promise.resolve();
        } // Pop the current state. The binding will ignore the request if
        // it cannot satisfy it.


        return _this5.binding_.pop(_this5.stackIndex_).then(function (historyState) {
          _this5.onStateUpdated_(historyState);
        });
      }, 'goBack');
    }
    /**
     * Helper method to handle navigation to a local target, e.g. When a user
     * clicks an anchor link to a local hash - <a href="#section1">Go to section
     * 1</a>.
     *
     * @param {string} target
     * @return {!Promise}
     */
    ;

    _proto.replaceStateForTarget = function replaceStateForTarget(target) {
      var _this6 = this;

      (0, _log.devAssert)(target[0] == '#', 'target should start with a #');
      var previousHash = this.ampdoc_.win.location.hash;
      return this.push(function () {
        _this6.ampdoc_.win.location.replace(previousHash || '#');
      }).then(function () {
        _this6.binding_.replaceStateForTarget(target);
      });
    }
    /**
     * Get the fragment from the url or the viewer.
     * Strip leading '#' in the fragment
     * @return {!Promise<string>}
     */
    ;

    _proto.getFragment = function getFragment() {
      return this.binding_.getFragment();
    }
    /**
     * Update the page url fragment
     * @param {string} fragment
     * @return {!Promise}
     */
    ;

    _proto.updateFragment = function updateFragment(fragment) {
      if (fragment[0] == '#') {
        fragment = fragment.substr(1);
      }

      return this.binding_.updateFragment(fragment);
    }
    /**
     * @param {!HistoryStateDef} historyState
     * @private
     */
    ;

    _proto.onStateUpdated_ = function onStateUpdated_(historyState) {
      this.stackIndex_ = historyState.stackIndex;
      this.doPop_(historyState);
    }
    /**
     * @param {!HistoryStateDef} historyState
     * @private
     */
    ;

    _proto.doPop_ = function doPop_(historyState) {
      var _this7 = this;

      if (this.stackIndex_ >= this.stackOnPop_.length - 1) {
        return;
      }

      var toPop = [];

      for (var i = this.stackOnPop_.length - 1; i > this.stackIndex_; i--) {
        if (this.stackOnPop_[i]) {
          toPop.push(this.stackOnPop_[i]);
          this.stackOnPop_[i] = undefined;
        }
      }

      this.stackOnPop_.splice(this.stackIndex_ + 1);

      if (toPop.length > 0) {
        var _loop = function _loop(_i) {
          // With the same delay timeouts must observe the order, although
          // there's no hard requirement in this case to follow the pop order.
          _this7.timer_.delay(function () {
            return toPop[_i](historyState);
          }, 1);
        };

        for (var _i = 0; _i < toPop.length; _i++) {
          _loop(_i);
        }
      }
    }
    /**
     * @param {function():!Promise<RESULT>} callback
     * @param {string} name
     * @return {!Promise<RESULT>}
     * @template RESULT
     * @private
     */
    ;

    _proto.enque_ = function enque_(callback, name) {
      var deferred = new _promise.Deferred();
      var promise = deferred.promise,
          resolve = deferred.resolve,
          reject = deferred.reject; // TODO(dvoytenko, #8785): cleanup after tracing.

      var trace = new Error('history trace for ' + name + ': ');
      this.queue_.push({
        callback: callback,
        resolve: resolve,
        reject: reject,
        trace: trace
      });

      if (this.queue_.length == 1) {
        this.deque_();
      }

      return promise;
    }
    /**
     * @private
     */
    ;

    _proto.deque_ = function deque_() {
      var _this8 = this;

      if (this.queue_.length == 0) {
        return;
      }

      var task = this.queue_[0];
      var promise;

      try {
        promise = task.callback();
      } catch (e) {
        promise = Promise.reject(e);
      }

      promise.then(function (result) {
        task.resolve(result);
      }, function (reason) {
        (0, _log.dev)().error(TAG_, 'failed to execute a task:', reason); // TODO(dvoytenko, #8785): cleanup after tracing.

        if (task.trace) {
          task.trace.message += reason;
          (0, _log.dev)().error(TAG_, task.trace);
        }

        task.reject(reason);
      }).then(function () {
        _this8.queue_.splice(0, 1);

        _this8.deque_();
      });
    };

    return History;
  }();
  /**
   * HistoryBindingInterface is an interface that defines an underlying technology
   * behind the {@link History}.
   * @interface
   */


  exports.History = History;

  var HistoryBindingInterface =
  /*#__PURE__*/
  function () {
    function HistoryBindingInterface() {}

    var _proto2 = HistoryBindingInterface.prototype;

    /** @protected */
    _proto2.cleanup = function cleanup() {}
    /**
     * Configures a callback to be called when the state has been updated.
     * @param {function(!HistoryStateDef)} unusedCallback
     * @protected
     */
    ;

    _proto2.setOnStateUpdated = function setOnStateUpdated(unusedCallback) {}
    /**
     * Pushes a new state onto the history stack, optionally specifying the state
     * object associated with the current state.
     * Returns a promise that yields the new state.
     * @param {!HistoryStateUpdateDef=} opt_stateUpdate
     * @return {!Promise<!HistoryStateDef>}
     */
    ;

    _proto2.push = function push(opt_stateUpdate) {}
    /**
     * Pops a previously pushed state from the history stack. All history
     * states coming after this state will also be popped.
     * Returns a promise that yields the new state.
     * @param {number} unusedStackIndex
     * @return {!Promise<!HistoryStateDef>}
     */
    ;

    _proto2.pop = function pop(unusedStackIndex) {}
    /**
     * Replaces the current state, optionally specifying updates to the state
     * object to be associated with the replacement.
     * Returns a promise that yields the new state.
     * @param {!HistoryStateUpdateDef=} opt_stateUpdate
     * @return {!Promise<!HistoryStateDef>}
     */
    ;

    _proto2.replace = function replace(opt_stateUpdate) {}
    /**
     * Retrieves the current state, containing the current fragment, title,
     * and amp-bind state.
     * @return {!Promise<!HistoryStateDef>}
     */
    ;

    _proto2.get = function get() {}
    /**
     * Replaces the state for local target navigation.
     * @param {string} unusedTarget
     */
    ;

    _proto2.replaceStateForTarget = function replaceStateForTarget(unusedTarget) {}
    /**
     * Get the fragment from the url or the viewer.
     * Strip leading '#' in the fragment
     * @return {!Promise<string>}
     */
    ;

    _proto2.getFragment = function getFragment() {}
    /**
     * Update the page url fragment
     * @param {string} unusedFragment
     * @return {!Promise}
     */
    ;

    _proto2.updateFragment = function updateFragment(unusedFragment) {};

    return HistoryBindingInterface;
  }();
  /**
   * Implementation of HistoryBindingInterface based on the native window. It uses
   * window.history properties and events.
   *
   * Visible for testing.
   *
   * @implements {HistoryBindingInterface}
   */


  var HistoryBindingNatural_ =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function HistoryBindingNatural_(win) {
      var _this9 = this;

      /** @const {!Window} */
      this.win = win;
      /** @private @const {!../service/timer-impl.Timer} */

      this.timer_ = _services.Services.timerFor(win);
      var history = this.win.history;
      /** @private {number} */

      this.startIndex_ = history.length - 1;
      var state = (0, _history.getState)(history);

      if (state && state[HISTORY_PROP_] !== undefined) {
        this.startIndex_ = Math.min(state[HISTORY_PROP_], this.startIndex_);
      }
      /** @private {number} */


      this.stackIndex_ = this.startIndex_;
      /**
       * @private {{promise: !Promise, resolve: !Function,
       *   reject: !Function}|undefined}
       */

      this.waitingState_;
      /** @private {?function(!HistoryStateDef)} */

      this.onStateUpdated_ = null; // A number of browsers do not support history.state. In this cases,
      // History will track its own version. See unsupportedState_.

      /** @private {boolean} @const */

      this.supportsState_ = 'state' in history;
      /** @private {*} */

      this.unsupportedState_ = this.historyState_(this.stackIndex_); // There are still browsers who do not support push/replaceState.

      var pushState, replaceState;

      if (history.pushState && history.replaceState) {
        /** @private @const {function(*, string=, string=)|undefined} */
        this.origPushState_ = history.originalPushState || history.pushState.bind(history);
        /** @private @const {function(*, string=, string=)|undefined} */

        this.origReplaceState_ = history.originalReplaceState || history.replaceState.bind(history);

        pushState = function pushState(state, opt_title, opt_url) {
          _this9.unsupportedState_ = state;

          _this9.origPushState_(state, opt_title, // A bug in edge causes paths to become undefined if URL is
          // undefined, filed here: https://goo.gl/KlImZu
          opt_url || null);
        };

        replaceState = function replaceState(state, opt_title, opt_url) {
          _this9.unsupportedState_ = state; // NOTE: check for `undefined` since IE11 and Edge
          // unexpectedly coerces it into a `string`.

          if (opt_url !== undefined) {
            _this9.origReplaceState_(state, opt_title, opt_url);
          } else {
            _this9.origReplaceState_(state, opt_title);
          }
        };

        if (!history.originalPushState) {
          history.originalPushState = this.origPushState_;
        }

        if (!history.originalReplaceState) {
          history.originalReplaceState = this.origReplaceState_;
        }
      } else {
        pushState = function pushState(state, opt_title, opt_url) {
          _this9.unsupportedState_ = state;
        };

        replaceState = function replaceState(state, opt_title, opt_url) {
          _this9.unsupportedState_ = state;
        };
      }
      /** @private @const {!Function} */


      this.pushState_ = pushState;
      /** @private @const {!Function} */

      this.replaceState_ = replaceState;

      try {
        this.replaceState_(this.historyState_(this.stackIndex_,
        /* replace */
        true));
      } catch (e) {
        (0, _log.dev)().error(TAG_, 'Initial replaceState failed: ' + e.message);
      }

      history.pushState = this.historyPushState_.bind(this);
      history.replaceState = this.historyReplaceState_.bind(this);

      this.popstateHandler_ = function (e) {
        var state =
        /** @type {!JsonObject} */

        /** @type {!PopStateEvent} */
        e.state;
        (0, _log.dev)().fine(TAG_, 'popstate event: ' + _this9.win.history.length + ', ' + JSON.stringify(state));

        _this9.onHistoryEvent_();
      };

      this.win.addEventListener('popstate', this.popstateHandler_);
    }
    /** @override */


    var _proto3 = HistoryBindingNatural_.prototype;

    _proto3.cleanup = function cleanup() {
      if (this.origPushState_) {
        this.win.history.pushState = this.origPushState_;
      }

      if (this.origReplaceState_) {
        this.win.history.replaceState = this.origReplaceState_;
      }

      this.win.removeEventListener('popstate', this.popstateHandler_);
    }
    /**
     * @param {number} stackIndex
     * @param {boolean=} opt_replace
     * @return {*}
     * @private
     */
    ;

    _proto3.historyState_ = function historyState_(stackIndex, opt_replace) {
      var state = (0, _object.map)(opt_replace ? this.getState_() : undefined);
      state[HISTORY_PROP_] = stackIndex;
      return state;
    }
    /** @override */
    ;

    _proto3.setOnStateUpdated = function setOnStateUpdated(callback) {
      this.onStateUpdated_ = callback;
    }
    /** @override */
    ;

    _proto3.push = function push(opt_stateUpdate) {
      var _this10 = this;

      return this.whenReady_(function () {
        var newState = _this10.mergeStateUpdate_(_this10.getState_(), opt_stateUpdate || {});

        _this10.historyPushState_(newState,
        /* title */
        undefined, newState.fragment ? '#' + newState.fragment : undefined);

        return (0, _promise.tryResolve)(function () {
          return _this10.mergeStateUpdate_(newState, {
            stackIndex: _this10.stackIndex_
          });
        });
      });
    }
    /** @override */
    ;

    _proto3.pop = function pop(stackIndex) {
      var _this11 = this;

      // On pop, stack is not allowed to go prior to the starting point.
      stackIndex = Math.max(stackIndex, this.startIndex_);
      return this.whenReady_(function () {
        return _this11.back_(_this11.stackIndex_ - stackIndex + 1);
      }).then(function (newStackIndex) {
        return _this11.mergeStateUpdate_(_this11.getState_(), {
          stackIndex: newStackIndex
        });
      });
    }
    /** @override */
    ;

    _proto3.replace = function replace(opt_stateUpdate) {
      var _this12 = this;

      if (opt_stateUpdate === void 0) {
        opt_stateUpdate = {};
      }

      return this.whenReady_(function () {
        var newState = _this12.mergeStateUpdate_(_this12.getState_(), opt_stateUpdate || {});

        var url = (newState.url || '').replace(/#.*/, '');
        var fragment = newState.fragment ? '#' + newState.fragment : '';

        _this12.historyReplaceState_(newState, newState.title, url || fragment ? url + fragment : undefined);

        return (0, _promise.tryResolve)(function () {
          return _this12.mergeStateUpdate_(newState, {
            stackIndex: _this12.stackIndex_
          });
        });
      });
    }
    /** @override */
    ;

    _proto3.get = function get() {
      var _this13 = this;

      return (0, _promise.tryResolve)(function () {
        return _this13.mergeStateUpdate_(_this13.getState_(), {
          stackIndex: _this13.stackIndex_
        });
      });
    }
    /**
     * @param {number} stackIndex
     * @return {!Promise}
     */
    ;

    _proto3.backTo = function backTo(stackIndex) {
      var _this14 = this;

      // On pop, stack is not allowed to go prior to the starting point.
      stackIndex = Math.max(stackIndex, this.startIndex_);
      return this.whenReady_(function () {
        return _this14.back_(_this14.stackIndex_ - stackIndex);
      });
    }
    /** @private */
    ;

    _proto3.onHistoryEvent_ = function onHistoryEvent_() {
      var state = this.getState_();
      (0, _log.dev)().fine(TAG_, 'history event: ' + this.win.history.length + ', ' + JSON.stringify(state));
      var stackIndex = state ? state[HISTORY_PROP_] : undefined;
      var newStackIndex = this.stackIndex_;
      var waitingState = this.waitingState_;
      this.waitingState_ = undefined;

      if (newStackIndex > this.win.history.length - 2) {
        // Make sure stack has enough space. Whether we are going forward or
        // backward, the stack should have at least one extra cell.
        newStackIndex = this.win.history.length - 2;
        this.updateHistoryState_(this.mergeStateUpdate_(state, {
          stackIndex: newStackIndex
        }));
      }

      if (stackIndex == undefined) {
        // A new navigation forward by the user.
        newStackIndex = newStackIndex + 1;
      } else if (stackIndex < this.win.history.length) {
        // A simple trip back.
        newStackIndex = stackIndex;
      } else {
        // Generally not possible, but for posterity.
        newStackIndex = this.win.history.length - 1;
      } // If state index has been updated as the result replace the state.


      if (!state) {
        state = {};
      }

      state[HISTORY_PROP_] = newStackIndex;
      this.replaceState_(state, undefined, undefined); // Update the stack, pop squeezed states.

      if (newStackIndex != this.stackIndex_) {
        this.updateHistoryState_(this.mergeStateUpdate_(state, {
          stackIndex: newStackIndex
        }));
      } // User navigation is allowed to move past the starting point of
      // the history stack.


      if (newStackIndex < this.startIndex_) {
        this.startIndex_ = newStackIndex;
      }

      if (waitingState) {
        waitingState.resolve();
      }
    }
    /** @private */
    ;

    _proto3.getState_ = function getState_() {
      if (this.supportsState_) {
        return (0, _history.getState)(this.win.history);
      }

      return this.unsupportedState_;
    }
    /** @private */
    ;

    _proto3.assertReady_ = function assertReady_() {
      (0, _log.devAssert)(!this.waitingState_, 'The history must not be in the waiting state');
    }
    /**
     * @param {function():!Promise<RESULT>} callback
     * @return {!Promise<RESULT>}
     * @template RESULT
     * @private
     */
    ;

    _proto3.whenReady_ = function whenReady_(callback) {
      if (!this.waitingState_) {
        return callback();
      }

      return this.waitingState_.promise.then(callback, callback);
    }
    /**
     * @return {!Promise}
     * @private
     */
    ;

    _proto3.wait_ = function wait_() {
      this.assertReady_();
      var deferred = new _promise.Deferred();
      var resolve = deferred.resolve,
          reject = deferred.reject;
      var promise = this.timer_.timeoutPromise(500, deferred.promise);
      this.waitingState_ = {
        promise: promise,
        resolve: resolve,
        reject: reject
      };
      return promise;
    }
    /**
     * @param {number} steps
     * @return {!Promise}
     */
    ;

    _proto3.back_ = function back_(steps) {
      var _this15 = this;

      this.assertReady_();

      if (steps <= 0) {
        return Promise.resolve(this.stackIndex_);
      }

      this.unsupportedState_ = this.historyState_(this.stackIndex_ - steps);
      var promise = this.wait_();
      this.win.history.go(-steps);
      return promise.then(function () {
        return Promise.resolve(_this15.stackIndex_);
      });
    }
    /**
     * @param {*=} state
     * @param {(string|undefined)=} title
     * @param {(string|undefined)=} url
     * @private
     */
    ;

    _proto3.historyPushState_ = function historyPushState_(state, title, url) {
      this.assertReady_();

      if (!state) {
        state = {};
      }

      var stackIndex = this.stackIndex_ + 1;
      state[HISTORY_PROP_] = stackIndex;
      this.pushState_(state, title, url);

      if (stackIndex != this.win.history.length - 1) {
        stackIndex = this.win.history.length - 1;
        state[HISTORY_PROP_] = stackIndex;
        this.replaceState_(state);
      }

      var newState = this.mergeStateUpdate_(
      /** @type {!HistoryStateDef} */
      state, {
        stackIndex: stackIndex
      });
      this.updateHistoryState_(newState);
    }
    /**
     * If this is a hash update the choice of `location.replace` vs
     * `history.replaceState` is important. Due to bugs, not every browser
     * triggers `:target` pseudo-class when `replaceState` is called.
     * See http://www.zachleat.com/web/moving-target/ for more details.
     * location.replace will trigger a `popstate` event, we temporarily
     * disable handling it.
     * @param {string} target
     *
     * @override
     */
    ;

    _proto3.replaceStateForTarget = function replaceStateForTarget(target) {
      var _this16 = this;

      (0, _log.devAssert)(target[0] == '#', 'target should start with a #');
      this.whenReady_(function () {
        // location.replace will fire a popstate event which is not a history
        // event, so temporarily remove the event listener and re-add it after.
        // As explained above in the function comment, typically we'd just do
        // replaceState here but in order to trigger :target re-eval we have to
        // use location.replace.
        _this16.win.removeEventListener('popstate', _this16.popstateHandler_);

        try {
          // TODO(mkhatib, #6095): Chrome iOS will add extra states for
          // location.replace.
          _this16.win.location.replace(target);
        } finally {
          _this16.win.addEventListener('popstate', _this16.popstateHandler_);
        }

        _this16.historyReplaceState_();

        return Promise.resolve();
      });
    }
    /**
     * @param {*=} state
     * @param {(string|undefined)=} title
     * @param {(string|undefined)=} url
     * @private
     */
    ;

    _proto3.historyReplaceState_ = function historyReplaceState_(state, title, url) {
      this.assertReady_();

      if (!state) {
        state = {};
      }

      var stackIndex = Math.min(this.stackIndex_, this.win.history.length - 1);
      state[HISTORY_PROP_] = stackIndex;
      this.replaceState_(state, title, url);
      var newState = this.mergeStateUpdate_(
      /** @type {!HistoryStateDef} */
      state, {
        stackIndex: stackIndex
      });
      this.updateHistoryState_(newState);
    }
    /**
     * @param {!HistoryStateDef} historyState
     * @private
     */
    ;

    _proto3.updateHistoryState_ = function updateHistoryState_(historyState) {
      this.assertReady_();
      historyState.stackIndex = Math.min(historyState.stackIndex, this.win.history.length - 1);

      if (this.stackIndex_ != historyState.stackIndex) {
        (0, _log.dev)().fine(TAG_, 'stack index changed: ' + this.stackIndex_ + ' -> ' + historyState.stackIndex);
        this.stackIndex_ = historyState.stackIndex;

        if (this.onStateUpdated_) {
          this.onStateUpdated_(historyState);
        }
      }
    }
    /** @override */
    ;

    _proto3.getFragment = function getFragment() {
      var hash = this.win.location.hash;
      /* Strip leading '#' */

      hash = hash.substr(1);
      return Promise.resolve(hash);
    }
    /** @override */
    ;

    _proto3.updateFragment = function updateFragment(fragment) {
      return this.replace({
        fragment: fragment
      });
    }
    /**
     * @param {?HistoryStateDef} state
     * @param {!HistoryStateUpdateDef} update
     * @return {!HistoryStateDef}
     */
    ;

    _proto3.mergeStateUpdate_ = function mergeStateUpdate_(state, update) {
      var mergedData =
      /** @type {!JsonObject} */
      Object.assign({}, state && state.data || {}, update.data || {});
      return (
        /** @type {!HistoryStateDef} */
        Object.assign({}, state || {}, update, {
          data: mergedData
        })
      );
    };

    return HistoryBindingNatural_;
  }();
  /**
   * Implementation of HistoryBindingInterface that assumes a virtual history that
   * relies on viewer's "pushHistory", "popHistory" and "historyPopped"
   * protocol.
   *
   * Visible for testing.
   *
   * @implements {HistoryBindingInterface}
   */


  exports.HistoryBindingNatural_ = HistoryBindingNatural_;

  var HistoryBindingVirtual_ =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     * @param {!./viewer-impl.Viewer} viewer
     */
    function HistoryBindingVirtual_(win, viewer) {
      var _this17 = this;

      /** @const {!Window} */
      this.win = win;
      /** @private @const {!./viewer-impl.Viewer} */

      this.viewer_ = viewer;
      /** @private {number} */

      this.stackIndex_ = 0;
      /** @private {?function(!HistoryStateDef)} */

      this.onStateUpdated_ = null;
      /** @private {!UnlistenDef} */

      this.unlistenOnHistoryPopped_ = this.viewer_.onMessage('historyPopped', function (data) {
        return _this17.onHistoryPopped_(data);
      });
    }
    /** @override */


    var _proto4 = HistoryBindingVirtual_.prototype;

    _proto4.replaceStateForTarget = function replaceStateForTarget(target) {
      (0, _log.devAssert)(target[0] == '#', 'target should start with a #');
      this.win.location.replace(target);
    }
    /** @override */
    ;

    _proto4.cleanup = function cleanup() {
      this.unlistenOnHistoryPopped_();
    }
    /** @override */
    ;

    _proto4.setOnStateUpdated = function setOnStateUpdated(callback) {
      this.onStateUpdated_ = callback;
    }
    /**
     * `pushHistory`
     *
     *   Request:  {'stackIndex': string}
     *   Response: undefined | {'stackIndex': string}
     *
     * @override
     */
    ;

    _proto4.push = function push(opt_stateUpdate) {
      var _this18 = this;

      var message =
      /** @type {!JsonObject} */
      Object.assign({
        'stackIndex': this.stackIndex_ + 1
      }, opt_stateUpdate || {});
      return this.viewer_.sendMessageAwaitResponse('pushHistory', message).then(function (response) {
        // Return the message if response is undefined.
        var newState =
        /** @type {!HistoryStateDef} */
        response || message;

        _this18.updateHistoryState_(newState);

        return newState;
      });
    }
    /**
     * `popHistory`
     *
     *   Request:  {'stackIndex': string}
     *   Response: undefined | {'stackIndex': string}
     *
     * @override
     */
    ;

    _proto4.pop = function pop(stackIndex) {
      var _this19 = this;

      if (stackIndex > this.stackIndex_) {
        return this.get();
      }

      var message = (0, _object.dict)({
        'stackIndex': this.stackIndex_
      });
      return this.viewer_.sendMessageAwaitResponse('popHistory', message).then(function (response) {
        // Return the new stack index if response is undefined.
        var newState =
        /** @type {!HistoryStateDef} */
        response || (0, _object.dict)({
          'stackIndex': _this19.stackIndex_ - 1
        });

        _this19.updateHistoryState_(newState);

        return newState;
      });
    }
    /**
     * `replaceHistory`
     *
     *   Request:   {'fragment': string}
     *   Response:  undefined | {'stackIndex': string}
     *
     * @override
     */
    ;

    _proto4.replace = function replace(opt_stateUpdate) {
      var _this20 = this;

      if (opt_stateUpdate && opt_stateUpdate.url) {
        if (!this.viewer_.hasCapability('fullReplaceHistory')) {
          // Full URL replacement requested, but not supported by the viewer.
          // Don't update, and return the current state.
          var curState =
          /** @type {!HistoryStateDef} */
          (0, _object.dict)({
            'stackIndex': this.stackIndex_
          });
          return Promise.resolve(curState);
        } // replace fragment, only explicit fragment param will be sent.


        var url = opt_stateUpdate.url.replace(/#.*/, '');
        opt_stateUpdate.url = url;
      }

      var message =
      /** @type {!JsonObject} */
      Object.assign({
        'stackIndex': this.stackIndex_
      }, opt_stateUpdate || {});
      return this.viewer_.sendMessageAwaitResponse('replaceHistory', message,
      /* cancelUnsent */
      true).then(function (response) {
        var newState =
        /** @type {!HistoryStateDef} */
        response || message;

        _this20.updateHistoryState_(newState);

        return newState;
      });
    }
    /**
     * Note: Only returns the current `stackIndex`.
     * @override
     */
    ;

    _proto4.get = function get() {
      // Not sure why this type coercion is necessary, but CC complains otherwise.
      return Promise.resolve(
      /** @type {!HistoryStateDef} */
      {
        data: undefined,
        fragment: '',
        stackIndex: this.stackIndex_,
        title: ''
      });
    }
    /**
     * `historyPopped` (from viewer)
     *
     *   Request:  {'newStackIndex': number} | {'stackIndex': number}
     *   Response: undefined
     *
     * @param {!JsonObject} data
     * @private
     */
    ;

    _proto4.onHistoryPopped_ = function onHistoryPopped_(data) {
      if (data['newStackIndex'] !== undefined) {
        data['stackIndex'] = data['newStackIndex'];
      }

      this.updateHistoryState_(
      /** @type {!HistoryStateDef} */
      data);
    }
    /**
     * @param {!HistoryStateDef} state
     * @private
     */
    ;

    _proto4.updateHistoryState_ = function updateHistoryState_(state) {
      var stackIndex = state.stackIndex;

      if (this.stackIndex_ != stackIndex) {
        (0, _log.dev)().fine(TAG_, "stackIndex: " + this.stackIndex_ + " -> " + stackIndex);
        this.stackIndex_ = stackIndex;

        if (this.onStateUpdated_) {
          this.onStateUpdated_(state);
        }
      }
    }
    /**
     * `getFragment`
     *
     *   Request:  undefined
     *   Response: string
     *
     * @override
     */
    ;

    _proto4.getFragment = function getFragment() {
      if (!this.viewer_.hasCapability('fragment')) {
        return Promise.resolve('');
      }

      return this.viewer_.sendMessageAwaitResponse('getFragment', undefined,
      /* cancelUnsent */
      true).then(function (data) {
        if (!data) {
          return '';
        }

        var hash = (0, _log.dev)().assertString(data);
        /* Strip leading '#'*/

        if (hash[0] == '#') {
          hash = hash.substr(1);
        }

        return hash;
      });
    }
    /**
     * `replaceHistory`
     *
     *   Request:   {'fragment': string}
     *   Response:  undefined | {'stackIndex': string}
     *
     * @override
     */
    ;

    _proto4.updateFragment = function updateFragment(fragment) {
      if (!this.viewer_.hasCapability('fragment')) {
        return Promise.resolve();
      }

      return (
        /** @type {!Promise} */
        this.viewer_.sendMessageAwaitResponse('replaceHistory', (0, _object.dict)({
          'fragment': fragment
        }),
        /* cancelUnsent */
        true)
      );
    };

    return HistoryBindingVirtual_;
  }();
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @return {!History}
   * @private
   */


  exports.HistoryBindingVirtual_ = HistoryBindingVirtual_;

  function createHistory(ampdoc) {
    var viewer = _services.Services.viewerForDoc(ampdoc);

    var binding;

    if (viewer.isOvertakeHistory() || (0, _mode.getMode)(ampdoc.win).test || ampdoc.win.AMP_TEST_IFRAME) {
      binding = new HistoryBindingVirtual_(ampdoc.win, viewer);
    } else {
      // Only one global "natural" binding is allowed since it works with the
      // global history stack.
      (0, _service.registerServiceBuilder)(ampdoc.win, 'global-history-binding', HistoryBindingNatural_);
      binding = (0, _service.getService)(ampdoc.win, 'global-history-binding');
    }

    return new History(ampdoc, binding);
  }
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   */


  function installHistoryServiceForDoc(ampdoc) {
    (0, _service.registerServiceBuilderForDoc)(ampdoc, 'history', createHistory);
  }

  },{"../history":41,"../log":51,"../mode":53,"../service":71,"../services":112,"../utils/object":132,"../utils/promise":134}],86:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.checkAndFix = checkAndFix;

  var _services = require("../services");

  var _log = require("../log");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TAG = 'ie-media-bug';
  /**
   * An ugly fix for IE's problem with `matchMedia` API, where media queries
   * are evaluated incorrectly. See #2577 for more details. Returns the promise
   * that will be resolved when the bug is fixed.
   * @param {!Window} win
   * @param {!../service/platform-impl.Platform=} opt_platform
   * @return {?Promise}
   * @package
   */

  function checkAndFix(win, opt_platform) {
    var platform = opt_platform || _services.Services.platformFor(win);

    if (!platform.isIe() || matchMediaIeQuite(win)) {
      return null;
    } // Poll until the expression resolves correctly, but only up to a point.


    return new Promise(function (resolve) {
      /** @const {number} */
      var endTime = Date.now() + 2000;
      /** @const {number} */

      var interval = win.setInterval(function () {
        var now = Date.now();
        var matches = matchMediaIeQuite(win);

        if (matches || now > endTime) {
          win.clearInterval(interval);
          resolve();

          if (!matches) {
            (0, _log.dev)().error(TAG, 'IE media never resolved');
          }
        }
      }, 10);
    });
  }
  /**
   * @param {!Window} win
   * @return {boolean}
   * @private
   */


  function matchMediaIeQuite(win) {
    // The expression is `min-width <= W <= max-width`.
    // In IE `min-width: X` actually compares string `<`, thus we add -1 to
    // `min-width` and add +1 to `max-width`. Given the expression above, it's
    // a non-essential correction by 1px.
    var q = "(min-width: " + (win.
    /*OK*/
    innerWidth - 1) + "px)" + (" AND (max-width: " + (win.
    /*OK*/
    innerWidth + 1) + "px)");

    try {
      return win.matchMedia(q).matches;
    } catch (e) {
      (0, _log.dev)().error(TAG, 'IE matchMedia failed: ', e); // Return `true` to avoid polling on a broken API.

      return true;
    }
  }

  },{"../log":51,"../services":112}],87:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.isLongTaskApiSupported = isLongTaskApiSupported;
  exports.JankMeter = void 0;

  var _services = require("../services");

  var _log = require("../log");

  var _staticTemplate = require("../static-template");

  var _experiments = require("../experiments");

  function _templateObject() {
    var data = _taggedTemplateLiteralLoose(["\n      <div class=\"i-amphtml-jank-meter\"></div>"]);

    _templateObject = function _templateObject() {
      return data;
    };

    return data;
  }

  function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

  /** @const {number} */
  var NTH_FRAME = 200;

  var JankMeter =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function JankMeter(win) {
      /** @private {!Window} */
      this.win_ = win;
      /** @private {number} */

      this.badFrameCnt_ = 0;
      /** @private {number} */

      this.totalFrameCnt_ = 0;
      /** @private {number} */

      this.longTaskChild_ = 0;
      /** @private {number} */

      this.longTaskSelf_ = 0;
      /** @private {?number} */

      this.scheduledTime_ = null;
      /** @private {?./performance-impl.Performance} */

      this.perf_ = _services.Services.performanceForOrNull(win);
      /** @private {?BatteryManager} */

      this.batteryManager_ = null;
      /** @private {?number} */

      this.batteryLevelStart_ = null;
      this.initializeBatteryManager_();
      /** @private {?PerformanceObserver} */

      this.longTaskObserver_ = null;
      this.initializeLongTaskObserver_();
    }
    /**
     * Callback for scheduled.
     */


    var _proto = JankMeter.prototype;

    _proto.onScheduled = function onScheduled() {
      if (!this.isEnabled_()) {
        return;
      } // only take the first schedule for the current frame.


      if (this.scheduledTime_ == null) {
        this.scheduledTime_ = this.win_.Date.now();
      }
    }
    /**
     * Callback for run.
     */
    ;

    _proto.onRun = function onRun() {
      if (!this.isEnabled_() || this.scheduledTime_ == null) {
        return;
      }

      var paintLatency = this.win_.Date.now() - this.scheduledTime_;
      this.scheduledTime_ = null;
      this.totalFrameCnt_++;

      if (paintLatency > 16) {
        this.badFrameCnt_++;
        (0, _log.dev)().info('JANK', 'Paint latency: ' + paintLatency + 'ms');
      } // Report metrics on Nth frame, so we have sort of normalized numbers.


      if (this.perf_ && this.totalFrameCnt_ == NTH_FRAME) {
        // gfp: Good Frame Probability
        var gfp = this.calculateGfp_();
        this.perf_.tickDelta('gfp', gfp); // bf: Bad Frames

        this.perf_.tickDelta('bf', this.badFrameCnt_);

        if (this.longTaskObserver_) {
          // lts: Long Tasks of Self frame
          this.perf_.tickDelta('lts', this.longTaskSelf_); // ltc: Long Tasks of Child frames

          this.perf_.tickDelta('ltc', this.longTaskChild_);
          this.longTaskObserver_.disconnect();
          this.longTaskObserver_ = null;
        }

        var batteryDrop = 0;

        if (this.batteryManager_ && this.batteryLevelStart_ != null) {
          batteryDrop = this.win_.Math.max(0, this.win_.Math.floor(this.batteryManager_.level * 100 - this.batteryLevelStart_)); // bd: Battery Drop

          this.perf_.tickDelta('bd', batteryDrop);
        }

        this.perf_.flush();

        if (isJankMeterEnabled(this.win_)) {
          this.displayMeterDisplay_(batteryDrop);
        }
      }
    }
    /**
     * Returns if is enabled
     *
     * @return {?boolean}
     */
    ;

    _proto.isEnabled_ = function isEnabled_() {
      return isJankMeterEnabled(this.win_) || this.perf_ && this.perf_.isPerformanceTrackingOn() && this.totalFrameCnt_ < NTH_FRAME;
    }
    /**
     * @param {number} batteryDrop
     * @private
     */
    ;

    _proto.displayMeterDisplay_ = function displayMeterDisplay_(batteryDrop) {
      var doc = this.win_.document;
      var display = (0, _staticTemplate.htmlFor)(doc)(_templateObject());
      display.textContent = "bf:" + this.badFrameCnt_ + ", lts: " + this.longTaskSelf_ + ", " + ("ltc:" + this.longTaskChild_ + ", bd:" + batteryDrop);
      doc.body.appendChild(display);
    }
    /**
     * Calculate Good Frame Probability, which is a value range from 0 to 100.
     * @return {number}
     * @private
     */
    ;

    _proto.calculateGfp_ = function calculateGfp_() {
      return this.win_.Math.floor((this.totalFrameCnt_ - this.badFrameCnt_) / this.totalFrameCnt_ * 100);
    }
    /**
     * Initializes long task observer.
     */
    ;

    _proto.initializeLongTaskObserver_ = function initializeLongTaskObserver_() {
      var _this = this;

      if (!this.isEnabled_() || !isLongTaskApiSupported(this.win_)) {
        return;
      }

      this.longTaskObserver_ = new this.win_.PerformanceObserver(function (entryList) {
        var entries = entryList.getEntries();

        for (var i = 0; i < entries.length; i++) {
          if (entries[i].entryType == 'longtask') {
            // longtask is any task with duration of bigger than 50ms
            // we sum up the number of 50ms a task spans.
            var span = _this.win_.Math.floor(entries[i].duration / 50);

            if (entries[i].name == 'cross-origin-descendant') {
              _this.longTaskChild_ += span;
              (0, _log.user)().info('LONGTASK', "from child frame " + entries[i].duration + "ms");
            } else {
              _this.longTaskSelf_ += span;
              (0, _log.dev)().info('LONGTASK', "from self frame " + entries[i].duration + "ms");
            }
          }
        }
      });
      this.longTaskObserver_.observe({
        entryTypes: ['longtask']
      });
    }
    /**
     * Initializes battery manager.
     */
    ;

    _proto.initializeBatteryManager_ = function initializeBatteryManager_() {
      var _this2 = this;

      if (isBatteryApiSupported(this.win_)) {
        this.win_.navigator.getBattery().then(function (battery) {
          _this2.batteryManager_ = battery;
          _this2.batteryLevelStart_ = battery.level * 100;
        });
      }
    };

    return JankMeter;
  }();
  /**
   * @param {!Window} win
   * @return {boolean}
   */


  exports.JankMeter = JankMeter;

  function isJankMeterEnabled(win) {
    return (0, _experiments.isExperimentOn)(win, 'jank-meter');
  }
  /**
   * @param {!Window} win
   * @return {boolean}
   */


  function isLongTaskApiSupported(win) {
    return !!win.PerformanceObserver && !!win['TaskAttributionTiming'] && 'containerName' in win['TaskAttributionTiming'].prototype;
  }
  /**
   * @param {!Window} unusedWin
   * @return {boolean}
   */


  function isBatteryApiSupported(unusedWin) {
    // TODO: (@lannka, #9749)
    return false;
  }

  },{"../experiments":32,"../log":51,"../services":112,"../static-template":115}],88:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installLayersServiceForDoc = installLayersServiceForDoc;
  exports.LayoutElement = exports.LayoutLayers = exports.PositionDef = exports.SizeDef = void 0;

  var _services = require("../services");

  var _style = require("../style");

  var _log = require("../log");

  var _friendlyIframeEmbed = require("../friendly-iframe-embed");

  var _mode = require("../mode");

  var _eventHelper = require("../event-helper");

  var _service = require("../service");

  var _array = require("../utils/array");

  var _dom = require("../dom");

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var LAYOUT_PROP = '__AMP_LAYOUT';
  /**
   * The Size of an element.
   *
   * @struct
   * @typedef {{
   *   height: number,
   *   width: number,
   * }}
   */

  var SizeDef;
  /**
   * The offset Position of an element.
   *
   * @struct
   * @typedef {{
   *   left: number,
   *   top: number,
   * }}
   */

  exports.SizeDef = SizeDef;
  var PositionDef;
  /**
   * @typedef {Object<string, *>}
   */

  exports.PositionDef = PositionDef;
  var AncestryStateDef;
  /**
   * Creates a Size.
   *
   * @param {number} width
   * @param {number} height
   * @return {!SizeDef}
   */

  function sizeWh(width, height) {
    return {
      height: height,
      width: width
    };
  }
  /**
   * Creates a Position.
   *
   * @param {number} left
   * @param {number} top
   * @return {!PositionDef}
   */


  function positionLt(left, top) {
    return {
      left: left,
      top: top
    };
  }
  /**
   * Stores an LayoutElement's parent layer ancestry (temporarily), reusing the
   * same array instance to avoid heavy GCs.
   * See {@link LayoutElement#iterateAncestry}.
   * @const {!Array<!LayoutElement>}
   */


  var ANCESTRY_CACHE = [];
  /**
   * A unique "id" counter, to give each LayoutElement a unique id.
   * @type {number}
   */

  var layoutId = 0;
  /**
   * The core class behind the Layers system, this controls layer creation and
   * management.
   * @implements {../service.Disposable}
   */

  var LayoutLayers =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {!Element} scrollingElement
     * @param {boolean} scrollingElementScrollsLikeViewport
     */
    function LayoutLayers(ampdoc, scrollingElement, scrollingElementScrollsLikeViewport) {
      var _this = this;

      var win = ampdoc.win;
      /** @const @private {!Element} */

      this.scrollingElement_ = scrollingElement;
      /**
       * An Event handler, which will be called when a layer (any layer) scrolls.
       * TODO(jridgewell, #12556): send an array of elements who have changed
       * position due to the scroll.
       * @type {function()|null}
       * @private
       */

      this.onScroll_ = null;
      /** @const @private {!Array<!LayoutElement>} */

      this.layouts_ = [];
      /** @const @private {!Array<function()>} */

      this.unlisteners_ = []; // Listen for scroll events at the document level, so we know when either
      // the document (the scrolling element) or an element scrolls.
      // This forwards to our scroll-dirty system, and eventually to the scroll
      // listener.

      this.listenForScroll_(win.document); // Scroll events do not bubble out of shadow trees.
      // Strangely, iOS 11 reports that document contains things in a shadow tree.
      // Any Element, however, doesn't.

      if (!win.document.documentElement.contains(scrollingElement)) {
        this.listenForScroll_(scrollingElement);
      } // Destroys the layer tree on document resize, since entirely new CSS may
      // apply to the document now.


      this.unlisteners_.push((0, _eventHelper.listen)(win, 'resize', function () {
        return _this.onResize_();
      }, {
        capture: true,
        passive: true
      })); // Declare scrollingElement as the one true scrolling layer.

      var root = this.declareLayer_(scrollingElement, true, scrollingElementScrollsLikeViewport);
      /**
       * Stores the most recently scrolled layer.
       * @private {!LayoutElement}
       */

      this.activeLayer_ = root;
    }
    /** @override */


    var _proto = LayoutLayers.prototype;

    _proto.dispose = function dispose() {
      this.unlisteners_.forEach(function (unlisten) {
        return unlisten();
      });
      this.unlisteners_.length = 0;
    }
    /**
     * Creates a layout for the element (if one doesn't exist for it already) and
     * tracks the layout.
     *
     * This method may be called multiple times to ensure the element has a
     * layout (and can therefore use the layout's instance methods) and that the
     * layout will be remasured when necessary.
     *
     * @param {!Element} element
     * @return {!LayoutElement}
     */
    ;

    _proto.add = function add(element) {
      var layout = LayoutElement.forOptional(element); // Elements may already have a layout (common for calls to get size or
      // position from Resources).

      if (!layout) {
        layout = new LayoutElement(element);
      } // Layout may have been removed from the tracked layouts (due to
      // reparenting).


      if (!this.layouts_.includes(layout)) {
        this.layouts_.push(layout);
      }

      return layout;
    }
    /**
     * Removes the element's layout from tracking.
     * This also "dirties" the layout, so if's being reparented it will lazily
     * update appropriately.
     *
     * TODO(jridgewell): This won't catch detach events from native DOM
     * elements...
     *
     * @param {!Element} element
     */
    ;

    _proto.remove = function remove(element) {
      var layout = LayoutElement.forOptional(element);

      if (!layout) {
        return;
      }

      var layouts = this.layouts_;
      var index = layouts.indexOf(layout);

      if (index > -1) {
        layouts.splice(index, 1);
      }

      var parent = layout.getParentLayer();

      if (parent) {
        parent.remove(layout);
      } else {
        // Don't know who the parent is.
        // Ensure the entire layer tree removes the layout.
        for (var i = 0; i < layouts.length; i++) {
          layouts[i].remove(layout);
        }
      } // The layout it likely to be reparented under a new layer.


      layout.forgetParentLayer(); // Measurements have likely changed due to CSS rules matching.

      layout.dirtyMeasurements();
    }
    /**
     * Returns the current scrolled position of the element relative to the layer
     * represented by opt_ancestor (or opt_ancestor's parent layer, if it is not
     * a layer itself). This takes into account the scrolled position of every
     * layer in between.
     *
     * @param {!Element} element
     * @param {Element=} opt_ancestor
     * @return {!PositionDef}
     */
    ;

    _proto.getScrolledPosition = function getScrolledPosition(element, opt_ancestor) {
      var layout = this.add(element);
      var pos = layout.getScrolledPosition(opt_ancestor);
      return positionLt(Math.round(pos.left), Math.round(pos.top));
    }
    /**
     * Returns the absolute offset position of the element relative to the layer
     * represented by opt_ancestor (or opt_ancestor's parent layer, if it is not
     * a layer itself). This remains constant, regardless of the scrolled
     * position of any layer in between.
     *
     * @param {!Element} element
     * @param {Element=} opt_ancestor
     * @return {!PositionDef}
     */
    ;

    _proto.getOffsetPosition = function getOffsetPosition(element, opt_ancestor) {
      var layout = this.add(element);
      var pos = layout.getOffsetPosition(opt_ancestor);
      return positionLt(Math.round(pos.left), Math.round(pos.top));
    }
    /**
     * Returns the size of the element.
     *
     * @param {!Element} element
     * @return {!SizeDef}
     */
    ;

    _proto.getSize = function getSize(element) {
      var layout = this.add(element);
      var size = layout.getSize();
      return sizeWh(Math.round(size.width), Math.round(size.height));
    }
    /**
     * Remeasures (now, not lazily) the element, and any other elements who's
     * cached rects may have been altered by this element's mutation. This
     * optimizes to also remeasure any higher up layers that are also marked as
     * dirty, so that only 1 measure phase is needed.
     *
     * This is meant to be called after any element mutation happens (eg.
     * #buildCallback, #layoutCallback, viewport changes size).
     *
     * @param {!Element} element A regular or AMP Element
     * @param {boolean=} opt_force
     */
    ;

    _proto.remeasure = function remeasure(element, opt_force) {
      var layout = this.add(element);
      var from = layout.getParentLayer() || layout;

      if (opt_force) {
        from.dirtyMeasurements();
      }

      from.remeasure();
    }
    /**
     * Eagerly creates a Layer for the element. Doing so helps the scheduling
     * algorithm better score nested components, and saves a few cycles.
     *
     * @param {!Element} element
     */
    ;

    _proto.declareLayer = function declareLayer(element) {
      this.declareLayer_(element, false, false);
    }
    /**
     * Dirties the element's parent layer, so remeasures will happen.
     *
     * @param {!Element} node
     */
    ;

    _proto.dirty = function dirty(node) {
      // Find a parent layer, or fall back to the root scrolling layer in cases
      // where the node is the scrolling layer (which doesn't have a parent).
      var layer = LayoutElement.getParentLayer(node) || LayoutElement.for(this.scrollingElement_);
      layer.dirtyMeasurements();
    }
    /**
     * Eagerly creates a Layer for the element.
     *
     * @param {!Element} element
     * @param {boolean} isRootLayer
     * @param {boolean} scrollsLikeViewport
     * @return {!LayoutElement}
     * @private
     */
    ;

    _proto.declareLayer_ = function declareLayer_(element, isRootLayer, scrollsLikeViewport) {
      var layout = this.add(element);
      layout.declareLayer(isRootLayer, scrollsLikeViewport);
      return layout;
    }
    /**
     * Destroys the layer tree, since new CSS may apply to the document after a
     * resize.
     * @private
     */
    ;

    _proto.onResize_ = function onResize_() {
      var layouts = this.layouts_;

      for (var i = 0; i < layouts.length; i++) {
        var layout = layouts[i];
        layout.undeclareLayer();
        layout.forgetParentLayer();
      }
    }
    /**
     * Listens for scroll events on root.
     *
     * @param {!Node} root
     * @private
     */
    ;

    _proto.listenForScroll_ = function listenForScroll_(root) {
      var _this2 = this;

      this.unlisteners_.push((0, _eventHelper.listen)(root, 'scroll', function (event) {
        _this2.scrolled_(event);
      }, {
        capture: true,
        passive: true
      }));
    }
    /**
     * Dirties the scrolled layer, so any later calls to getScrolledPosition will
     * recalc the scrolled position.  If the scrolled element is not yet a layer,
     * it turns it into a layer lazily.
     *
     * This also sends the scrolled notifications to the onScrolled_ listener.
     * Eventually, it will send an array of elements that actually changed
     * position (instead of having to check all elements in the listener).
     *
     * @param {!Event} event
     * @private
     */
    ;

    _proto.scrolled_ = function scrolled_(event) {
      var target = event.target; // If the target of the scroll event is an element, that means that element
      // is an overflow scroller.
      // However, if the target is the document itself, that means the native
      // root scroller (`document.scrollingElement`) did the scrolling. But, we
      // can't assign a layer to a Document (only Elements), so just pretend it
      // was the scrolling element that scrolled.

      var scrolled = target.nodeType == Node.ELEMENT_NODE ? (0, _log.dev)().assertElement(target) : this.scrollingElement_;
      var layer = LayoutElement.forOptional(scrolled);

      if (layer && layer.isLayer()) {
        layer.dirtyScrollMeasurements();
      } else {
        layer = this.declareLayer_(scrolled, false, false);
      }

      this.activeLayer_ = layer;

      if (this.onScroll_) {
        this.onScroll_();
      }
    }
    /**
     * Registers the scroll listener.
     *
     * @param {function()} handler
     */
    ;

    _proto.onScroll = function onScroll(handler) {
      this.onScroll_ = handler;
    }
    /**
     * Returns the most recently scrolled layer.
     *
     * @return {!LayoutElement}
     */
    ;

    _proto.getActiveLayer = function getActiveLayer() {
      return this.activeLayer_;
    }
    /**
     * Iterates the layout's parent layer ancestry, starting from the root down
     * to the layout.
     *
     * This sets a whether the layer isActive during that layer's iteration. Any
     * attempts to access #isActiveUnsafe outside of the iterator call will fail.
     *
     * @param {!Element} element
     * @param {function(T, !LayoutElement, number, !AncestryStateDef):T} iterator
     * @param {!AncestryStateDef} state
     * @return {T}
     * @template T
     */
    ;

    _proto.iterateAncestry = function iterateAncestry(element, iterator, state) {
      var layout = this.add(element);
      return layout.iterateAncestry(iterator, state);
    };

    return LayoutLayers;
  }();
  /**
   * The per-Element class, which caches the positions and size of the elements.
   */


  exports.LayoutLayers = LayoutLayers;

  var LayoutElement =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Element} element
     */
    function LayoutElement(element) {
      element[LAYOUT_PROP] = this;
      /** @const @private {!Element} */

      this.element_ = element;
      /** @const private {string} */

      this.id_ = element.tagName + "-" + layoutId++;
      /**
       * The parent layer of the current element. Note that even if _this_
       * element is a layer, its parent layer will be an ancestor (if there is a
       * parent layer).
       *
       * If the parent is null, that means the element does not have a parent
       * layer.
       * If the parent is undefined, that means the parent has not been cached
       * yet (or has been reset).
       *
       * @private {?LayoutElement|undefined}
       */

      this.parentLayer_ = undefined;
      /**
       * Whether to remeasure the element in the next size/position calculation.
       * This is done lazily to allow entire trees to be remeasured at the same
       * time, instead of individual elements.
       *
       * @private {boolean}
       */

      this.needsRemeasure_ = true;
      /**
       * The current cached size of the element.
       *
       * @private {!SizeDef}
       */

      this.size_ = sizeWh(0, 0);
      /**
       * The current cached **offset** position of the element, relative to the
       * parent layer. Note that offsets are constant, and unchanged by the
       * current scroll position of the parent.
       *
       * @private {!PositionDef}
       */

      this.position_ = positionLt(0, 0);
      /**
       * Whether the layout is a descendant of the most recently scrolled layer.
       *
       * Note: This attribute is `undefined`, unless the ancestry tree is
       * currently being iterated with #iterateAncestry. This is the only time it
       * can be determined without a ton of DOM checks.
       *
       * @private {boolean|undefined}
       */

      this.isActive_ = undefined;
      /**
       * Whether the element defines a layer with a new coordinate system.
       * Elements may freely transition to/from being a layer, causing child
       * elements to redefine their offset positions.
       *
       * @private {boolean}
       */

      this.isLayer_ = false;
      /**
       * Whether the layer is a "root" scrolling layer. Root scrollers can never
       * be un-declared (they will always exist).
       *
       * @private {boolean}
       */

      this.isRootLayer_ = false;
      /**
       * Whether the layer scrolls like a viewport. Native scrolling elements
       * have special scrolling inconsistencies. When you scroll one of these
       * special scrollers, its relative top (returned by getBoundingClientRect)
       * changes. This is different than regular overflow scrollers.
       *
       * @private {boolean}
       */

      this.scrollsLikeViewport_ = false;
      /**
       * Whether this layer needs to remeasure its scrollTop/Left position during
       * the next position calculation. This is done lazily so that scroll
       * performance is not hampered.
       *
       * @private {boolean}
       */

      this.needsScrollRemeasure_ = false;
      /**
       * The scrollLeft of the layer (only layers use this).
       * @private {number}
       */

      this.scrollLeft_ = 0;
      /**
       * The scrollTop of the layer (only layers use this).
       * @private {number}
       */

      this.scrollTop_ = 0;
      /**
       * The child LayoutElements of this layer. Only a layer (which means it
       * defines a coordinate system) may have children, even if the element
       * _contains_ other elements.
       *
       * @const @private {!Array<!LayoutElement>}
       */

      this.children_ = [];
    }
    /**
     * Gets the element's LayoutElement instance.
     *
     * @param {!Element} element
     * @return {!LayoutElement}
     */


    LayoutElement.for = function _for(element) {
      return (
        /** @type {!LayoutElement} */
        (0, _log.devAssert)(LayoutElement.forOptional(element))
      );
    }
    /**
     * Gets the element's LayoutElement instance, if the element has one.
     *
     * @param {!Element} element
     * @return {?LayoutElement}
     */
    ;

    LayoutElement.forOptional = function forOptional(element) {
      return element[LAYOUT_PROP] || null;
    }
    /**
     * Finds the element's parent layer
     *
     * If the element is itself a layer, it still looks in the element's ancestry
     * for a parent layer.
     *
     * @param {!Element} node
     * @param {boolean=} opt_force Whether to force a re-lookup
     * @return {?LayoutElement}
     */
    ;

    LayoutElement.getParentLayer = function getParentLayer(node, opt_force) {
      if (isDestroyed(node)) {
        return null;
      }

      if (!opt_force) {
        var layout = LayoutElement.forOptional(node);

        if (layout) {
          return layout.getParentLayer();
        }
      }

      var win =
      /** @type {!Window } */
      (0, _log.devAssert)(node.ownerDocument.defaultView);
      var el = node;
      var op = node;
      var last = node;

      while (el) {
        // Ensure the node (if it a layer itself) is not return as the parent
        // layer.
        var _layout = el === node ? null : LayoutElement.forOptional(el);

        if (_layout && _layout.isLayer()) {
          return _layout;
        } // Now, is this element fixed-position? We only check this on
        // offsetParent (and the original node itself) as a performance
        // optimization.


        if (el === op) {
          if ((0, _style.computedStyle)(win, op).position == 'fixed') {
            var parent = void 0;

            if (op !== node) {
              // If the offset parent is not the original node (meaning offset
              // parent is a parent node), the offset parent is the parent layer.
              parent = op;
            } else {
              // Ok, our original node was fixed-position. If it's inside an FIE,
              // the FIE's frame element is the parent layer. This is because
              // fixed-position elements inside an iframe are fixed relative to
              // that iframe.
              parent = frameParent(node.ownerDocument);
            } // Parent is either a parent node (offset parent), an FIE's frame
            // element, or nothing.


            if (parent) {
              // Ensure fixed-position parent is a layer.
              _services.Services.layersForDoc(parent).declareLayer(parent);

              return LayoutElement.for(parent);
            } // Else, the original node defines its own layer.


            return null;
          }

          op = op.
          /*OK*/
          offsetParent;
        }

        last = el; // Traversal happens first to the `assignedSlot` (since the slot is in
        // between the current `el` and its `parentNode`), then to either the
        // `parentNode` (for normal tree traversal) or the `host` (for traversing
        // from shadow trees to light trees).
        // Note `parentNode` and `host` are mutually exclusive on Elements.

        el = el.assignedSlot || el.parentNode || el.host; // If none of that succeeds, then we've hit the Document node which may
        // have a parent frameElement if we're in an FIE.

        if (!el) {
          el = frameParent(last); // Set the offset parent to the parent iframe, since it may be
          // fixed-position.

          op = el; // Update our window reference if we crossed a FIE boundary.

          if (el) {
            win =
            /** @type {!Window } */
            (0, _log.devAssert)(el.ownerDocument.defaultView);
          }
        }
      }

      (0, _log.devAssert)(last.nodeType === Node.DOCUMENT_NODE, 'node not in the DOM tree');
      return null;
    }
    /**
     * Returns the unique identifier for each layout.
     *
     * @return {string}
     */
    ;

    var _proto2 = LayoutElement.prototype;

    _proto2.getId = function getId() {
      return this.id_;
    }
    /**
     * A check that the LayoutElement is contained by this layer, and the element
     * is not the layer's element.
     *
     * @param {!LayoutElement} layout
     * @return {boolean}
     */
    ;

    _proto2.contains = function contains(layout) {
      if (layout === this) {
        return false;
      }

      return this.contains_(this.element_, layout.element_);
    }
    /**
     * A check that the LayoutElement is contained by this layer.
     *
     * @param {!Element} element
     * @param {!Element} other
     * @return {boolean}
     */
    ;

    _proto2.contains_ = function contains_(element, other) {
      if (element.contains(other)) {
        return true;
      } // Layers in a parent document may contain children of an FIE.


      if (!sameDocument(element, other)) {
        var frame = frameParent(
        /** @type {!Node} */
        other.ownerDocument);
        return !!frame && this.contains_(element, frame);
      } // Layers inside a shadow tree may contain children from the light tree.


      var rootNode = (0, _dom.rootNodeFor)(element);
      var host = rootNode && rootNode.host;
      return !!host && host.contains(other);
    }
    /**
     * Adds the child to the list of children of this layer.
     *
     * @param {!LayoutElement} child
     */
    ;

    _proto2.add = function add(child) {
      (0, _log.devAssert)(this.isLayer());
      (0, _log.devAssert)(this.contains(child)); // Parents track the children, but not all children are aware of their
      // parents. When a child finds its parent, it adds itself to the parent.
      // This might lead to a double tracking.

      if (!this.children_.includes(child)) {
        this.children_.push(child);
      }
    }
    /**
     * Removes the child from the list of children of this layer.
     *
     * @param {!LayoutElement} child
     */
    ;

    _proto2.remove = function remove(child) {
      var i = this.children_.indexOf(child);

      if (i > -1) {
        this.children_.splice(i, 1);
      }
    }
    /**
     * Whether this element represents a layer with its own coordinate system.
     *
     * @return {boolean}
     */
    ;

    _proto2.isLayer = function isLayer() {
      return this.isLayer_;
    }
    /**
     * Marks this element as a layer, which'll define its own coordinate system
     * for child elements.
     *
     * @param {boolean} isRootLayer
     * @param {boolean} scrollsLikeViewport
     */
    ;

    _proto2.declareLayer = function declareLayer(isRootLayer, scrollsLikeViewport) {
      (0, _log.devAssert)(!scrollsLikeViewport || isRootLayer, 'Only root layers may' + ' scroll like a viewport.');

      if (this.isLayer_) {
        return;
      }

      this.isLayer_ = true;
      this.isRootLayer_ = isRootLayer;
      this.scrollsLikeViewport_ = scrollsLikeViewport; // Ensure the coordinate system is remeasured

      this.needsRemeasure_ = true;
      this.needsScrollRemeasure_ = true; // Transfer all children elements into this new coordinate system

      var parent = this.getParentLayer();

      if (parent) {
        parent.transfer_(this);
      }
    }
    /**
     * This is necessary when the screen size changes (or other similar events
     * happen), because CSS styles may change. We'll need to recompute layers
     * lazily after this happens.
     */
    ;

    _proto2.undeclareLayer = function undeclareLayer() {
      if (!this.isLayer_ || this.isRootLayer_) {
        return;
      }

      var element = this.element_;

      if (isDestroyed(element)) {
        return;
      }

      var win =
      /** @type {!Window } */
      (0, _log.devAssert)(element.ownerDocument.defaultView); // If it remains fixed, it will still be a layer.

      if ((0, _style.computedStyle)(win, element).position === 'fixed') {
        return;
      }

      this.isLayer_ = false; // Handle if this was a fixed position layer (and therefore had null parent
      // layer).

      var parent = this.getParentLayer() || LayoutElement.getParentLayer(element, true);
      this.transfer_(
      /** @type {!LayoutElement} */
      (0, _log.devAssert)(parent));
    }
    /**
     * Transfers all children (contained inside the new layer) to a new layer.
     * Note, this new layer may actually be a parent layer if we're un-declaring
     * the this layer.
     *
     * @param {!LayoutElement} layer
     * @private
     */
    ;

    _proto2.transfer_ = function transfer_(layer) {
      // An optimization if we know that the new layer definitely contains
      // everything in this layer.
      var contained = layer.contains(this);
      (0, _array.remove)(this.children_, function (layout) {
        if (contained || layer.contains(layout)) {
          // Mark the layout as needing a remeasure, since its offset position
          // has likely changed.
          layout.dirtyMeasurements(); // And transfer ownership to the new layer.

          layout.parentLayer_ = layer;
          layer.children_.push(layout);
          return true;
        }

        return false;
      });
    }
    /**
     * Gets the element's parent layer. If this element is itself a layer, it
     * returns the layer's parent.
     *
     * @return {?LayoutElement}
     */
    ;

    _proto2.getParentLayer = function getParentLayer() {
      // An undefined cache means we haven't cached the parent yet. Let's find it
      // now.
      // Valid cached values are either null or a LayoutElement.
      if (this.parentLayer_ === undefined) {
        var parent = LayoutElement.getParentLayer(this.element_, true);
        this.parentLayer_ = parent;

        if (parent) {
          parent.add(this);
        }
      }

      return this.parentLayer_;
    }
    /**
     * Uncaches the parent layer, so a relookup will happen again. This is
     * necessary when the DOM resizes, or when reparenting nodes, since the old
     * parent layer may no longer be.
     */
    ;

    _proto2.forgetParentLayer = function forgetParentLayer() {
      this.parentLayer_ = undefined;
    }
    /**
     * Gets the current size of the element.
     *
     * @return {!SizeDef}
     */
    ;

    _proto2.getSize = function getSize() {
      this.remeasure();
      return this.size_;
    }
    /**
     * Gets current offset of the element relative to the parent layer, without
     * taking scroll position into account.
     *
     * @return {!PositionDef}
     */
    ;

    _proto2.getOffsetFromParent = function getOffsetFromParent() {
      this.remeasure();
      return this.position_;
    }
    /**
     * Whether the layout is a descendant of the most recently scrolled layer.
     *
     * This MUST NOT be called unless inside an #iterateAncestry iterator
     * function.  "Activeness" is only determined for the lifespan of the
     * #iterateAncestry call.
     *
     * @return {boolean}
     */
    ;

    _proto2.isActiveUnsafe = function isActiveUnsafe() {
      return (0, _log.dev)().assertBoolean(this.isActive_);
    }
    /**
     * Gets the minimal horizontal distance of this element from its parent's
     * "viewport".
     *
     * @return {number}
     */
    ;

    _proto2.getHorizontalDistanceFromParent = function getHorizontalDistanceFromParent() {
      var parent = this.getParentLayer();

      if (!parent) {
        return 0;
      }

      var _this$getOffsetFromPa = this.getOffsetFromParent(),
          left = _this$getOffsetFromPa.left;

      var _this$getSize = this.getSize(),
          width = _this$getSize.width;

      var scrollLeft = parent.getScrollLeft();
      var parentWidth = parent.getSize().width;

      if (left + width < scrollLeft) {
        // Element is to the left of the parent viewport
        return scrollLeft - (left + width);
      }

      if (scrollLeft + parentWidth < left) {
        // Element is to the right of the parent viewport
        return left - (scrollLeft + parentWidth);
      } // Element intersects


      return 0;
    }
    /**
     * Gets the ratio of the element's horizontal distance over the parent's
     * "viewport". Ie, "how many full scrolls horizontally does it take to
     * intersect this element"
     *
     * @return {number}
     */
    ;

    _proto2.getHorizontalViewportsFromParent = function getHorizontalViewportsFromParent() {
      var distance = this.getHorizontalDistanceFromParent();

      if (distance === 0) {
        return 0;
      }

      var parent = this.getParentLayer();
      var parentWidth = parent.getSize().width;
      return distance / parentWidth;
    }
    /**
     * Gets the minimal vertical distance of this element from its parent's
     * "viewport".
     *
     * @return {number}
     */
    ;

    _proto2.getVerticalDistanceFromParent = function getVerticalDistanceFromParent() {
      var parent = this.getParentLayer();

      if (!parent) {
        return 0;
      }

      var _this$getOffsetFromPa2 = this.getOffsetFromParent(),
          top = _this$getOffsetFromPa2.top;

      var _this$getSize2 = this.getSize(),
          height = _this$getSize2.height;

      var scrollTop = parent.getScrollTop();
      var parentHeight = parent.getSize().height;

      if (top + height < scrollTop) {
        // Element is above the parent viewport
        return scrollTop - (top + height);
      }

      if (scrollTop + parentHeight < top) {
        // Element is below the parent viewport
        return top - (scrollTop + parentHeight);
      } // Element intersects


      return 0;
    }
    /**
     * Gets the ratio of the element's vertical distance over the parent's
     * "viewport". Ie, "how many full scrolls vertical does it take to
     * intersect this element"
     *
     * @return {number}
     */
    ;

    _proto2.getVerticalViewportsFromParent = function getVerticalViewportsFromParent() {
      var distance = this.getVerticalDistanceFromParent();

      if (distance === 0) {
        return 0;
      }

      var parent = this.getParentLayer();
      var parentHeight = parent.getSize().height;
      return distance / parentHeight;
    }
    /**
     * Gets the current scrollTop of this layer.
     *
     * @return {number}
     */
    ;

    _proto2.getScrollTop = function getScrollTop() {
      this.updateScrollPosition_();
      return this.scrollTop_;
    }
    /**
     * Gets the current scrollLeft of this layer.
     *
     * @return {number}
     */
    ;

    _proto2.getScrollLeft = function getScrollLeft() {
      this.updateScrollPosition_();
      return this.scrollLeft_;
    }
    /**
     * Returns the current scrolled position of the element relative to the layer
     * represented by opt_ancestor (or opt_ancestor's parent layer, if it is not
     * a layer itself). This takes into account the scrolled position of every
     * layer in between.
     *
     * @param {Element=} opt_ancestor
     * @return {!PositionDef}
     */
    ;

    _proto2.getScrolledPosition = function getScrolledPosition(opt_ancestor) {
      // Compensate for the fact that the loop below will subtract the current
      // scroll position of this element. But, this element's scroll position
      // doesn't affect its overall position, only its children.
      // This is fine because the loop is guaranteed to roll at least once,
      // zeroing the scroll.
      var x = this.getScrollLeft();
      var y = this.getScrollTop(); // Find the layer to stop measuring at. This is so that you can find the
      // relative position of an element from some parent element, say the
      // position of a slide inside a carousel, without any further measurements.

      var stopAt = opt_ancestor ? LayoutElement.getParentLayer(opt_ancestor) : null;

      for (var l = this; l && l !== stopAt; l = l.getParentLayer()) {
        var position = l.getOffsetFromParent(); // Calculate the scrolled position. If the element has offset 200, and
        // the parent is scrolled 150, then the scrolled position is just 50.
        // Note that the scrolled position shouldn't take into account the scroll
        // position of this LayoutElement, so we've already compensated in
        // declaring x and y.

        x += position.left - l.getScrollLeft();
        y += position.top - l.getScrollTop();
      }

      return positionLt(x, y);
    }
    /**
     * Returns the absolute offset position of the element relative to the layer
     * represented by opt_ancestor (or opt_ancestor's parent layer, if it is not
     * a layer itself). This remains constant, regardless of the scrolled
     * position
     * of any layer in between.
     *
     * @param {Element=} opt_ancestor
     * @return {!PositionDef}
     */
    ;

    _proto2.getOffsetPosition = function getOffsetPosition(opt_ancestor) {
      var x = 0;
      var y = 0; // Find the layer to stop measuring at. This is so that you can find the
      // relative position of an element from some parent element, say the
      // position of a slide inside a carousel, without any further measurements.

      var stopAt = opt_ancestor ? LayoutElement.getParentLayer(opt_ancestor) : null;

      for (var l = this; l && l !== stopAt; l = l.getParentLayer()) {
        var position = l.getOffsetFromParent(); // Add up every offset position in the ancestry.

        x += position.left;
        y += position.top;
      }

      return positionLt(x, y);
    }
    /**
     * Dirties the element, so the next size/position calculation will remeasure
     * the element.
     */
    ;

    _proto2.dirtyMeasurements = function dirtyMeasurements() {
      this.needsRemeasure_ = true;
    }
    /**
     * Dirties the layer, so the next position calculation will remeasure the
     * scroll positions.
     */
    ;

    _proto2.dirtyScrollMeasurements = function dirtyScrollMeasurements() {
      this.needsScrollRemeasure_ = true;
    }
    /**
     * Remasures the element's size and offset position. This traverse as high as
     * possible in the layer tree to remeasure as many elements as possible in
     * one go. This is necessary both from a performance standpoint, and to
     * ensure that any calculation uses the correct value, since layer in the
     * ancestry may have been dirtied.
     *
     * No matter what, though, the current element will be remeasured.
     */
    ;

    _proto2.remeasure = function remeasure() {
      var layer = this; // Find the topmost dirty layer, and remeasure from there.

      for (var p = this.getParentLayer(); p; p = p.getParentLayer()) {
        if (p.needsRemeasure_) {
          layer = p;
        }
      }

      if (layer.needsRemeasure_) {
        layer.remeasure_();
      }
    }
    /**
     * Iterates the layout's parent layer ancestry, starting from the root down
     * to the layout.
     *
     * This sets a whether the layer isActive during that layer's iteration. Any
     * attempts to access #isActiveUnsafe outside of the iterator call will fail.
     *
     * @param {function(T, !LayoutElement, number, !AncestryStateDef):T} iterator
     * @param {!AncestryStateDef} state
     * @return {T}
     * @template T
     */
    ;

    _proto2.iterateAncestry = function iterateAncestry(iterator, state) {
      var activeLayer = isDestroyed(this.element_) ? null : _services.Services.layersForDoc(this.element_).getActiveLayer(); // Gather, and update whether the layers are descendants of the active
      // layer.

      var isActive = activeLayer === this || !!activeLayer && activeLayer.contains(this);
      (0, _log.devAssert)(ANCESTRY_CACHE.length === 0, 'ancestry cache must be empty');
      var layer = this;

      while (layer) {
        ANCESTRY_CACHE.push(layer);
        layer.isActive_ = isActive;

        if (layer === activeLayer) {
          isActive = false;
        }

        layer = layer.getParentLayer();
      }

      var accumulator = undefined;
      var length = ANCESTRY_CACHE.length;

      for (var i = 0; i < length; i++) {
        var _layer = ANCESTRY_CACHE.pop();

        accumulator = iterator(accumulator, _layer, i, state);
        _layer.isActive_ = undefined;
      }

      return accumulator;
    }
    /**
     * Remeasures the element, and all children, since this element was marked
     * dirty.
     *
     * @private
     */
    ;

    _proto2.remeasure_ = function remeasure_() {
      this.updateScrollPosition_();
      this.needsRemeasure_ = false;
      var element = this.element_; // We need a relative box to measure our offset. Importantly, this box must
      // be negatively offset by its scroll position, to account for the fact
      // that getBoundingClientRect() will only return scrolled positions.

      var parent = this.getParentLayer();
      var relative = parent ? parent.relativeScrolledPositionForChildren_(this) : positionLt(0, 0);
      this.size_ = sizeWh(element.
      /*OK*/
      clientWidth, element.
      /*OK*/
      clientHeight);

      var _element$getBoundingC = element.
      /*OK*/
      getBoundingClientRect(),
          left = _element$getBoundingC.left,
          top = _element$getBoundingC.top; // Viewport scroller layers are really screwed up. Their positions will
      // **double** count their scroll position (left === -scrollLeft, top ===
      // -scrollTop), which breaks with every other scroll box on the page.


      if (this.scrollsLikeViewport_) {
        left += this.getScrollLeft();
        top += this.getScrollTop();
      }

      this.position_ = positionLt(left - relative.left, top - relative.top); // In dev mode, we freeze the structs to prevent consumer from mutating it.
      // Stateless FTW.

      if (((0, _mode.getMode)().localDev || (0, _mode.getMode)().test) && Object.freeze) {
        Object.freeze(this.size_);
        Object.freeze(this.position_);
      } // Now, recursively measure all child nodes, to since they've probably been
      // invalidated by the parent changing.


      var children = this.children_;

      if (children.length) {
        for (var i = 0; i < children.length; i++) {
          // TODO(jridgewell): We can probably optimize this if this layer
          // didn't change at all.
          children[i].remeasure_();
        }
      }
    }
    /**
     * Updates the cached scroll positions of the layer, if the layer is dirty.
     * @private
     */
    ;

    _proto2.updateScrollPosition_ = function updateScrollPosition_() {
      if (this.isLayer_ && this.needsScrollRemeasure_) {
        this.needsScrollRemeasure_ = false;
        this.scrollLeft_ = this.element_.
        /*OK*/
        scrollLeft;
        this.scrollTop_ = this.element_.
        /*OK*/
        scrollTop;
      }
    }
    /**
     * Creates a relative measurement box to measure the offset of children
     * against. This negatively applies the current scroll position of the layer
     * to the coordinates, since the bounding box measurement of the child will
     * have positively applied that scroll position.
     *
     * @param {!LayoutElement} layout
     * @return {!PositionDef}
     * @private
     */
    ;

    _proto2.relativeScrolledPositionForChildren_ = function relativeScrolledPositionForChildren_(layout) {
      // If the child's layout element is in an another document, its scroll
      // position is relative to the root of that document.
      if (!sameDocument(this.element_, layout.element_)) {
        return positionLt(0, 0);
      }

      var ownerDocument = this.element_.ownerDocument;
      var position = this.getScrolledPosition(ownerDocument.documentElement);
      return positionLt(position.left - this.getScrollLeft(), position.top - this.getScrollTop());
    };

    return LayoutElement;
  }();
  /**
   * Whether the layout belongs to the same owner document as this layout,
   * meaning they share relative coordinate systems.
   *
   * @param {!Element} element
   * @param {!Element} other
   * @return {boolean}
   */


  exports.LayoutElement = LayoutElement;

  function sameDocument(element, other) {
    return element.ownerDocument === other.ownerDocument;
  }
  /**
   * Attempts to cross the FIE boundary to the parent node.
   *
   * @param {!Node} node
   * @return {?Element}
   */


  function frameParent(node) {
    (0, _log.devAssert)(node.nodeType === Node.DOCUMENT_NODE);

    try {
      var defaultView = node.defaultView;
      var frameElement = defaultView && defaultView.frameElement;
      return frameElement && (0, _friendlyIframeEmbed.getFriendlyIframeEmbedOptional)(frameElement) ? frameElement : null;
    } catch (e) {}

    return null;
  }
  /**
   * Checks several references to see if the node's context window has been
   * destroyed (eg, a node inside an iframe that was disconnected from the DOM).
   *
   * @param {!Node} node
   */


  function isDestroyed(node) {
    var ownerDocument = node.ownerDocument;

    if (!ownerDocument) {
      return true;
    }

    var defaultView = ownerDocument.defaultView;
    return !defaultView || !defaultView.document;
  }
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @param {!Element} scrollingElement
   * @param {boolean} scrollingElementScrollsLikeViewport
   */


  function installLayersServiceForDoc(ampdoc, scrollingElement, scrollingElementScrollsLikeViewport) {
    (0, _service.registerServiceBuilderForDoc)(ampdoc, 'layers', function (ampdoc) {
      return new LayoutLayers(ampdoc, scrollingElement, scrollingElementScrollsLikeViewport);
    },
    /* opt_instantiate */
    true);
  }

  },{"../dom":26,"../event-helper":31,"../friendly-iframe-embed":39,"../log":51,"../mode":53,"../service":71,"../services":112,"../style":118,"../utils/array":125}],89:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installGlobalNavigationHandlerForDoc = installGlobalNavigationHandlerForDoc;
  exports.maybeExpandUrlParamsForTesting = maybeExpandUrlParamsForTesting;
  exports.Navigation = exports.Priority = void 0;

  var _services = require("../services");

  var _dom = require("../dom");

  var _log = require("../log");

  var _object = require("../utils/object");

  var _css = require("../css");

  var _impression = require("../impression");

  var _mode = require("../mode");

  var _service = require("../service");

  var _types = require("../types");

  var _priorityQueue = _interopRequireDefault(require("../utils/priority-queue"));

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TAG = 'navigation';
  /** @private @const {string} */

  var EVENT_TYPE_CLICK = 'click';
  /** @private @const {string} */

  var EVENT_TYPE_CONTEXT_MENU = 'contextmenu';
  var VALID_TARGETS = ['_top', '_blank'];
  /** @private @const {string} */

  var ORIG_HREF_ATTRIBUTE = 'data-a4a-orig-href';
  /**
   * @enum {number} Priority reserved for extensions in anchor mutations.
   * The higher the priority, the sooner it's invoked.
   */

  var Priority = {
    LINK_REWRITER_MANAGER: 0,
    ANALYTICS_LINKER: 2
  };
  /**
   * Install navigation service for ampdoc, which handles navigations from anchor
   * tag clicks and other runtime features like AMP.navigateTo().
   *
   * Immediately instantiates the service.
   *
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   */

  exports.Priority = Priority;

  function installGlobalNavigationHandlerForDoc(ampdoc) {
    (0, _service.registerServiceBuilderForDoc)(ampdoc, TAG, Navigation,
    /* opt_instantiate */
    true);
  }
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @param {!Event} e
   * @visibleForTesting
   */


  function maybeExpandUrlParamsForTesting(ampdoc, e) {
    maybeExpandUrlParams(ampdoc, e);
  }
  /**
   * Intercept any click on the current document and prevent any
   * linking to an identifier from pushing into the history stack.
   * @implements {../service.EmbeddableService}
   * @visibleForTesting
   */


  var Navigation =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {(!Document|!ShadowRoot)=} opt_rootNode
     */
    function Navigation(ampdoc, opt_rootNode) {
      var _this = this;

      /** @const {!./ampdoc-impl.AmpDoc} */
      this.ampdoc = ampdoc;
      /** @private @const {!Document|!ShadowRoot} */

      this.rootNode_ = opt_rootNode || ampdoc.getRootNode();
      /** @private @const {!./viewport/viewport-impl.Viewport} */

      this.viewport_ = _services.Services.viewportForDoc(this.ampdoc);
      /** @private @const {!./viewer-impl.Viewer} */

      this.viewer_ = _services.Services.viewerForDoc(this.ampdoc);
      /** @private @const {!./history-impl.History} */

      this.history_ = _services.Services.historyForDoc(this.ampdoc);
      /** @private @const {!./platform-impl.Platform} */

      this.platform_ = _services.Services.platformFor(this.ampdoc.win);
      /** @private @const {boolean} */

      this.isIosSafari_ = this.platform_.isIos() && this.platform_.isSafari();
      /** @private @const {boolean} */

      this.isIframed_ = (0, _dom.isIframed)(this.ampdoc.win) && this.viewer_.isOvertakeHistory();
      /** @private @const {boolean} */

      this.isEmbed_ = this.rootNode_ != this.ampdoc.getRootNode();
      /** @private @const {boolean} */

      this.isInABox_ = (0, _mode.getMode)(this.ampdoc.win).runtime == 'inabox';
      /**
       * Must use URL parsing scoped to `rootNode_` for correct FIE behavior.
       * @private @const {!Element|!ShadowRoot}
       */

      this.serviceContext_ =
      /** @type {!Element|!ShadowRoot} */
      this.rootNode_.nodeType == Node.DOCUMENT_NODE ? this.rootNode_.documentElement : this.rootNode_;
      /** @private @const {!function(!Event)|undefined} */

      this.boundHandle_ = this.handle_.bind(this);
      this.rootNode_.addEventListener(EVENT_TYPE_CLICK, this.boundHandle_);
      this.rootNode_.addEventListener(EVENT_TYPE_CONTEXT_MENU, this.boundHandle_);
      /** @private {boolean} */

      this.appendExtraParams_ = false;
      (0, _impression.shouldAppendExtraParams)(this.ampdoc).then(function (res) {
        _this.appendExtraParams_ = res;
      });
      /**
       * Lazy-generated list of A2A-enabled navigation features.
       * @private {?Array<string>}
       */

      this.a2aFeatures_ = null;
      /**
       * @type {!PriorityQueue<function(!Element, !Event)>}
       * @private
       * @const
       */

      this.anchorMutators_ = new _priorityQueue.default();
    }
    /**
     * Registers a handler that performs URL replacement on the href
     * of an ad click.
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {!Window} win
     */


    Navigation.installAnchorClickInterceptor = function installAnchorClickInterceptor(ampdoc, win) {
      win.document.documentElement.addEventListener('click', maybeExpandUrlParams.bind(null, ampdoc),
      /* capture */
      true);
    }
    /** @override @nocollapse */
    ;

    Navigation.installInEmbedWindow = function installInEmbedWindow(embedWin, ampdoc) {
      (0, _service.installServiceInEmbedScope)(embedWin, TAG, new Navigation(ampdoc, embedWin.document));
    }
    /**
     * Removes all event listeners.
     */
    ;

    var _proto = Navigation.prototype;

    _proto.cleanup = function cleanup() {
      if (this.boundHandle_) {
        this.rootNode_.removeEventListener(EVENT_TYPE_CLICK, this.boundHandle_);
        this.rootNode_.removeEventListener(EVENT_TYPE_CONTEXT_MENU, this.boundHandle_);
      }
    }
    /**
     * Opens a new window with the specified target.
     *
     * @param {!Window} win A window to use to open a new window.
     * @param {string} url THe URL to open.
     * @param {string} target The target for the newly opened window.
     * @param {boolean} opener Whether or not the new window should have acccess
     *   to the opener (win).
     */
    ;

    _proto.openWindow = function openWindow(win, url, target, opener) {
      var options = ''; // We don't pass noopener for Chrome since it opens a new window without
      // tabs. Instead, we remove the opener property from the newly opened
      // window.
      // Note: for Safari, we need to use noopener instead of clearing the opener
      // property.

      if ((this.platform_.isIos() || !this.platform_.isChrome()) && !opener) {
        options += 'noopener';
      }

      var newWin = (0, _dom.openWindowDialog)(win, url, target, options); // For Chrome, since we cannot use noopener.

      if (newWin && !opener) {
        newWin.opener = null;
      }
    }
    /**
     * Navigates a window to a URL.
     *
     * If opt_requestedBy matches a feature name in a <meta> tag with attribute
     * name="amp-to-amp-navigation", then treats the URL as an AMP URL (A2A).
     *
     * @param {!Window} win
     * @param {string} url
     * @param {string=} opt_requestedBy
     * @param {!{
     *   target: (string|undefined),
     *   opener: (boolean|undefined),
     * }=} opt_options
     */
    ;

    _proto.navigateTo = function navigateTo(win, url, opt_requestedBy, _temp) {
      var _ref = _temp === void 0 ? {} : _temp,
          _ref$target = _ref.target,
          target = _ref$target === void 0 ? '_top' : _ref$target,
          _ref$opener = _ref.opener,
          opener = _ref$opener === void 0 ? false : _ref$opener;

      var urlService = _services.Services.urlForDoc(this.serviceContext_);

      if (!urlService.isProtocolValid(url)) {
        (0, _log.user)().error(TAG, 'Cannot navigate to invalid protocol: ' + url);
        return;
      }

      (0, _log.userAssert)(VALID_TARGETS.includes(target), "Target '" + target + "' not supported."); // If we have a target of "_blank", we will want to open a new window. A
      // target of "_top" should behave like it would on an anchor tag and
      // update the URL.

      if (target == '_blank') {
        this.openWindow(win, url, target, opener);
        return;
      } // If this redirect was requested by a feature that opted into A2A,
      // try to ask the viewer to navigate this AMP URL.


      if (opt_requestedBy) {
        if (!this.a2aFeatures_) {
          this.a2aFeatures_ = this.queryA2AFeatures_();
        }

        if (this.a2aFeatures_.includes(opt_requestedBy)) {
          if (this.navigateToAmpUrl(url, opt_requestedBy)) {
            return;
          }
        }
      } // Otherwise, perform normal behavior of navigating the top frame.


      win.top.location.href = url;
    }
    /**
     * Requests A2A navigation to the given destination. If the viewer does
     * not support this operation, does nothing.
     * The URL is assumed to be in AMP Cache format already.
     * @param {string} url An AMP article URL.
     * @param {string} requestedBy Informational string about the entity that
     *     requested the navigation.
     * @return {boolean} Returns true if navigation message was sent to viewer.
     *     Otherwise, returns false.
     */
    ;

    _proto.navigateToAmpUrl = function navigateToAmpUrl(url, requestedBy) {
      if (this.viewer_.hasCapability('a2a')) {
        this.viewer_.sendMessage('a2aNavigate', (0, _object.dict)({
          'url': url,
          'requestedBy': requestedBy
        }));
        return true;
      }

      return false;
    }
    /**
     * @return {!Array<string>}
     * @private
     */
    ;

    _proto.queryA2AFeatures_ = function queryA2AFeatures_() {
      var meta = this.rootNode_.querySelector('meta[name="amp-to-amp-navigation"]');

      if (meta && meta.hasAttribute('content')) {
        return meta.getAttribute('content').split(',').map(function (s) {
          return s.trim();
        });
      }

      return [];
    }
    /**
     * Intercept any click on the current document and prevent any
     * linking to an identifier from pushing into the history stack.
     *
     * This also handles custom protocols (e.g. whatsapp://) when iframed
     * on iOS Safari.
     *
     * @param {!Event} e
     * @private
     */
    ;

    _proto.handle_ = function handle_(e) {
      if (e.defaultPrevented) {
        return;
      }

      var element = (0, _log.dev)().assertElement(e.target);
      var target = (0, _dom.closestAncestorElementBySelector)(element, 'A');

      if (!target || !target.href) {
        return;
      }

      if (e.type == EVENT_TYPE_CLICK) {
        this.handleClick_(target, e);
      } else if (e.type == EVENT_TYPE_CONTEXT_MENU) {
        this.handleContextMenuClick_(target, e);
      }
    }
    /**
     * @param {!Element} target
     * @param {!Event} e
     * @private
     */
    ;

    _proto.handleClick_ = function handleClick_(target, e) {
      this.expandVarsForAnchor_(target);
      var location = this.parseUrl_(target.href); // Handle AMP-to-AMP navigation if rel=amphtml.

      if (this.handleA2AClick_(e, target, location)) {
        return;
      } // Handle navigating to custom protocol if applicable.


      if (this.handleCustomProtocolClick_(e, target, location)) {
        return;
      }

      this.anchorMutatorHandlers_(target, e);
      location = this.parseUrl_(target.href); // Finally, handle normal click-navigation behavior.

      this.handleNavClick_(e, target, location);
    }
    /**
     * @param {!Element} target
     * @param {!Event} e
     * @private
     */
    ;

    _proto.handleContextMenuClick_ = function handleContextMenuClick_(target, e) {
      // Handles contextmenu click. Note that currently this only deals
      // with url variable substitution and expansion, as there is
      // straightforward way of determining what the user clicked in the
      // context menu, required for A2A navigation and custom link protocol
      // handling.
      // TODO(alabiaga): investigate fix for handling A2A and custom link
      // protocols.
      this.expandVarsForAnchor_(target);
      this.anchorMutatorHandlers_(target, e);
    }
    /**
     * Handle anchor transformations.
     * @param {!Element} target
     * @param {!Event} e
     */
    ;

    _proto.anchorMutatorHandlers_ = function anchorMutatorHandlers_(target, e) {
      this.anchorMutators_.forEach(function (anchorMutator) {
        anchorMutator(target, e);
      });
    }
    /**
     * @param {!Element} el
     * @private
     */
    ;

    _proto.expandVarsForAnchor_ = function expandVarsForAnchor_(el) {
      // First check if need to handle external link decoration.
      var defaultExpandParamsUrl = null;

      if (this.appendExtraParams_ && !this.isEmbed_) {
        // Only decorate outgoing link when needed to and is not in FIE.
        defaultExpandParamsUrl = (0, _impression.getExtraParamsUrl)(this.ampdoc.win, el);
      }

      var urlReplacements = _services.Services.urlReplacementsForDoc(el);

      urlReplacements.maybeExpandLink(el, defaultExpandParamsUrl);
    }
    /**
     * Handles clicking on a custom protocol link.
     * Returns true if the navigation was handled. Otherwise, returns false.
     * @param {!Event} e
     * @param {!Element} target
     * @param {!Location} location
     * @return {boolean}
     * @private
     */
    ;

    _proto.handleCustomProtocolClick_ = function handleCustomProtocolClick_(e, target, location) {
      // Handle custom protocols only if the document is iframed.
      if (!this.isIframed_) {
        return false;
      }
      /** @const {!Window} */


      var win = (0, _types.toWin)(target.ownerDocument.defaultView);
      var url = target.href;
      var protocol = location.protocol; // On Safari iOS, custom protocol links will fail to open apps when the
      // document is iframed - in order to go around this, we set the top.location
      // to the custom protocol href.

      var isFTP = protocol == 'ftp:'; // In case of FTP Links in embedded documents always open then in _blank.

      if (isFTP) {
        (0, _dom.openWindowDialog)(win, url, '_blank');
        e.preventDefault();
        return true;
      }

      var isNormalProtocol = /^(https?|mailto):$/.test(protocol);

      if (this.isIosSafari_ && !isNormalProtocol) {
        (0, _dom.openWindowDialog)(win, url, '_top'); // Without preventing default the page would should an alert error twice
        // in the case where there's no app to handle the custom protocol.

        e.preventDefault();
        return true;
      }

      return false;
    }
    /**
     * Handles clicking on an AMP link.
     * Returns true if the navigation was handled. Otherwise, returns false.
     * @param {!Event} e
     * @param {!Element} target
     * @param {!Location} location
     * @return {boolean}
     * @private
     */
    ;

    _proto.handleA2AClick_ = function handleA2AClick_(e, target, location) {
      if (!target.hasAttribute('rel')) {
        return false;
      }

      var relations = target.getAttribute('rel').split(' ').map(function (s) {
        return s.trim();
      });

      if (!relations.includes('amphtml')) {
        return false;
      } // The viewer may not support the capability for navigating AMP links.


      if (this.navigateToAmpUrl(location.href, '<a rel=amphtml>')) {
        e.preventDefault();
        return true;
      }

      return false;
    }
    /**
     * Handles clicking on a link with hash navigation.
     * @param {!Event} e
     * @param {!Element} target
     * @param {!Location} tgtLoc
     * @private
     */
    ;

    _proto.handleNavClick_ = function handleNavClick_(e, target, tgtLoc) {
      var _this2 = this;

      // In test mode, we're not able to properly fix the anchor tag's base URL.
      // So, we have to use the (mocked) window's location instead.
      var baseHref = (0, _mode.getMode)().test && !this.isEmbed_ ? this.ampdoc.win.location.href : '';
      var curLoc = this.parseUrl_(baseHref);
      var tgtHref = "" + tgtLoc.origin + tgtLoc.pathname + tgtLoc.search;
      var curHref = "" + curLoc.origin + curLoc.pathname + curLoc.search; // If the current target anchor link is the same origin + path
      // as the current document then we know we are just linking to an
      // identifier in the document. Otherwise, it's an external navigation.

      if (!tgtLoc.hash || tgtHref != curHref) {
        if (this.isEmbed_ || this.isInABox_) {
          // Target in the embed must be either _top or _blank. If none specified,
          // force to _blank.
          var targetAttr = (target.getAttribute('target') || '').toLowerCase();

          if (targetAttr != '_top' && targetAttr != '_blank') {
            target.setAttribute('target', '_blank');
          }

          return; // bail early.
        } // Accessibility fix for IE browser.
        // Issue: anchor navigation in IE changes visual focus of the browser
        // and shifts to the element being linked to,
        // where the input focus stays where it was.
        // @see https://humanwhocodes.com/blog/2013/01/15/fixing-skip-to-content-links/
        // @see https://github.com/ampproject/amphtml/issues/18671


        if (_services.Services.platformFor(this.ampdoc.win).isIe()) {
          var internalTargetElmId = tgtLoc.hash.substring(1);
          var internalElm = this.ampdoc.getElementById(internalTargetElmId);

          if (internalElm) {
            if (!/^(?:a|select|input|button|textarea)$/i.test(internalElm.tagName)) {
              internalElm.tabIndex = -1;
            }

            (0, _dom.tryFocus)(internalElm);
          }
        }

        return;
      } // We prevent default so that the current click does not push
      // into the history stack as this messes up the external documents
      // history which contains the amp document.


      e.preventDefault(); // For an embed, do not perform scrolling or global history push - both have
      // significant UX and browser problems.

      if (this.isEmbed_) {
        return;
      } // Look for the referenced element.


      var hash = tgtLoc.hash.slice(1);
      var elem = null;

      if (hash) {
        var escapedHash = (0, _css.escapeCssSelectorIdent)(hash);
        elem = this.rootNode_.getElementById(hash) || // Fallback to anchor[name] if element with id is not found.
        // Linking to an anchor element with name is obsolete in html5.
        this.rootNode_.
        /*OK*/
        querySelector("a[name=\"" + escapedHash + "\"]");
      } // If possible do update the URL with the hash. As explained above
      // we do `replace` to avoid messing with the container's history.


      if (tgtLoc.hash != curLoc.hash) {
        this.history_.replaceStateForTarget(tgtLoc.hash).then(function () {
          _this2.scrollToElement_(elem, hash);
        });
      } else {
        // If the hash did not update just scroll to the element.
        this.scrollToElement_(elem, hash);
      }
    }
    /**
     * @param {function(!Element, !Event)} callback
     * @param {number} priority
     */
    ;

    _proto.registerAnchorMutator = function registerAnchorMutator(callback, priority) {
      this.anchorMutators_.enqueue(callback, priority);
    }
    /**
     * Scrolls the page to the given element.
     * @param {?Element} elem
     * @param {string} hash
     * @private
     */
    ;

    _proto.scrollToElement_ = function scrollToElement_(elem, hash) {
      var _this3 = this;

      // Scroll to the element if found.
      if (elem) {
        // The first call to scrollIntoView overrides browsers' default scrolling
        // behavior. The second call insides setTimeout allows us to scroll to
        // that element properly. Without doing this, the viewport will not catch
        // the updated scroll position on iOS Safari and hence calculate the wrong
        // scrollTop for the scrollbar jumping the user back to the top for
        // failing to calculate the new jumped offset. Without the first call
        // there will be a visual jump due to browser scroll. See
        // https://github.com/ampproject/amphtml/issues/5334 for more details.
        this.viewport_.
        /*OK*/
        scrollIntoView(elem);

        _services.Services.timerFor(this.ampdoc.win).delay(function () {
          return _this3.viewport_.
          /*OK*/
          scrollIntoView((0, _log.dev)().assertElement(elem));
        }, 1);
      } else {
        (0, _log.dev)().warn(TAG, "failed to find element with id=" + hash + " or a[name=" + hash + "]");
      }
    }
    /**
     * @param {string} url
     * @return {!Location}
     * @private
     */
    ;

    _proto.parseUrl_ = function parseUrl_(url) {
      return _services.Services.urlForDoc(this.serviceContext_).parse(url);
    };

    return Navigation;
  }();
  /**
   * Handle click on links and replace variables in the click URL.
   * The function changes the actual href value and stores the
   * template in the ORIGINAL_HREF_ATTRIBUTE attribute
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @param {!Event} e
   */


  exports.Navigation = Navigation;

  function maybeExpandUrlParams(ampdoc, e) {
    var target = (0, _dom.closestAncestorElementBySelector)((0, _log.dev)().assertElement(e.target), 'A');

    if (!target || !target.href) {
      // Not a click on a link.
      return;
    }

    var hrefToExpand = target.getAttribute(ORIG_HREF_ATTRIBUTE) || target.getAttribute('href');

    if (!hrefToExpand) {
      return;
    }

    var vars = {
      'CLICK_X': function CLICK_X() {
        return e.pageX;
      },
      'CLICK_Y': function CLICK_Y() {
        return e.pageY;
      }
    };

    var newHref = _services.Services.urlReplacementsForDoc(target).expandUrlSync(hrefToExpand, vars, undefined,
    /* opt_whitelist */
    {
      // For now we only allow to replace the click location vars
      // and nothing else.
      // NOTE: Addition to this whitelist requires additional review.
      'CLICK_X': true,
      'CLICK_Y': true
    });

    if (newHref != hrefToExpand) {
      // Store original value so that later clicks can be processed with
      // freshest values.
      if (!target.getAttribute(ORIG_HREF_ATTRIBUTE)) {
        target.setAttribute(ORIG_HREF_ATTRIBUTE, hrefToExpand);
      }

      target.setAttribute('href', newHref);
    }
  }

  },{"../css":21,"../dom":26,"../impression":43,"../log":51,"../mode":53,"../service":71,"../services":112,"../types":121,"../utils/object":132,"../utils/priority-queue":133}],90:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installPerformanceService = installPerformanceService;
  exports.performanceFor = performanceFor;
  exports.Performance = void 0;

  var _services = require("../services");

  var _log = require("../log");

  var _object = require("../utils/object");

  var _mode = require("../mode");

  var _service = require("../service");

  var _experiments = require("../experiments");

  var _layoutRect = require("../layout-rect");

  var _rateLimit = require("../utils/rate-limit");

  var _documentReady = require("../document-ready");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Maximum number of tick events we allow to accumulate in the performance
   * instance's queue before we start dropping those events and can no longer
   * be forwarded to the actual `tick` function when it is set.
   */
  var QUEUE_LIMIT = 50;
  /** @const {string} */

  var VISIBILITY_CHANGE_EVENT = 'visibilitychange';
  /** @const {string} */

  var BEFORE_UNLOAD_EVENT = 'beforeunload';
  /**
   * Fields:
   * {{
   *   label: string,
   *   delta: (number|null|undefined),
   *   value: (number|null|undefined)
   * }}
   * @typedef {!JsonObject}
   */

  var TickEventDef;
  /**
   * Increments the value, else defaults to 0 for the given object key.
   * @param {!Object<string, (string|number|boolean|Array|Object|null)>} obj
   * @param {?string} name
   */

  function incOrDef(obj, name) {
    if (!name) {
      return;
    }

    if (!obj[name]) {
      obj[name] = 1;
    } else {
      obj[name]++;
    }
  }
  /**
   * Performance holds the mechanism to call `tick` to stamp out important
   * events in the lifecycle of the AMP runtime. It can hold a small amount
   * of tick events to forward to the external `tick` function when it is set.
   */


  var Performance =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function Performance(win) {
      var _this = this;

      /** @const {!Window} */
      this.win = win;
      /** @private @const {number} */

      this.initTime_ = this.win.Date.now();
      /** @const @private {!Array<TickEventDef>} */

      this.events_ = [];
      /** @private {?./viewer-impl.Viewer} */

      this.viewer_ = null;
      /** @private {?./resources-impl.Resources} */

      this.resources_ = null;
      /** @private {boolean} */

      this.isMessagingReady_ = false;
      /** @private {boolean} */

      this.isPerformanceTrackingOn_ = false;
      /** @private {!Object<string,boolean>} */

      this.enabledExperiments_ = (0, _object.map)();
      /** @private {string} */

      this.ampexp_ = '';
      /** @private {number|null} */

      this.makeBodyVisible_ = null;
      /** @private {number|null} */

      this.firstContentfulPaint_ = null;
      /** @private {number|null} */

      this.firstViewportReady_ = null;
      /**
       * How many times a layout jank metric has been ticked.
       *
       * @private {number}
       */

      this.jankScoresTicked_ = 0;
      /**
       * The sum of all layout jank fractions triggered on the page from the
       * Layout Jank API.
       *
       * @private {number}
       */

      this.aggregateJankScore_ = 0;
      this.boundOnVisibilityChange_ = this.onVisibilityChange_.bind(this);
      this.boundTickLayoutJankScore_ = this.tickLayoutJankScore_.bind(this); // Add RTV version as experiment ID, so we can slice the data by version.

      this.addEnabledExperiment('rtv-' + (0, _mode.getMode)(this.win).rtvVersion);

      if ((0, _experiments.isCanary)(this.win)) {
        this.addEnabledExperiment('canary');
      } // Tick window.onload event.


      (0, _documentReady.whenDocumentComplete)(win.document).then(function () {
        return _this.onload_();
      });
      this.registerPerformanceObserver_();
      this.registerFirstInputDelayPolyfillListener_();
    }
    /**
     * Listens to viewer and resource events.
     * @return {!Promise}
     */


    var _proto = Performance.prototype;

    _proto.coreServicesAvailable = function coreServicesAvailable() {
      var _this2 = this;

      var documentElement = this.win.document.documentElement;
      this.viewer_ = _services.Services.viewerForDoc(documentElement);
      this.resources_ = _services.Services.resourcesForDoc(documentElement);
      this.isPerformanceTrackingOn_ = this.viewer_.isEmbedded() && this.viewer_.getParam('csi') === '1'; // This is for redundancy. Call flush on any visibility change.

      this.viewer_.onVisibilityChanged(this.flush.bind(this)); // Does not need to wait for messaging ready since it will be queued
      // if it isn't ready.

      this.measureUserPerceivedVisualCompletenessTime_(); // Can be null which would mean this AMP page is not embedded
      // and has no messaging channel.

      var channelPromise = this.viewer_.whenMessagingReady();
      this.viewer_.whenFirstVisible().then(function () {
        _this2.tick('ofv');

        _this2.flush();
      });

      if (this.win.PerformanceLayoutJank) {
        // Register a handler to record the layout jank metric when the page
        // enters the hidden lifecycle state.
        this.win.addEventListener(VISIBILITY_CHANGE_EVENT, this.boundOnVisibilityChange_, {
          capture: true
        }); // Safari does not reliably fire the `pagehide` or `visibilitychange`
        // events when closing a tab, so we have to use `beforeunload`.
        // See https://bugs.webkit.org/show_bug.cgi?id=151234

        var platform = _services.Services.platformFor(this.win);

        if (platform.isSafari()) {
          this.win.addEventListener(BEFORE_UNLOAD_EVENT, this.boundTickLayoutJankScore_);
        }
      } // We don't check `isPerformanceTrackingOn` here since there are some
      // events that we call on the viewer even though performance tracking
      // is off we only need to know if the AMP page has a messaging
      // channel or not.


      if (!channelPromise) {
        return Promise.resolve();
      }

      return channelPromise.then(function () {
        _this2.isMessagingReady_ = true; // Tick the "messaging ready" signal.

        _this2.tickDelta('msr', _this2.win.Date.now() - _this2.initTime_); // Forward all queued ticks to the viewer since messaging
        // is now ready.


        _this2.flushQueuedTicks_(); // Send all csi ticks through.


        _this2.flush();
      });
    }
    /**
     * Callback for onload.
     */
    ;

    _proto.onload_ = function onload_() {
      this.tick('ol');
      this.tickLegacyFirstPaintTime_();
      this.flush();
    }
    /**
     * Reports performance metrics first paint, first contentful paint,
     * and first input delay.
     * See https://github.com/WICG/paint-timing
     */
    ;

    _proto.registerPerformanceObserver_ = function registerPerformanceObserver_() {
      var _this3 = this;

      // Chrome doesn't implement the buffered flag for PerformanceObserver.
      // That means we need to read existing entries and maintain state
      // as to whether we have reported a value yet, since in the future it may
      // be reported twice.
      // https://bugs.chromium.org/p/chromium/issues/detail?id=725567
      var recordedFirstPaint = false;
      var recordedFirstContentfulPaint = false;
      var recordedFirstInputDelay = false;

      var processEntry = function processEntry(entry) {
        if (entry.name == 'first-paint' && !recordedFirstPaint) {
          _this3.tickDelta('fp', entry.startTime + entry.duration);

          recordedFirstPaint = true;
        } else if (entry.name == 'first-contentful-paint' && !recordedFirstContentfulPaint) {
          _this3.tickDelta('fcp', entry.startTime + entry.duration);

          recordedFirstContentfulPaint = true;
        } else if (entry.entryType === 'firstInput' && !recordedFirstInputDelay) {
          _this3.tickDelta('fid', entry.processingStart - entry.startTime);

          recordedFirstInputDelay = true;
        } else if (entry.entryType === 'layoutJank') {
          _this3.aggregateJankScore_ += entry.fraction;
        }
      };

      var entryTypesToObserve = [];

      if (this.win.PerformancePaintTiming) {
        // Programmatically read once as currently PerformanceObserver does not
        // report past entries as of Chrome 61.
        // https://bugs.chromium.org/p/chromium/issues/detail?id=725567
        this.win.performance.getEntriesByType('paint').forEach(processEntry);
        entryTypesToObserve.push('paint');
      }

      if (this.win.PerformanceEventTiming) {
        // Programmatically read once as currently PerformanceObserver does not
        // report past entries as of Chrome 61.
        // https://bugs.chromium.org/p/chromium/issues/detail?id=725567
        this.win.performance.getEntriesByType('firstInput').forEach(processEntry);
        entryTypesToObserve.push('firstInput');
      }

      if (this.win.PerformanceLayoutJank) {
        // Programmatically read once as currently PerformanceObserver does not
        // report past entries as of Chrome 61.
        // https://bugs.chromium.org/p/chromium/issues/detail?id=725567
        this.win.performance.getEntriesByType('layoutJank').forEach(processEntry);
        entryTypesToObserve.push('layoutJank');
      }

      if (entryTypesToObserve.length === 0) {
        return;
      }

      var observer = new this.win.PerformanceObserver(function (list) {
        list.getEntries().forEach(processEntry);

        _this3.flush();
      }); // Wrap observer.observe() in a try statement for testing, because
      // Webkit throws an error if the entry types to observe are not natively
      // supported.

      try {
        observer.observe({
          entryTypes: entryTypesToObserve
        });
      } catch (err) {
        (0, _log.dev)()
        /*OK*/
        .warn(err);
      }
    }
    /**
     * Reports the first input delay value calculated by a polyfill, if present.
     * @see https://github.com/GoogleChromeLabs/first-input-delay
     */
    ;

    _proto.registerFirstInputDelayPolyfillListener_ = function registerFirstInputDelayPolyfillListener_() {
      var _this4 = this;

      if (!this.win.perfMetrics || !this.win.perfMetrics.onFirstInputDelay) {
        return;
      }

      this.win.perfMetrics.onFirstInputDelay(function (delay) {
        _this4.tickDelta('fid-polyfill', delay);

        _this4.flush();
      });
    }
    /**
     * When the visibility state of the document changes to hidden,
     * send the layout jank score.
     */
    ;

    _proto.onVisibilityChange_ = function onVisibilityChange_() {
      if (this.win.document.visibilityState === 'hidden') {
        this.tickLayoutJankScore_();
      }
    }
    /**
     * Tick the layout jank score metric.
     *
     * A value of the metric is recorded in under two names, `lj` and `lj-2`,
     * for the first two times the page transitions into a hidden lifecycle state
     * (when the page is navigated a way from, the tab is backgrounded for
     * another tab, or the user backgrounds the browser application).
     *
     * Since we can't reliably detect when a page session finally ends,
     * recording the value for these first two events should provide a fair
     * amount of visibility into this metric.
     */
    ;

    _proto.tickLayoutJankScore_ = function tickLayoutJankScore_() {
      if (this.jankScoresTicked_ === 0) {
        this.tickDelta('lj', this.aggregateJankScore_);
        this.flush();
        this.jankScoresTicked_ = 1;
      } else if (this.jankScoresTicked_ === 1) {
        this.tickDelta('lj-2', this.aggregateJankScore_);
        this.flush();
        this.jankScoresTicked_ = 2; // No more work to do, so clean up event listeners.

        this.win.removeEventListener(VISIBILITY_CHANGE_EVENT, this.boundOnVisibilityChange_, {
          capture: true
        });
        this.win.removeEventListener(BEFORE_UNLOAD_EVENT, this.boundTickLayoutJankScore_);
      }
    }
    /**
     * Tick fp time based on Chrome's legacy paint timing API when
     * appropriate.
     * `registerPaintTimingObserver_` calls the standards based API and this
     * method does nothing if it is available.
     */
    ;

    _proto.tickLegacyFirstPaintTime_ = function tickLegacyFirstPaintTime_() {
      // Detect deprecated first pain time API
      // https://bugs.chromium.org/p/chromium/issues/detail?id=621512
      // We'll use this until something better is available.
      if (!this.win.PerformancePaintTiming && this.win.chrome && typeof this.win.chrome.loadTimes == 'function') {
        var fpTime = this.win.chrome.loadTimes()['firstPaintTime'] * 1000 - this.win.performance.timing.navigationStart;

        if (fpTime <= 1) {
          // Throw away bad data generated from an apparent Chrome bug
          // that is fixed in later Chrome versions.
          return;
        }

        this.tickDelta('fp', fpTime);
      }
    }
    /**
     * Measure the delay the user perceives of how long it takes
     * to load the initial viewport.
     * @private
     */
    ;

    _proto.measureUserPerceivedVisualCompletenessTime_ = function measureUserPerceivedVisualCompletenessTime_() {
      var _this5 = this;

      var didStartInPrerender = !this.viewer_.hasBeenVisible();
      var docVisibleTime = didStartInPrerender ? -1 : this.initTime_; // This is only relevant if the viewer is in prerender mode.
      // (hasn't been visible yet, ever at this point)

      if (didStartInPrerender) {
        this.viewer_.whenFirstVisible().then(function () {
          docVisibleTime = _this5.win.Date.now(); // Mark this first visible instance in the browser timeline.

          _this5.mark('visible');
        });
      }

      this.whenViewportLayoutComplete_().then(function () {
        if (didStartInPrerender) {
          var userPerceivedVisualCompletenesssTime = docVisibleTime > -1 ? _this5.win.Date.now() - docVisibleTime : //  Prerender was complete before visibility.
          0;

          _this5.viewer_.whenFirstVisible().then(function () {
            // We only tick this if the page eventually becomes visible,
            // since otherwise we heavily skew the metric towards the
            // 0 case, since pre-renders that are never used are highly
            // likely to fully load before they are never used :)
            _this5.tickDelta('pc', userPerceivedVisualCompletenesssTime);
          });

          _this5.prerenderComplete_(userPerceivedVisualCompletenesssTime); // Mark this instance in the browser timeline.


          _this5.mark('pc');
        } else {
          // If it didnt start in prerender, no need to calculate anything
          // and we just need to tick `pc`. (it will give us the relative
          // time since the viewer initialized the timer)
          _this5.tick('pc'); // We don't have the actual csi timer's clock start time,
          // so we just have to use `docVisibleTime`.


          _this5.prerenderComplete_(_this5.win.Date.now() - docVisibleTime);
        }

        _this5.flush();
      });
    }
    /**
     * Returns a promise that is resolved when resources in viewport
     * have been finished being laid out.
     * @return {!Promise}
     * @private
     */
    ;

    _proto.whenViewportLayoutComplete_ = function whenViewportLayoutComplete_() {
      var documentElement = this.win.document.documentElement;

      var size = _services.Services.viewportForDoc(documentElement).getSize();

      var rect = (0, _layoutRect.layoutRectLtwh)(0, 0, size.width, size.height);
      return this.resources_.getResourcesInRect(this.win, rect,
      /* isInPrerender */
      true).then(function (resources) {
        return Promise.all(resources.map(function (r) {
          return r.loadedOnce();
        }));
      });
    }
    /**
     * Ticks a timing event.
     *
     * @param {string} label The variable name as it will be reported.
     *     See TICKEVENTS.md for available metrics, and edit this file
     *     when adding a new metric.
     * @param {number=} opt_delta The delta. Call tickDelta instead of setting
     *     this directly.
     */
    ;

    _proto.tick = function tick(label, opt_delta) {
      var value = opt_delta == undefined ? this.win.Date.now() : undefined;
      var data = (0, _object.dict)({
        'label': label,
        'value': value,
        // Delta can negative, but will always be changed to 0.
        'delta': opt_delta != null ? Math.max(opt_delta, 0) : undefined
      });

      if (this.isMessagingReady_ && this.isPerformanceTrackingOn_) {
        this.viewer_.sendMessage('tick', data);
      } else {
        this.queueTick_(data);
      } // Mark the event on the browser timeline, but only if there was
      // no delta (in which case it would not make sense).


      if (arguments.length == 1) {
        this.mark(label);
      } // Store certain page visibility metrics to be exposed as analytics
      // variables.


      var storedVal = Math.round(opt_delta != null ? Math.max(opt_delta, 0) : value - this.initTime_);

      switch (label) {
        case 'fcp':
          this.firstContentfulPaint_ = storedVal;
          break;

        case 'pc':
          this.firstViewportReady_ = storedVal;
          break;

        case 'mbv':
          this.makeBodyVisible_ = storedVal;
          break;
      }
    }
    /**
     * Add browser performance timeline entries for simple ticks.
     * These are for example exposed in WPT.
     * See https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark
     * @param {string} label
     */
    ;

    _proto.mark = function mark(label) {
      if (this.win.performance && this.win.performance.mark && arguments.length == 1) {
        this.win.performance.mark(label);
      }
    }
    /**
     * Tick a very specific value for the label. Use this method if you
     * measure the time it took to do something yourself.
     * @param {string} label The variable name as it will be reported.
     * @param {number} value The value in milliseconds that should be ticked.
     */
    ;

    _proto.tickDelta = function tickDelta(label, value) {
      this.tick(label, value);
    }
    /**
     * Tick time delta since the document has become visible.
     * @param {string} label The variable name as it will be reported.
     */
    ;

    _proto.tickSinceVisible = function tickSinceVisible(label) {
      var now = this.win.Date.now();
      var visibleTime = this.viewer_ ? this.viewer_.getFirstVisibleTime() : 0;
      var v = visibleTime ? Math.max(now - visibleTime, 0) : 0;
      this.tickDelta(label, v);
    }
    /**
     * Ask the viewer to flush the ticks
     */
    ;

    _proto.flush = function flush() {
      if (this.isMessagingReady_ && this.isPerformanceTrackingOn_) {
        this.viewer_.sendMessage('sendCsi', (0, _object.dict)({
          'ampexp': this.ampexp_
        }),
        /* cancelUnsent */
        true);
      }
    }
    /**
     * Flush with a rate limit of 10 per second.
     */
    ;

    _proto.throttledFlush = function throttledFlush() {
      if (!this.throttledFlush_) {
        /** @private {function()} */
        this.throttledFlush_ = (0, _rateLimit.throttle)(this.win, this.flush.bind(this), 100);
      }

      this.throttledFlush_();
    }
    /**
     * @param {string} experimentId
     */
    ;

    _proto.addEnabledExperiment = function addEnabledExperiment(experimentId) {
      this.enabledExperiments_[experimentId] = true;
      this.ampexp_ = Object.keys(this.enabledExperiments_).join(',');
    }
    /**
     * Queues the events to be flushed when tick function is set.
     *
     * @param {TickEventDef} data Tick data to be queued.
     * @private
     */
    ;

    _proto.queueTick_ = function queueTick_(data) {
      // Start dropping the head of the queue if we've reached the limit
      // so that we don't take up too much memory in the runtime.
      if (this.events_.length >= QUEUE_LIMIT) {
        this.events_.shift();
      }

      this.events_.push(data);
    }
    /**
     * Forwards all queued ticks to the viewer tick method.
     * @private
     */
    ;

    _proto.flushQueuedTicks_ = function flushQueuedTicks_() {
      var _this6 = this;

      if (!this.viewer_) {
        return;
      }

      if (!this.isPerformanceTrackingOn_) {
        // drop all queued ticks to not leak
        this.events_.length = 0;
        return;
      }

      this.events_.forEach(function (tickEvent) {
        _this6.viewer_.sendMessage('tick', tickEvent);
      });
      this.events_.length = 0;
    }
    /**
     * @private
     * @param {number} value
     */
    ;

    _proto.prerenderComplete_ = function prerenderComplete_(value) {
      if (this.viewer_) {
        this.viewer_.sendMessage('prerenderComplete', (0, _object.dict)({
          'value': value
        }),
        /* cancelUnsent */
        true);
      }
    }
    /**
     * Identifies if the viewer is able to track performance. If the document is
     * not embedded, there is no messaging channel, so no performance tracking is
     * needed since there is nobody to forward the events.
     * @return {boolean}
     */
    ;

    _proto.isPerformanceTrackingOn = function isPerformanceTrackingOn() {
      return this.isPerformanceTrackingOn_;
    }
    /**
     * @return {number|null}
     */
    ;

    _proto.getFirstContentfulPaint = function getFirstContentfulPaint() {
      return this.firstContentfulPaint_;
    }
    /**
     * @return {number|null}
     */
    ;

    _proto.getMakeBodyVisible = function getMakeBodyVisible() {
      return this.makeBodyVisible_;
    }
    /**
     * @return {number|null}
     */
    ;

    _proto.getFirstViewportReady = function getFirstViewportReady() {
      return this.firstViewportReady_;
    };

    return Performance;
  }();
  /**
   * @param {!Window} window
   */


  exports.Performance = Performance;

  function installPerformanceService(window) {
    (0, _service.registerServiceBuilder)(window, 'performance', Performance);
  }
  /**
   * @param {!Window} window
   * @return {!Performance}
   */


  function performanceFor(window) {
    return (0, _service.getService)(window, 'performance');
  }

  },{"../document-ready":24,"../experiments":32,"../layout-rect":48,"../log":51,"../mode":53,"../service":71,"../services":112,"../utils/object":132,"../utils/rate-limit":135}],91:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installPlatformService = installPlatformService;
  exports.Platform = void 0;

  var _service = require("../service");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * A helper class that provides information about device/OS/browser currently
   * running.
   */
  var Platform =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function Platform(win) {
      /** @const @private {!Navigator} */
      this.navigator_ =
      /** @type {!Navigator} */
      win.navigator;
    }
    /**
     * Whether the current platform an Android device.
     * @return {boolean}
     */


    var _proto = Platform.prototype;

    _proto.isAndroid = function isAndroid() {
      return /Android/i.test(this.navigator_.userAgent);
    }
    /**
     * Whether the current platform an iOS device.
     * @return {boolean}
     */
    ;

    _proto.isIos = function isIos() {
      return /iPhone|iPad|iPod/i.test(this.navigator_.userAgent);
    }
    /**
     * Whether the current browser is Safari.
     * @return {boolean}
     */
    ;

    _proto.isSafari = function isSafari() {
      return /Safari/i.test(this.navigator_.userAgent) && !this.isChrome() && !this.isIe() && !this.isEdge() && !this.isFirefox() && !this.isOpera();
    }
    /**
     * Whether the current browser is a Chrome browser.
     * @return {boolean}
     */
    ;

    _proto.isChrome = function isChrome() {
      // Also true for MS Edge :)
      return /Chrome|CriOS/i.test(this.navigator_.userAgent) && !this.isEdge() && !this.isOpera();
    }
    /**
     * Whether the current browser is a Firefox browser.
     * @return {boolean}
     */
    ;

    _proto.isFirefox = function isFirefox() {
      return /Firefox|FxiOS/i.test(this.navigator_.userAgent) && !this.isEdge();
    }
    /**
     * Whether the current browser is an Opera browser.
     * @return {boolean}
     */
    ;

    _proto.isOpera = function isOpera() {
      // Chrome UA on Android may include OPR<v> (build code referring to Oreo),
      // however real Opera puts put a / after OPR and that's the only tell, so
      // we check for OPR/ instead of OPR
      return /OPR\/|Opera|OPiOS/i.test(this.navigator_.userAgent);
    }
    /**
     * Whether the current browser is a IE browser.
     * @return {boolean}
     */
    ;

    _proto.isIe = function isIe() {
      return /Trident|MSIE|IEMobile/i.test(this.navigator_.userAgent);
    }
    /**
     * Whether the current browser is an Edge browser.
     * @return {boolean}
     */
    ;

    _proto.isEdge = function isEdge() {
      return /Edge/i.test(this.navigator_.userAgent);
    }
    /**
     * Whether the current browser is based on the WebKit engine.
     * @return {boolean}
     */
    ;

    _proto.isWebKit = function isWebKit() {
      return /WebKit/i.test(this.navigator_.userAgent) && !this.isEdge();
    }
    /**
     * Whether the current browser is running on Windows.
     * @return {boolean}
     */
    ;

    _proto.isWindows = function isWindows() {
      return /Windows/i.test(this.navigator_.userAgent);
    }
    /**
     * Whether the current browser is isStandalone.
     * @return {boolean}
     */
    ;

    _proto.isStandalone = function isStandalone() {
      return this.isIos() && this.navigator_.standalone;
    }
    /**
     * Whether the current platform matches a bot user agent.
     * @return {boolean}
     */
    ;

    _proto.isBot = function isBot() {
      return /bot/i.test(this.navigator_.userAgent);
    }
    /**
     * Returns the major version of the browser.
     * @return {number}
     */
    ;

    _proto.getMajorVersion = function getMajorVersion() {
      if (this.isSafari()) {
        return this.isIos() ? this.getIosMajorVersion() || 0 : this.evalMajorVersion_(/\sVersion\/(\d+)/, 1);
      }

      if (this.isChrome()) {
        return this.evalMajorVersion_(/(Chrome|CriOS)\/(\d+)/, 2);
      }

      if (this.isFirefox()) {
        return this.evalMajorVersion_(/(Firefox|FxiOS)\/(\d+)/, 2);
      }

      if (this.isOpera()) {
        return this.evalMajorVersion_(/(OPR|Opera|OPiOS)\/(\d+)/, 2);
      }

      if (this.isIe()) {
        return this.evalMajorVersion_(/MSIE\s(\d+)/, 1);
      }

      if (this.isEdge()) {
        return this.evalMajorVersion_(/Edge\/(\d+)/, 1);
      }

      return 0;
    }
    /**
     * @param {!RegExp} expr
     * @param {number} index The index in the result that's interpreted as the
     *   major version (integer).
     * @return {number}
     */
    ;

    _proto.evalMajorVersion_ = function evalMajorVersion_(expr, index) {
      if (!this.navigator_.userAgent) {
        return 0;
      }

      var res = this.navigator_.userAgent.match(expr);

      if (!res || index >= res.length) {
        return 0;
      }

      return parseInt(res[index], 10);
    }
    /**
     * Returns the minor ios version in string.
     * The ios version can contain two numbers (10.2) or three numbers (10.2.1).
     * Direct string equality check is not suggested, use startWith instead.
     * @return {string}
     */
    ;

    _proto.getIosVersionString = function getIosVersionString() {
      if (!this.navigator_.userAgent) {
        return '';
      }

      if (!this.isIos()) {
        return '';
      }

      var version = this.navigator_.userAgent.match(/OS ([0-9]+[_.][0-9]+([_.][0-9]+)?)\b/);

      if (!version) {
        return '';
      }

      version = version[1].replace(/_/g, '.');
      return version;
    }
    /**
     * Returns the major ios version in number.
     * @return {?number}
     */
    ;

    _proto.getIosMajorVersion = function getIosMajorVersion() {
      var currentIosVersion = this.getIosVersionString();

      if (currentIosVersion == '') {
        return null;
      }

      return Number(currentIosVersion.split('.')[0]);
    };

    return Platform;
  }();
  /**
   * @param {!Window} window
   */


  exports.Platform = Platform;

  function installPlatformService(window) {
    return (0, _service.registerServiceBuilder)(window, 'platform', Platform);
  }

  },{"../service":71}],92:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.Resource = exports.ResourceState = void 0;

  var _ampEvents = require("../amp-events");

  var _promise = require("../utils/promise");

  var _layout = require("../layout");

  var _services = require("../services");

  var _style = require("../style");

  var _log = require("../log");

  var _error = require("../error");

  var _experiments = require("../experiments");

  var _layoutRect = require("../layout-rect");

  var _string = require("../string");

  var _types = require("../types");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TAG = 'Resource';
  var RESOURCE_PROP_ = '__AMP__RESOURCE';
  var OWNER_PROP_ = '__AMP__OWNER';
  /**
   * Resource state.
   *
   * @enum {number}
   */

  var ResourceState = {
    /**
     * The resource has not been built yet. Measures, layouts, preloads or
     * viewport signals are not allowed.
     */
    NOT_BUILT: 0,

    /**
     * The resource has been built, but not measured yet and not yet ready
     * for layout.
     */
    NOT_LAID_OUT: 1,

    /**
     * The resource has been built and measured and ready for layout.
     */
    READY_FOR_LAYOUT: 2,

    /**
     * The resource is currently scheduled for layout.
     */
    LAYOUT_SCHEDULED: 3,

    /**
     * The resource has been laid out.
     */
    LAYOUT_COMPLETE: 4,

    /**
     * The latest resource's layout failed.
     */
    LAYOUT_FAILED: 5
  };
  /** @typedef {{
    distance: (boolean|number),
      viewportHeight: (number|undefined),
      scrollPenalty: (number|undefined),
    }} */

  exports.ResourceState = ResourceState;
  var ViewportRatioDef;
  /**
   * A Resource binding for an AmpElement.
   * @package
   */

  var Resource =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Element} element
     * @return {!Resource}
     */
    Resource.forElement = function forElement(element) {
      return (
        /** @type {!Resource} */
        (0, _log.devAssert)(Resource.forElementOptional(element), 'Missing resource prop on %s', element)
      );
    }
    /**
     * @param {!Element} element
     * @return {Resource}
     */
    ;

    Resource.forElementOptional = function forElementOptional(element) {
      return (
        /** @type {Resource} */
        element[RESOURCE_PROP_]
      );
    }
    /**
     * Assigns an owner for the specified element. This means that the resources
     * within this element will be managed by the owner and not Resources manager.
     * @param {!Element} element
     * @param {!AmpElement} owner
     */
    ;

    Resource.setOwner = function setOwner(element, owner) {
      (0, _log.devAssert)(owner.contains(element), 'Owner must contain the element');

      if (Resource.forElementOptional(element)) {
        Resource.forElementOptional(element).updateOwner(owner);
      }

      element[OWNER_PROP_] = owner; // Need to clear owner cache for all child elements

      var cachedElements = element.getElementsByClassName('i-amphtml-element');

      for (var i = 0; i < cachedElements.length; i++) {
        var ele = cachedElements[i];

        if (Resource.forElementOptional(ele)) {
          Resource.forElementOptional(ele).updateOwner(undefined);
        }
      }
    }
    /**
     * @param {number} id
     * @param {!AmpElement} element
     * @param {!./resources-impl.Resources} resources
     */
    ;

    function Resource(id, element, resources) {
      element[RESOURCE_PROP_] = this;
      /** @private {number} */

      this.id_ = id;
      /** @export @const {!AmpElement} */

      this.element = element;
      /** @export @const {string} */

      this.debugid = element.tagName.toLowerCase() + '#' + id;
      /** @const {!Window} */

      this.hostWin = (0, _types.toWin)(element.ownerDocument.defaultView);
      /** @const @private {!./resources-impl.Resources} */

      this.resources_ = resources;
      /** @const @private {boolean} */

      this.isPlaceholder_ = element.hasAttribute('placeholder');
      /** @private {boolean} */

      this.isBuilding_ = false;
      /** @private {!AmpElement|undefined|null} */

      this.owner_ = undefined;
      /** @private {!ResourceState} */

      this.state_ = element.isBuilt() ? ResourceState.NOT_LAID_OUT : ResourceState.NOT_BUILT;
      /** @private {number} */

      this.priorityOverride_ = -1;
      /** @private {number} */

      this.layoutCount_ = 0;
      /** @private {*} */

      this.lastLayoutError_ = null;
      /** @private {boolean} */

      this.isFixed_ = false;
      /** @private {!../layout-rect.LayoutRectDef} */

      this.layoutBox_ = (0, _layoutRect.layoutRectLtwh)(-10000, -10000, 0, 0);
      /** @private {?../layout-rect.LayoutRectDef} */

      this.initialLayoutBox_ = null;
      /** @private {boolean} */

      this.isMeasureRequested_ = false;
      /**
       * Really, this is a <number, !Deferred> map,
       * but CC's type system can't handle it.
       * @private {?Object<string, !Deferred>}
       */

      this.withViewportDeferreds_ = null;
      /** @private {?Promise<undefined>} */

      this.layoutPromise_ = null;
      /**
      * Pending change size that was requested but could not be satisfied.
      * @private {!./resources-impl.SizeDef|undefined}
      */

      this.pendingChangeSize_ = undefined;
      /** @private {boolean} */

      this.loadedOnce_ = false;
      var deferred = new _promise.Deferred();
      /** @private @const {!Promise} */

      this.loadPromise_ = deferred.promise;
      /** @private {?Function} */

      this.loadPromiseResolve_ = deferred.resolve;
      /** @private @const {boolean} */

      this.useLayers_ = (0, _experiments.isExperimentOn)(this.hostWin, 'layers');
      /** @private @const {boolean} */

      this.useLayersPrioritization_ = (0, _experiments.isExperimentOn)(this.hostWin, 'layers-prioritization');
    }
    /**
     * Returns resource's ID.
     * @return {number}
     */


    var _proto = Resource.prototype;

    _proto.getId = function getId() {
      return this.id_;
    }
    /**
     * Update owner element
     * @param {AmpElement|undefined} owner
     */
    ;

    _proto.updateOwner = function updateOwner(owner) {
      this.owner_ = owner;
    }
    /**
     * Returns an owner element or null.
     * @return {?AmpElement}
     */
    ;

    _proto.getOwner = function getOwner() {
      if (this.owner_ === undefined) {
        for (var n = this.element; n; n = n.parentElement) {
          if (n[OWNER_PROP_]) {
            this.owner_ = n[OWNER_PROP_];
            break;
          }
        }

        if (this.owner_ === undefined) {
          this.owner_ = null;
        }
      }

      return this.owner_;
    }
    /**
     * Whether the resource has an owner.
     * @return {boolean}
     */
    ;

    _proto.hasOwner = function hasOwner() {
      return !!this.getOwner();
    }
    /**
     * Returns the resource's element priority.
     * @return {number}
     */
    ;

    _proto.getLayoutPriority = function getLayoutPriority() {
      if (this.priorityOverride_ != -1) {
        return this.priorityOverride_;
      }

      return this.element.getLayoutPriority();
    }
    /**
     * Overrides the element's priority.
     * @param {number} newPriority
     */
    ;

    _proto.updateLayoutPriority = function updateLayoutPriority(newPriority) {
      this.priorityOverride_ = newPriority;
    }
    /**
     * Returns the resource's state. See {@link ResourceState} for details.
     * @return {!ResourceState}
     */
    ;

    _proto.getState = function getState() {
      return this.state_;
    }
    /**
     * Returns whether the resource has been fully built.
     * @return {boolean}
     */
    ;

    _proto.isBuilt = function isBuilt() {
      return this.element.isBuilt();
    }
    /**
     * Returns whether the resource is currently being built.
     * @return {boolean}
     */
    ;

    _proto.isBuilding = function isBuilding() {
      return this.isBuilding_;
    }
    /**
     * Returns promise that resolves when the element has been built.
     * @return {!Promise}
     */
    ;

    _proto.whenBuilt = function whenBuilt() {
      // TODO(dvoytenko): merge with the standard BUILT signal.
      return this.element.signals().whenSignal('res-built');
    }
    /**
     * Requests the resource's element to be built. See {@link AmpElement.build}
     * for details.
     * @return {?Promise}
     */
    ;

    _proto.build = function build() {
      var _this = this;

      if (this.isBuilding_ || !this.element.isUpgraded() || !this.resources_.grantBuildPermission()) {
        return null;
      }

      this.isBuilding_ = true;
      return this.element.build().then(function () {
        _this.isBuilding_ = false;

        if (_this.hasBeenMeasured()) {
          _this.state_ = ResourceState.READY_FOR_LAYOUT;

          _this.element.updateLayoutBox(_this.getLayoutBox(), true);
        } else {
          _this.state_ = ResourceState.NOT_LAID_OUT;
        } // TODO(dvoytenko): merge with the standard BUILT signal.


        _this.element.signals().signal('res-built'); // TODO(dvoytenko, #7389): cleanup once amp-sticky-ad signals are
        // in PROD.


        _this.element.dispatchCustomEvent(_ampEvents.AmpEvents.BUILT);
      }, function (reason) {
        _this.maybeReportErrorOnBuildFailure(reason);

        _this.isBuilding_ = false;

        _this.element.signals().rejectSignal('res-built', reason);

        throw reason;
      });
    }
    /**
     * @param {*} reason
     * @visibleForTesting
     */
    ;

    _proto.maybeReportErrorOnBuildFailure = function maybeReportErrorOnBuildFailure(reason) {
      if (!(0, _error.isBlockedByConsent)(reason)) {
        (0, _log.dev)().error(TAG, 'failed to build:', this.debugid, reason);
      }
    }
    /**
     * Optionally hides or shows the element depending on the media query.
     */
    ;

    _proto.applySizesAndMediaQuery = function applySizesAndMediaQuery() {
      this.element.applySizesAndMediaQuery();
    }
    /**
     * Instructs the element to change its size and transitions to the state
     * awaiting the measure and possibly layout.
     * @param {number|undefined} newHeight
     * @param {number|undefined} newWidth
     * @param {!../layout-rect.LayoutMarginsChangeDef=} opt_newMargins
     */
    ;

    _proto.changeSize = function changeSize(newHeight, newWidth, opt_newMargins) {
      this.element.
      /*OK*/
      changeSize(newHeight, newWidth, opt_newMargins); // Schedule for re-measure and possible re-layout.

      this.requestMeasure();
    }
    /**
     * Informs the element that it's either overflown or not.
     * @param {boolean} overflown
     * @param {number|undefined} requestedHeight
     * @param {number|undefined} requestedWidth
     * @param {!../layout-rect.LayoutMarginsChangeDef|undefined} requestedMargins
     */
    ;

    _proto.overflowCallback = function overflowCallback(overflown, requestedHeight, requestedWidth, requestedMargins) {
      if (overflown) {
        this.pendingChangeSize_ = {
          height: requestedHeight,
          width: requestedWidth,
          margins: requestedMargins
        };
      }

      this.element.overflowCallback(overflown, requestedHeight, requestedWidth, requestedMargins);
    }
    /** reset pending change sizes */
    ;

    _proto.resetPendingChangeSize = function resetPendingChangeSize() {
      this.pendingChangeSize_ = undefined;
    }
    /**
     * @return {!./resources-impl.SizeDef|undefined}
     */
    ;

    _proto.getPendingChangeSize = function getPendingChangeSize() {
      return this.pendingChangeSize_;
    }
    /**
     * Time delay imposed by baseElement upgradeCallback.  If no
     * upgradeCallback specified or not yet executed, delay is 0.
     * @return {number}
     */
    ;

    _proto.getUpgradeDelayMs = function getUpgradeDelayMs() {
      return this.element.getUpgradeDelayMs();
    }
    /**
     * Measures the resource's boundaries. An upgraded element will be
     * transitioned to the "ready for layout" state.
     */
    ;

    _proto.measure = function measure() {
      // Check if the element is ready to be measured.
      // Placeholders are special. They are technically "owned" by parent AMP
      // elements, sized by parents, but laid out independently. This means
      // that placeholders need to at least wait until the parent element
      // has been stubbed. We can tell whether the parent has been stubbed
      // by whether a resource has been attached to it.
      if (this.isPlaceholder_ && this.element.parentElement && // Use prefix to recognize AMP element. This is necessary because stub
      // may not be attached yet.
      (0, _string.startsWith)(this.element.parentElement.tagName, 'AMP-') && !(RESOURCE_PROP_ in this.element.parentElement)) {
        return;
      }

      this.isMeasureRequested_ = false;
      var oldBox = this.layoutBox_;

      if (this.useLayers_) {
        this.measureViaLayers_();
      } else {
        this.measureViaResources_();
      }

      var box = this.layoutBox_; // Note that "left" doesn't affect readiness for the layout.

      var sizeChanges = !(0, _layoutRect.layoutRectSizeEquals)(oldBox, box);

      if (this.state_ == ResourceState.NOT_LAID_OUT || oldBox.top != box.top || sizeChanges) {
        if (this.element.isUpgraded() && this.state_ != ResourceState.NOT_BUILT && (this.state_ == ResourceState.NOT_LAID_OUT || this.element.isRelayoutNeeded())) {
          this.state_ = ResourceState.READY_FOR_LAYOUT;
        }
      }

      if (!this.hasBeenMeasured()) {
        this.initialLayoutBox_ = box;
      }

      this.element.updateLayoutBox(box, sizeChanges);
    }
    /** Use resources for measurement */
    ;

    _proto.measureViaResources_ = function measureViaResources_() {
      var viewport = this.resources_.getViewport();
      var box = this.resources_.getViewport().getLayoutRect(this.element);
      this.layoutBox_ = box; // Calculate whether the element is currently is or in `position:fixed`.

      var isFixed = false;

      if (viewport.supportsPositionFixed() && this.isDisplayed()) {
        var win = this.resources_.win;
        var body = win.document.body;

        for (var n = this.element; n && n != body; n = n.
        /*OK*/
        offsetParent) {
          if (n.isAlwaysFixed && n.isAlwaysFixed()) {
            isFixed = true;
            break;
          }

          if (viewport.isDeclaredFixed(n) && (0, _style.computedStyle)(win, n).position == 'fixed') {
            isFixed = true;
            break;
          }
        }
      }

      this.isFixed_ = isFixed;

      if (isFixed) {
        // For fixed position elements, we need the relative position to the
        // viewport. When accessing the layoutBox through #getLayoutBox, we'll
        // return the new absolute position.
        this.layoutBox_ = (0, _layoutRect.moveLayoutRect)(box, -viewport.getScrollLeft(), -viewport.getScrollTop());
      }
    }
    /** Use layers for measurement */
    ;

    _proto.measureViaLayers_ = function measureViaLayers_() {
      var element = this.element;
      var layers = element.getLayers();
      /**
       * TODO(jridgewell): This force remeasure shouldn't be necessary. We
       * essentially have 3 phases of measurements:
       * 1. Initial measurements during page load, where we're not mutating
       * 2. Remeasurements after page load, where we might have mutated (but
       *    really shouldn't, it's a bug we haven't fixed yet)
       * 3. Mutation remeasurements
       *
       * We can optimize the initial measurements by not forcing remeasure. But
       * for both 2 and 3, we need for force it.
       */

      layers.remeasure(element,
      /* opt_force */
      true);
      this.layoutBox_ = this.getPageLayoutBox();
    }
    /**
     * Completes collapse: ensures that the element is `display:none` and
     * updates layout box.
     */
    ;

    _proto.completeCollapse = function completeCollapse() {
      (0, _style.toggle)(this.element, false);

      if (this.useLayers_) {
        this.layoutBox_ = (0, _layoutRect.layoutRectLtwh)(0, 0, 0, 0);
      } else {
        this.layoutBox_ = (0, _layoutRect.layoutRectLtwh)(this.layoutBox_.left, this.layoutBox_.top, 0, 0);
      }

      this.isFixed_ = false;
      this.element.updateLayoutBox(this.getLayoutBox());
      var owner = this.getOwner();

      if (owner) {
        owner.collapsedCallback(this.element);
      }
    }
    /**
     * Completes expand: ensures that the element is not `display:none` and
     * updates measurements.
     */
    ;

    _proto.completeExpand = function completeExpand() {
      (0, _style.toggle)(this.element, true);
      this.requestMeasure();
    }
    /**
     * @return {boolean}
     */
    ;

    _proto.isMeasureRequested = function isMeasureRequested() {
      return this.isMeasureRequested_;
    }
    /**
     * Checks if the current resource has been measured.
     * @return {boolean}
     */
    ;

    _proto.hasBeenMeasured = function hasBeenMeasured() {
      return !!this.initialLayoutBox_;
    }
    /**
     * Requests the element to be remeasured on the next pass.
     */
    ;

    _proto.requestMeasure = function requestMeasure() {
      this.isMeasureRequested_ = true;
    }
    /**
     * Returns a previously measured layout box adjusted to the viewport. This
     * mainly affects fixed-position elements that are adjusted to be always
     * relative to the document position in the viewport.
     * @return {!../layout-rect.LayoutRectDef}
     */
    ;

    _proto.getLayoutBox = function getLayoutBox() {
      if (this.useLayers_) {
        // TODO(jridgewell): transition all callers to position and/or size calls
        // directly.
        var element = this.element;
        var layers = element.getLayers();
        var pos = layers.getScrolledPosition(element);
        var size = layers.getSize(element);
        return (0, _layoutRect.layoutRectLtwh)(pos.left, pos.top, size.width, size.height);
      }

      if (!this.isFixed_) {
        return this.layoutBox_;
      }

      var viewport = this.resources_.getViewport();
      return (0, _layoutRect.moveLayoutRect)(this.layoutBox_, viewport.getScrollLeft(), viewport.getScrollTop());
    }
    /**
     * Returns a previously measured layout box relative to the page. The
     * fixed-position elements are relative to the top of the document.
     * @return {!../layout-rect.LayoutRectDef}
     */
    ;

    _proto.getPageLayoutBox = function getPageLayoutBox() {
      if (this.useLayers_) {
        var element = this.element;
        var layers = element.getLayers();
        var pos = layers.getOffsetPosition(element);
        var size = layers.getSize(element);
        return (0, _layoutRect.layoutRectLtwh)(pos.left, pos.top, size.width, size.height);
      }

      return this.layoutBox_;
    }
    /**
     * Returns the first measured layout box.
     * @return {!../layout-rect.LayoutRectDef}
     */
    ;

    _proto.getInitialLayoutBox = function getInitialLayoutBox() {
      // Before the first measure, there will be no initial layoutBox.
      // Luckily, layoutBox will be present but essentially useless.
      return this.initialLayoutBox_ || this.layoutBox_;
    }
    /**
     * Whether the resource is displayed, i.e. if it has non-zero width and
     * height.
     * @return {boolean}
     */
    ;

    _proto.isDisplayed = function isDisplayed() {
      var isFluid = this.element.getLayout() == _layout.Layout.FLUID; // TODO(jridgewell): #getSize


      var box = this.getLayoutBox();
      var hasNonZeroSize = box.height > 0 && box.width > 0;
      return (isFluid || hasNonZeroSize) && !!this.element.ownerDocument && !!this.element.ownerDocument.defaultView;
    }
    /**
     * Whether the element is fixed according to the latest measurement.
     * @return {boolean}
     */
    ;

    _proto.isFixed = function isFixed() {
      return this.isFixed_;
    }
    /**
     * Whether the element's layout box overlaps with the specified rect.
     * @param {!../layout-rect.LayoutRectDef} rect
     * @return {boolean}
     */
    ;

    _proto.overlaps = function overlaps(rect) {
      return (0, _layoutRect.layoutRectsOverlap)(this.getLayoutBox(), rect);
    }
    /**
     * Whether this element can be pre-rendered.
     * @return {boolean}
     */
    ;

    _proto.prerenderAllowed = function prerenderAllowed() {
      return this.element.prerenderAllowed();
    }
    /**
     * @param {number|boolean} viewport derived from renderOutsideViewport.
     * @return {!Promise} resolves when underlying element is built and within the
     *    viewport range given.
     */
    ;

    _proto.whenWithinViewport = function whenWithinViewport(viewport) {
      (0, _log.devAssert)(viewport !== false); // Resolve is already laid out or viewport is true.

      if (!this.isLayoutPending() || viewport === true) {
        return Promise.resolve();
      } // See if pre-existing promise.


      var viewportNum = (0, _log.dev)().assertNumber(viewport);
      var key = String(viewportNum);

      if (this.withViewportDeferreds_ && this.withViewportDeferreds_[key]) {
        return this.withViewportDeferreds_[key].promise;
      } // See if already within viewport multiplier.


      if (this.isWithinViewportRatio(viewportNum)) {
        return Promise.resolve();
      } // return promise that will trigger when within viewport multiple.


      this.withViewportDeferreds_ = this.withViewportDeferreds_ || {};
      this.withViewportDeferreds_[key] = new _promise.Deferred();
      return this.withViewportDeferreds_[key].promise;
    }
    /** @private resolves promises populated via whenWithinViewport. */
    ;

    _proto.resolveDeferredsWhenWithinViewports_ = function resolveDeferredsWhenWithinViewports_() {
      if (!this.withViewportDeferreds_) {
        return;
      }

      var viewportRatio = this.getDistanceViewportRatio();

      for (var key in this.withViewportDeferreds_) {
        if (this.isWithinViewportRatio(parseFloat(key), viewportRatio)) {
          this.withViewportDeferreds_[key].resolve();
          delete this.withViewportDeferreds_[key];
        }
      }
    }
    /** @return {!ViewportRatioDef} */
    ;

    _proto.getDistanceViewportRatio = function getDistanceViewportRatio() {
      if (this.useLayers_ && this.useLayersPrioritization_) {
        var element = this.element;
        return {
          distance: element.getLayers().iterateAncestry(element, this.layersDistanceRatio_)
        };
      } // Numeric interface, element is allowed to render outside viewport when it
      // is within X times the viewport height of the current viewport.


      var viewportBox = this.resources_.getViewport().getRect();
      var layoutBox = this.getLayoutBox();
      var scrollDirection = this.resources_.getScrollDirection();
      var scrollPenalty = 1;
      var distance = 0;

      if (viewportBox.right < layoutBox.left || viewportBox.left > layoutBox.right) {
        // If outside of viewport's x-axis, element is not in viewport so return
        // false.
        return {
          distance: false
        };
      }

      if (viewportBox.bottom < layoutBox.top) {
        // Element is below viewport
        distance = layoutBox.top - viewportBox.bottom; // If we're scrolling away from the element

        if (scrollDirection == -1) {
          scrollPenalty = 2;
        }
      } else if (viewportBox.top > layoutBox.bottom) {
        // Element is above viewport
        distance = viewportBox.top - layoutBox.bottom; // If we're scrolling away from the element

        if (scrollDirection == 1) {
          scrollPenalty = 2;
        }
      } else {
        // Element is in viewport so return true for all but boolean false.
        return {
          distance: true
        };
      }

      return {
        distance: distance,
        scrollPenalty: scrollPenalty,
        viewportHeight: viewportBox.height
      };
    }
    /**
     * @param {number|boolean} multiplier
     * @param {ViewportRatioDef=} opt_viewportRatio
     * @return {boolean} whether multiplier given is within viewport ratio
     * @visibleForTesting
     */
    ;

    _proto.isWithinViewportRatio = function isWithinViewportRatio(multiplier, opt_viewportRatio) {
      if (typeof multiplier === 'boolean') {
        return multiplier;
      }

      var _ref = opt_viewportRatio || this.getDistanceViewportRatio(),
          distance = _ref.distance,
          scrollPenalty = _ref.scrollPenalty,
          viewportHeight = _ref.viewportHeight;

      if (this.useLayers_ && this.useLayersPrioritization_) {
        return (0, _log.dev)().assertNumber(distance) < multiplier;
      }

      if (typeof distance == 'boolean') {
        return distance;
      }

      return distance < viewportHeight * multiplier / scrollPenalty;
    }
    /**
     * Calculates the layout's viewport distance ratio, using an iterative
     * calculation based on tree depth and number of layer scrolls it would take
     * to view the element.
     *
     * @param {number|undefined} currentScore
     * @param {!./layers-impl.LayoutElement} layout
     * @param {number} depth
     * @return {number}
     */
    ;

    _proto.layersDistanceRatio_ = function layersDistanceRatio_(currentScore, layout, depth) {
      currentScore = currentScore || 0;
      var depthPenalty = 1 + depth / 10;
      var nonActivePenalty = layout.isActiveUnsafe() ? 1 : 2;
      var distance = layout.getHorizontalViewportsFromParent() + layout.getVerticalViewportsFromParent();
      return currentScore + nonActivePenalty * depthPenalty * distance;
    }
    /**
     * Whether this is allowed to render when not in viewport.
     * @return {boolean}
     */
    ;

    _proto.renderOutsideViewport = function renderOutsideViewport() {
      // The exception is for owned resources, since they only attempt to
      // render outside viewport when the owner has explicitly allowed it.
      // TODO(jridgewell, #5803): Resources should be asking owner if it can
      // prerender this resource, so that it can avoid expensive elements wayyy
      // outside of viewport. For now, blindly trust that owner knows what it's
      // doing.
      this.resolveDeferredsWhenWithinViewports_();
      return this.hasOwner() || this.isWithinViewportRatio(this.element.renderOutsideViewport());
    }
    /**
     * Whether this is allowed to render when scheduler is idle but not in
     * viewport.
     * @return {boolean}
     */
    ;

    _proto.idleRenderOutsideViewport = function idleRenderOutsideViewport() {
      return this.isWithinViewportRatio(this.element.idleRenderOutsideViewport());
    }
    /**
     * Sets the resource's state to LAYOUT_SCHEDULED.
     * @param {number} scheduleTime The time at which layout was scheduled.
     */
    ;

    _proto.layoutScheduled = function layoutScheduled(scheduleTime) {
      this.state_ = ResourceState.LAYOUT_SCHEDULED;
      this.element.layoutScheduleTime = scheduleTime;
    }
    /**
     * Undoes `layoutScheduled`.
     */
    ;

    _proto.layoutCanceled = function layoutCanceled() {
      this.state_ = this.hasBeenMeasured() ? ResourceState.READY_FOR_LAYOUT : ResourceState.NOT_LAID_OUT;
    }
    /**
     * Starts the layout of the resource. Returns the promise that will yield
     * once layout is complete. Only allowed to be called on a upgraded, built
     * and displayed element.
     * @return {!Promise}
     * @package
     */
    ;

    _proto.startLayout = function startLayout() {
      var _this2 = this;

      if (this.layoutPromise_) {
        return this.layoutPromise_;
      }

      if (this.state_ == ResourceState.LAYOUT_COMPLETE) {
        return Promise.resolve();
      }

      if (this.state_ == ResourceState.LAYOUT_FAILED) {
        return Promise.reject(this.lastLayoutError_);
      }

      (0, _log.devAssert)(this.state_ != ResourceState.NOT_BUILT, 'Not ready to start layout: %s (%s)', this.debugid, this.state_);
      (0, _log.devAssert)(this.isDisplayed(), 'Not displayed for layout: %s', this.debugid); // Unwanted re-layouts are ignored.

      if (this.layoutCount_ > 0 && !this.element.isRelayoutNeeded()) {
        (0, _log.dev)().fine(TAG, 'layout canceled since it wasn\'t requested:', this.debugid, this.state_);
        this.state_ = ResourceState.LAYOUT_COMPLETE;
        return Promise.resolve();
      }

      (0, _log.dev)().fine(TAG, 'start layout:', this.debugid, 'count:', this.layoutCount_);
      this.layoutCount_++;
      this.state_ = ResourceState.LAYOUT_SCHEDULED;
      var promise = new Promise(function (resolve, reject) {
        _services.Services.vsyncFor(_this2.hostWin).mutate(function () {
          try {
            resolve(_this2.element.layoutCallback());
          } catch (e) {
            reject(e);
          }
        });
      });
      this.layoutPromise_ = promise.then(function () {
        return _this2.layoutComplete_(true);
      }, function (reason) {
        return _this2.layoutComplete_(false, reason);
      });
      return this.layoutPromise_;
    }
    /**
     * @param {boolean} success
     * @param {*=} opt_reason
     * @return {!Promise|undefined}
     */
    ;

    _proto.layoutComplete_ = function layoutComplete_(success, opt_reason) {
      if (this.loadPromiseResolve_) {
        this.loadPromiseResolve_();
        this.loadPromiseResolve_ = null;
      }

      this.layoutPromise_ = null;
      this.loadedOnce_ = true;
      this.state_ = success ? ResourceState.LAYOUT_COMPLETE : ResourceState.LAYOUT_FAILED;
      this.lastLayoutError_ = opt_reason;

      if (success) {
        (0, _log.dev)().fine(TAG, 'layout complete:', this.debugid);
      } else {
        (0, _log.dev)().fine(TAG, 'loading failed:', this.debugid, opt_reason);
        return Promise.reject(opt_reason);
      }
    }
    /**
     * Returns true if the resource layout has not completed or failed.
     * @return {boolean}
     * */
    ;

    _proto.isLayoutPending = function isLayoutPending() {
      return this.state_ != ResourceState.LAYOUT_COMPLETE && this.state_ != ResourceState.LAYOUT_FAILED;
    }
    /**
     * Returns a promise that is resolved when this resource is laid out
     * for the first time and the resource was loaded. Note that the resource
     * could be unloaded subsequently. This method returns resolved promise for
     * sunch unloaded elements.
     * @return {!Promise}
     */
    ;

    _proto.loadedOnce = function loadedOnce() {
      return this.loadPromise_;
    }
    /**
     * @return {boolean} true if the resource has been loaded at least once.
     */
    ;

    _proto.hasLoadedOnce = function hasLoadedOnce() {
      return this.loadedOnce_;
    }
    /**
     * Whether the resource is currently visible in the viewport.
     * @return {boolean}
     */
    ;

    _proto.isInViewport = function isInViewport() {
      var isInViewport = this.element.isInViewport();

      if (isInViewport) {
        this.resolveDeferredsWhenWithinViewports_();
      }

      return isInViewport;
    }
    /**
     * Updates the inViewport state of the element.
     * @param {boolean} inViewport
     */
    ;

    _proto.setInViewport = function setInViewport(inViewport) {
      this.element.viewportCallback(inViewport);
    }
    /**
     * Calls element's unlayoutCallback callback and resets state for
     * relayout in case document becomes active again.
     */
    ;

    _proto.unlayout = function unlayout() {
      if (this.state_ == ResourceState.NOT_BUILT || this.state_ == ResourceState.NOT_LAID_OUT) {
        return;
      }

      this.setInViewport(false);

      if (this.element.unlayoutCallback()) {
        this.element.togglePlaceholder(true);
        this.state_ = ResourceState.NOT_LAID_OUT;
        this.layoutCount_ = 0;
        this.layoutPromise_ = null;
      }
    }
    /**
     * Returns the task ID for this resource.
     * @param {string} localId
     * @return {string}
     */
    ;

    _proto.getTaskId = function getTaskId(localId) {
      return this.debugid + '#' + localId;
    }
    /**
     * Calls element's pauseCallback callback.
     */
    ;

    _proto.pause = function pause() {
      this.element.pauseCallback();

      if (this.element.unlayoutOnPause()) {
        this.unlayout();
      }
    }
    /**
     * Calls element's pauseCallback callback.
     */
    ;

    _proto.pauseOnRemove = function pauseOnRemove() {
      this.element.pauseCallback();
    }
    /**
     * Calls element's resumeCallback callback.
     */
    ;

    _proto.resume = function resume() {
      this.element.resumeCallback();
    }
    /**
     * Called when a previously visible element is no longer displayed.
     */
    ;

    _proto.unload = function unload() {
      this.pause();
      this.unlayout();
    }
    /**
     * Disconnect the resource. Mainly intended for embed resources that do not
     * receive `disconnectedCallback` naturally via CE API.
     */
    ;

    _proto.disconnect = function disconnect() {
      delete this.element[RESOURCE_PROP_];
      this.element.disconnect(
      /* opt_pretendDisconnected */
      true);
    };

    return Resource;
  }();

  exports.Resource = Resource;

  },{"../amp-events":9,"../error":29,"../experiments":32,"../layout":49,"../layout-rect":48,"../log":51,"../services":112,"../string":116,"../style":118,"../types":121,"../utils/promise":134}],93:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installResourcesServiceForDoc = installResourcesServiceForDoc;
  exports.SizeDef = exports.Resources = void 0;

  var _commonSignals = require("../common-signals");

  var _finiteStateMachine = require("../finite-state-machine");

  var _focusHistory = require("../focus-history");

  var _pass = require("../pass");

  var _resource = require("./resource");

  var _services = require("../services");

  var _taskQueue = require("./task-queue");

  var _visibilityState = require("../visibility-state");

  var _layoutRect = require("../layout-rect");

  var _dom = require("../dom");

  var _style = require("../style");

  var _log = require("../log");

  var _object = require("../utils/object");

  var _url = require("../url");

  var _ieMediaBug = require("./ie-media-bug");

  var _types = require("../types");

  var _error = require("../error");

  var _experiments = require("../experiments");

  var _eventHelper = require("../event-helper");

  var _service = require("../service");

  var _array = require("../utils/array");

  var _promise = require("../utils/promise");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TAG_ = 'Resources';
  var READY_SCAN_SIGNAL_ = 'ready-scan';
  var LAYOUT_TASK_ID_ = 'L';
  var LAYOUT_TASK_OFFSET_ = 0;
  var PRELOAD_TASK_ID_ = 'P';
  var PRELOAD_TASK_OFFSET_ = 2;
  var PRIORITY_BASE_ = 10;
  var PRIORITY_PENALTY_TIME_ = 1000;
  var POST_TASK_PASS_DELAY_ = 1000;
  var MUTATE_DEFER_DELAY_ = 500;
  var FOCUS_HISTORY_TIMEOUT_ = 1000 * 60; // 1min

  var FOUR_FRAME_DELAY_ = 70;
  /**
   * The internal structure of a ChangeHeightRequest.
   * @typedef {{
   *   newMargins: !../layout-rect.LayoutMarginsChangeDef,
   *   currentMargins: !../layout-rect.LayoutMarginsDef
   * }}
   */

  var MarginChangeDef;
  /**
   * The internal structure of a ChangeHeightRequest.
   * @typedef {{
   *   resource: !Resource,
   *   newHeight: (number|undefined),
   *   newWidth: (number|undefined),
   *   marginChange: (!MarginChangeDef|undefined),
   *   force: boolean,
   *   callback: (function(boolean)|undefined)
   * }}
   */

  var ChangeSizeRequestDef;

  var Resources =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     */
    function Resources(ampdoc) {
      var _this = this;

      /** @const {!./ampdoc-impl.AmpDoc} */
      this.ampdoc = ampdoc;
      /** @const {!Window} */

      this.win = ampdoc.win;
      /** @const @private {!./viewer-impl.Viewer} */

      this.viewer_ = _services.Services.viewerForDoc(ampdoc);
      /** @private {boolean} */

      this.isRuntimeOn_ = this.viewer_.isRuntimeOn();
      /**
       * Used primarily for testing to allow build phase to proceed.
       * @const @private {boolean}
       */

      this.isBuildOn_ = false;
      /** @private @const {number} */

      this.maxDpr_ = this.win.devicePixelRatio || 1;
      /** @private {number} */

      this.resourceIdCounter_ = 0;
      /** @private @const {!Array<!Resource>} */

      this.resources_ = [];
      /** @private {number} */

      this.addCount_ = 0;
      /** @private {number} */

      this.buildAttemptsCount_ = 0;
      /** @private {boolean} */

      this.visible_ = this.viewer_.isVisible();
      /** @private {number} */

      this.prerenderSize_ = this.viewer_.getPrerenderSize();
      /** @private {boolean} */

      this.documentReady_ = false;
      /**
       * We want to do some work in the first pass after
       * the document is ready.
       * @private {boolean}
       */

      this.firstPassAfterDocumentReady_ = true;
      /**
       * Whether AMP has been fully initialized.
       * @private {boolean}
       */

      this.ampInitialized_ = false;
      /**
       * We also adjust the timeout penalty shortly after the first pass.
       * @private {number}
       */

      this.firstVisibleTime_ = -1;
      /** @private {boolean} */

      this.relayoutAll_ = true;
      /**
       * TODO(jridgewell): relayoutTop should be replaced with parent layer
       * dirtying.
       * @private {number}
       */

      this.relayoutTop_ = -1;
      /** @private {time} */

      this.lastScrollTime_ = 0;
      /** @private {number} */

      this.lastVelocity_ = 0;
      /** @const @private {!Pass} */

      this.pass_ = new _pass.Pass(this.win, function () {
        return _this.doPass();
      });
      /** @const @private {!Pass} */

      this.remeasurePass_ = new _pass.Pass(this.win, function () {
        _this.relayoutAll_ = true;

        _this.schedulePass();
      });
      /** @const {!TaskQueue} */

      this.exec_ = new _taskQueue.TaskQueue();
      /** @const {!TaskQueue} */

      this.queue_ = new _taskQueue.TaskQueue();
      /** @private @const {boolean} */

      this.useLayers_ = (0, _experiments.isExperimentOn)(this.win, 'layers');
      /** @private @const {boolean} */

      this.useLayersPrioritization_ = (0, _experiments.isExperimentOn)(this.win, 'layers-prioritization');
      var boundScorer;

      if (this.useLayers_ && this.useLayersPrioritization_) {
        boundScorer = this.calcTaskScoreLayers_.bind(this);
      } else {
        boundScorer = this.calcTaskScore_.bind(this);
      }
      /** @const {!function(./task-queue.TaskDef, !Object<string, *>):number} */


      this.boundTaskScorer_ = boundScorer;
      /**
      * @private {!Array<!ChangeSizeRequestDef>}
      */

      this.requestsChangeSize_ = [];
      /** @private {?Array<!Resource>} */

      this.pendingBuildResources_ = [];
      /** @private {boolean} */

      this.isCurrentlyBuildingPendingResources_ = false;
      /** @private @const {!./viewport/viewport-impl.Viewport} */

      this.viewport_ = _services.Services.viewportForDoc(this.ampdoc);
      /** @private @const {!./vsync-impl.Vsync} */

      this.vsync_ = _services.Services.
      /*OK*/
      vsyncFor(this.win);
      /** @private @const {!FocusHistory} */

      this.activeHistory_ = new _focusHistory.FocusHistory(this.win, FOCUS_HISTORY_TIMEOUT_);
      /** @private {boolean} */

      this.vsyncScheduled_ = false;
      /** @private {number} */

      this.contentHeight_ = 0;
      /** @private {boolean} */

      this.maybeChangeHeight_ = false;
      /** @const @private {!Array<function()>} */

      this.passCallbacks_ = [];
      /** @private @const {!FiniteStateMachine<!VisibilityState>} */

      this.visibilityStateMachine_ = new _finiteStateMachine.FiniteStateMachine(this.viewer_.getVisibilityState());
      this.setupVisibilityStateMachine_(this.visibilityStateMachine_); // When viewport is resized, we have to re-measure all elements.

      this.viewport_.onChanged(function (event) {
        _this.lastScrollTime_ = Date.now();
        _this.lastVelocity_ = event.velocity;

        if (event.relayoutAll) {
          _this.relayoutAll_ = true;
          _this.maybeChangeHeight_ = true;
        }

        _this.schedulePass();
      });
      this.viewport_.onScroll(function () {
        _this.lastScrollTime_ = Date.now();
      });

      if (this.useLayers_) {
        var layers = _services.Services.layersForDoc(this.ampdoc);
        /** @private @const {!./layers-impl.LayoutLayers} */


        this.layers_ = layers;
        /** @private @const {function((number|undefined), !./layers-impl.LayoutElement, number, !Object<string, *>):number} */

        this.boundCalcLayoutScore_ = this.calcLayoutScore_.bind(this);
      } // When document becomes visible, e.g. from "prerender" mode, do a
      // simple pass.


      this.viewer_.onVisibilityChanged(function () {
        if (_this.firstVisibleTime_ == -1 && _this.viewer_.isVisible()) {
          _this.firstVisibleTime_ = Date.now();
        }

        _this.schedulePass();
      });
      this.viewer_.onRuntimeState(function (state) {
        (0, _log.dev)().fine(TAG_, 'Runtime state:', state);
        _this.isRuntimeOn_ = state;

        _this.schedulePass(1);
      });
      this.activeHistory_.onFocus(function (element) {
        _this.checkPendingChangeSize_(element);
      });
      this.schedulePass();
      this.rebuildDomWhenReady();
    }
    /** @visibleForTesting */


    var _proto = Resources.prototype;

    _proto.rebuildDomWhenReady = function rebuildDomWhenReady() {
      var _this2 = this;

      // Ensure that we attempt to rebuild things when DOM is ready.
      this.ampdoc.whenReady().then(function () {
        _this2.documentReady_ = true;

        _this2.buildReadyResources_();

        _this2.pendingBuildResources_ = null;
        var fixPromise = (0, _ieMediaBug.checkAndFix)(_this2.win);

        var remeasure = function remeasure() {
          return _this2.remeasurePass_.schedule();
        };

        if (fixPromise) {
          fixPromise.then(remeasure);
        } else {
          // No promise means that there's no problem.
          remeasure();
        }

        _this2.monitorInput_(); // Safari 10 and under incorrectly estimates font spacing for
        // `@font-face` fonts. This leads to wild measurement errors. The best
        // course of action is to remeasure everything on window.onload or font
        // timeout (3s), whichever is earlier. This has to be done on the global
        // window because this is where the fonts are always added.
        // Unfortunately, `document.fonts.ready` cannot be used here due to
        // https://bugs.webkit.org/show_bug.cgi?id=174030.
        // See https://bugs.webkit.org/show_bug.cgi?id=174031 for more details.


        Promise.race([(0, _eventHelper.loadPromise)(_this2.win), _services.Services.timerFor(_this2.win).promise(3100)]).then(remeasure); // Remeasure the document when all fonts loaded.

        if (_this2.win.document.fonts && _this2.win.document.fonts.status != 'loaded') {
          _this2.win.document.fonts.ready.then(remeasure);
        }
      });
    }
    /**
     * Returns a list of resources.
     * @return {!Array<!Resource>}
     * @export
     */
    ;

    _proto.get = function get() {
      return this.resources_.slice(0);
    }
    /**
     * Whether the runtime is currently on.
     * @return {boolean}
     */
    ;

    _proto.isRuntimeOn = function isRuntimeOn() {
      return this.isRuntimeOn_;
    }
    /**
     * Signals that the document has been started rendering.
     * @restricted
     */
    ;

    _proto.renderStarted = function renderStarted() {
      this.ampdoc.signals().signal(_commonSignals.CommonSignals.RENDER_START);
    }
    /**
     * Returns a subset of resources which are (1) belong to the specified host
     * window, and (2) meet the filterFn given.
     * @param {!Window} hostWin
     * @param {function(!Resource):boolean} filterFn
     * @return {!Promise<!Array<!Resource>>}
     */
    ;

    _proto.getMeasuredResources = function getMeasuredResources(hostWin, filterFn) {
      var _this3 = this;

      // First, wait for the `ready-scan` signal. Waiting for each element
      // individually is too expensive and `ready-scan` will cover most of
      // the initially parsed elements.
      // TODO(jridgewell): this path should be switched to use a future
      // "layer has been measured" signal.
      return this.ampdoc.signals().whenSignal(READY_SCAN_SIGNAL_).then(function () {
        // Second, wait for any left-over elements to complete measuring.
        var measurePromiseArray = [];

        _this3.resources_.forEach(function (r) {
          if (!r.hasBeenMeasured() && r.hostWin == hostWin && !r.hasOwner()) {
            measurePromiseArray.push(_this3.ensuredMeasured_(r));
          }
        });

        return Promise.all(measurePromiseArray);
      }).then(function () {
        return _this3.resources_.filter(function (r) {
          return r.hostWin == hostWin && !r.hasOwner() && r.hasBeenMeasured() && filterFn(r);
        });
      });
    }
    /**
     * Returns a subset of resources which are (1) belong to the specified host
     * window, and (2) positioned in the specified rect.
     * @param {!Window} hostWin
     * @param {!../layout-rect.LayoutRectDef} rect
     * @param {boolean=} opt_isInPrerender signifies if we are in prerender mode.
     * @return {!Promise<!Array<!Resource>>}
     */
    ;

    _proto.getResourcesInRect = function getResourcesInRect(hostWin, rect, opt_isInPrerender) {
      return this.getMeasuredResources(hostWin, function (r) {
        // TODO(jridgewell): Remove isFixed check here once the position
        // is calculted correctly in a separate layer for embeds.
        if (!r.isDisplayed() || !r.overlaps(rect) && !r.isFixed() || opt_isInPrerender && !r.prerenderAllowed()) {
          return false;
        }

        return true;
      });
    }
    /** @private */
    ;

    _proto.monitorInput_ = function monitorInput_() {
      var _this4 = this;

      var input = _services.Services.inputFor(this.win);

      input.onTouchDetected(function (detected) {
        _this4.toggleInputClass_('amp-mode-touch', detected);
      }, true);
      input.onMouseDetected(function (detected) {
        _this4.toggleInputClass_('amp-mode-mouse', detected);
      }, true);
      input.onKeyboardStateChanged(function (active) {
        _this4.toggleInputClass_('amp-mode-keyboard-active', active);
      }, true);
    }
    /**
     * @param {string} clazz
     * @param {boolean} on
     * @private
     */
    ;

    _proto.toggleInputClass_ = function toggleInputClass_(clazz, on) {
      var _this5 = this;

      this.ampdoc.whenBodyAvailable().then(function (body) {
        _this5.vsync_.mutate(function () {
          body.classList.toggle(clazz, on);
        });
      });
    }
    /**
     * Returns the maximum DPR available on this device.
     * @return {number}
     */
    ;

    _proto.getMaxDpr = function getMaxDpr() {
      return this.maxDpr_;
    }
    /**
     * Returns the most optimal DPR currently recommended.
     * @return {number}
     */
    ;

    _proto.getDpr = function getDpr() {
      // TODO(dvoytenko): return optimal DPR.
      return this.maxDpr_;
    }
    /**
     * Returns the {@link Resource} instance corresponding to the specified AMP
     * Element. If no Resource is found, the exception is thrown.
     * @param {!AmpElement} element
     * @return {!Resource}
     */
    ;

    _proto.getResourceForElement = function getResourceForElement(element) {
      return _resource.Resource.forElement(element);
    }
    /**
     * Returns the {@link Resource} instance corresponding to the specified AMP
     * Element. Returns null if no resource is found.
     * @param {!AmpElement} element
     * @return {?Resource}
     */
    ;

    _proto.getResourceForElementOptional = function getResourceForElementOptional(element) {
      return _resource.Resource.forElementOptional(element);
    }
    /**
     * Returns a promise to the layoutBox for the element. If the element is
     * resource-backed then makes use of the resource layoutBox, otherwise
     * measures the element directly.
     * @param {!Element} element
     * @return {!Promise<!../layout-rect.LayoutRectDef>}
     */
    ;

    _proto.getElementLayoutBox = function getElementLayoutBox(element) {
      var _this6 = this;

      var resource = this.getResourceForElementOptional(element);

      if (resource) {
        return this.ensuredMeasured_(resource);
      }

      return this.vsync_.measurePromise(function () {
        return _this6.getViewport().getLayoutRect(element);
      });
    }
    /**
     * @param {!Resource} resource
     * @return {!Promise<!../layout-rect.LayoutRectDef>}
     * @private
     */
    ;

    _proto.ensuredMeasured_ = function ensuredMeasured_(resource) {
      if (resource.hasBeenMeasured()) {
        return (0, _promise.tryResolve)(function () {
          return resource.getPageLayoutBox();
        });
      }

      return this.vsync_.measurePromise(function () {
        resource.measure();
        return resource.getPageLayoutBox();
      });
    }
    /**
     * Returns the viewport instance
     * @return {!./viewport/viewport-impl.Viewport}
     */
    ;

    _proto.getViewport = function getViewport() {
      return this.viewport_;
    }
    /**
     * Returns the direction the user last scrolled.
     *  - -1 for scrolling up
     *  - 1 for scrolling down
     *  - Defaults to 1
     * @return {number}
     */
    ;

    _proto.getScrollDirection = function getScrollDirection() {
      return Math.sign(this.lastVelocity_) || 1;
    }
    /**
     * Signals that an element has been added to the DOM. Resources manager
     * will start tracking it from this point on.
     * @param {!AmpElement} element
     */
    ;

    _proto.add = function add(element) {
      // Ensure the viewport is ready to accept the first element.
      this.addCount_++;

      if (this.addCount_ == 1) {
        this.viewport_.ensureReadyForElements();
      } // First check if the resource is being reparented and if it requires
      // reconstruction. Only already built elements are eligible.


      var resource = _resource.Resource.forElementOptional(element);

      if (resource && resource.getState() != _resource.ResourceState.NOT_BUILT && !element.reconstructWhenReparented()) {
        resource.requestMeasure();
        (0, _log.dev)().fine(TAG_, 'resource reused:', resource.debugid);
      } else {
        // Create and add a new resource.
        resource = new _resource.Resource(++this.resourceIdCounter_, element, this);
        (0, _log.dev)().fine(TAG_, 'resource added:', resource.debugid);
      }

      this.resources_.push(resource);
      this.remeasurePass_.schedule(1000);
    }
    /**
     * Limits the number of elements being build in pre-render phase to
     * a finite number. Returns false if the number has been reached.
     * @return {boolean}
     */
    ;

    _proto.grantBuildPermission = function grantBuildPermission() {
      // For pre-render we want to limit the amount of CPU used, so we limit
      // the number of elements build. For pre-render to "seem complete"
      // we only need to build elements in the first viewport. We can't know
      // which are actually in the viewport (because the decision is pre-layout,
      // so we use a heuristic instead.
      // Most documents have 10 or less AMP tags. By building 20 we should not
      // change the behavior for the vast majority of docs, and almost always
      // catch everything in the first viewport.
      return this.buildAttemptsCount_++ < 20 || this.viewer_.hasBeenVisible();
    }
    /**
     * Builds the element if ready to be built, otherwise adds it to pending
     * resources.
     * @param {!Resource} resource
     * @param {boolean=} checkForDupes
     * @param {boolean=} scheduleWhenBuilt
     * @private
     */
    ;

    _proto.buildOrScheduleBuildForResource_ = function buildOrScheduleBuildForResource_(resource, checkForDupes, scheduleWhenBuilt) {
      if (checkForDupes === void 0) {
        checkForDupes = false;
      }

      if (scheduleWhenBuilt === void 0) {
        scheduleWhenBuilt = true;
      }

      var buildingEnabled = this.isRuntimeOn_ || this.isBuildOn_; // During prerender mode, don't build elements that aren't allowed to be
      // prerendered. This avoids wasting our prerender build quota.
      // See grantBuildPermission() for more details.

      var shouldBuildResource = this.viewer_.getVisibilityState() != _visibilityState.VisibilityState.PRERENDER || resource.prerenderAllowed();

      if (buildingEnabled && shouldBuildResource) {
        if (this.documentReady_) {
          // Build resource immediately, the document has already been parsed.
          this.buildResourceUnsafe_(resource, scheduleWhenBuilt);
        } else if (!resource.isBuilt() && !resource.isBuilding()) {
          if (!checkForDupes || !this.pendingBuildResources_.includes(resource)) {
            // Otherwise add to pending resources and try to build any ready ones.
            this.pendingBuildResources_.push(resource);
            this.buildReadyResources_(scheduleWhenBuilt);
          }
        }
      }
    }
    /**
     * Builds resources that are ready to be built.
     * @param {boolean=} scheduleWhenBuilt
     * @private
     */
    ;

    _proto.buildReadyResources_ = function buildReadyResources_(scheduleWhenBuilt) {
      if (scheduleWhenBuilt === void 0) {
        scheduleWhenBuilt = true;
      }

      // Avoid cases where elements add more elements inside of them
      // and cause an infinite loop of building - see #3354 for details.
      if (this.isCurrentlyBuildingPendingResources_) {
        return;
      }

      try {
        this.isCurrentlyBuildingPendingResources_ = true;
        this.buildReadyResourcesUnsafe_(scheduleWhenBuilt);
      } finally {
        this.isCurrentlyBuildingPendingResources_ = false;
      }
    }
    /**
     * @param {boolean=} scheduleWhenBuilt
     * @private
     */
    ;

    _proto.buildReadyResourcesUnsafe_ = function buildReadyResourcesUnsafe_(scheduleWhenBuilt) {
      if (scheduleWhenBuilt === void 0) {
        scheduleWhenBuilt = true;
      }

      // This will loop over all current pending resources and those that
      // get added by other resources build-cycle, this will make sure all
      // elements get a chance to be built.
      for (var i = 0; i < this.pendingBuildResources_.length; i++) {
        var resource = this.pendingBuildResources_[i];

        if (this.documentReady_ || (0, _dom.hasNextNodeInDocumentOrder)(resource.element, this.ampdoc.getRootNode())) {
          // Remove resource before build to remove it from the pending list
          // in either case the build succeed or throws an error.
          this.pendingBuildResources_.splice(i--, 1);
          this.buildResourceUnsafe_(resource, scheduleWhenBuilt);
        }
      }
    }
    /**
     * @param {!Resource} resource
     * @param {boolean} schedulePass
     * @return {?Promise}
     * @private
     */
    ;

    _proto.buildResourceUnsafe_ = function buildResourceUnsafe_(resource, schedulePass) {
      var _this7 = this;

      var promise = resource.build();

      if (!promise || !schedulePass) {
        return promise;
      }

      return promise.then(function () {
        return _this7.schedulePass();
      }, function (error) {
        // Build failed: remove the resource. No other state changes are
        // needed.
        _this7.removeResource_(resource);

        if (!(0, _error.isBlockedByConsent)(error)) {
          throw error;
        }
      });
    }
    /**
     * Signals that an element has been removed to the DOM. Resources manager
     * will stop tracking it from this point on.
     * @param {!AmpElement} element
     */
    ;

    _proto.remove = function remove(element) {
      var resource = _resource.Resource.forElementOptional(element);

      if (!resource) {
        return;
      }

      this.removeResource_(resource);
    }
    /**
     * @param {!Resource} resource
     * @param {boolean=} opt_disconnect
     * @private
     */
    ;

    _proto.removeResource_ = function removeResource_(resource, opt_disconnect) {
      var index = this.resources_.indexOf(resource);

      if (index != -1) {
        this.resources_.splice(index, 1);
      }

      if (resource.isBuilt()) {
        resource.pauseOnRemove();
      }

      if (opt_disconnect) {
        resource.disconnect();
      }

      this.cleanupTasks_(resource,
      /* opt_removePending */
      true);
      (0, _log.dev)().fine(TAG_, 'element removed:', resource.debugid);
    }
    /**
     * Removes all resources belonging to the specified child window.
     * @param {!Window} childWin
     */
    ;

    _proto.removeForChildWindow = function removeForChildWindow(childWin) {
      var _this8 = this;

      var toRemove = this.resources_.filter(function (r) {
        return r.hostWin == childWin;
      });
      toRemove.forEach(function (r) {
        return _this8.removeResource_(r,
        /* disconnect */
        true);
      });
    }
    /**
     * Signals that an element has been upgraded to the DOM. Resources manager
     * will perform build and enable layout/viewport signals for this element.
     * @param {!AmpElement} element
     */
    ;

    _proto.upgraded = function upgraded(element) {
      var resource = _resource.Resource.forElement(element);

      this.buildOrScheduleBuildForResource_(resource);
      (0, _log.dev)().fine(TAG_, 'element upgraded:', resource.debugid);
    }
    /**
     * Assigns an owner for the specified element. This means that the resources
     * within this element will be managed by the owner and not Resources manager.
     * @param {!Element} element
     * @param {!AmpElement} owner
     * @package
     */
    ;

    _proto.setOwner = function setOwner(element, owner) {
      _resource.Resource.setOwner(element, owner);
    }
    /**
     * Requires the layout of the specified element or top-level sub-elements
     * within.
     * @param {!Element} element
     * @param {number=} opt_parentPriority
     * @return {!Promise}
     * @restricted
     */
    ;

    _proto.requireLayout = function requireLayout(element, opt_parentPriority) {
      var _this9 = this;

      var promises = [];
      this.discoverResourcesForElement_(element, function (resource) {
        if (resource.getState() == _resource.ResourceState.LAYOUT_COMPLETE) {
          return;
        }

        if (resource.getState() != _resource.ResourceState.LAYOUT_SCHEDULED) {
          promises.push(resource.whenBuilt().then(function () {
            resource.measure();

            if (!resource.isDisplayed()) {
              return;
            }

            _this9.scheduleLayoutOrPreload_(resource,
            /* layout */
            true, opt_parentPriority,
            /* forceOutsideViewport */
            true);

            return resource.loadedOnce();
          }));
        } else if (resource.isDisplayed()) {
          promises.push(resource.loadedOnce());
        }
      });
      return Promise.all(promises);
    }
    /**
     * Schedules layout for the specified sub-elements that are children of the
     * parent element. The parent element may choose to send this signal either
     * because it's an owner (see {@link setOwner}) or because it wants the
     * layouts to be done sooner. In either case, both parent's and children's
     * priority is observed when scheduling this work.
     * @param {!Element} parentElement
     * @param {!Element|!Array<!Element>} subElements
     */
    ;

    _proto.scheduleLayout = function scheduleLayout(parentElement, subElements) {
      this.scheduleLayoutOrPreloadForSubresources_(_resource.Resource.forElement(parentElement),
      /* layout */
      true, elements_(subElements));
    }
    /**
     * Invokes `unload` on the elements' resource which in turn will invoke
     * the `documentBecameInactive` callback on the custom element.
     * Resources that call `schedulePause` must also call `scheduleResume`.
     * @param {!Element} parentElement
     * @param {!Element|!Array<!Element>} subElements
     */
    ;

    _proto.schedulePause = function schedulePause(parentElement, subElements) {
      var parentResource = _resource.Resource.forElement(parentElement);

      subElements = elements_(subElements);
      this.discoverResourcesForArray_(parentResource, subElements, function (resource) {
        resource.pause();
      });
    }
    /**
     * Invokes `resume` on the elements' resource which in turn will invoke
     * `resumeCallback` only on paused custom elements.
     * Resources that call `schedulePause` must also call `scheduleResume`.
     * @param {!Element} parentElement
     * @param {!Element|!Array<!Element>} subElements
     */
    ;

    _proto.scheduleResume = function scheduleResume(parentElement, subElements) {
      var parentResource = _resource.Resource.forElement(parentElement);

      subElements = elements_(subElements);
      this.discoverResourcesForArray_(parentResource, subElements, function (resource) {
        resource.resume();
      });
    }
    /**
     * Schedules unlayout for specified sub-elements that are children of the
     * parent element. The parent element can choose to send this signal when
     * it want to unload resources for its children.
     * @param {!Element} parentElement
     * @param {!Element|!Array<!Element>} subElements
     */
    ;

    _proto.scheduleUnlayout = function scheduleUnlayout(parentElement, subElements) {
      var parentResource = _resource.Resource.forElement(parentElement);

      subElements = elements_(subElements);
      this.discoverResourcesForArray_(parentResource, subElements, function (resource) {
        resource.unlayout();
      });
    }
    /**
     * Schedules preload for the specified sub-elements that are children of the
     * parent element. The parent element may choose to send this signal either
     * because it's an owner (see {@link setOwner}) or because it wants the
     * preloads to be done sooner. In either case, both parent's and children's
     * priority is observed when scheduling this work.
     * @param {!Element} parentElement
     * @param {!Element|!Array<!Element>} subElements
     */
    ;

    _proto.schedulePreload = function schedulePreload(parentElement, subElements) {
      this.scheduleLayoutOrPreloadForSubresources_(_resource.Resource.forElement(parentElement),
      /* layout */
      false, elements_(subElements));
    }
    /**
     * Updates the priority of the resource. If there are tasks currently
     * scheduled, their priority is updated as well.
     * @param {!Element} element
     * @param {number} newLayoutPriority
     * @restricted
     */
    ;

    _proto.updateLayoutPriority = function updateLayoutPriority(element, newLayoutPriority) {
      var resource = _resource.Resource.forElement(element);

      resource.updateLayoutPriority(newLayoutPriority); // Update affected tasks

      this.queue_.forEach(function (task) {
        if (task.resource == resource) {
          task.priority = newLayoutPriority;
        }
      });
      this.schedulePass();
    }
    /**
     * A parent resource, especially in when it's an owner (see {@link setOwner}),
     * may request the Resources manager to update children's inViewport state.
     * A child's inViewport state is a logical AND between inLocalViewport
     * specified here and parent's own inViewport state.
     * @param {!Element} parentElement
     * @param {!Element|!Array<!Element>} subElements
     * @param {boolean} inLocalViewport
     */
    ;

    _proto.updateInViewport = function updateInViewport(parentElement, subElements, inLocalViewport) {
      this.updateInViewportForSubresources_(_resource.Resource.forElement(parentElement), elements_(subElements), inLocalViewport);
    }
    /**
     * Requests the runtime to change the element's size. When the size is
     * successfully updated then the opt_callback is called.
     * @param {!Element} element
     * @param {number|undefined} newHeight
     * @param {number|undefined} newWidth
     * @param {function()=} opt_callback A callback function.
     * @param {!../layout-rect.LayoutMarginsChangeDef=} opt_newMargins
     */
    ;

    _proto.changeSize = function changeSize(element, newHeight, newWidth, opt_callback, opt_newMargins) {
      this.scheduleChangeSize_(_resource.Resource.forElement(element), newHeight, newWidth, opt_newMargins,
      /* force */
      true, opt_callback);
    }
    /**
     * Return a promise that requests the runtime to update the size of
     * this element to the specified value.
     * The runtime will schedule this request and attempt to process it
     * as soon as possible. However, unlike in {@link changeSize}, the runtime
     * may refuse to make a change in which case it will reject promise, call the
     * `overflowCallback` method on the target resource with the height value.
     * Overflow callback is expected to provide the reader with the user action
     * to update the height manually.
     * Note that the runtime does not call the `overflowCallback` method if the
     * requested height is 0 or negative.
     * If the height is successfully updated then the promise is resolved.
     * @param {!Element} element
     * @param {number|undefined} newHeight
     * @param {number|undefined} newWidth
     * @param {!../layout-rect.LayoutMarginsChangeDef=} opt_newMargins
     * @return {!Promise}
     */
    ;

    _proto.attemptChangeSize = function attemptChangeSize(element, newHeight, newWidth, opt_newMargins) {
      var _this10 = this;

      return new Promise(function (resolve, reject) {
        _this10.scheduleChangeSize_(_resource.Resource.forElement(element), newHeight, newWidth, opt_newMargins,
        /* force */
        false, function (success) {
          if (success) {
            resolve();
          } else {
            reject(new Error('changeSize attempt denied'));
          }
        });
      });
    }
    /**
     * Runs the specified measure, which is called in the "measure" vsync phase.
     * This is simply a proxy to the privileged vsync service.
     *
     * @param {function()} measurer
     * @return {!Promise}
     */
    ;

    _proto.measureElement = function measureElement(measurer) {
      return this.vsync_.measurePromise(measurer);
    }
    /**
     * Runs the specified mutation on the element and ensures that remeasures and
     * layouts performed for the affected elements.
     *
     * This method should be called whenever a significant mutations are done
     * on the DOM that could affect layout of elements inside this subtree or
     * its siblings. The top-most affected element should be specified as the
     * first argument to this method and all the mutation work should be done
     * in the mutator callback which is called in the "mutation" vsync phase.
     *
     * @param {!Element} element
     * @param {function()} mutator
     * @return {!Promise}
     */
    ;

    _proto.mutateElement = function mutateElement(element, mutator) {
      return this.measureMutateElement(element, null, mutator);
    }
    /**
     * Runs the specified mutation on the element and ensures that remeasures and
     * layouts performed for the affected elements.
     *
     * This method should be called whenever a significant mutations are done
     * on the DOM that could affect layout of elements inside this subtree or
     * its siblings. The top-most affected element should be specified as the
     * first argument to this method and all the mutation work should be done
     * in the mutator callback which is called in the "mutation" vsync phase.
     *
     * @param {!Element} element
     * @param {?function()} measurer
     * @param {function()} mutator
     * @return {!Promise}
     */
    ;

    _proto.measureMutateElement = function measureMutateElement(element, measurer, mutator) {
      if (this.useLayers_) {
        return this.measureMutateElementLayers_(element, measurer, mutator);
      } else {
        return this.measureMutateElementResources_(element, measurer, mutator);
      }
    }
    /**
     * Handles element mutation (and measurement) APIs in the Resources system.
     *
     * @param {!Element} element
     * @param {?function()} measurer
     * @param {function()} mutator
     * @return {!Promise}
     */
    ;

    _proto.measureMutateElementResources_ = function measureMutateElementResources_(element, measurer, mutator) {
      var _this11 = this;

      var calcRelayoutTop = function calcRelayoutTop() {
        var box = _this11.viewport_.getLayoutRect(element);

        if (box.width != 0 && box.height != 0) {
          return box.top;
        }

        return -1;
      };

      var relayoutTop = -1; // TODO(jridgewell): support state

      return this.vsync_.runPromise({
        measure: function measure() {
          if (measurer) {
            measurer();
          }

          relayoutTop = calcRelayoutTop();
        },
        mutate: function mutate() {
          mutator();

          if (element.classList.contains('i-amphtml-element')) {
            var r = _resource.Resource.forElement(element);

            r.requestMeasure();
          }

          var ampElements = element.getElementsByClassName('i-amphtml-element');

          for (var i = 0; i < ampElements.length; i++) {
            var _r = _resource.Resource.forElement(ampElements[i]);

            _r.requestMeasure();
          }

          if (relayoutTop != -1) {
            _this11.setRelayoutTop_(relayoutTop);
          }

          _this11.schedulePass(FOUR_FRAME_DELAY_); // Need to measure again in case the element has become visible or
          // shifted.


          _this11.vsync_.measure(function () {
            var updatedRelayoutTop = calcRelayoutTop();

            if (updatedRelayoutTop != -1 && updatedRelayoutTop != relayoutTop) {
              _this11.setRelayoutTop_(updatedRelayoutTop);

              _this11.schedulePass(FOUR_FRAME_DELAY_);
            }

            _this11.maybeChangeHeight_ = true;
          });
        }
      });
    }
    /**
     * Handles element mutation (and measurement) APIs in the Layers system.
     *
     * @param {!Element} element
     * @param {?function()} measurer
     * @param {function()} mutator
     * @return {!Promise}
     */
    ;

    _proto.measureMutateElementLayers_ = function measureMutateElementLayers_(element, measurer, mutator) {
      var _this12 = this;

      return this.vsync_.runPromise({
        measure: measurer || undefined,
        mutate: function mutate() {
          // TODO(jridgewell): Audit this system. Did this cause a layer
          // invalidation (new layer, or removal of old layer)? Right now, we're
          // only dirtying the measurements.
          mutator();

          _this12.dirtyElement(element);
        }
      });
    }
    /**
     * Dirties the cached element measurements after a mutation occurs.
     *
     * TODO(jridgewell): This API needs to be audited. Common practice is
     * to pass the amp-element in as the root even though we are only
     * mutating children. If the amp-element is passed, we invalidate
     * everything in the parent layer above it, where only invalidating the
     * amp-element was necessary (only children were mutated, only
     * amp-element's scroll box is affected).
     *
     * @param {!Element} element
     */
    ;

    _proto.dirtyElement = function dirtyElement(element) {
      var relayoutAll = false;

      if (this.useLayers_) {
        this.layers_.dirty(element); // Remeasures can result in a doc height change.

        this.maybeChangeHeight_ = true;
      } else {
        var isAmpElement = element.classList.contains('i-amphtml-element');

        if (isAmpElement) {
          var r = _resource.Resource.forElement(element);

          this.setRelayoutTop_(r.getLayoutBox().top);
        } else {
          relayoutAll = true;
        }
      }

      this.schedulePass(FOUR_FRAME_DELAY_, relayoutAll);
    }
    /**
     * Return a promise that requests runtime to collapse this element.
     * The runtime will schedule this request and first attempt to resize
     * the element to height and width 0. If success runtime will set element
     * display to none, and notify element owner of this collapse.
     * @param {!Element} element
     * @return {!Promise}
     */
    ;

    _proto.attemptCollapse = function attemptCollapse(element) {
      var _this13 = this;

      return new Promise(function (resolve, reject) {
        _this13.scheduleChangeSize_(_resource.Resource.forElement(element), 0, 0, undefined,
        /* force */
        false, function (success) {
          if (success) {
            var resource = _resource.Resource.forElement(element);

            resource.completeCollapse();
            resolve();
          } else {
            reject(new Error('collapse attempt denied'));
          }
        });
      });
    }
    /**
     * Collapses the element: ensures that it's `display:none`, notifies its
     * owner and updates the layout box.
     * @param {!Element} element
     */
    ;

    _proto.collapseElement = function collapseElement(element) {
      var box = this.viewport_.getLayoutRect(element);

      var resource = _resource.Resource.forElement(element);

      if (box.width != 0 && box.height != 0) {
        if ((0, _experiments.isExperimentOn)(this.win, 'dirty-collapse-element') || this.useLayers_) {
          this.dirtyElement(element);
        } else {
          this.setRelayoutTop_(box.top);
        }
      }

      resource.completeCollapse();
      this.schedulePass(FOUR_FRAME_DELAY_);
    }
    /**
     * Expands the element.
     * @param {!Element} element
     */
    ;

    _proto.expandElement = function expandElement(element) {
      var resource = _resource.Resource.forElement(element);

      resource.completeExpand();
      var owner = resource.getOwner();

      if (owner) {
        owner.expandedCallback(element);
      }

      this.schedulePass(FOUR_FRAME_DELAY_);
    }
    /**
     * Schedules the work pass at the latest with the specified delay.
     * @param {number=} opt_delay
     * @param {boolean=} opt_relayoutAll
     * @return {boolean}
     */
    ;

    _proto.schedulePass = function schedulePass(opt_delay, opt_relayoutAll) {
      if (opt_relayoutAll) {
        this.relayoutAll_ = true;
      }

      return this.pass_.schedule(opt_delay);
    }
    /**
     * Schedules the work pass at the latest with the specified delay.
     */
    ;

    _proto.schedulePassVsync = function schedulePassVsync() {
      var _this14 = this;

      if (this.vsyncScheduled_) {
        return;
      }

      this.vsyncScheduled_ = true;
      this.vsync_.mutate(function () {
        return _this14.doPass();
      });
    }
    /**
     * Called when main AMP binary is fully initialized.
     * May never be called in Shadow Mode.
     */
    ;

    _proto.ampInitComplete = function ampInitComplete() {
      this.ampInitialized_ = true;
      this.schedulePass();
    }
    /**
     * Registers a callback to be called when the next pass happens.
     * @param {function()} callback
     */
    ;

    _proto.onNextPass = function onNextPass(callback) {
      this.passCallbacks_.push(callback);
    }
    /**
     * Runs a pass immediately.
     */
    ;

    _proto.doPass = function doPass() {
      var _this15 = this;

      if (!this.isRuntimeOn_) {
        (0, _log.dev)().fine(TAG_, 'runtime is off');
        return;
      }

      this.visible_ = this.viewer_.isVisible();
      this.prerenderSize_ = this.viewer_.getPrerenderSize();
      var firstPassAfterDocumentReady = this.documentReady_ && this.firstPassAfterDocumentReady_;

      if (firstPassAfterDocumentReady) {
        this.firstPassAfterDocumentReady_ = false;
        var doc = this.win.document;

        var documentInfo = _services.Services.documentInfoForDoc(this.ampdoc);

        this.viewer_.sendMessage('documentLoaded', (0, _object.dict)({
          'title': doc.title,
          'sourceUrl': (0, _url.getSourceUrl)(this.ampdoc.getUrl()),
          'serverLayout': doc.documentElement.hasAttribute('i-amphtml-element'),
          'linkRels': documentInfo.linkRels,
          'metaTags': documentInfo.metaTags
        }),
        /* cancelUnsent */
        true);
        this.contentHeight_ = this.viewport_.getContentHeight();
        this.viewer_.sendMessage('documentHeight', (0, _object.dict)({
          'height': this.contentHeight_
        }),
        /* cancelUnsent */
        true);
        (0, _log.dev)().fine(TAG_, 'document height on load: %s', this.contentHeight_);
      }

      var viewportSize = this.viewport_.getSize();
      (0, _log.dev)().fine(TAG_, 'PASS: visible=', this.visible_, ', relayoutAll=', this.relayoutAll_, ', relayoutTop=', this.relayoutTop_, ', viewportSize=', viewportSize.width, viewportSize.height, ', prerenderSize=', this.prerenderSize_);
      this.pass_.cancel();
      this.vsyncScheduled_ = false;
      this.visibilityStateMachine_.setState(this.viewer_.getVisibilityState());

      if (this.documentReady_ && this.ampInitialized_ && !this.ampdoc.signals().get(READY_SCAN_SIGNAL_)) {
        // This signal mainly signifies that most of elements have been measured
        // by now. This is mostly used to avoid measuring too many elements
        // individually. This will be superceeded by layers API, e.g.
        // "layer measured".
        // May not be called in shadow mode.
        this.ampdoc.signals().signal(READY_SCAN_SIGNAL_);
      }

      if (this.maybeChangeHeight_) {
        this.maybeChangeHeight_ = false;
        this.vsync_.measure(function () {
          var measuredContentHeight = _this15.viewport_.getContentHeight();

          if (measuredContentHeight != _this15.contentHeight_) {
            _this15.viewer_.sendMessage('documentHeight', (0, _object.dict)({
              'height': measuredContentHeight
            }),
            /* cancelUnsent */
            true);

            _this15.contentHeight_ = measuredContentHeight;
            (0, _log.dev)().fine(TAG_, 'document height changed: %s', _this15.contentHeight_);

            _this15.viewport_.contentHeightChanged();
          }
        });
      }

      for (var i = 0; i < this.passCallbacks_.length; i++) {
        var fn = this.passCallbacks_[i];
        fn();
      }

      this.passCallbacks_.length = 0;
    }
    /**
     * Returns `true` when there's mutate work currently batched.
     * @return {boolean}
     * @private
     */
    ;

    _proto.hasMutateWork_ = function hasMutateWork_() {
      return this.requestsChangeSize_.length > 0;
    }
    /**
     * Performs pre-discovery mutates.
     * @private
     */
    ;

    _proto.mutateWork_ = function mutateWork_() {
      if (this.useLayers_) {
        this.mutateWorkViaLayers_();
      } else {
        this.mutateWorkViaResources_();
      }
    }
    /** @private */
    ;

    _proto.mutateWorkViaResources_ = function mutateWorkViaResources_() {
      var _this16 = this;

      // Read all necessary data before mutates.
      // The height changing depends largely on the target element's position
      // in the active viewport. When not in prerendering, we also consider the
      // active viewport the part of the visible viewport below 10% from the top
      // and above 25% from the bottom.
      // This is basically the portion of the viewport where the reader is most
      // likely focused right now. The main goal is to avoid drastic UI changes
      // in that part of the content. The elements below the active viewport are
      // freely resized. The elements above the viewport are resized and request
      // scroll adjustment to avoid active viewport changing without user's
      // action. The elements in the active viewport are not resized and instead
      // the overflow callbacks are called.
      var now = Date.now();
      var viewportRect = this.viewport_.getRect();
      var topOffset = viewportRect.height / 10;
      var bottomOffset = viewportRect.height / 10;
      var isScrollingStopped = Math.abs(this.lastVelocity_) < 1e-2 && now - this.lastScrollTime_ > MUTATE_DEFER_DELAY_ || now - this.lastScrollTime_ > MUTATE_DEFER_DELAY_ * 2; // TODO(jridgewell, #12780): Update resize rules to account for layers.

      if (this.requestsChangeSize_.length > 0) {
        (0, _log.dev)().fine(TAG_, 'change size requests:', this.requestsChangeSize_.length);
        var requestsChangeSize = this.requestsChangeSize_;
        this.requestsChangeSize_ = []; // Find minimum top position and run all mutates.

        var minTop = -1;
        var scrollAdjSet = [];
        var dirtySet = [];
        var aboveVpHeightChange = 0;

        for (var i = 0; i < requestsChangeSize.length; i++) {
          var request = requestsChangeSize[i];
          /** @const {!Resource} */

          var resource = request.resource;
          var box = resource.getLayoutBox();
          var topMarginDiff = 0;
          var bottomMarginDiff = 0;
          var leftMarginDiff = 0;
          var rightMarginDiff = 0;
          var topUnchangedBoundary = box.top,
              bottomDisplacedBoundary = box.bottom;
          var newMargins = undefined;

          if (request.marginChange) {
            newMargins = request.marginChange.newMargins;
            var margins = request.marginChange.currentMargins;

            if (newMargins.top != undefined) {
              topMarginDiff = newMargins.top - margins.top;
            }

            if (newMargins.bottom != undefined) {
              bottomMarginDiff = newMargins.bottom - margins.bottom;
            }

            if (newMargins.left != undefined) {
              leftMarginDiff = newMargins.left - margins.left;
            }

            if (newMargins.right != undefined) {
              rightMarginDiff = newMargins.right - margins.right;
            }

            if (topMarginDiff) {
              topUnchangedBoundary = box.top - margins.top;
            }

            if (bottomMarginDiff) {
              // The lowest boundary of the element that would appear to be
              // resized as a result of this size change. If the bottom margin is
              // being changed then it is the bottom edge of the margin box,
              // otherwise it is the bottom edge of the layout box as set above.
              bottomDisplacedBoundary = box.bottom + margins.bottom;
            }
          }

          var heightDiff = request.newHeight - box.height;
          var widthDiff = request.newWidth - box.width; // Check resize rules. It will either resize element immediately, or
          // wait until scrolling stops or will call the overflow callback.

          var resize = false;

          if (heightDiff == 0 && topMarginDiff == 0 && bottomMarginDiff == 0 && widthDiff == 0 && leftMarginDiff == 0 && rightMarginDiff == 0) {// 1. Nothing to resize.
          } else if (request.force || !this.visible_) {
            // 2. An immediate execution requested or the document is hidden.
            resize = true;
          } else if (this.activeHistory_.hasDescendantsOf(resource.element)) {
            // 3. Active elements are immediately resized. The assumption is that
            // the resize is triggered by the user action or soon after.
            resize = true;
          } else if (topUnchangedBoundary >= viewportRect.bottom - bottomOffset || topMarginDiff == 0 && box.bottom + Math.min(heightDiff, 0) >= viewportRect.bottom - bottomOffset) {
            // 4. Elements under viewport are resized immediately, but only if
            // an element's boundary is not changed above the viewport after
            // resize.
            resize = true;
          } else if (viewportRect.top > 1 && bottomDisplacedBoundary <= viewportRect.top + topOffset) {
            // 5. Elements above the viewport can only be resized if we are able
            // to compensate the height change by setting scrollTop and only if
            // the page has already been scrolled by some amount (1px due to iOS).
            // Otherwise the scrolling might move important things like the menu
            // bar out of the viewport at initial page load.
            if (heightDiff < 0 && viewportRect.top + aboveVpHeightChange < -heightDiff) {
              // Do nothing if height abobe viewport height can't compensate
              // height decrease
              continue;
            } // Can only resized when scrollinghas stopped,
            // otherwise defer util next cycle.


            if (isScrollingStopped) {
              // These requests will be executed in the next animation cycle and
              // adjust the scroll position.
              aboveVpHeightChange = aboveVpHeightChange + heightDiff;
              scrollAdjSet.push(request);
            } else {
              // Defer till next cycle.
              this.requestsChangeSize_.push(request);
            }

            continue;
          } else if (this.elementNearBottom_(resource, box)) {
            // 6. Elements close to the bottom of the document (not viewport)
            // are resized immediately.
            resize = true;
          } else if (heightDiff < 0 || topMarginDiff < 0 || bottomMarginDiff < 0) {// 7. The new height (or one of the margins) is smaller than the
            // current one.
          } else {
            // 8. Element is in viewport don't resize and try overflow callback
            // instead.
            request.resource.overflowCallback(
            /* overflown */
            true, request.newHeight, request.newWidth, newMargins);
          }

          if (resize) {
            if (box.top >= 0) {
              minTop = minTop == -1 ? box.top : Math.min(minTop, box.top);
            }

            if (this.useLayers_) {
              dirtySet.push(request.resource.element);
            }

            request.resource.
            /*OK*/
            changeSize(request.newHeight, request.newWidth, newMargins);
            request.resource.overflowCallback(
            /* overflown */
            false, request.newHeight, request.newWidth, newMargins);
            this.maybeChangeHeight_ = true;
          }

          if (request.callback) {
            request.callback(
            /* hasSizeChanged */
            resize);
          }
        }

        if (this.useLayers_) {
          dirtySet.forEach(function (element) {
            _this16.dirtyElement(element);
          });
        } else if (minTop != -1) {
          this.setRelayoutTop_(minTop);
        } // Execute scroll-adjusting resize requests, if any.


        if (scrollAdjSet.length > 0) {
          this.vsync_.run({
            measure: function measure(state) {
              state.
              /*OK*/
              scrollHeight = _this16.viewport_.
              /*OK*/
              getScrollHeight();
              state.
              /*OK*/
              scrollTop = _this16.viewport_.
              /*OK*/
              getScrollTop();
            },
            mutate: function mutate(state) {
              var minTop = -1;
              scrollAdjSet.forEach(function (request) {
                var box = request.resource.getLayoutBox();
                minTop = minTop == -1 ? box.top : Math.min(minTop, box.top);
                request.resource.
                /*OK*/
                changeSize(request.newHeight, request.newWidth, request.marginChange ? request.marginChange.newMargins : undefined);

                if (request.callback) {
                  request.callback(
                  /* hasSizeChanged */
                  true);
                }
              });

              if (_this16.useLayers_) {
                scrollAdjSet.forEach(function (request) {
                  _this16.dirtyElement(request.resource.element);
                });
              } else if (minTop != -1) {
                _this16.setRelayoutTop_(minTop);
              } // Sync is necessary here to avoid UI jump in the next frame.


              var newScrollHeight = _this16.viewport_.
              /*OK*/
              getScrollHeight();

              if (newScrollHeight != state.
              /*OK*/
              scrollHeight) {
                _this16.viewport_.setScrollTop(state.
                /*OK*/
                scrollTop + (newScrollHeight - state.
                /*OK*/
                scrollHeight));
              }

              _this16.maybeChangeHeight_ = true;
            }
          }, {});
        }
      }
    }
    /**
     * TODO(jridgewell): This will be Layer's bread and butter for speed
     * optimizations.
     * @private
     */
    ;

    _proto.mutateWorkViaLayers_ = function mutateWorkViaLayers_() {
      this.mutateWorkViaResources_();
    }
    /**
     * Returns true if element is within 15% and 1000px of document bottom.
     * Caller can provide current/initial layout boxes as an optimization.
     * @param {!./resource.Resource} resource
     * @param {!../layout-rect.LayoutRectDef=} opt_layoutBox
     * @param {!../layout-rect.LayoutRectDef=} opt_initialLayoutBox
     * @return {boolean}
     * @private
     */
    ;

    _proto.elementNearBottom_ = function elementNearBottom_(resource, opt_layoutBox, opt_initialLayoutBox) {
      var contentHeight = this.viewport_.getContentHeight();
      var threshold = Math.max(contentHeight * 0.85, contentHeight - 1000);
      var box = opt_layoutBox || resource.getLayoutBox();
      var initialBox = opt_initialLayoutBox || resource.getInitialLayoutBox();
      return box.bottom >= threshold || initialBox.bottom >= threshold;
    }
    /**
     * @param {number} relayoutTop
     * @private
     */
    ;

    _proto.setRelayoutTop_ = function setRelayoutTop_(relayoutTop) {
      if (this.useLayers_) {
        this.relayoutAll_ = true;
      } else if (this.relayoutTop_ == -1) {
        this.relayoutTop_ = relayoutTop;
      } else {
        this.relayoutTop_ = Math.min(relayoutTop, this.relayoutTop_);
      }
    }
    /**
     * Reschedules change size request when an overflown element is activated.
     * @param {!Element} element
     * @private
     */
    ;

    _proto.checkPendingChangeSize_ = function checkPendingChangeSize_(element) {
      var resourceElement = (0, _dom.closest)(element, function (el) {
        return !!_resource.Resource.forElementOptional(el);
      });

      if (!resourceElement) {
        return;
      }

      var resource = _resource.Resource.forElement(resourceElement);

      var pendingChangeSize = resource.getPendingChangeSize();

      if (pendingChangeSize !== undefined) {
        this.scheduleChangeSize_(resource, pendingChangeSize.height, pendingChangeSize.width, pendingChangeSize.margins,
        /* force */
        true);
      }
    }
    /**
     * Discovers work that needs to be done since the last pass. If viewport
     * has changed, it will try to build new elements, measure changed elements,
     * and schedule layouts and preloads within a reasonable distance of the
     * current viewport. Finally, this process also updates inViewport state
     * of changed elements.
     *
     * Layouts and preloads are not executed immediately, but instead scheduled
     * in the queue with different priorities.
     *
     * @private
     */
    ;

    _proto.discoverWork_ = function discoverWork_() {
      var _this17 = this;

      // TODO(dvoytenko): vsync separation may be needed for different phases
      var now = Date.now(); // Ensure all resources layout phase complete; when relayoutAll is requested
      // force re-layout.

      var relayoutAll = this.relayoutAll_;
      this.relayoutAll_ = false;
      var relayoutTop = this.relayoutTop_;
      this.relayoutTop_ = -1; // Phase 1: Build and relayout as needed. All mutations happen here.

      var relayoutCount = 0;
      var remeasureCount = 0;

      for (var i = 0; i < this.resources_.length; i++) {
        var r = this.resources_[i];

        if (r.getState() == _resource.ResourceState.NOT_BUILT && !r.isBuilding()) {
          this.buildOrScheduleBuildForResource_(r,
          /* checkForDupes */
          true);
        }

        if (relayoutAll || !r.hasBeenMeasured() || r.getState() == _resource.ResourceState.NOT_LAID_OUT) {
          r.applySizesAndMediaQuery();
          relayoutCount++;
        }

        if (r.isMeasureRequested()) {
          remeasureCount++;
        }
      } // Phase 2: Remeasure if there were any relayouts. Unfortunately, currently
      // there's no way to optimize this. All reads happen here.


      var toUnload;

      if (relayoutCount > 0 || remeasureCount > 0 || relayoutAll || relayoutTop != -1) {
        for (var _i = 0; _i < this.resources_.length; _i++) {
          var _r2 = this.resources_[_i];

          if (_r2.hasOwner() && !_r2.isMeasureRequested()) {
            // If element has owner, and measure is not requested, do nothing.
            continue;
          }

          if (relayoutAll || _r2.getState() == _resource.ResourceState.NOT_LAID_OUT || !_r2.hasBeenMeasured() || _r2.isMeasureRequested() || relayoutTop != -1 && _r2.getLayoutBox().bottom >= relayoutTop) {
            var wasDisplayed = _r2.isDisplayed();

            _r2.measure();

            if (wasDisplayed && !_r2.isDisplayed()) {
              if (!toUnload) {
                toUnload = [];
              }

              toUnload.push(_r2);
            }
          }
        }
      } // Unload all in one cycle.


      if (toUnload) {
        this.vsync_.mutate(function () {
          toUnload.forEach(function (r) {
            r.unload();

            _this17.cleanupTasks_(r);
          });
        });
      }

      var viewportRect = this.viewport_.getRect(); // Load viewport = viewport + 3x up/down when document is visible or
      // depending on prerenderSize in pre-render mode.

      var loadRect;

      if (this.visible_) {
        loadRect = (0, _layoutRect.expandLayoutRect)(viewportRect, 0.25, 2);
      } else if (this.prerenderSize_ > 0) {
        loadRect = (0, _layoutRect.expandLayoutRect)(viewportRect, 0, this.prerenderSize_ - 1);
      } else {
        loadRect = null;
      }

      var visibleRect = this.visible_ // When the doc is visible, consider the viewport to be 25% larger,
      // to minimize effect from small scrolling and notify things that
      // they are in viewport just before they are actually visible.
      ? (0, _layoutRect.expandLayoutRect)(viewportRect, 0.25, 0.25) : viewportRect; // Phase 3: Trigger "viewport enter/exit" events.

      for (var _i2 = 0; _i2 < this.resources_.length; _i2++) {
        var _r3 = this.resources_[_i2];

        if (_r3.getState() == _resource.ResourceState.NOT_BUILT || _r3.hasOwner()) {
          continue;
        } // Note that when the document is not visible, neither are any of its
        // elements to reduce CPU cycles.
        // TODO(dvoytenko, #3434): Reimplement the use of `isFixed` with
        // layers. This is currently a short-term fix to the problem that
        // the fixed elements get incorrect top coord.


        var shouldBeInViewport = this.visible_ && _r3.isDisplayed() && _r3.overlaps(visibleRect);

        _r3.setInViewport(shouldBeInViewport);
      } // Phase 4: Schedule elements for layout within a reasonable distance from
      // current viewport.


      if (loadRect) {
        for (var _i3 = 0; _i3 < this.resources_.length; _i3++) {
          var _r4 = this.resources_[_i3];

          if (_r4.getState() != _resource.ResourceState.READY_FOR_LAYOUT || _r4.hasOwner()) {
            continue;
          } // TODO(dvoytenko, #3434): Reimplement the use of `isFixed` with
          // layers. This is currently a short-term fix to the problem that
          // the fixed elements get incorrect top coord.


          if (_r4.isDisplayed() && _r4.overlaps(loadRect)) {
            this.scheduleLayoutOrPreload_(_r4,
            /* layout */
            true);
          }
        }
      }

      if (this.visible_ && this.exec_.getSize() == 0 && this.queue_.getSize() == 0 && now > this.exec_.getLastDequeueTime() + 5000) {
        // Phase 5: Idle Render Outside Viewport layout: layout up to 4 items
        // with idleRenderOutsideViewport true
        var idleScheduledCount = 0;

        for (var _i4 = 0; _i4 < this.resources_.length && idleScheduledCount < 4; _i4++) {
          var _r5 = this.resources_[_i4];

          if (_r5.getState() == _resource.ResourceState.READY_FOR_LAYOUT && !_r5.hasOwner() && _r5.isDisplayed() && _r5.idleRenderOutsideViewport()) {
            (0, _log.dev)().fine(TAG_, 'idleRenderOutsideViewport layout:', _r5.debugid);
            this.scheduleLayoutOrPreload_(_r5,
            /* layout */
            false);
            idleScheduledCount++;
          }
        } // Phase 6: Idle layout: layout more if we are otherwise not doing much.
        // TODO(dvoytenko): document/estimate IDLE timeouts and other constants


        for (var _i5 = 0; _i5 < this.resources_.length && idleScheduledCount < 4; _i5++) {
          var _r6 = this.resources_[_i5];

          if (_r6.getState() == _resource.ResourceState.READY_FOR_LAYOUT && !_r6.hasOwner() && _r6.isDisplayed()) {
            (0, _log.dev)().fine(TAG_, 'idle layout:', _r6.debugid);
            this.scheduleLayoutOrPreload_(_r6,
            /* layout */
            false);
            idleScheduledCount++;
          }
        }
      }
    }
    /**
     * Dequeues layout and preload tasks from the queue and initiates their
     * execution.
     *
     * There are two main drivers to dequeueing: a task's score and timeout. The
     * score is built based on the resource's priority and viewport location
     * (see {@link calcTaskScore_}). Timeout depends on the priority and age
     * of tasks currently in the execution pool (see {@link calcTaskTimeout_}).
     *
     * @return {!time}
     * @private
     */
    ;

    _proto.work_ = function work_() {
      var now = Date.now();
      var timeout = -1;
      var state = Object.create(null);
      var task = this.queue_.peek(this.boundTaskScorer_, state);

      while (task) {
        timeout = this.calcTaskTimeout_(task);
        (0, _log.dev)().fine(TAG_, 'peek from queue:', task.id, 'sched at', task.scheduleTime, 'score', this.boundTaskScorer_(task, state), 'timeout', timeout);

        if (timeout > 16) {
          break;
        }

        this.queue_.dequeue(task); // Do not override a task in execution. This task will have to wait
        // until the current one finished the execution.

        var executing = this.exec_.getTaskById(task.id);

        if (executing) {
          // Reschedule post execution.
          var reschedule = this.reschedule_.bind(this, task);
          executing.promise.then(reschedule, reschedule);
        } else {
          task.resource.measure();

          if (this.isLayoutAllowed_(task.resource, task.forceOutsideViewport)) {
            task.promise = task.callback();
            task.startTime = now;
            (0, _log.dev)().fine(TAG_, 'exec:', task.id, 'at', task.startTime);
            this.exec_.enqueue(task);
            task.promise.then(this.taskComplete_.bind(this, task, true), this.taskComplete_.bind(this, task, false)).catch(
            /** @type {function (*)} */
            _error.reportError);
          } else {
            (0, _log.dev)().fine(TAG_, 'cancelled', task.id);
            task.resource.layoutCanceled();
          }
        }

        task = this.queue_.peek(this.boundTaskScorer_, state);
        timeout = -1;
      }

      (0, _log.dev)().fine(TAG_, 'queue size:', this.queue_.getSize());
      (0, _log.dev)().fine(TAG_, 'exec size:', this.exec_.getSize());

      if (timeout >= 0) {
        // Still tasks in the queue, but we took too much time.
        // Schedule the next work pass.
        return timeout;
      } // No tasks left in the queue.
      // Schedule the next idle pass.


      var nextPassDelay = (now - this.exec_.getLastDequeueTime()) * 2;
      nextPassDelay = Math.max(Math.min(30000, nextPassDelay), 5000);
      return nextPassDelay;
    }
    /**
     * Calculates the task's score. A task with the lowest score will be dequeued
     * from the queue the first.
     *
     * There are three components of the score: element's priority, operation or
     * offset priority and viewport priority.
     *
     * Element's priority is constant of the element's name. E.g. amp-img has a
     * priority of 0, while amp-ad has a priority of 2.
     *
     * The operation (offset) priority is the priority of the task. A layout is
     * a high-priority task while preload is a lower-priority task.
     *
     * Viewport priority is a function of the distance of the element from the
     * currently visible viewports. The elements in the visible viewport get
     * higher priority and further away from the viewport get lower priority.
     * This priority also depends on whether or not the user is scrolling towards
     * this element or away from it.
     *
     * @param {!./task-queue.TaskDef} task
     * @param {!Object<string, *>} unusedCache
     * @return {number}
     * @private
     */
    ;

    _proto.calcTaskScore_ = function calcTaskScore_(task, unusedCache) {
      // TODO(jridgewell): these should be taking into account the active
      // scroller, which may not be the root scroller. Maybe a weighted average
      // of "scroller scrolls necessary" to see the element.
      // Demo at https://output.jsbin.com/hicigom/quiet
      var viewport = this.viewport_.getRect();
      var box = task.resource.getLayoutBox();
      var posPriority = Math.floor((box.top - viewport.top) / viewport.height);

      if (Math.sign(posPriority) != this.getScrollDirection()) {
        posPriority *= 2;
      }

      posPriority = Math.abs(posPriority);
      return task.priority * PRIORITY_BASE_ + posPriority;
    }
    /**
     * Calculates the task's score using the Layers service. A task with the
     * lowest score will be dequeued from the queue the first.
     *
     * Refer to {@link calcTaskScore_} for basic explanation.
     *
     * Viewport priority is a function of the distance of the element from the
     * currently visible viewports. The elements in the visible viewport get
     * higher priority and further away from the viewport get lower priority.
     *
     * @param {!./task-queue.TaskDef} task
     * @param {!Object<string, *>} cache
     * @return {number}
     * @private
     */
    ;

    _proto.calcTaskScoreLayers_ = function calcTaskScoreLayers_(task, cache) {
      var layerScore = this.layers_.iterateAncestry(task.resource.element, this.boundCalcLayoutScore_, cache);
      return task.priority * PRIORITY_BASE_ + layerScore;
    }
    /**
     * Calculates the layout's distance from viewport score, using an iterative
     * (and cacheable) calculation based on tree depth and distance.
     *
     * @param {number|undefined} currentScore
     * @param {!./layers-impl.LayoutElement} layout
     * @param {number} depth
     * @param {!Object<string, *>} cache
     * @return {number}
     */
    ;

    _proto.calcLayoutScore_ = function calcLayoutScore_(currentScore, layout, depth, cache) {
      var id = layout.getId();

      if ((0, _object.hasOwn)(cache, id)) {
        return (0, _log.dev)().assertNumber(cache[id]);
      }

      var score = currentScore || 0;
      var depthPenalty = 1 + depth / 10;
      var nonActivePenalty = layout.isActiveUnsafe() ? 1 : 2;
      var distance = layout.getHorizontalDistanceFromParent() + layout.getVerticalDistanceFromParent();
      return cache[id] = score + nonActivePenalty * depthPenalty * distance;
    }
    /**
     * Calculates the timeout of a task. The timeout depends on two main factors:
     * the priorities of the tasks currently in the execution pool and their age.
     * The timeout is calculated against each task in the execution pool and the
     * maximum value is returned.
     *
     * A task is penalized with higher timeout values when it's lower in priority
     * than the task in the execution pool. However, this penalty is judged
     * against the age of the executing task. If it has been in executing for
     * some time, the penalty is reduced.
     *
     * @param {!./task-queue.TaskDef} task
     * @private
     */
    ;

    _proto.calcTaskTimeout_ = function calcTaskTimeout_(task) {
      var now = Date.now();

      if (this.exec_.getSize() == 0) {
        // If we've never been visible, return 0. This follows the previous
        // behavior of not delaying tasks when there's nothing to do.
        if (this.firstVisibleTime_ === -1) {
          return 0;
        } // Scale off the first visible time, so penalized tasks must wait a
        // second or two to run. After we have been visible for a time, we no
        // longer have to wait.


        var penalty = task.priority * PRIORITY_PENALTY_TIME_;
        return Math.max(penalty - (now - this.firstVisibleTime_), 0);
      }

      var timeout = 0;
      this.exec_.forEach(function (other) {
        // Higher priority tasks get the head start. Currently 500ms per a drop
        // in priority (note that priority is 10-based).
        var penalty = Math.max((task.priority - other.priority) * PRIORITY_PENALTY_TIME_, 0); // TODO(dvoytenko): Consider running total and not maximum.

        timeout = Math.max(timeout, penalty - (now - other.startTime));
      });
      return timeout;
    }
    /**
     * @param {!./task-queue.TaskDef} task
     * @private
     */
    ;

    _proto.reschedule_ = function reschedule_(task) {
      if (!this.queue_.getTaskById(task.id)) {
        this.queue_.enqueue(task);
      }
    }
    /**
     * @param {!./task-queue.TaskDef} task
     * @param {boolean} success
     * @param {*=} opt_reason
     * @return {!Promise|undefined}
     * @private
     */
    ;

    _proto.taskComplete_ = function taskComplete_(task, success, opt_reason) {
      this.exec_.dequeue(task);
      this.schedulePass(POST_TASK_PASS_DELAY_);

      if (!success) {
        (0, _log.dev)().info(TAG_, 'task failed:', task.id, task.resource.debugid, opt_reason);
        return Promise.reject(opt_reason);
      }
    }
    /**
     * Schedules change of the element's height.
     * @param {!Resource} resource
     * @param {number|undefined} newHeight
     * @param {number|undefined} newWidth
     * @param {!../layout-rect.LayoutMarginsChangeDef|undefined} newMargins
     * @param {boolean} force
     * @param {function(boolean)=} opt_callback A callback function
     * @private
     */
    ;

    _proto.scheduleChangeSize_ = function scheduleChangeSize_(resource, newHeight, newWidth, newMargins, force, opt_callback) {
      var _this18 = this;

      if (resource.hasBeenMeasured() && !newMargins) {
        this.completeScheduleChangeSize_(resource, newHeight, newWidth, undefined, force, opt_callback);
      } else {
        // This is a rare case since most of times the element itself schedules
        // resize requests. However, this case is possible when another element
        // requests resize of a controlled element. This also happens when a
        // margin size change is requested, since existing margins have to be
        // measured in this instance.
        this.vsync_.measure(function () {
          if (!resource.hasBeenMeasured()) {
            resource.measure();
          }

          var marginChange = newMargins ? {
            newMargins: newMargins,
            currentMargins: _this18.getLayoutMargins_(resource)
          } : undefined;

          _this18.completeScheduleChangeSize_(resource, newHeight, newWidth, marginChange, force, opt_callback);
        });
      }
    }
    /**
     * Returns the layout margins for the resource.
     * @param {!Resource} resource
     * @return {!../layout-rect.LayoutMarginsDef}
     * @private
     */
    ;

    _proto.getLayoutMargins_ = function getLayoutMargins_(resource) {
      var style = (0, _style.computedStyle)(this.win, resource.element);
      return {
        top: parseInt(style.marginTop, 10) || 0,
        right: parseInt(style.marginRight, 10) || 0,
        bottom: parseInt(style.marginBottom, 10) || 0,
        left: parseInt(style.marginLeft, 10) || 0
      };
    }
    /**
     * @param {!Resource} resource
     * @param {number|undefined} newHeight
     * @param {number|undefined} newWidth
     * @param {!MarginChangeDef|undefined} marginChange
     * @param {boolean} force
     * @param {function(boolean)=} opt_callback A callback function
     * @private
     */
    ;

    _proto.completeScheduleChangeSize_ = function completeScheduleChangeSize_(resource, newHeight, newWidth, marginChange, force, opt_callback) {
      resource.resetPendingChangeSize();
      var layoutBox = resource.getPageLayoutBox();

      if ((newHeight === undefined || newHeight == layoutBox.height) && (newWidth === undefined || newWidth == layoutBox.width) && (marginChange === undefined || !(0, _layoutRect.areMarginsChanged)(marginChange.currentMargins, marginChange.newMargins))) {
        if (newHeight === undefined && newWidth === undefined && marginChange === undefined) {
          (0, _log.dev)().error(TAG_, 'attempting to change size with undefined dimensions', resource.debugid);
        } // Nothing to do.


        if (opt_callback) {
          opt_callback(
          /* success */
          true);
        }

        return;
      }

      var request = null;

      for (var i = 0; i < this.requestsChangeSize_.length; i++) {
        if (this.requestsChangeSize_[i].resource == resource) {
          request = this.requestsChangeSize_[i];
          break;
        }
      }

      if (request) {
        request.newHeight = newHeight;
        request.newWidth = newWidth;
        request.marginChange = marginChange;
        request.force = force || request.force;
        request.callback = opt_callback;
      } else {
        this.requestsChangeSize_.push(
        /** {!ChangeSizeRequestDef} */
        {
          resource: resource,
          newHeight: newHeight,
          newWidth: newWidth,
          marginChange: marginChange,
          force: force,
          callback: opt_callback
        });
      }

      this.schedulePassVsync();
    }
    /**
     * Returns whether the resource should be preloaded at this time.
     * The element must be measured by this time.
     * @param {!Resource} resource
     * @param {boolean} forceOutsideViewport
     * @return {boolean}
     * @private
     */
    ;

    _proto.isLayoutAllowed_ = function isLayoutAllowed_(resource, forceOutsideViewport) {
      // Only built and displayed elements can be loaded.
      if (resource.getState() == _resource.ResourceState.NOT_BUILT || !resource.isDisplayed()) {
        return false;
      } // Don't schedule elements when we're not visible, or in prerender mode
      // (and they can't prerender).


      if (!this.visible_) {
        if (this.viewer_.getVisibilityState() != _visibilityState.VisibilityState.PRERENDER || !resource.prerenderAllowed()) {
          return false;
        }
      } // The element has to be in its rendering corridor.


      if (!forceOutsideViewport && !resource.isInViewport() && !resource.renderOutsideViewport() && !resource.idleRenderOutsideViewport()) {
        return false;
      }

      return true;
    }
    /**
     * Schedules layout or preload for the specified resource.
     * @param {!Resource} resource
     * @param {boolean} layout
     * @param {number=} opt_parentPriority
     * @param {boolean=} opt_forceOutsideViewport
     * @private
     */
    ;

    _proto.scheduleLayoutOrPreload_ = function scheduleLayoutOrPreload_(resource, layout, opt_parentPriority, opt_forceOutsideViewport) {
      (0, _log.devAssert)(resource.getState() != _resource.ResourceState.NOT_BUILT && resource.isDisplayed(), 'Not ready for layout: %s (%s)', resource.debugid, resource.getState());
      var forceOutsideViewport = opt_forceOutsideViewport || false;

      if (!this.isLayoutAllowed_(resource, forceOutsideViewport)) {
        return;
      }

      if (layout) {
        this.schedule_(resource, LAYOUT_TASK_ID_, LAYOUT_TASK_OFFSET_, opt_parentPriority || 0, forceOutsideViewport, resource.startLayout.bind(resource));
      } else {
        this.schedule_(resource, PRELOAD_TASK_ID_, PRELOAD_TASK_OFFSET_, opt_parentPriority || 0, forceOutsideViewport, resource.startLayout.bind(resource));
      }
    }
    /**
     * Schedules layout or preload for the sub-resources of the specified
     * resource.
     * @param {!Resource} parentResource
     * @param {boolean} layout
     * @param {!Array<!Element>} subElements
     * @private
     */
    ;

    _proto.scheduleLayoutOrPreloadForSubresources_ = function scheduleLayoutOrPreloadForSubresources_(parentResource, layout, subElements) {
      var _this19 = this;

      this.discoverResourcesForArray_(parentResource, subElements, function (resource) {
        if (resource.getState() == _resource.ResourceState.NOT_BUILT) {
          resource.whenBuilt().then(function () {
            _this19.measureAndScheduleIfAllowed_(resource, layout, parentResource.getLayoutPriority());
          });
        } else {
          _this19.measureAndScheduleIfAllowed_(resource, layout, parentResource.getLayoutPriority());
        }
      });
    }
    /**
     * @param {!Resource} resource
     * @param {boolean} layout
     * @param {number} parentPriority
     * @private
     */
    ;

    _proto.measureAndScheduleIfAllowed_ = function measureAndScheduleIfAllowed_(resource, layout, parentPriority) {
      resource.measure();

      if (resource.getState() == _resource.ResourceState.READY_FOR_LAYOUT && resource.isDisplayed()) {
        this.scheduleLayoutOrPreload_(resource, layout, parentPriority);
      }
    }
    /**
     * Schedules a task.
     * @param {!Resource} resource
     * @param {string} localId
     * @param {number} priorityOffset
     * @param {number} parentPriority
     * @param {boolean} forceOutsideViewport
     * @param {function():!Promise} callback
     * @private
     */
    ;

    _proto.schedule_ = function schedule_(resource, localId, priorityOffset, parentPriority, forceOutsideViewport, callback) {
      var taskId = resource.getTaskId(localId);
      var task = {
        id: taskId,
        resource: resource,
        priority: Math.max(resource.getLayoutPriority(), parentPriority) + priorityOffset,
        forceOutsideViewport: forceOutsideViewport,
        callback: callback,
        scheduleTime: Date.now(),
        startTime: 0,
        promise: null
      };
      (0, _log.dev)().fine(TAG_, 'schedule:', task.id, 'at', task.scheduleTime); // Only schedule a new task if there's no one enqueued yet or if this task
      // has a higher priority.

      var queued = this.queue_.getTaskById(taskId);

      if (!queued || task.priority < queued.priority) {
        if (queued) {
          this.queue_.dequeue(queued);
        }

        this.queue_.enqueue(task);
        this.schedulePass(this.calcTaskTimeout_(task));
      }

      task.resource.layoutScheduled(task.scheduleTime);
    }
    /**
     * Updates inViewport state for the specified sub-resources of a resource.
     * @param {!Resource} parentResource
     * @param {!Array<!Element>} subElements
     * @param {boolean} inLocalViewport
     * @private
     */
    ;

    _proto.updateInViewportForSubresources_ = function updateInViewportForSubresources_(parentResource, subElements, inLocalViewport) {
      var inViewport = parentResource.isInViewport() && inLocalViewport;
      this.discoverResourcesForArray_(parentResource, subElements, function (resource) {
        resource.setInViewport(inViewport);
      });
    }
    /**
     * Finds resources within the parent resource's shallow subtree.
     * @param {!Resource} parentResource
     * @param {!Array<!Element>} elements
     * @param {function(!Resource)} callback
     */
    ;

    _proto.discoverResourcesForArray_ = function discoverResourcesForArray_(parentResource, elements, callback) {
      var _this20 = this;

      elements.forEach(function (element) {
        (0, _log.devAssert)(parentResource.element.contains(element));

        _this20.discoverResourcesForElement_(element, callback);
      });
    }
    /**
     * @param {!Element} element
     * @param {function(!Resource)} callback
     */
    ;

    _proto.discoverResourcesForElement_ = function discoverResourcesForElement_(element, callback) {
      // Breadth-first search.
      if (element.classList.contains('i-amphtml-element')) {
        callback(_resource.Resource.forElement(element)); // Also schedule amp-element that is a placeholder for the element.

        var placeholder = element.getPlaceholder();

        if (placeholder) {
          this.discoverResourcesForElement_(placeholder, callback);
        }
      } else {
        var ampElements = element.getElementsByClassName('i-amphtml-element');
        var seen = [];

        for (var i = 0; i < ampElements.length; i++) {
          var ampElement = ampElements[i];
          var covered = false;

          for (var j = 0; j < seen.length; j++) {
            if (seen[j].contains(ampElement)) {
              covered = true;
              break;
            }
          }

          if (!covered) {
            seen.push(ampElement);
            callback(_resource.Resource.forElement(ampElement));
          }
        }
      }
    }
    /**
     * Calls iterator on each sub-resource
     * @param {!FiniteStateMachine<!VisibilityState>} vsm
     */
    ;

    _proto.setupVisibilityStateMachine_ = function setupVisibilityStateMachine_(vsm) {
      var _this21 = this;

      var prerender = _visibilityState.VisibilityState.PRERENDER,
          visible = _visibilityState.VisibilityState.VISIBLE,
          hidden = _visibilityState.VisibilityState.HIDDEN,
          paused = _visibilityState.VisibilityState.PAUSED,
          inactive = _visibilityState.VisibilityState.INACTIVE;

      var doPass = function doPass() {
        // If viewport size is 0, the manager will wait for the resize event.
        var viewportSize = _this21.viewport_.getSize();

        if (viewportSize.height > 0 && viewportSize.width > 0) {
          if (_this21.hasMutateWork_()) {
            _this21.mutateWork_();
          }

          _this21.discoverWork_();

          var delay = _this21.work_();

          if (_this21.hasMutateWork_()) {
            // Overflow mutate work.
            delay = Math.min(delay, MUTATE_DEFER_DELAY_);
          }

          if (_this21.visible_) {
            if (_this21.schedulePass(delay)) {
              (0, _log.dev)().fine(TAG_, 'next pass:', delay);
            } else {
              (0, _log.dev)().fine(TAG_, 'pass already scheduled');
            }
          } else {
            (0, _log.dev)().fine(TAG_, 'document is not visible: no scheduling');
          }
        }
      };

      var noop = function noop() {};

      var pause = function pause() {
        _this21.resources_.forEach(function (r) {
          return r.pause();
        });
      };

      var unload = function unload() {
        _this21.resources_.forEach(function (r) {
          r.unload();

          _this21.cleanupTasks_(r);
        });

        _this21.unselectText();
      };

      var resume = function resume() {
        _this21.resources_.forEach(function (r) {
          return r.resume();
        });

        doPass();
      };

      vsm.addTransition(prerender, prerender, doPass);
      vsm.addTransition(prerender, visible, doPass);
      vsm.addTransition(prerender, hidden, doPass);
      vsm.addTransition(prerender, inactive, doPass);
      vsm.addTransition(prerender, paused, doPass);
      vsm.addTransition(visible, visible, doPass);
      vsm.addTransition(visible, hidden, doPass);
      vsm.addTransition(visible, inactive, unload);
      vsm.addTransition(visible, paused, pause);
      vsm.addTransition(hidden, visible, doPass);
      vsm.addTransition(hidden, hidden, doPass);
      vsm.addTransition(hidden, inactive, unload);
      vsm.addTransition(hidden, paused, pause);
      vsm.addTransition(inactive, visible, resume);
      vsm.addTransition(inactive, hidden, resume);
      vsm.addTransition(inactive, inactive, noop);
      vsm.addTransition(inactive, paused, doPass);
      vsm.addTransition(paused, visible, resume);
      vsm.addTransition(paused, hidden, doPass);
      vsm.addTransition(paused, inactive, unload);
      vsm.addTransition(paused, paused, noop);
    }
    /**
     * Unselects any selected text
     */
    ;

    _proto.unselectText = function unselectText() {
      try {
        this.win.getSelection().removeAllRanges();
      } catch (e) {// Selection API not supported.
      }
    }
    /**
     * Cleanup task queues from tasks for elements that has been unloaded.
     * @param {Resource} resource
     * @param {boolean=} opt_removePending Whether to remove from pending
     *     build resources.
     * @private
     */
    ;

    _proto.cleanupTasks_ = function cleanupTasks_(resource, opt_removePending) {
      if (resource.getState() == _resource.ResourceState.NOT_LAID_OUT) {
        // If the layout promise for this resource has not resolved yet, remove
        // it from the task queues to make sure this resource can be rescheduled
        // for layout again later on.
        // TODO(mkhatib): Think about how this might affect preload tasks once the
        // prerender change is in.
        this.queue_.purge(function (task) {
          return task.resource == resource;
        });
        this.exec_.purge(function (task) {
          return task.resource == resource;
        });
        (0, _array.remove)(this.requestsChangeSize_, function (request) {
          return request.resource === resource;
        });
      }

      if (resource.getState() == _resource.ResourceState.NOT_BUILT && opt_removePending && this.pendingBuildResources_) {
        var pendingIndex = this.pendingBuildResources_.indexOf(resource);

        if (pendingIndex != -1) {
          this.pendingBuildResources_.splice(pendingIndex, 1);
        }
      }
    };

    return Resources;
  }();
  /**
   * @param {!Element|!Array<!Element>} elements
   * @return {!Array<!Element>}
   */


  exports.Resources = Resources;

  function elements_(elements) {
    return (
      /** @type {!Array<!Element>} */
      (0, _types.isArray)(elements) ? elements : [elements]
    );
  }
  /**
   * The internal structure of a ChangeHeightRequest.
   * @typedef {{
   *   height: (number|undefined),
   *   width: (number|undefined),
   *   margins: (!../layout-rect.LayoutMarginsChangeDef|undefined)
   * }}
   */


  var SizeDef;
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   */

  exports.SizeDef = SizeDef;

  function installResourcesServiceForDoc(ampdoc) {
    (0, _service.registerServiceBuilderForDoc)(ampdoc, 'resources', Resources);
  }

  },{"../common-signals":16,"../dom":26,"../error":29,"../event-helper":31,"../experiments":32,"../finite-state-machine":34,"../focus-history":35,"../layout-rect":48,"../log":51,"../pass":55,"../service":71,"../services":112,"../style":118,"../types":121,"../url":124,"../utils/array":125,"../utils/object":132,"../utils/promise":134,"../visibility-state":139,"./ie-media-bug":86,"./resource":92,"./task-queue":96}],94:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.getAutofocusElementForShowAction = getAutofocusElementForShowAction;
  exports.installStandardActionsForDoc = installStandardActionsForDoc;
  exports.StandardActions = void 0;

  var _actionConstants = require("../action-constants");

  var _layout = require("../layout");

  var _services = require("../services");

  var _style = require("../style");

  var _log = require("../log");

  var _service = require("../service");

  var _types = require("../types");

  var _string = require("../string");

  var _dom = require("../dom");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @param {!Element} element
   * @return {boolean}
   */
  function isShowable(element) {
    return element.hasAttribute('hidden');
  }
  /**
   * @param {!Element} element
   * @return {?Element}
   * @visibleForTesting
   */


  function getAutofocusElementForShowAction(element) {
    if (element.hasAttribute('autofocus')) {
      return element;
    }

    return element.querySelector('[autofocus]');
  }
  /** @const {string} */


  var TAG = 'STANDARD-ACTIONS';
  /**
   * This service contains implementations of some of the most typical actions,
   * such as hiding DOM elements.
   * @implements {../service.EmbeddableService}
   * @private Visible for testing.
   */

  var StandardActions =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {!Window=} opt_win
     */
    function StandardActions(ampdoc, opt_win) {
      /** @const {!./ampdoc-impl.AmpDoc} */
      this.ampdoc = ampdoc;
      var context = opt_win ? opt_win.document.documentElement : ampdoc.getHeadNode();
      /** @const @private {!./resources-impl.Resources} */

      this.resources_ = _services.Services.resourcesForDoc(ampdoc);
      /** @const @private {!./viewport/viewport-impl.Viewport} */

      this.viewport_ = _services.Services.viewportForDoc(ampdoc); // Explicitly not setting `Action` as a member to scope installation to one
      // method and for bundle size savings. 💰

      this.installActions_(_services.Services.actionServiceForDoc(context));
    }
    /** @override @nocollapse */


    StandardActions.installInEmbedWindow = function installInEmbedWindow(embedWin, ampdoc) {
      (0, _service.installServiceInEmbedScope)(embedWin, 'standard-actions', new StandardActions(ampdoc, embedWin));
    }
    /**
     * @param {!./action-impl.ActionService} actionService
     * @private
     */
    ;

    var _proto = StandardActions.prototype;

    _proto.installActions_ = function installActions_(actionService) {
      actionService.addGlobalTarget('AMP', this.handleAmpTarget_.bind(this)); // All standard actions require high trust by default via
      // addGlobalMethodHandler.

      actionService.addGlobalMethodHandler('hide', this.handleHide_.bind(this));
      actionService.addGlobalMethodHandler('show', this.handleShow_.bind(this));
      actionService.addGlobalMethodHandler('toggleVisibility', this.handleToggle_.bind(this));
      actionService.addGlobalMethodHandler('scrollTo', this.handleScrollTo_.bind(this));
      actionService.addGlobalMethodHandler('focus', this.handleFocus_.bind(this));
      actionService.addGlobalMethodHandler('toggleClass', this.handleToggleClass_.bind(this));
    }
    /**
     * Handles global `AMP` actions.
     * See `amp-actions-and-events.md` for details.
     * @param {!./action-impl.ActionInvocation} invocation
     * @return {?Promise}
     * @throws If the invocation method is unrecognized.
     * @private Visible to tests only.
     */
    ;

    _proto.handleAmpTarget_ = function handleAmpTarget_(invocation) {
      // All global `AMP` actions require high trust.
      if (!invocation.satisfiesTrust(_actionConstants.ActionTrust.HIGH)) {
        return null;
      }

      var node = invocation.node,
          method = invocation.method,
          args = invocation.args;
      var win = (node.ownerDocument || node).defaultView;

      switch (method) {
        case 'pushState':
        case 'setState':
          var element = node.nodeType === Node.DOCUMENT_NODE ? node.documentElement : node;
          return _services.Services.bindForDocOrNull(element).then(function (bind) {
            (0, _log.userAssert)(bind, 'AMP-BIND is not installed.');
            return bind.invoke(invocation);
          });

        case 'navigateTo':
          return this.handleNavigateTo_(invocation);

        case 'closeOrNavigateTo':
          return this.handleCloseOrNavigateTo_(invocation);

        case 'scrollTo':
          (0, _log.userAssert)(args['id'], 'AMP.scrollTo must provide element ID');
          invocation.node = (0, _log.dev)().assertElement((0, _service.getAmpdoc)(node).getElementById(args['id']), 'scrollTo element ID must exist on page');
          return this.handleScrollTo_(invocation);

        case 'goBack':
          _services.Services.historyForDoc(this.ampdoc).goBack();

          return null;

        case 'print':
          win.print();
          return null;

        case 'optoutOfCid':
          return _services.Services.cidForDoc(this.ampdoc).then(function (cid) {
            return cid.optOut();
          }).catch(function (reason) {
            (0, _log.dev)().error(TAG, 'Failed to opt out of CID', reason);
          });
      }

      throw (0, _log.user)().createError('Unknown AMP action ', method);
    }
    /**
     * Handles the `navigateTo` action.
     * @param {!./action-impl.ActionInvocation} invocation
     * @return {!Promise}
     * @private Visible to tests only.
     */
    ;

    _proto.handleNavigateTo_ = function handleNavigateTo_(invocation) {
      var _this = this;

      var node = invocation.node,
          caller = invocation.caller,
          method = invocation.method,
          args = invocation.args;
      var win = (node.ownerDocument || node).defaultView; // Some components have additional constraints on allowing navigation.

      var permission = Promise.resolve();

      if ((0, _string.startsWith)(caller.tagName, 'AMP-')) {
        permission = caller.getImpl().then(function (impl) {
          if (typeof impl.throwIfCannotNavigate == 'function') {
            impl.throwIfCannotNavigate();
          }
        });
      }

      return permission.then(function () {
        _services.Services.navigationForDoc(_this.ampdoc).navigateTo(win, args['url'], "AMP." + method, {
          target: args['target'],
          opener: args['opener']
        });
      },
      /* onrejected */
      function (e) {
        (0, _log.user)().error(TAG, e.message);
      });
    }
    /**
     * Handles the `handleCloseOrNavigateTo_` action.
     * This action tries to close the requesting window if allowed, otherwise
     * navigates the window.
     *
     * Window can be closed only from top-level documents that have an opener.
     * Without an opener or if embedded, it will deny the close method.
     * @param {!./action-impl.ActionInvocation} invocation
     * @return {!Promise}
     * @private Visible to tests only.
     */
    ;

    _proto.handleCloseOrNavigateTo_ = function handleCloseOrNavigateTo_(invocation) {
      var node = invocation.node;
      var win = (node.ownerDocument || node).defaultView; // Don't allow closing if embedded in iframe or does not have an opener or
      // embedded in a multi-doc shadowDOM case.
      // Note that browser denies win.close in some of these cases already anyway,
      // so not every check here is strictly needed but works as a short-circuit.

      var hasParent = win.parent != win;
      var canBeClosed = win.opener && this.ampdoc.isSingleDoc() && !hasParent;
      var wasClosed = false;

      if (canBeClosed) {
        // Browser may still deny win.close() call, that would be reflected
        // synchronously in win.closed
        win.close();
        wasClosed = win.closed;
      }

      if (!wasClosed) {
        return this.handleNavigateTo_(invocation);
      }

      return Promise.resolve();
    }
    /**
     * Handles the `scrollTo` action where given an element, we smooth scroll to
     * it with the given animation duration.
     * @param {!./action-impl.ActionInvocation} invocation
     * @return {?Promise}
     * @private Visible to tests only.
     */
    ;

    _proto.handleScrollTo_ = function handleScrollTo_(invocation) {
      var node = (0, _log.dev)().assertElement(invocation.node);
      var args = invocation.args; // Duration and position are optional.
      // Default values are set by the viewport service, so they're passed through
      // when undefined or invalid.

      var posOrUndef = args && args['position'];
      var durationOrUndef = args && args['duration'];

      if (posOrUndef && !['top', 'bottom', 'center'].includes(posOrUndef)) {
        posOrUndef = undefined;
      }

      if (!(0, _types.isFiniteNumber)(durationOrUndef)) {
        durationOrUndef = undefined;
      } // Animate the scroll
      // Should return a promise instead of null


      return this.viewport_.animateScrollIntoView(node, posOrUndef, durationOrUndef);
    }
    /**
     * Handles the `focus` action where given an element, we give it focus
     * @param {!./action-impl.ActionInvocation} invocation
     * @return {?Promise}
     * @private Visible to tests only.
     */
    ;

    _proto.handleFocus_ = function handleFocus_(invocation) {
      var node = (0, _log.dev)().assertElement(invocation.node); // Set focus

      (0, _dom.tryFocus)(node);
      return null;
    }
    /**
     * Handles "hide" action. This is a very simple action where "display: none"
     * is applied to the target element.
     * @param {!./action-impl.ActionInvocation} invocation
     * @return {?Promise}
     * @private Visible to tests only.
     */
    ;

    _proto.handleHide_ = function handleHide_(invocation) {
      var target = (0, _log.dev)().assertElement(invocation.node);
      this.resources_.mutateElement(target, function () {
        if (target.classList.contains('i-amphtml-element')) {
          target.
          /*OK*/
          collapse();
        } else {
          (0, _style.toggle)(target, false);
        }
      });
      return null;
    }
    /**
     * Handles "show" action. This is a very simple action where "display: none"
     * is removed from the target element.
     * @param {!./action-impl.ActionInvocation} invocation
     * @return {?Promise}
     * @private Visible to tests only.
     */
    ;

    _proto.handleShow_ = function handleShow_(_ref) {
      var _this2 = this;

      var node = _ref.node;
      var target = (0, _log.dev)().assertElement(node);
      var ownerWindow = (0, _types.toWin)(target.ownerDocument.defaultView);

      if (target.classList.contains((0, _layout.getLayoutClass)(_layout.Layout.NODISPLAY))) {
        (0, _log.user)().warn(TAG, 'Elements with layout=nodisplay cannot be dynamically shown.', target);
        return null;
      }

      this.resources_.measureElement(function () {
        if ((0, _style.computedStyle)(ownerWindow, target).display == 'none' && !isShowable(target)) {
          (0, _log.user)().warn(TAG, 'Elements can only be dynamically shown when they have the ' + '"hidden" attribute set or when they were dynamically hidden.', target);
        }
      });
      var autofocusElOrNull = getAutofocusElementForShowAction(target); // iOS only honors focus in sync operations.

      if (autofocusElOrNull && _services.Services.platformFor(ownerWindow).isIos()) {
        this.handleShowSync_(target, autofocusElOrNull);
      } else {
        this.resources_.mutateElement(target, function () {
          _this2.handleShowSync_(target, autofocusElOrNull);
        });
      }

      return null;
    }
    /**
     * @param {!Element} target
     * @param {?Element} autofocusElOrNull
     * @private Visible to tests only.
     */
    ;

    _proto.handleShowSync_ = function handleShowSync_(target, autofocusElOrNull) {
      if (target.classList.contains('i-amphtml-element')) {
        target.
        /*OK*/
        expand();
      } else {
        (0, _style.toggle)(target, true);
      }

      if (autofocusElOrNull) {
        (0, _dom.tryFocus)(autofocusElOrNull);
      }
    }
    /**
     * Handles "toggle" action.
     * @param {!./action-impl.ActionInvocation} invocation
     * @return {?Promise}
     * @private Visible to tests only.
     */
    ;

    _proto.handleToggle_ = function handleToggle_(invocation) {
      if (isShowable((0, _log.dev)().assertElement(invocation.node))) {
        return this.handleShow_(invocation);
      }

      return this.handleHide_(invocation);
    }
    /**
     * Handles "toggleClass" action.
     * @param {!./action-impl.ActionInvocation} invocation
     * @return {?Promise}
     * @private Visible to tests only.
     */
    ;

    _proto.handleToggleClass_ = function handleToggleClass_(invocation) {
      var target = (0, _log.dev)().assertElement(invocation.node);
      var args = invocation.args;
      var className = (0, _log.user)().assertString(args['class'], "Argument 'class' must be a string.");
      this.resources_.mutateElement(target, function () {
        if (args['force'] !== undefined) {
          // must be boolean, won't do type conversion
          var shouldForce = (0, _log.user)().assertBoolean(args['force'], "Optional argument 'force' must be a boolean.");
          target.classList.toggle(className, shouldForce);
        } else {
          target.classList.toggle(className);
        }
      });
      return null;
    };

    return StandardActions;
  }();
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   */


  exports.StandardActions = StandardActions;

  function installStandardActionsForDoc(ampdoc) {
    (0, _service.registerServiceBuilderForDoc)(ampdoc, 'standard-actions', StandardActions,
    /* opt_instantiate */
    true);
  }

  },{"../action-constants":8,"../dom":26,"../layout":49,"../log":51,"../service":71,"../services":112,"../string":116,"../style":118,"../types":121}],95:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installStorageServiceForDoc = installStorageServiceForDoc;
  exports.ViewerStorageBinding = exports.LocalStorageBinding = exports.Store = exports.Storage = void 0;

  var _services = require("../services");

  var _log = require("../log");

  var _object = require("../utils/object");

  var _url = require("../url");

  var _json = require("../json");

  var _service = require("../service");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @const */
  var TAG = 'Storage';
  /** @const */

  var MAX_VALUES_PER_ORIGIN = 8;
  /**
   * The storage API. This is an API equivalent to the Web LocalStorage API but
   * extended to all AMP embedding scenarios.
   *
   * The storage is done per source origin. See `get`, `set` and `remove` methods
   * for more info.
   *
   * @see https://html.spec.whatwg.org/multipage/webstorage.html
   * @private Visible for testing only.
   */

  var Storage =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {!../service/viewer-impl.Viewer} viewer
     * @param {!StorageBindingDef} binding
     */
    function Storage(ampdoc, viewer, binding) {
      /** @const {!./ampdoc-impl.AmpDoc} */
      this.ampdoc = ampdoc;
      /** @private @const {!../service/viewer-impl.Viewer} */

      this.viewer_ = viewer;
      /** @private @const {!StorageBindingDef} */

      this.binding_ = binding;
      /** @const @private {string} */

      this.origin_ = (0, _url.getSourceOrigin)(this.ampdoc.win.location);
      /** @private {?Promise<!Store>} */

      this.storePromise_ = null;
    }
    /**
     * @return {!Storage}
     * @private
     */


    var _proto = Storage.prototype;

    _proto.start_ = function start_() {
      this.listenToBroadcasts_();
      return this;
    }
    /**
     * Returns the promise that yields the value of the property for the specified
     * key.
     * @param {string} name
     * @return {!Promise<*>}
     */
    ;

    _proto.get = function get(name) {
      return this.getStore_().then(function (store) {
        return store.get(name);
      });
    }
    /**
     * Saves the value (restricted to boolean value) of the specified property.
     * Returns the promise that's resolved when the operation completes.
     * @param {string} name
     * @param {*} value
     * @param {boolean=} opt_isUpdate
     * @return {!Promise}
     */
    ;

    _proto.set = function set(name, value, opt_isUpdate) {
      (0, _log.devAssert)(typeof value == 'boolean', 'Only boolean values accepted');
      return this.setNonBoolean(name, value, opt_isUpdate);
    }
    /**
     * Saves the value of the specified property. Returns the promise that's
     * resolved when the operation completes.
     * Note: More restrict privacy review is required to store non boolean value.
     * @param {string} name
     * @param {*} value
     * @param {boolean=} opt_isUpdate
     * @return {!Promise}
     */
    ;

    _proto.setNonBoolean = function setNonBoolean(name, value, opt_isUpdate) {
      return this.saveStore_(function (store) {
        return store.set(name, value, opt_isUpdate);
      });
    }
    /**
     * Removes the specified property. Returns the promise that's resolved when
     * the operation completes.
     * @param {string} name
     * @return {!Promise}
     */
    ;

    _proto.remove = function remove(name) {
      return this.saveStore_(function (store) {
        return store.remove(name);
      });
    }
    /**
     * @return {!Promise<!Store>}
     * @private
     */
    ;

    _proto.getStore_ = function getStore_() {
      if (!this.storePromise_) {
        this.storePromise_ = this.binding_.loadBlob(this.origin_).then(function (blob) {
          return blob ? (0, _json.parseJson)(atob(blob)) : {};
        }).catch(function (reason) {
          (0, _log.dev)().expectedError(TAG, 'Failed to load store: ', reason);
          return {};
        }).then(function (obj) {
          return new Store(obj);
        });
      }

      return this.storePromise_;
    }
    /**
     * @param {function(!Store)} mutator
     * @return {!Promise}
     * @private
     */
    ;

    _proto.saveStore_ = function saveStore_(mutator) {
      var _this = this;

      return this.getStore_().then(function (store) {
        mutator(store); // Need to encode stored object to avoid plain text,
        // but doesn't need to be base64encode. Can convert to some other
        // encoding method for further improvement.

        var blob = btoa(JSON.stringify(store.obj));
        return _this.binding_.saveBlob(_this.origin_, blob);
      }).then(this.broadcastReset_.bind(this));
    }
    /** @private */
    ;

    _proto.listenToBroadcasts_ = function listenToBroadcasts_() {
      var _this2 = this;

      this.viewer_.onBroadcast(function (message) {
        if (message['type'] == 'amp-storage-reset' && message['origin'] == _this2.origin_) {
          (0, _log.dev)().fine(TAG, 'Received reset message');
          _this2.storePromise_ = null;
        }
      });
    }
    /** @private */
    ;

    _proto.broadcastReset_ = function broadcastReset_() {
      (0, _log.dev)().fine(TAG, 'Broadcasted reset message');
      this.viewer_.broadcast(
      /** @type {!JsonObject} */
      {
        'type': 'amp-storage-reset',
        'origin': this.origin_
      });
    };

    return Storage;
  }();
  /**
   * The implementation of store logic for get, set and remove.
   *
   * The structure of the store is equivalent to the following typedef:
   * ```
   * {
   *   vv: !Object<key(string), !{
   *     v: *,
   *     t: time
   *   }>
   * }
   * ```
   *
   * @private Visible for testing only.
   */


  exports.Storage = Storage;

  var Store =
  /*#__PURE__*/
  function () {
    /**
     * @param {!JsonObject} obj
     * @param {number=} opt_maxValues
     */
    function Store(obj, opt_maxValues) {
      /** @const {!JsonObject} */
      this.obj =
      /** @type {!JsonObject} */
      (0, _json.recreateNonProtoObject)(obj);
      /** @private @const {number} */

      this.maxValues_ = opt_maxValues || MAX_VALUES_PER_ORIGIN;
      /** @private @const {!Object<string, !JsonObject>} */

      this.values_ = this.obj['vv'] || Object.create(null);

      if (!this.obj['vv']) {
        this.obj['vv'] = this.values_;
      }
    }
    /**
     * @param {string} name
     * @return {*|undefined}
     */


    var _proto2 = Store.prototype;

    _proto2.get = function get(name) {
      // The structure is {key: {v: *, t: time}}
      var item = this.values_[name];
      return item ? item['v'] : undefined;
    }
    /**
     * Set the storage value along with the current timestamp.
     * When opt_isUpdated is true, timestamp will be the creation timestamp,
     * the stored value will be updated w/o updating timestamp.
     * @param {string} name
     * @param {*} value
     * @param {boolean=} opt_isUpdate
     */
    ;

    _proto2.set = function set(name, value, opt_isUpdate) {
      (0, _log.devAssert)(name != '__proto__' && name != 'prototype', 'Name is not allowed: %s', name); // The structure is {key: {v: *, t: time}}

      if (this.values_[name] !== undefined) {
        var item = this.values_[name];
        var timestamp = Date.now();

        if (opt_isUpdate) {
          // Update value w/o timestamp
          timestamp = item['t'];
        }

        item['v'] = value;
        item['t'] = timestamp;
      } else {
        this.values_[name] = (0, _object.dict)({
          'v': value,
          't': Date.now()
        });
      } // Purge old values.


      var keys = Object.keys(this.values_);

      if (keys.length > this.maxValues_) {
        var minTime = Infinity;
        var minKey = null;

        for (var i = 0; i < keys.length; i++) {
          var _item = this.values_[keys[i]];

          if (_item['t'] < minTime) {
            minKey = keys[i];
            minTime = _item['t'];
          }
        }

        if (minKey) {
          delete this.values_[minKey];
        }
      }
    }
    /**
     * @param {string} name
     */
    ;

    _proto2.remove = function remove(name) {
      // The structure is {key: {v: *, t: time}}
      delete this.values_[name];
    };

    return Store;
  }();
  /**
   * A binding provides the specific implementation of storage technology.
   * @interface
   */


  exports.Store = Store;

  var StorageBindingDef =
  /*#__PURE__*/
  function () {
    function StorageBindingDef() {}

    var _proto3 = StorageBindingDef.prototype;

    /**
     * Returns the promise that yields the store blob for the specified origin.
     * @param {string} unusedOrigin
     * @return {!Promise<?string>}
     */
    _proto3.loadBlob = function loadBlob(unusedOrigin) {}
    /**
     * Saves the store blob for the specified origin and returns the promise
     * that's resolved when the operation completes.
     * @param {string} unusedOrigin
     * @param {string} unusedBlob
     * @return {!Promise}
     */
    ;

    _proto3.saveBlob = function saveBlob(unusedOrigin, unusedBlob) {};

    return StorageBindingDef;
  }();
  /**
   * Storage implementation using Web LocalStorage API.
   * @implements {StorageBindingDef}
   * @private Visible for testing only.
   */


  var LocalStorageBinding =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function LocalStorageBinding(win) {
      /** @const {!Window} */
      this.win = win;
      /** @private @const {boolean} */

      this.isLocalStorageSupported_ = this.checkIsLocalStorageSupported_();

      if (!this.isLocalStorageSupported_) {
        var error = new Error('localStorage not supported.');
        (0, _log.dev)().expectedError(TAG, error);
      }
    }
    /**
     * Determines whether localStorage API is supported by ensuring it is declared
     * and does not throw an exception when used.
     * @return {boolean}
     * @private
     */


    var _proto4 = LocalStorageBinding.prototype;

    _proto4.checkIsLocalStorageSupported_ = function checkIsLocalStorageSupported_() {
      try {
        if (!('localStorage' in this.win)) {
          return false;
        } // We do not care about the value fetched from local storage; we only care
        // whether the call throws an exception or not.  As such, we can look up
        // any arbitrary key.


        this.win.localStorage.getItem('test');
        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * @param {string} origin
     * @return {string}
     * @private
     */
    ;

    _proto4.getKey_ = function getKey_(origin) {
      return "amp-store:" + origin;
    }
    /** @override */
    ;

    _proto4.loadBlob = function loadBlob(origin) {
      var _this3 = this;

      return new Promise(function (resolve) {
        if (!_this3.isLocalStorageSupported_) {
          resolve(null);
          return;
        }

        resolve(_this3.win.localStorage.getItem(_this3.getKey_(origin)));
      });
    }
    /** @override */
    ;

    _proto4.saveBlob = function saveBlob(origin, blob) {
      var _this4 = this;

      return new Promise(function (resolve) {
        if (!_this4.isLocalStorageSupported_) {
          resolve();
          return;
        }

        _this4.win.localStorage.setItem(_this4.getKey_(origin), blob);

        resolve();
      });
    };

    return LocalStorageBinding;
  }();
  /**
   * Storage implementation delegated to the Viewer.
   * @implements {StorageBindingDef}
   * @private Visible for testing only.
   */


  exports.LocalStorageBinding = LocalStorageBinding;

  var ViewerStorageBinding =
  /*#__PURE__*/
  function () {
    /**
     * @param {!../service/viewer-impl.Viewer} viewer
     */
    function ViewerStorageBinding(viewer) {
      /** @private @const {!../service/viewer-impl.Viewer} */
      this.viewer_ = viewer;
    }
    /** @override */


    var _proto5 = ViewerStorageBinding.prototype;

    _proto5.loadBlob = function loadBlob(origin) {
      return this.viewer_.sendMessageAwaitResponse('loadStore', (0, _object.dict)({
        'origin': origin
      })).then(function (response) {
        return response['blob'];
      });
    }
    /** @override */
    ;

    _proto5.saveBlob = function saveBlob(origin, blob) {
      return (
        /** @type {!Promise} */
        this.viewer_.sendMessageAwaitResponse('saveStore', (0, _object.dict)({
          'origin': origin,
          'blob': blob
        }))
      );
    };

    return ViewerStorageBinding;
  }();
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   */


  exports.ViewerStorageBinding = ViewerStorageBinding;

  function installStorageServiceForDoc(ampdoc) {
    (0, _service.registerServiceBuilderForDoc)(ampdoc, 'storage', function () {
      var viewer = _services.Services.viewerForDoc(ampdoc);

      var overrideStorage = parseInt(viewer.getParam('storage'), 10);
      var binding = overrideStorage ? new ViewerStorageBinding(viewer) : new LocalStorageBinding(ampdoc.win);
      return new Storage(ampdoc, viewer, binding).start_();
    },
    /* opt_instantiate */
    true);
  }

  },{"../json":46,"../log":51,"../service":71,"../services":112,"../url":124,"../utils/object":132}],96:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.TaskQueue = exports.TaskDef = void 0;

  var _log = require("../log");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * The internal structure for the task.
   * @typedef {{
   *   id: string,
   *   resource: !./resource.Resource,
   *   priority: number,
   *   forceOutsideViewport: boolean,
   *   callback: function(),
   *   scheduleTime: time,
   *   startTime: time,
   *   promise: (?Promise|undefined)
   * }}
   */
  var TaskDef;
  /**
   * @typedef {Object<string, *>}
   */

  exports.TaskDef = TaskDef;
  var PeekStateDef;
  /**
   * A scheduling queue for Resources.
   *
   * @package
   */

  var TaskQueue =
  /*#__PURE__*/
  function () {
    /**
     * Creates an instance of TaskQueue.
     */
    function TaskQueue() {
      /** @private @const {!Array<!TaskDef>} */
      this.tasks_ = [];
      /** @private @const {!Object<string, !TaskDef>} */

      this.taskIdMap_ = {};
      /** @private {!time} */

      this.lastEnqueueTime_ = 0;
      /** @private {!time} */

      this.lastDequeueTime_ = 0;
    }
    /**
     * Size of the queue.
     * @return {number}
     */


    var _proto = TaskQueue.prototype;

    _proto.getSize = function getSize() {
      return this.tasks_.length;
    }
    /**
     * Last time a task was enqueued.
     * @return {!time}
     */
    ;

    _proto.getLastEnqueueTime = function getLastEnqueueTime() {
      return this.lastEnqueueTime_;
    }
    /**
     * Last time a task was dequeued.
     * @return {!time}
     */
    ;

    _proto.getLastDequeueTime = function getLastDequeueTime() {
      return this.lastDequeueTime_;
    }
    /**
     * Returns the task with the specified ID or null.
     * @param {string} taskId
     * @return {?TaskDef}
     */
    ;

    _proto.getTaskById = function getTaskById(taskId) {
      return this.taskIdMap_[taskId] || null;
    }
    /**
     * Enqueues the task. If the task is already in the queue, the error is
     * thrown.
     * @param {!TaskDef} task
     */
    ;

    _proto.enqueue = function enqueue(task) {
      (0, _log.devAssert)(!this.taskIdMap_[task.id], 'Task already enqueued: %s', task.id);
      this.tasks_.push(task);
      this.taskIdMap_[task.id] = task;
      this.lastEnqueueTime_ = Date.now();
    }
    /**
     * Dequeues the task and returns "true" if dequeueing is successful. Otherwise
     * returns "false", e.g. when this task is not currently enqueued.
     * @param {!TaskDef} task
     * @return {boolean}
     */
    ;

    _proto.dequeue = function dequeue(task) {
      var existing = this.taskIdMap_[task.id];
      var dequeued = this.removeAtIndex(task, this.tasks_.indexOf(existing));

      if (!dequeued) {
        return false;
      }

      this.lastDequeueTime_ = Date.now();
      return true;
    }
    /**
     * Returns the task with the minimal score based on the provided scoring
     * callback.
     * @param {function(!TaskDef, !PeekStateDef):number} scorer
     * @param {!PeekStateDef} state
     * @return {?TaskDef}
     */
    ;

    _proto.peek = function peek(scorer, state) {
      var minScore = 1e6;
      var minTask = null;

      for (var i = 0; i < this.tasks_.length; i++) {
        var task = this.tasks_[i];
        var score = scorer(task, state);

        if (score < minScore) {
          minScore = score;
          minTask = task;
        }
      }

      return minTask;
    }
    /**
     * Iterates over all tasks in queue in the insertion order.
     * @param {function(!TaskDef)} callback
     */
    ;

    _proto.forEach = function forEach(callback) {
      this.tasks_.forEach(callback);
    }
    /**
     * Removes the task and returns "true" if dequeueing is successful. Otherwise
     * returns "false", e.g. when this task is not currently enqueued.
     * @param {!TaskDef} task
     * @param {number} index of the task to remove.
     * @return {boolean}
     */
    ;

    _proto.removeAtIndex = function removeAtIndex(task, index) {
      var existing = this.taskIdMap_[task.id];

      if (!existing || this.tasks_[index] != existing) {
        return false;
      }

      this.tasks_.splice(index, 1);
      delete this.taskIdMap_[task.id];
      return true;
    }
    /**
     * Removes tasks in queue that pass the callback test.
     * @param {function(!TaskDef):boolean} callback Return true to remove the task.
     */
    ;

    _proto.purge = function purge(callback) {
      var index = this.tasks_.length;

      while (index--) {
        if (callback(this.tasks_[index])) {
          this.removeAtIndex(this.tasks_[index], index);
        }
      }
    };

    return TaskQueue;
  }();

  exports.TaskQueue = TaskQueue;

  },{"../log":51}],97:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installTemplatesService = installTemplatesService;
  exports.registerExtendedTemplate = registerExtendedTemplate;
  exports.Templates = exports.BaseTemplate = void 0;

  var _promise = require("../utils/promise");

  var _log = require("../log");

  var _mode = require("../mode");

  var _service = require("../service");

  var _dom = require("../dom");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @fileoverview
   * For the set of decisions made on templating see:
   * {@link https://docs.google.com/document/d/1q-5MPQHnOHLF_uL7lQsGZdzuBgrPTkCy2PdRP-YCbOw/edit#}
   */

  /**
   * @typedef {function(new:BaseTemplate, !Element, !Window)}
   */
  var TemplateClassDef;
  /** @private @const {string} */

  var PROP_ = '__AMP_IMPL_';
  /** @private @const {string} */

  var PROP_PROMISE_ = '__AMP_WAIT_';
  /**
   * The interface that is implemented by all templates.
   */

  var BaseTemplate =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Element} element
     * @param {!Window} win
     */
    function BaseTemplate(element, win) {
      /** @public @const */
      this.element = element;
      /** @public @const {!Window} */

      this.win = element.ownerDocument.defaultView || win;
      /** @private @const */

      this.viewer_ = (0, _service.getServiceForDoc)(this.element, 'viewer');
      this.compileCallback();
    }
    /**
     * Override in subclass if the element needs to compile the template.
     * @protected
     */


    var _proto = BaseTemplate.prototype;

    _proto.compileCallback = function compileCallback() {} // Subclasses may override.

    /**
     * Bypasses template rendering and directly sets HTML. Should only be used
     * for server-side rendering case. To be implemented by subclasses.
     * @param {string} unusedData
     * @return {!Element}
     */
    ;

    _proto.setHtml = function setHtml(unusedData) {
      throw new Error('Not implemented');
    }
    /**
     * To be implemented by subclasses.
     * @param {!JsonObject|string} unusedData
     * @return {!Element}
     */
    ;

    _proto.render = function render(unusedData) {
      throw new Error('Not implemented');
    }
    /**
     * Helps the template implementation to unwrap the root element. The root
     * element can be unwrapped only when it contains a single element or a
     * single element surrounded by empty text nodes.
     * @param {!Element} root
     * @return {!Element}
     * @protected @final
     */
    ;

    _proto.unwrap = function unwrap(root) {
      var singleElement = null;

      for (var n = root.firstChild; n != null; n = n.nextSibling) {
        if (n.nodeType ==
        /* TEXT */
        3) {
          if (n.textContent.trim()) {
            // Non-empty text node - can't unwrap.
            singleElement = null;
            break;
          }
        } else if (n.nodeType ==
        /* COMMENT */
        8) {// Ignore comments.
        } else if (n.nodeType ==
        /* ELEMENT */
        1) {
          if (!singleElement) {
            singleElement = (0, _log.dev)().assertElement(n);
          } else {
            // This is not the first element - can't unwrap.
            singleElement = null;
            break;
          }
        } else {
          singleElement = null;
        }
      }

      return singleElement || root;
    }
    /**
     * @protected @final
     * @return {boolean}
     */
    ;

    _proto.viewerCanRenderTemplates = function viewerCanRenderTemplates() {
      return this.viewer_.hasCapability('viewerRenderTemplate');
    };

    return BaseTemplate;
  }();
  /**
   */


  exports.BaseTemplate = BaseTemplate;

  var Templates =
  /*#__PURE__*/
  function () {
    /** @param {!Window} win */
    function Templates(win) {
      /** @private @const {!Window} */
      this.win_ = win;
      /**
       * A map from template type to template's class promise.
       * @private @const {!Object<string, !Promise<!TemplateClassDef>>}
       */

      this.templateClassMap_ = {};
      /**
       * A map from template type to template's class promise. This is a transient
       * storage. As soon as the template class loaded, the entry is removed.
       * @private @const {!Object<string, function(!TemplateClassDef)>}
       */

      this.templateClassResolvers_ = {};
    }
    /**
     * Inserts the specified template element.
     * @param {!Element} templateElement
     * @param {string} html
     * @return {!Promise<!Element>}
     */


    var _proto2 = Templates.prototype;

    _proto2.setHtmlForTemplate = function setHtmlForTemplate(templateElement, html) {
      var _this = this;

      return this.getImplementation_(templateElement).then(function (impl) {
        return _this.setHtml_(impl, html);
      });
    }
    /**
     * Renders the specified template element using the supplied data.
     * @param {!Element} templateElement
     * @param {!JsonObject} data
     * @return {!Promise<!Element>}
     */
    ;

    _proto2.renderTemplate = function renderTemplate(templateElement, data) {
      var _this2 = this;

      return this.getImplementation_(templateElement).then(function (impl) {
        return _this2.render_(impl, data);
      });
    }
    /**
     * Renders the specified template element using the supplied array of data
     * and returns an array of resulting elements.
     * @param {!Element} templateElement
     * @param {!Array<!JsonObject>} array
     * @return {!Promise<!Array<!Element>>}
     */
    ;

    _proto2.renderTemplateArray = function renderTemplateArray(templateElement, array) {
      var _this3 = this;

      if (array.length == 0) {
        return Promise.resolve([]);
      }

      return this.getImplementation_(templateElement).then(function (impl) {
        return array.map(function (item) {
          return _this3.render_(impl, item);
        });
      });
    }
    /**
     * Discovers the template for the specified parent and renders it using the
     * supplied data. The template can be specified either via "template"
     * attribute  or as a child "template" element. When specified via "template"
     * attribute, the value indicates the ID of the template element.
     * @param {!Element} parent
     * @param {!JsonObject} data
     * @param {string=} opt_querySelector
     * @return {!Promise<!Element>}
     */
    ;

    _proto2.findAndRenderTemplate = function findAndRenderTemplate(parent, data, opt_querySelector) {
      return this.renderTemplate(this.findTemplate(parent, opt_querySelector), data);
    }
    /**
     * Discovers the already rendered template for the specified parent and
     * inserts it in the DOM. The template can be specified either via "template"
     * attribute  or as a child "template" element. When specified via "template"
     * attribute, the value indicates the ID of the template element.
     * @param {!Element} parent
     * @param {string} html
     * @param {string=} opt_querySelector
     * @return {!Promise<!Element>}
     */
    ;

    _proto2.findAndSetHtmlForTemplate = function findAndSetHtmlForTemplate(parent, html, opt_querySelector) {
      return this.setHtmlForTemplate(this.findTemplate(parent, opt_querySelector), html);
    }
    /**
     * Discovers the template for the specified parent and renders it using the
     * supplied array of data. The template can be specified either via "template"
     * attribute or as a child "template" element. When specified via "template"
     * attribute, the value indicates the ID of the template element. Returns
     * the array of the rendered elements.
     * @param {!Element} parent
     * @param {!Array<!JsonObject>} array
     * @param {string=} opt_querySelector
     * @return {!Promise<!Array<!Element>>}
     */
    ;

    _proto2.findAndRenderTemplateArray = function findAndRenderTemplateArray(parent, array, opt_querySelector) {
      return this.renderTemplateArray(this.findTemplate(parent, opt_querySelector), array);
    }
    /**
     * Detect if a template is present inside the parent.
     * @param {!Element} parent
     * @param {string=} opt_querySelector
     * @return {boolean}
     */
    ;

    _proto2.hasTemplate = function hasTemplate(parent, opt_querySelector) {
      return !!this.maybeFindTemplate(parent, opt_querySelector);
    }
    /**
     * Find a specified template inside the parent. Fail if the template is
     * not present.
     * @param {!Element} parent
     * @param {string=} opt_querySelector
     * @return {!Element}
     */
    ;

    _proto2.findTemplate = function findTemplate(parent, opt_querySelector) {
      var templateElement = this.maybeFindTemplate(parent, opt_querySelector);
      (0, _log.userAssert)(templateElement, 'Template not found for %s', parent);
      var templateTagName = templateElement.tagName;
      (0, _log.userAssert)(templateTagName == 'TEMPLATE' || templateTagName == 'SCRIPT' && templateElement.getAttribute('type') === 'text/plain', 'Template must be defined in a <template> or ' + '<script type="text/plain"> tag');
      return templateElement;
    }
    /**
     * Find a specified template inside the parent. Returns null if not present.
     * The template can be specified either via "template" attribute or as a
     * child "template" element. When specified via "template" attribute,
     * the value indicates the ID of the template element. The template
     * can be defined either via the <template> or <script> tag.
     * @param {!Element} parent
     * @param {string=} opt_querySelector
     * @return {?Element}
     */
    ;

    _proto2.maybeFindTemplate = function maybeFindTemplate(parent, opt_querySelector) {
      var templateId = parent.getAttribute('template');

      if (templateId) {
        return (0, _dom.rootNodeFor)(parent).getElementById(templateId);
      } else if (opt_querySelector) {
        return (0, _dom.scopedQuerySelector)(parent, opt_querySelector);
      } else {
        return parent.querySelector('template, script');
      }
    }
    /**
     * Returns the promise that will eventually yield the template implementation
     * for the specified template element.
     * @param {!Element} element
     * @return {!Promise<!BaseTemplate>}
     * @private
     */
    ;

    _proto2.getImplementation_ = function getImplementation_(element) {
      var _this4 = this;

      /** @const {!BaseTemplate} */
      var impl = element[PROP_];

      if (impl) {
        return Promise.resolve(impl);
      }

      var type = '';
      var tagName = element.tagName;

      if (tagName == 'TEMPLATE') {
        type = element.getAttribute('type');
      } else if (tagName == 'SCRIPT') {
        type = element.getAttribute('template');
      }

      (0, _log.userAssert)(type, 'Type must be specified: %s', element);
      var promise = element[PROP_PROMISE_];

      if (promise) {
        return promise;
      }

      promise = this.waitForTemplateClass_(element, type).then(function (templateClass) {
        var impl = element[PROP_] = new templateClass(element, _this4.win_);
        delete element[PROP_PROMISE_];
        return impl;
      });
      element[PROP_PROMISE_] = promise;
      return promise;
    }
    /**
     * Returns the promise that will eventually yield the template class. This
     * will wait until the actual template script has been downloaded and parsed.
     * @param {!Element} element
     * @param {string} type
     * @return {!Promise<!TemplateClassDef>}
     * @private
     */
    ;

    _proto2.waitForTemplateClass_ = function waitForTemplateClass_(element, type) {
      if (this.templateClassMap_[type]) {
        return this.templateClassMap_[type];
      }

      var deferred = new _promise.Deferred();
      var promise = deferred.promise,
          resolve = deferred.resolve;
      this.templateClassMap_[type] = promise;
      this.templateClassResolvers_[type] = resolve;
      return promise;
    }
    /**
     * Registers an extended template. This function should typically be called
     * through the registerTemplate method on the AMP runtime.
     * @param {string} type
     * @param {!TemplateClassDef} templateClass
     * @private
     * @restricted
     */
    ;

    _proto2.registerTemplate_ = function registerTemplate_(type, templateClass) {
      if (!this.templateClassMap_[type]) {
        this.templateClassMap_[type] = Promise.resolve(templateClass);
      } else {
        var resolver = this.templateClassResolvers_[type];
        (0, _log.userAssert)(resolver, 'Duplicate template type: %s', type);
        delete this.templateClassResolvers_[type];
        resolver(templateClass);
      }
    }
    /**
     * For testing only.
     * @param {string} type
     * @visibleForTesting
     */
    ;

    _proto2.unregisterTemplate = function unregisterTemplate(type) {
      (0, _log.devAssert)((0, _mode.getMode)().test, 'Should only be used in test mode.');
      delete this.templateClassMap_[type];
      delete this.templateClassResolvers_[type];
    }
    /**
     * @param {!BaseTemplate} impl
     * @param {!JsonObject} data
     * @return {!Element}
     * @private
     */
    ;

    _proto2.render_ = function render_(impl, data) {
      return impl.render(data);
    }
    /**
     * @param {!BaseTemplate} impl
     * @param {string} html
     * @return {!Element}
     * @private
     */
    ;

    _proto2.setHtml_ = function setHtml_(impl, html) {
      return impl.setHtml(html);
    };

    return Templates;
  }();
  /**
   * @param {!Window} win
   */


  exports.Templates = Templates;

  function installTemplatesService(win) {
    (0, _service.registerServiceBuilder)(win, 'templates', Templates);
  }
  /**
   * Registers an extended template. This function should typically be called
   * through the registerTemplate method on the AMP runtime.
   * @param {!Window} win
   * @param {string} type
   * @param {!TemplateClassDef} templateClass
   * @package
   */


  function registerExtendedTemplate(win, type, templateClass) {
    var templatesService = (0, _service.getService)(win, 'templates');
    return templatesService.registerTemplate_(type, templateClass);
  }

  },{"../dom":26,"../log":51,"../mode":53,"../service":71,"../utils/promise":134}],98:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installTimerService = installTimerService;
  exports.Timer = void 0;

  require("../polyfills");

  var _service = require("../service");

  var _error = require("../error");

  var _log = require("../log");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Requires polyfills in immediate side effect.
  var TAG = 'timer';
  /**
   * Helper with all things Timer.
   *
  * @implements {../service.EmbeddableService}
   */

  var Timer =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function Timer(win) {
      /** @const {!Window} */
      this.win = win;
      /** @private @const {!Promise}  */

      this.resolved_ = this.win.Promise.resolve();
      this.taskCount_ = 0;
      this.canceled_ = {};
      /** @const {number} */

      this.startTime_ = Date.now();
    }
    /**
    * Returns time since start in milliseconds.
    * @return {number}
    */


    var _proto = Timer.prototype;

    _proto.timeSinceStart = function timeSinceStart() {
      return Date.now() - this.startTime_;
    }
    /**
     * Runs the provided callback after the specified delay. This uses a micro
     * task for 0 or no specified time. This means that the delay will actually
     * be close to 0 and this will NOT yield to the event queue.
     *
     * Returns the timer ID that can be used to cancel the timer (cancel method).
     * @param {function()} callback
     * @param {number=} opt_delay
     * @return {number|string}
     */
    ;

    _proto.delay = function delay(callback, opt_delay) {
      var _this = this;

      if (!opt_delay) {
        // For a delay of zero,  schedule a promise based micro task since
        // they are predictably fast.
        var id = 'p' + this.taskCount_++;
        this.resolved_.then(function () {
          if (_this.canceled_[id]) {
            delete _this.canceled_[id];
            return;
          }

          callback();
        }).catch(_error.reportError);
        return id;
      }

      var wrapped = function wrapped() {
        try {
          callback();
        } catch (e) {
          (0, _error.reportError)(e);
          throw e;
        }
      };

      return this.win.setTimeout(wrapped, opt_delay);
    }
    /**
     * Cancels the previously scheduled callback.
     * @param {number|string|null} timeoutId
     */
    ;

    _proto.cancel = function cancel(timeoutId) {
      if (typeof timeoutId == 'string') {
        this.canceled_[timeoutId] = true;
        return;
      }

      this.win.clearTimeout(timeoutId);
    }
    /**
     * Returns a promise that will resolve after the delay. Optionally, the
     * resolved value can be provided as opt_result argument.
     * @param {number=} opt_delay
     * @return {!Promise}
     */
    ;

    _proto.promise = function promise(opt_delay) {
      var _this2 = this;

      return new this.win.Promise(function (resolve) {
        // Avoid wrapping in closure if no specific result is produced.
        var timerKey = _this2.delay(resolve, opt_delay);

        if (timerKey == -1) {
          throw new Error('Failed to schedule timer.');
        }
      });
    }
    /**
     * Returns a promise that will fail after the specified delay. Optionally,
     * this method can take opt_racePromise parameter. In this case, the
     * resulting promise will either fail when the specified delay expires or
     * will resolve based on the opt_racePromise, whichever happens first.
     * @param {number} delay
     * @param {?Promise<RESULT>|undefined} opt_racePromise
     * @param {string=} opt_message
     * @return {!Promise<RESULT>}
     * @template RESULT
     */
    ;

    _proto.timeoutPromise = function timeoutPromise(delay, opt_racePromise, opt_message) {
      var _this3 = this;

      var timerKey;
      var delayPromise = new this.win.Promise(function (_resolve, reject) {
        timerKey = _this3.delay(function () {
          reject((0, _log.user)().createError(opt_message || 'timeout'));
        }, delay);

        if (timerKey == -1) {
          throw new Error('Failed to schedule timer.');
        }
      });

      if (!opt_racePromise) {
        return delayPromise;
      }

      var cancel = function cancel() {
        _this3.cancel(timerKey);
      };

      opt_racePromise.then(cancel, cancel);
      return this.win.Promise.race([delayPromise, opt_racePromise]);
    }
    /**
     * Returns a promise that resolves after `predicate` returns true.
     * Polls with interval `delay`
     * @param {number} delay
     * @param {function():boolean} predicate
     * @return {!Promise}
     */
    ;

    _proto.poll = function poll(delay, predicate) {
      var _this4 = this;

      return new this.win.Promise(function (resolve) {
        var interval = _this4.win.setInterval(function () {
          if (predicate()) {
            _this4.win.clearInterval(interval);

            resolve();
          }
        }, delay);
      });
    }
    /** @override @nocollapse */
    ;

    Timer.installInEmbedWindow = function installInEmbedWindow(embedWin, unusedAmpDoc) {
      (0, _service.installServiceInEmbedScope)(embedWin, TAG, new Timer(embedWin));
    };

    return Timer;
  }();
  /**
   * @param {!Window} window
   */


  exports.Timer = Timer;

  function installTimerService(window) {
    (0, _service.registerServiceBuilder)(window, TAG, Timer);
  }

  },{"../error":29,"../log":51,"../polyfills":57,"../service":71}],99:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.Expander = exports.NOENCODE_WHITELIST = void 0;

  var _object = require("../../utils/object");

  var _log = require("../../log");

  var _promise = require("../../utils/promise");

  /**
   * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @private @const {string} */
  var PARSER_IGNORE_FLAG = '`';
  /** @private @const {string} */

  var TAG = 'Expander';
  /** A whitelist for replacements whose values should not be %-encoded. */

  /** @const {Object<string, boolean>} */

  var NOENCODE_WHITELIST = {
    'ANCESTOR_ORIGIN': true
  };
  /** Rudamentary parser to handle nested Url replacement. */

  exports.NOENCODE_WHITELIST = NOENCODE_WHITELIST;

  var Expander =
  /*#__PURE__*/
  function () {
    /**
     * Link this instance of parser to the calling UrlReplacment
     * @param {?../variable-source.VariableSource} variableSource the keywords to replace
     * @param {!Object<string, *>=} opt_bindings additional one-off bindings
     * @param {!Object<string, *>=} opt_collectVars Object passed in to collect
     *   variable resolutions.
     * @param {boolean=} opt_sync If the method should resolve syncronously.
     * @param {!Object<string, boolean>=} opt_whiteList Optional white list of names
     *   that can be substituted.
     * @param {boolean=} opt_noEncode Should not urlEncode macro resolution.
     */
    function Expander(variableSource, opt_bindings, opt_collectVars, opt_sync, opt_whiteList, opt_noEncode) {
      /** @const {?../variable-source.VariableSource} */
      this.variableSource_ = variableSource;
      /**@const {!Object<string, *>|undefined} */

      this.bindings_ = opt_bindings; // TODO(ccordry): Remove this output object passed into constructor.

      /**@const {!Object<string, *>|undefined} */

      this.collectVars_ = opt_collectVars;
      /**@const {boolean|undefined} */

      this.sync_ = opt_sync;
      /**@const {!Object<string, boolean>|undefined} */

      this.whiteList_ = opt_whiteList;
      /**@const {boolean|undefined} */

      this.encode_ = !opt_noEncode;
    }
    /**
     * take the template url and return a promise of its evaluated value
     * @param {string} url url to be substituted
     * @return {!Promise<string>|string}
     */


    var _proto = Expander.prototype;

    _proto.expand = function expand(url) {
      if (!url.length) {
        return this.sync_ ? url : Promise.resolve(url);
      }

      var expr = this.variableSource_.getExpr(this.bindings_, this.whiteList_);
      var matches = this.findMatches_(url, expr); // if no keywords move on

      if (!matches.length) {
        return this.sync_ ? url : Promise.resolve(url);
      }

      return this.parseUrlRecursively_(url, matches);
    }
    /**
     * Return any macros that exist in the given url.
     * @param {string} url
     * @return {!Array}
     */
    ;

    _proto.getMacroNames = function getMacroNames(url) {
      var expr = this.variableSource_.getExpr(this.bindings_, this.whiteList_);
      var matches = url.match(expr);

      if (matches) {
        return matches;
      }

      return [];
    }
    /**
     * Structures the regex matching into the desired format
     * @param {string} url url to be substituted
     * @param {RegExp} expression regex containing all keywords
     * @return {Array<Object<string, string|number>>} array of objects representing
     *  matching keywords
     */
    ;

    _proto.findMatches_ = function findMatches_(url, expression) {
      var matches = [];
      url.replace(expression, function (match, name, startPosition) {
        var length = match.length;
        var stopPosition = length + startPosition - 1;
        var info = {
          start: startPosition,
          stop: stopPosition,
          name: name,
          length: length
        };
        matches.push(info);
      });
      return matches;
    }
    /**
     * @param {string} url
     * @param {!Array<Object<string, string|number>>} matches Array of objects
     *   representing matching keywords.
     * @return {!Promise<string>|string}
     */
    ;

    _proto.parseUrlRecursively_ = function parseUrlRecursively_(url, matches) {
      var _this = this;

      var stack = [];
      var urlIndex = 0;
      var matchIndex = 0;
      var match = matches[matchIndex];
      var numOfPendingCalls = 0;
      var ignoringChars = false;
      var nextArgShouldBeRaw = false;

      var evaluateNextLevel = function evaluateNextLevel(encode) {
        var builder = '';
        var results = [];

        while (urlIndex < url.length && matchIndex <= matches.length) {
          if (match && urlIndex === match.start) {
            var binding = void 0; // find out where this keyword is coming from

            if (_this.bindings_ && (0, _object.hasOwn)(_this.bindings_, match.name)) {
              // the optional bindings
              binding = {
                // This construction helps us save the match name and determine
                // precedence of resolution choices in #expandBinding_ later.
                name: match.name,
                prioritized: _this.bindings_[match.name],
                encode: encode
              };
            } else {
              // or the global source
              binding = Object.assign({}, _this.variableSource_.get(match.name), {
                name: match.name,
                encode: encode
              });
            }

            urlIndex = match.stop + 1;
            match = matches[++matchIndex];

            if (url[urlIndex] === '(') {
              // if we hit a left parenthesis we still need to get args
              urlIndex++;
              numOfPendingCalls++;
              stack.push(binding); // trim space in between args

              if (builder.trim().length) {
                results.push(builder);
              }

              results.push(evaluateNextLevel(
              /* encode */
              false));
            } else {
              if (builder.length) {
                results.push(builder);
              }

              results.push(_this.evaluateBinding_(binding));
            }

            builder = '';
          } else if (url[urlIndex] === PARSER_IGNORE_FLAG) {
            if (!ignoringChars) {
              ignoringChars = true;
              nextArgShouldBeRaw = true;
              (0, _log.userAssert)(builder.trim() === '', "The substring \"" + builder + "\" was lost during url-replacement. " + 'Please ensure the url syntax is correct');
              builder = '';
            } else {
              ignoringChars = false;
            }

            urlIndex++;
          } else if (numOfPendingCalls && url[urlIndex] === ',' && !ignoringChars) {
            if (builder.length) {
              var nextArg = nextArgShouldBeRaw ? builder : builder.trim();
              results.push(nextArg);
              nextArgShouldBeRaw = false;
            } // support existing two comma format
            // eg CLIENT_ID(__ga,,ga-url)


            if (url[urlIndex + 1] === ',') {
              results.push(''); // TODO(ccordry): may want this to be undefined at some point

              urlIndex++;
            }

            builder = '';
            urlIndex++;
          } // Invoke a function on every right parenthesis unless the stack is
          // empty.
          else if (numOfPendingCalls && url[urlIndex] === ')' && !ignoringChars) {
              urlIndex++;
              numOfPendingCalls--;

              var _binding = stack.pop();

              var _nextArg = nextArgShouldBeRaw ? builder : builder.trim();

              results.push(_nextArg);
              nextArgShouldBeRaw = false;

              var value = _this.evaluateBinding_(_binding,
              /* opt_args */
              results);

              return value;
            } else {
              builder += url[urlIndex];
              urlIndex++;
            } //capture trailing characters


          if (urlIndex === url.length && builder.length) {
            results.push(builder);
          }
        }

        if (_this.sync_) {
          return results.join('');
        }

        return Promise.all(results).then(function (promiseArray) {
          return promiseArray.join('');
        }).catch(function (e) {
          (0, _log.rethrowAsync)(e);
          return '';
        });
      };

      return evaluateNextLevel(this.encode_);
    }
    /**
     * Called when a binding is ready to be resolved. Determines which version of
     * binding to use and if syncronous or asyncronous version should be called.
     * @param {Object<string, *>} bindingInfo An object containing the name of macro
     *   and value to be resolved.
     * @param {Array=} opt_args Arguments passed to the macro.
     */
    ;

    _proto.evaluateBinding_ = function evaluateBinding_(bindingInfo, opt_args) {
      var encode = bindingInfo.encode,
          name = bindingInfo.name;
      var binding;

      if ((0, _object.hasOwn)(bindingInfo, 'prioritized')) {
        // If a binding is passed in through the bindings argument it always takes
        // precedence.
        binding = bindingInfo.prioritized;
      } else if (this.sync_ && (0, _object.hasOwn)(bindingInfo, 'sync')) {
        // Use the sync resolution if avaliable when called synchronously.
        binding = bindingInfo.sync;
      } else if (this.sync_) {
        // If there is no sync resolution we can not wait.
        (0, _log.user)().error(TAG, 'ignoring async replacement key: ', bindingInfo.name);
        binding = '';
      } else {
        // Prefer the async over the sync but it may not exist.
        binding = bindingInfo.async || bindingInfo.sync;
      } // We should only ever encode the top level resolution, or not at all.


      var shouldEncode = encode && !NOENCODE_WHITELIST[name];

      if (this.sync_) {
        var result = this.evaluateBindingSync_(binding, name, opt_args);
        return shouldEncode ? encodeURIComponent(result) : result;
      } else {
        return this.evaluateBindingAsync_(binding, name, opt_args).then(function (result) {
          return shouldEncode ? encodeURIComponent(result) : result;
        });
      }
    }
    /**
     * Resolves binding to value to be substituted asyncronously.
     * @param {*} binding Container for sync/async resolutions.
     * @param {string} name
     * @param {?Array=} opt_args Arguments to be passed if binding is function.
     * @return {!Promise<string>} Resolved value.
     */
    ;

    _proto.evaluateBindingAsync_ = function evaluateBindingAsync_(binding, name, opt_args) {
      var _this2 = this;

      var value;

      try {
        if (typeof binding === 'function') {
          if (opt_args) {
            value = Promise.all(opt_args).then(function (args) {
              return binding.apply(null, args);
            });
          } else {
            value = (0, _promise.tryResolve)(binding);
          }
        } else {
          value = Promise.resolve(binding);
        }

        return value.then(function (val) {
          _this2.maybeCollectVars_(name, val, opt_args);

          var result;

          if (val == null) {
            result = '';
          } else {
            result = val;
          }

          return result;
        }).catch(function (e) {
          (0, _log.rethrowAsync)(e);

          _this2.maybeCollectVars_(name, '', opt_args);

          return Promise.resolve('');
        });
      } catch (e) {
        // Report error, but do not disrupt URL replacement. This will
        // interpolate as the empty string.
        (0, _log.rethrowAsync)(e);
        this.maybeCollectVars_(name, '', opt_args);
        return Promise.resolve('');
      }
    }
    /**
     * Resolves binding to value to be substituted asyncronously.
     * @param {*} binding Container for sync/async resolutions.
     * @param {string} name
     * @param {?Array=} opt_args Arguments to be passed if binding is function.
     * @return {string} Resolved value.
     */
    ;

    _proto.evaluateBindingSync_ = function evaluateBindingSync_(binding, name, opt_args) {
      try {
        var value = typeof binding === 'function' ? binding.apply(null, opt_args) : binding;
        var result;

        if (value && value.then) {
          // If binding is passed in as opt_binding we try to resolve it and it
          // may return a promise. NOTE: We do not collect this discarded value,
          // even if collectVars exists.
          (0, _log.user)().error(TAG, 'ignoring async macro resolution');
          result = '';
        } else if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
          // Normal case.
          this.maybeCollectVars_(name, value, opt_args);
          result = value.toString();
        } else {
          // Most likely a broken binding gets us here.
          this.maybeCollectVars_(name, '', opt_args);
          result = '';
        }

        return result;
      } catch (e) {
        // Report error, but do not disrupt URL replacement. This will
        // interpolate as the empty string.
        (0, _log.rethrowAsync)(e);
        this.maybeCollectVars_(name, '', opt_args);
        return '';
      }
    }
    /**
     * Collect vars if given the optional object. Handles formatting of kv pairs.
     * @param {string} name Name of the macro.
     * @param {*} value Raw macro resolution value.
     * @param {?Array=} opt_args Arguments to be passed if binding is function.
     */
    ;

    _proto.maybeCollectVars_ = function maybeCollectVars_(name, value, opt_args) {
      if (!this.collectVars_) {
        return;
      }

      var args = '';

      if (opt_args) {
        var rawArgs = opt_args.filter(function (arg) {
          return arg !== '';
        }).join(',');
        args = "(" + rawArgs + ")";
      }

      this.collectVars_["" + name + args] = value || '';
    };

    return Expander;
  }();

  exports.Expander = Expander;

  },{"../../log":51,"../../utils/object":132,"../../utils/promise":134}],100:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installUrlForDoc = installUrlForDoc;
  exports.Url = void 0;

  var _lruCache = require("../utils/lru-cache");

  var _url = require("../url");

  var _service = require("../service");

  /**
   * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var SERVICE = 'url';
  /**
   * @implements {../service.EmbeddableService}
   */

  var Url =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {(!Document|!ShadowRoot)=} opt_rootNode
     */
    function Url(ampdoc, opt_rootNode) {
      /** @private @const {!./ampdoc-impl.AmpDoc} */
      this.ampdoc_ = ampdoc;
      var root = opt_rootNode || ampdoc.getRootNode();
      var doc = root.ownerDocument || root;
      /** @private @const {!HTMLAnchorElement} */

      this.anchor_ =
      /** @type {!HTMLAnchorElement} */
      doc.createElement('a');
      /** @private @const {!LruCache} */

      this.cache_ = new _lruCache.LruCache(100);
    }
    /** @override @nocollapse */


    Url.installInEmbedWindow = function installInEmbedWindow(embedWin, ampdoc) {
      (0, _service.installServiceInEmbedScope)(embedWin, SERVICE, new Url(ampdoc, embedWin.document));
    }
    /**
     * Parses the URL in the context of the current document.
     *
     * @param {string} url
     * @param {boolean=} opt_nocache
     * @return {!Location}
     */
    ;

    var _proto = Url.prototype;

    _proto.parse = function parse(url, opt_nocache) {
      return (0, _url.parseUrlWithA)(this.anchor_, url, opt_nocache ? null : this.cache_);
    }
    /**
     * Returns whether the URL has valid protocol.
     * Deep link protocol is valid, but not javascript etc.
     * @param {string|!Location} url
     * @return {boolean}
     */
    ;

    _proto.isProtocolValid = function isProtocolValid(url) {
      return (0, _url.isProtocolValid)(url);
    }
    /**
     * Returns the source origin of an AMP document for documents served
     * on a proxy origin or directly.
     * @param {string|!Location} url URL of an AMP document.
     * @return {string} The source origin of the URL.
     */
    ;

    _proto.getSourceOrigin = function getSourceOrigin(url) {
      return (0, _url.getSourceOrigin)(url);
    }
    /**
     * Asserts that a given url is HTTPS or protocol relative. It's a user-level
     * assert.
     *
     * Provides an exception for localhost.
     *
     * @param {?string|undefined} urlString
     * @param {!Element|string} elementContext Element where the url was found.
     * @param {string=} sourceName Used for error messages.
     * @return {string}
     */
    ;

    _proto.assertHttpsUrl = function assertHttpsUrl(urlString, elementContext, sourceName) {
      if (sourceName === void 0) {
        sourceName = 'source';
      }

      return (0, _url.assertHttpsUrl)(urlString, elementContext, sourceName);
    }
    /**
     * Asserts that a given url is an absolute HTTP or HTTPS URL.
     * @param {string} urlString
     * @return {string}
     */
    ;

    _proto.assertAbsoluteHttpOrHttpsUrl = function assertAbsoluteHttpOrHttpsUrl(urlString) {
      return (0, _url.assertAbsoluteHttpOrHttpsUrl)(urlString);
    }
    /**
     * Returns whether the URL has the origin of a proxy.
     * @param {string|!Location} url URL of an AMP document.
     * @return {boolean}
     */
    ;

    _proto.isProxyOrigin = function isProxyOrigin(url) {
      return (0, _url.isProxyOrigin)(url);
    }
    /**
     * Returns `true` if the URL is secure: either HTTPS or localhost (for
     * testing).
     * @param {string} url
     * @return {boolean}
     */
    ;

    _proto.isSecure = function isSecure(url) {
      return (0, _url.isSecureUrlDeprecated)(this.parse(url));
    }
    /**
     * Returns the correct origin for a given window.
     * @param {!Window} win
     * @return {string} origin
     */
    ;

    _proto.getWinOrigin = function getWinOrigin(win) {
      return win.origin || this.parse(win.location.href).origin;
    };

    return Url;
  }();
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   */


  exports.Url = Url;

  function installUrlForDoc(ampdoc) {
    (0, _service.registerServiceBuilderForDoc)(ampdoc, SERVICE, Url,
    /* opt_instantiate */
    true);
  }

  },{"../service":71,"../url":124,"../utils/lru-cache":130}],101:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.extractClientIdFromGaCookie = extractClientIdFromGaCookie;
  exports.installUrlReplacementsServiceForDoc = installUrlReplacementsServiceForDoc;
  exports.installUrlReplacementsForEmbed = installUrlReplacementsForEmbed;
  exports.UrlReplacements = exports.GlobalVariableSource = void 0;

  var _variableSource = require("./variable-source");

  var _expander = require("./url-expander/expander");

  var _services = require("../services");

  var _windowInterface = require("../window-interface");

  var _url = require("../url");

  var _log = require("../log");

  var _mode = require("../mode");

  var _impression = require("../impression.js");

  var _object = require("../utils/object");

  var _service = require("../service");

  var _promise = require("../utils/promise");

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  /** @private @const {string} */
  var TAG = 'UrlReplacements';
  var EXPERIMENT_DELIMITER = '!';
  var VARIANT_DELIMITER = '.';
  var GEO_DELIM = ',';
  var ORIGINAL_HREF_PROPERTY = 'amp-original-href';
  var ORIGINAL_VALUE_PROPERTY = 'amp-original-value';
  /**
   * Returns a function that executes method on a new Date instance. This is a
   * byte saving hack.
   *
   * @param {string} method
   * @return {!SyncResolverDef}
   */

  function dateMethod(method) {
    return function () {
      return new Date()[method]();
    };
  }
  /**
   * Returns a function that returns property of screen. This is a byte saving
   * hack.
   *
   * @param {!Screen} screen
   * @param {string} property
   * @return {!SyncResolverDef}
   */


  function screenProperty(screen, property) {
    return function () {
      return screen[property];
    };
  }
  /**
   * Class to provide variables that pertain to top level AMP window.
   */


  var GlobalVariableSource =
  /*#__PURE__*/
  function (_VariableSource) {
    _inheritsLoose(GlobalVariableSource, _VariableSource);

    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     */
    function GlobalVariableSource(ampdoc) {
      var _this;

      _this = _VariableSource.call(this, ampdoc) || this;
      /** @private {?Promise<?ShareTrackingFragmentsDef>} */

      _this.shareTrackingFragments_ = null;
      return _this;
    }
    /**
     * Utility function for setting resolver for timing data that supports
     * sync and async.
     * @param {string} varName
     * @param {string} startEvent
     * @param {string=} endEvent
     * @return {!VariableSource}
     * @private
     */


    var _proto = GlobalVariableSource.prototype;

    _proto.setTimingResolver_ = function setTimingResolver_(varName, startEvent, endEvent) {
      var _this2 = this;

      return this.setBoth(varName, function () {
        return (0, _variableSource.getTimingDataSync)(_this2.ampdoc.win, startEvent, endEvent);
      }, function () {
        return (0, _variableSource.getTimingDataAsync)(_this2.ampdoc.win, startEvent, endEvent);
      });
    }
    /** @override */
    ;

    _proto.initialize = function initialize() {
      var _this3 = this;

      var win = this.ampdoc.win;
      var element = this.ampdoc.getHeadNode();
      /** @const {!./viewport/viewport-impl.Viewport} */

      var viewport = _services.Services.viewportForDoc(this.ampdoc); // Returns a random value for cache busters.


      this.set('RANDOM', function () {
        return Math.random();
      }); // Provides a counter starting at 1 per given scope.

      var counterStore = Object.create(null);
      this.set('COUNTER', function (scope) {
        return counterStore[scope] = (counterStore[scope] | 0) + 1;
      }); // Returns the canonical URL for this AMP document.

      this.set('CANONICAL_URL', function () {
        return _this3.getDocInfo_().canonicalUrl;
      }); // Returns the host of the canonical URL for this AMP document.

      this.set('CANONICAL_HOST', function () {
        return (0, _url.parseUrlDeprecated)(_this3.getDocInfo_().canonicalUrl).host;
      }); // Returns the hostname of the canonical URL for this AMP document.

      this.set('CANONICAL_HOSTNAME', function () {
        return (0, _url.parseUrlDeprecated)(_this3.getDocInfo_().canonicalUrl).hostname;
      }); // Returns the path of the canonical URL for this AMP document.

      this.set('CANONICAL_PATH', function () {
        return (0, _url.parseUrlDeprecated)(_this3.getDocInfo_().canonicalUrl).pathname;
      }); // Returns the referrer URL.

      this.setAsync('DOCUMENT_REFERRER',
      /** @type {AsyncResolverDef} */
      function () {
        return _services.Services.viewerForDoc(_this3.ampdoc).getReferrerUrl();
      }); // Like DOCUMENT_REFERRER, but returns null if the referrer is of
      // same domain or the corresponding CDN proxy.

      this.setAsync('EXTERNAL_REFERRER',
      /** @type {AsyncResolverDef} */
      function () {
        return _services.Services.viewerForDoc(_this3.ampdoc).getReferrerUrl().then(function (referrer) {
          if (!referrer) {
            return null;
          }

          var referrerHostname = (0, _url.parseUrlDeprecated)((0, _url.getSourceUrl)(referrer)).hostname;

          var currentHostname = _windowInterface.WindowInterface.getHostname(win);

          return referrerHostname === currentHostname ? null : referrer;
        });
      }); // Returns the title of this AMP document.

      this.set('TITLE', function () {
        // The environment may override the title and set originalTitle. Prefer
        // that if available.
        var doc = win.document;
        return doc['originalTitle'] || doc.title;
      }); // Returns the URL for this AMP document.

      this.set('AMPDOC_URL', function () {
        return (0, _url.removeFragment)(_this3.addReplaceParamsIfMissing_(win.location.href));
      }); // Returns the host of the URL for this AMP document.

      this.set('AMPDOC_HOST', function () {
        var url = (0, _url.parseUrlDeprecated)(win.location.href);
        return url && url.host;
      }); // Returns the hostname of the URL for this AMP document.

      this.set('AMPDOC_HOSTNAME', function () {
        var url = (0, _url.parseUrlDeprecated)(win.location.href);
        return url && url.hostname;
      }); // Returns the Source URL for this AMP document.

      var expandSourceUrl = function expandSourceUrl() {
        var docInfo = _this3.getDocInfo_();

        return (0, _url.removeFragment)(_this3.addReplaceParamsIfMissing_(docInfo.sourceUrl));
      };

      this.setBoth('SOURCE_URL', function () {
        return expandSourceUrl();
      }, function () {
        return (0, _impression.getTrackImpressionPromise)().then(function () {
          return expandSourceUrl();
        });
      }); // Returns the host of the Source URL for this AMP document.

      this.set('SOURCE_HOST', function () {
        return (0, _url.parseUrlDeprecated)(_this3.getDocInfo_().sourceUrl).host;
      }); // Returns the hostname of the Source URL for this AMP document.

      this.set('SOURCE_HOSTNAME', function () {
        return (0, _url.parseUrlDeprecated)(_this3.getDocInfo_().sourceUrl).hostname;
      }); // Returns the path of the Source URL for this AMP document.

      this.set('SOURCE_PATH', function () {
        return (0, _url.parseUrlDeprecated)(_this3.getDocInfo_().sourceUrl).pathname;
      }); // Returns a random string that will be the constant for the duration of
      // single page view. It should have sufficient entropy to be unique for
      // all the page views a single user is making at a time.

      this.set('PAGE_VIEW_ID', function () {
        return _this3.getDocInfo_().pageViewId;
      });
      this.setBoth('QUERY_PARAM', function (param, defaultValue) {
        if (defaultValue === void 0) {
          defaultValue = '';
        }

        return _this3.getQueryParamData_(param, defaultValue);
      }, function (param, defaultValue) {
        if (defaultValue === void 0) {
          defaultValue = '';
        }

        return (0, _impression.getTrackImpressionPromise)().then(function () {
          return _this3.getQueryParamData_(param, defaultValue);
        });
      }); // Returns the value of the given field name in the fragment query string.
      // Second parameter is an optional default value.
      // For example, if location is 'pub.com/amp.html?x=1#y=2' then
      // FRAGMENT_PARAM(y) returns '2' and FRAGMENT_PARAM(z, 3) returns 3.

      this.setAsync('FRAGMENT_PARAM', this.getViewerIntegrationValue_('fragmentParam', 'FRAGMENT_PARAM')); // Returns the first item in the ancestorOrigins array, if available.

      this.setAsync('ANCESTOR_ORIGIN', this.getViewerIntegrationValue_('ancestorOrigin', 'ANCESTOR_ORIGIN'));
      /**
       * Stores client ids that were generated during this page view
       * indexed by scope.
       * @type {?Object<string, string>}
       */

      var clientIds = null; // Synchronous alternative. Only works for scopes that were previously
      // requested using the async method.

      this.setBoth('CLIENT_ID', function (scope) {
        if (!clientIds) {
          return null;
        }

        return clientIds[(0, _log.dev)().assertString(scope)];
      }, function (scope, opt_userNotificationId, opt_cookieName) {
        (0, _log.user)().assertString(scope, 'The first argument to CLIENT_ID, the fallback' +
        /*OK*/
        ' Cookie name, is required');

        if ((0, _mode.getMode)().runtime == 'inabox') {
          return (
            /** @type {!Promise<ResolverReturnDef>} */
            Promise.resolve(null)
          );
        }

        var consent = Promise.resolve(); // If no `opt_userNotificationId` argument is provided then
        // assume consent is given by default.

        if (opt_userNotificationId) {
          consent = _services.Services.userNotificationManagerForDoc(element).then(function (service) {
            return service.get(opt_userNotificationId);
          });
        }

        return _services.Services.cidForDoc(_this3.ampdoc).then(function (cid) {
          return cid.get({
            scope: (0, _log.dev)().assertString(scope),
            createCookieIfNotPresent: true,
            cookieName: opt_cookieName
          }, consent);
        }).then(function (cid) {
          if (!clientIds) {
            clientIds = Object.create(null);
          } // A temporary work around to extract Client ID from _ga cookie. #5761
          // TODO: replace with "filter" when it's in place. #2198


          var cookieName = opt_cookieName || scope;

          if (cid && cookieName == '_ga') {
            if (typeof cid === 'string') {
              cid = extractClientIdFromGaCookie(cid);
            } else {
              // TODO(@jridgewell, #11120): remove once #11120 is figured out.
              // Do not log the CID directly, that's PII.
              (0, _log.dev)().error(TAG, 'non-string cid, what is it?', Object.keys(cid));
            }
          }

          clientIds[scope] = cid;
          return cid;
        });
      }); // Returns assigned variant name for the given experiment.

      this.setAsync('VARIANT',
      /** @type {AsyncResolverDef} */
      function (experiment) {
        return _this3.getVariantsValue_(function (variants) {
          var variant = variants[
          /** @type {string} */
          experiment];
          (0, _log.userAssert)(variant !== undefined, 'The value passed to VARIANT() is not a valid experiment name:' + experiment); // When no variant assigned, use reserved keyword 'none'.

          return variant === null ? 'none' :
          /** @type {string} */
          variant;
        }, 'VARIANT');
      }); // Returns all assigned experiment variants in a serialized form.

      this.setAsync('VARIANTS',
      /** @type {AsyncResolverDef} */
      function () {
        return _this3.getVariantsValue_(function (variants) {
          var experiments = [];

          for (var experiment in variants) {
            var variant = variants[experiment];
            experiments.push(experiment + VARIANT_DELIMITER + (variant || 'none'));
          }

          return experiments.join(EXPERIMENT_DELIMITER);
        }, 'VARIANTS');
      }); // Returns assigned geo value for geoType or all groups.

      this.setAsync('AMP_GEO',
      /** @type {AsyncResolverDef} */
      function (geoType) {
        return _this3.getGeo_(function (geos) {
          if (geoType) {
            (0, _log.userAssert)(geoType === 'ISOCountry', 'The value passed to AMP_GEO() is not valid name:' + geoType);
            return (
              /** @type {string} */
              geos[geoType] || 'unknown'
            );
          }

          return (
            /** @type {string} */
            geos.matchedISOCountryGroups.join(GEO_DELIM)
          );
        }, 'AMP_GEO');
      }); // Returns incoming share tracking fragment.

      this.setAsync('SHARE_TRACKING_INCOMING',
      /** @type {AsyncResolverDef} */
      function () {
        return _this3.getShareTrackingValue_(function (fragments) {
          return fragments.incomingFragment;
        }, 'SHARE_TRACKING_INCOMING');
      }); // Returns outgoing share tracking fragment.

      this.setAsync('SHARE_TRACKING_OUTGOING',
      /** @type {AsyncResolverDef} */
      function () {
        return _this3.getShareTrackingValue_(function (fragments) {
          return fragments.outgoingFragment;
        }, 'SHARE_TRACKING_OUTGOING');
      }); // Returns the number of milliseconds since 1 Jan 1970 00:00:00 UTC.

      this.set('TIMESTAMP', dateMethod('getTime')); // Returns the human readable timestamp in format of
      // 2011-01-01T11:11:11.612Z.

      this.set('TIMESTAMP_ISO', dateMethod('toISOString')); // Returns the user's time-zone offset from UTC, in minutes.

      this.set('TIMEZONE', dateMethod('getTimezoneOffset')); // Returns the IANA timezone code

      this.set('TIMEZONE_CODE', function () {
        var tzCode;

        if ('Intl' in win && 'DateTimeFormat' in win.Intl) {
          // It could be undefined (i.e. IE11)
          tzCode = new Intl.DateTimeFormat().resolvedOptions().timeZone;
        }

        return tzCode || '';
      }); // Returns a promise resolving to viewport.getScrollTop.

      this.set('SCROLL_TOP', function () {
        return viewport.getScrollTop();
      }); // Returns a promise resolving to viewport.getScrollLeft.

      this.set('SCROLL_LEFT', function () {
        return viewport.getScrollLeft();
      }); // Returns a promise resolving to viewport.getScrollHeight.

      this.set('SCROLL_HEIGHT', function () {
        return viewport.getScrollHeight();
      }); // Returns a promise resolving to viewport.getScrollWidth.

      this.set('SCROLL_WIDTH', function () {
        return viewport.getScrollWidth();
      }); // Returns the viewport height.

      this.set('VIEWPORT_HEIGHT', function () {
        return viewport.getHeight();
      }); // Returns the viewport width.

      this.set('VIEWPORT_WIDTH', function () {
        return viewport.getWidth();
      });
      var screen = win.screen; // Returns screen.width.

      this.set('SCREEN_WIDTH', screenProperty(screen, 'width')); // Returns screen.height.

      this.set('SCREEN_HEIGHT', screenProperty(screen, 'height')); // Returns screen.availHeight.

      this.set('AVAILABLE_SCREEN_HEIGHT', screenProperty(screen, 'availHeight')); // Returns screen.availWidth.

      this.set('AVAILABLE_SCREEN_WIDTH', screenProperty(screen, 'availWidth')); // Returns screen.ColorDepth.

      this.set('SCREEN_COLOR_DEPTH', screenProperty(screen, 'colorDepth')); // Returns document characterset.

      this.set('DOCUMENT_CHARSET', function () {
        var doc = win.document;
        return doc.characterSet || doc.charset;
      }); // Returns the browser language.

      this.set('BROWSER_LANGUAGE', function () {
        var nav = win.navigator;
        return (nav.language || nav.userLanguage || nav.browserLanguage || '').toLowerCase();
      }); // Returns the user agent.

      this.set('USER_AGENT', function () {
        return win.navigator.userAgent;
      }); // Returns the time it took to load the whole page. (excludes amp-* elements
      // that are not rendered by the system yet.)

      this.setTimingResolver_('PAGE_LOAD_TIME', 'navigationStart', 'loadEventStart'); // Returns the time it took to perform DNS lookup for the domain.

      this.setTimingResolver_('DOMAIN_LOOKUP_TIME', 'domainLookupStart', 'domainLookupEnd'); // Returns the time it took to connect to the server.

      this.setTimingResolver_('TCP_CONNECT_TIME', 'connectStart', 'connectEnd'); // Returns the time it took for server to start sending a response to the
      // request.

      this.setTimingResolver_('SERVER_RESPONSE_TIME', 'requestStart', 'responseStart'); // Returns the time it took to download the page.

      this.setTimingResolver_('PAGE_DOWNLOAD_TIME', 'responseStart', 'responseEnd'); // Returns the time it took for redirects to complete.

      this.setTimingResolver_('REDIRECT_TIME', 'navigationStart', 'fetchStart'); // Returns the time it took for DOM to become interactive.

      this.setTimingResolver_('DOM_INTERACTIVE_TIME', 'navigationStart', 'domInteractive'); // Returns the time it took for content to load.

      this.setTimingResolver_('CONTENT_LOAD_TIME', 'navigationStart', 'domContentLoadedEventStart'); // Access: Reader ID.

      this.setAsync('ACCESS_READER_ID',
      /** @type {AsyncResolverDef} */
      function () {
        return _this3.getAccessValue_(function (accessService) {
          return accessService.getAccessReaderId();
        }, 'ACCESS_READER_ID');
      }); // Access: data from the authorization response.

      this.setAsync('AUTHDATA',
      /** @type {AsyncResolverDef} */
      function (field) {
        (0, _log.userAssert)(field, 'The first argument to AUTHDATA, the field, is required');
        return _this3.getAccessValue_(function (accessService) {
          return accessService.getAuthdataField(field);
        }, 'AUTHDATA');
      }); // Returns an identifier for the viewer.

      this.setAsync('VIEWER', function () {
        return _services.Services.viewerForDoc(_this3.ampdoc).getViewerOrigin().then(function (viewer) {
          return viewer == undefined ? '' : viewer;
        });
      }); // Returns the total engaged time since the content became viewable.

      this.setAsync('TOTAL_ENGAGED_TIME', function () {
        return _services.Services.activityForDoc(element).then(function (activity) {
          return activity.getTotalEngagedTime();
        });
      }); // Returns the incremental engaged time since the last push under the
      // same name.

      this.setAsync('INCREMENTAL_ENGAGED_TIME', function (name, reset) {
        return _services.Services.activityForDoc(element).then(function (activity) {
          return activity.getIncrementalEngagedTime(
          /** @type {string} */
          name, reset !== 'false');
        });
      });
      this.set('NAV_TIMING', function (startAttribute, endAttribute) {
        (0, _log.userAssert)(startAttribute, 'The first argument to NAV_TIMING, the ' + 'start attribute name, is required');
        return (0, _variableSource.getTimingDataSync)(win,
        /**@type {string}*/
        startAttribute,
        /**@type {string}*/
        endAttribute);
      });
      this.setAsync('NAV_TIMING', function (startAttribute, endAttribute) {
        (0, _log.userAssert)(startAttribute, 'The first argument to NAV_TIMING, the ' + 'start attribute name, is required');
        return (0, _variableSource.getTimingDataAsync)(win,
        /**@type {string}*/
        startAttribute,
        /**@type {string}*/
        endAttribute);
      });
      this.set('NAV_TYPE', function () {
        return (0, _variableSource.getNavigationData)(win, 'type');
      });
      this.set('NAV_REDIRECT_COUNT', function () {
        return (0, _variableSource.getNavigationData)(win, 'redirectCount');
      }); // returns the AMP version number

      this.set('AMP_VERSION', function () {
        return '1903211831541';
      });
      this.set('BACKGROUND_STATE', function () {
        return _services.Services.viewerForDoc(_this3.ampdoc).isVisible() ? '0' : '1';
      });
      this.setAsync('VIDEO_STATE', function (id, property) {
        var root = _this3.ampdoc.getRootNode();

        var video = (0, _log.user)().assertElement(root.getElementById(
        /** @type {string} */
        id), "Could not find an element with id=\"" + id + "\" for VIDEO_STATE");
        return _services.Services.videoManagerForDoc(_this3.ampdoc).getAnalyticsDetails(video).then(function (details) {
          return details ? details[property] : '';
        });
      });
      this.setAsync('STORY_PAGE_INDEX', this.getStoryValue_('pageIndex', 'STORY_PAGE_INDEX'));
      this.setAsync('STORY_PAGE_ID', this.getStoryValue_('pageId', 'STORY_PAGE_ID'));
      this.setAsync('FIRST_CONTENTFUL_PAINT', function () {
        return (0, _promise.tryResolve)(function () {
          return _services.Services.performanceFor(win).getFirstContentfulPaint();
        });
      });
      this.setAsync('FIRST_VIEWPORT_READY', function () {
        return (0, _promise.tryResolve)(function () {
          return _services.Services.performanceFor(win).getFirstViewportReady();
        });
      });
      this.setAsync('MAKE_BODY_VISIBLE', function () {
        return (0, _promise.tryResolve)(function () {
          return _services.Services.performanceFor(win).getMakeBodyVisible();
        });
      });
      this.setAsync('AMP_STATE', function (key) {
        // This is safe since AMP_STATE is not an A4A whitelisted variable.
        var root = _this3.ampdoc.getRootNode();

        var element =
        /** @type {!Element|!ShadowRoot} */
        root.documentElement || root;
        return _services.Services.bindForDocOrNull(element).then(function (bind) {
          if (!bind) {
            return '';
          }

          return bind.getStateValue(
          /** @type {string} */
          key);
        });
      });
    }
    /**
     * Merges any replacement parameters into a given URL's query string,
     * preferring values set in the original query string.
     * @param {string} orig The original URL
     * @return {string} The resulting URL
     * @private
     */
    ;

    _proto.addReplaceParamsIfMissing_ = function addReplaceParamsIfMissing_(orig) {
      var _this$getDocInfo_ =
      /** @type {!Object} */
      this.getDocInfo_(),
          replaceParams = _this$getDocInfo_.replaceParams;

      if (!replaceParams) {
        return orig;
      }

      return (0, _url.addMissingParamsToUrl)((0, _url.removeAmpJsParamsFromUrl)(orig), replaceParams);
    }
    /**
     * Return the document info for the current ampdoc.
     * @return {./document-info-impl.DocumentInfoDef}
     */
    ;

    _proto.getDocInfo_ = function getDocInfo_() {
      return _services.Services.documentInfoForDoc(this.ampdoc);
    }
    /**
     * Resolves the value via access service. If access service is not configured,
     * the resulting value is `null`.
     * @param {function(!../../extensions/amp-access/0.1/access-vars.AccessVars):(T|!Promise<T>)} getter
     * @param {string} expr
     * @return {T|null}
     * @template T
     * @private
     */
    ;

    _proto.getAccessValue_ = function getAccessValue_(getter, expr) {
      var element = this.ampdoc.getHeadNode();
      return Promise.all([_services.Services.accessServiceForDocOrNull(element), _services.Services.subscriptionsServiceForDocOrNull(element)]).then(function (services) {
        var service =
        /** @type {?../../extensions/amp-access/0.1/access-vars.AccessVars} */
        services[0] || services[1];

        if (!service) {
          // Access/subscriptions service is not installed.
          (0, _log.user)().error(TAG, 'Access or subsciptions service is not installed to access: ', expr);
          return null;
        }

        return getter(service);
      });
    }
    /**
     * Return the QUERY_PARAM from the current location href
     * @param {*} param
     * @param {string} defaultValue
     * @return {string}
     * @private
     */
    ;

    _proto.getQueryParamData_ = function getQueryParamData_(param, defaultValue) {
      (0, _log.userAssert)(param, 'The first argument to QUERY_PARAM, the query string ' + 'param is required');
      var url = (0, _url.parseUrlDeprecated)((0, _url.removeAmpJsParamsFromUrl)(this.ampdoc.win.location.href));
      var params = (0, _url.parseQueryString)(url.search);
      var key = (0, _log.user)().assertString(param);

      var _this$getDocInfo_2 = this.getDocInfo_(),
          replaceParams = _this$getDocInfo_2.replaceParams;

      if (typeof params[key] !== 'undefined') {
        return params[key];
      }

      if (replaceParams && typeof replaceParams[key] !== 'undefined') {
        return (
          /** @type {string} */
          replaceParams[key]
        );
      }

      return defaultValue;
    }
    /**
     * Resolves the value via amp-experiment's variants service.
     * @param {function(!Object<string, string>):(?string)} getter
     * @param {string} expr
     * @return {!Promise<?string>}
     * @template T
     * @private
     */
    ;

    _proto.getVariantsValue_ = function getVariantsValue_(getter, expr) {
      return _services.Services.variantsForDocOrNull(this.ampdoc.getHeadNode()).then(function (variants) {
        (0, _log.userAssert)(variants, 'To use variable %s, amp-experiment should be configured', expr);
        return variants.getVariants();
      }).then(function (variantsMap) {
        return getter(variantsMap);
      });
    }
    /**
     * Resolves the value via geo service.
     * @param {function(Object<string, string>)} getter
     * @param {string} expr
     * @return {!Promise<Object<string,(string|Array<string>)>>}
     * @template T
     * @private
     */
    ;

    _proto.getGeo_ = function getGeo_(getter, expr) {
      var element = this.ampdoc.getHeadNode();
      return _services.Services.geoForDocOrNull(element).then(function (geo) {
        (0, _log.userAssert)(geo, 'To use variable %s, amp-geo should be configured', expr);
        return getter(geo);
      });
    }
    /**
     * Resolves the value via amp-share-tracking's service.
     * @param {function(!ShareTrackingFragmentsDef):T} getter
     * @param {string} expr
     * @return {!Promise<T>}
     * @template T
     * @private
     */
    ;

    _proto.getShareTrackingValue_ = function getShareTrackingValue_(getter, expr) {
      if (!this.shareTrackingFragments_) {
        this.shareTrackingFragments_ = _services.Services.shareTrackingForOrNull(this.ampdoc.win);
      }

      return this.shareTrackingFragments_.then(function (fragments) {
        (0, _log.userAssert)(fragments, 'To use variable %s, ' + 'amp-share-tracking should be configured', expr);
        return getter(
        /** @type {!ShareTrackingFragmentsDef} */
        fragments);
      });
    }
    /**
     * Resolves the value via amp-story's service.
     * @param {string} property
     * @param {string} name
     * @return {!AsyncResolverDef}
     * @private
     */
    ;

    _proto.getStoryValue_ = function getStoryValue_(property, name) {
      var _this4 = this;

      return function () {
        var service = _services.Services.storyVariableServiceForOrNull(_this4.ampdoc.win);

        return service.then(function (storyVariables) {
          (0, _log.userAssert)(storyVariables, 'To use variable %s amp-story should be configured', name);
          return storyVariables[property];
        });
      };
    }
    /**
     * Resolves the value via amp-viewer-integration's service.
     * @param {string} property
     * @param {string} name
     * @return {!AsyncResolverDef}
     * @private
     */
    ;

    _proto.getViewerIntegrationValue_ = function getViewerIntegrationValue_(property, name) {
      var _this5 = this;

      return (
        /** @type {!AsyncResolverDef} */
        function (param, defaultValue) {
          if (defaultValue === void 0) {
            defaultValue = '';
          }

          var service = _services.Services.viewerIntegrationVariableServiceForOrNull(_this5.ampdoc.win);

          return service.then(function (viewerIntegrationVariables) {
            (0, _log.userAssert)(viewerIntegrationVariables, 'To use variable %s ' + 'amp-viewer-integration must be installed', name);
            return viewerIntegrationVariables[property](param, defaultValue);
          });
        }
      );
    };

    return GlobalVariableSource;
  }(_variableSource.VariableSource);
  /**
   * This class replaces substitution variables with their values.
   * Document new values in ../spec/amp-var-substitutions.md
   * @package For export
   */


  exports.GlobalVariableSource = GlobalVariableSource;

  var UrlReplacements =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {!VariableSource} variableSource
     */
    function UrlReplacements(ampdoc, variableSource) {
      /** @const {!./ampdoc-impl.AmpDoc} */
      this.ampdoc = ampdoc;
      /** @type {VariableSource} */

      this.variableSource_ = variableSource;
    }
    /**
     * Synchronously expands the provided source by replacing all known variables
     * with their resolved values. Optional `opt_bindings` can be used to add new
     * variables or override existing ones.  Any async bindings are ignored.
     * @param {string} source
     * @param {!Object<string, (ResolverReturnDef|!SyncResolverDef)>=} opt_bindings
     * @param {!Object<string, ResolverReturnDef>=} opt_collectVars
     * @param {!Object<string, boolean>=} opt_whiteList Optional white list of
     *     names that can be substituted.
     * @return {string}
     */


    var _proto2 = UrlReplacements.prototype;

    _proto2.expandStringSync = function expandStringSync(source, opt_bindings, opt_collectVars, opt_whiteList) {
      return (
        /** @type {string} */
        new _expander.Expander(this.variableSource_, opt_bindings, opt_collectVars,
        /* opt_sync */
        true, opt_whiteList,
        /* opt_noEncode */
        true).
        /*OK*/
        expand(source)
      );
    }
    /**
     * Expands the provided source by replacing all known variables with their
     * resolved values. Optional `opt_bindings` can be used to add new variables
     * or override existing ones.
     * @param {string} source
     * @param {!Object<string, *>=} opt_bindings
     * @param {!Object<string, boolean>=} opt_whiteList
     * @return {!Promise<string>}
     */
    ;

    _proto2.expandStringAsync = function expandStringAsync(source, opt_bindings, opt_whiteList) {
      return (
        /** @type {!Promise<string>} */
        new _expander.Expander(this.variableSource_, opt_bindings,
        /* opt_collectVars */
        undefined,
        /* opt_sync */
        undefined, opt_whiteList,
        /* opt_noEncode */
        true).
        /*OK*/
        expand(source)
      );
    }
    /**
     * Synchronously expands the provided URL by replacing all known variables
     * with their resolved values. Optional `opt_bindings` can be used to add new
     * variables or override existing ones.  Any async bindings are ignored.
     * @param {string} url
     * @param {!Object<string, (ResolverReturnDef|!SyncResolverDef)>=} opt_bindings
     * @param {!Object<string, ResolverReturnDef>=} opt_collectVars
     * @param {!Object<string, boolean>=} opt_whiteList Optional white list of
     *     names that can be substituted.
     * @return {string}
     */
    ;

    _proto2.expandUrlSync = function expandUrlSync(url, opt_bindings, opt_collectVars, opt_whiteList) {
      return this.ensureProtocolMatches_(url,
      /** @type {string} */
      new _expander.Expander(this.variableSource_, opt_bindings, opt_collectVars,
      /* opt_sync */
      true, opt_whiteList).
      /*OK*/
      expand(url));
    }
    /**
     * Expands the provided URL by replacing all known variables with their
     * resolved values. Optional `opt_bindings` can be used to add new variables
     * or override existing ones.
     * @param {string} url
     * @param {!Object<string, *>=} opt_bindings
     * @param {!Object<string, boolean>=} opt_whiteList Optional white list of names
     *     that can be substituted.
     * @return {!Promise<string>}
     */
    ;

    _proto2.expandUrlAsync = function expandUrlAsync(url, opt_bindings, opt_whiteList) {
      var _this6 = this;

      return (
        /** @type {!Promise<string>} */
        new _expander.Expander(this.variableSource_, opt_bindings,
        /* opt_collectVars */
        undefined,
        /* opt_sync */
        undefined, opt_whiteList).
        /*OK*/
        expand(url).then(function (replacement) {
          return _this6.ensureProtocolMatches_(url, replacement);
        })
      );
    }
    /**
     * Expands an input element value attribute with variable substituted.
     * @param {!HTMLInputElement} element
     * @return {!Promise<string>}
     */
    ;

    _proto2.expandInputValueAsync = function expandInputValueAsync(element) {
      return (
        /** @type {!Promise<string>} */
        this.expandInputValue_(element,
        /*opt_sync*/
        false)
      );
    }
    /**
     * Expands an input element value attribute with variable substituted.
     * @param {!HTMLInputElement} element
     * @return {string} Replaced string for testing
     */
    ;

    _proto2.expandInputValueSync = function expandInputValueSync(element) {
      return (
        /** @type {string} */
        this.expandInputValue_(element,
        /*opt_sync*/
        true)
      );
    }
    /**
     * Expands in input element value attribute with variable substituted.
     * @param {!HTMLInputElement} element
     * @param {boolean=} opt_sync
     * @return {string|!Promise<string>}
     */
    ;

    _proto2.expandInputValue_ = function expandInputValue_(element, opt_sync) {
      (0, _log.devAssert)(element.tagName == 'INPUT' && (element.getAttribute('type') || '').toLowerCase() == 'hidden', 'Input value expansion only works on hidden input fields: %s', element);
      var whitelist = this.getWhitelistForElement_(element);

      if (!whitelist) {
        return opt_sync ? element.value : Promise.resolve(element.value);
      }

      if (element[ORIGINAL_VALUE_PROPERTY] === undefined) {
        element[ORIGINAL_VALUE_PROPERTY] = element.value;
      }

      var result = new _expander.Expander(this.variableSource_,
      /* opt_bindings */
      undefined,
      /* opt_collectVars */
      undefined,
      /* opt_sync */
      opt_sync,
      /* opt_whitelist */
      whitelist).
      /*OK*/
      expand(element[ORIGINAL_VALUE_PROPERTY] || element.value);

      if (opt_sync) {
        return element.value = result;
      }

      return result.then(function (newValue) {
        element.value = newValue;
        return newValue;
      });
    }
    /**
     * Returns a replacement whitelist from elements' data-amp-replace attribute.
     * @param {!Element} element
     * @param {!Object<string, boolean>=} opt_supportedReplacement Optional supported
     * replacement that filters whitelist to a subset.
     * @return {!Object<string, boolean>|undefined}
     */
    ;

    _proto2.getWhitelistForElement_ = function getWhitelistForElement_(element, opt_supportedReplacement) {
      var whitelist = element.getAttribute('data-amp-replace');

      if (!whitelist) {
        return;
      }

      var requestedReplacements = {};
      whitelist.trim().split(/\s+/).forEach(function (replacement) {
        if (!opt_supportedReplacement || (0, _object.hasOwn)(opt_supportedReplacement, replacement)) {
          requestedReplacements[replacement] = true;
        } else {
          (0, _log.user)().warn('URL', 'Ignoring unsupported replacement', replacement);
        }
      });
      return requestedReplacements;
    }
    /**
      * Returns whether variable substitution is allowed for given url.
      * @param {!Location} url
      * @return {boolean}
      */
    ;

    _proto2.isAllowedOrigin_ = function isAllowedOrigin_(url) {
      var docInfo = _services.Services.documentInfoForDoc(this.ampdoc);

      if (url.origin == (0, _url.parseUrlDeprecated)(docInfo.canonicalUrl).origin || url.origin == (0, _url.parseUrlDeprecated)(docInfo.sourceUrl).origin) {
        return true;
      }

      var meta = this.ampdoc.getRootNode().querySelector('meta[name=amp-link-variable-allowed-origin]');

      if (meta && meta.hasAttribute('content')) {
        var whitelist = meta.getAttribute('content').trim().split(/\s+/);

        for (var i = 0; i < whitelist.length; i++) {
          if (url.origin == (0, _url.parseUrlDeprecated)(whitelist[i]).origin) {
            return true;
          }
        }
      }

      return false;
    }
    /**
     * Replaces values in the link of an anchor tag if
     * - the link opts into it (via data-amp-replace argument)
     * - the destination is the source or canonical origin of this doc.
     * @param {!Element} element An anchor element.
     * @param {?string} defaultUrlParams to expand link if caller request.
     * @return {string|undefined} Replaced string for testing
     */
    ;

    _proto2.maybeExpandLink = function maybeExpandLink(element, defaultUrlParams) {
      (0, _log.devAssert)(element.tagName == 'A');
      var supportedReplacements = {
        'CLIENT_ID': true,
        'QUERY_PARAM': true,
        'PAGE_VIEW_ID': true,
        'NAV_TIMING': true
      };
      var additionalUrlParameters = element.getAttribute('data-amp-addparams') || '';
      var whitelist = this.getWhitelistForElement_(element, supportedReplacements);

      if (!whitelist && !additionalUrlParameters && !defaultUrlParams) {
        return;
      } // ORIGINAL_HREF_PROPERTY has the value of the href "pre-replacement".
      // We set this to the original value before doing any work and use it
      // on subsequent replacements, so that each run gets a fresh value.


      var href = (0, _log.dev)().assertString(element[ORIGINAL_HREF_PROPERTY] || element.getAttribute('href'));
      var url = (0, _url.parseUrlDeprecated)(href);

      if (element[ORIGINAL_HREF_PROPERTY] == null) {
        element[ORIGINAL_HREF_PROPERTY] = href;
      }

      if (additionalUrlParameters) {
        href = (0, _url.addParamsToUrl)(href, (0, _url.parseQueryString)(additionalUrlParameters));
      }

      var isAllowedOrigin = this.isAllowedOrigin_(url);

      if (!isAllowedOrigin) {
        if (whitelist) {
          (0, _log.user)().warn('URL', 'Ignoring link replacement', href, ' because the link does not go to the document\'s' + ' source, canonical, or whitelisted origin.');
        }

        return element.href = href;
      } // Note that defaultUrlParams is treated differently than
      // additionalUrlParameters in two ways #1: If the outgoing url origin is not
      // whitelisted: additionalUrlParameters are always appended by not expanded,
      // defaultUrlParams will not be appended. #2: If the expansion function is
      // not whitelisted: additionalUrlParamters will not be expanded,
      // defaultUrlParams will by default support QUERY_PARAM, and will still be
      // expanded.


      if (defaultUrlParams) {
        if (!whitelist || !whitelist['QUERY_PARAM']) {
          // override whitelist and expand defaultUrlParams;
          var overrideWhitelist = {
            'QUERY_PARAM': true
          };
          defaultUrlParams = this.expandUrlSync(defaultUrlParams,
          /* opt_bindings */
          undefined,
          /* opt_collectVars */
          undefined,
          /* opt_whitelist */
          overrideWhitelist);
        }

        href = (0, _url.addParamsToUrl)(href, (0, _url.parseQueryString)(defaultUrlParams));
      }

      if (whitelist) {
        href = this.expandUrlSync(href,
        /* opt_bindings */
        undefined,
        /* opt_collectVars */
        undefined,
        /* opt_whitelist */
        whitelist);
      }

      return element.href = href;
    }
    /**
     * Collects all substitutions in the provided URL and expands them to the
     * values for known variables. Optional `opt_bindings` can be used to add
     * new variables or override existing ones.
     * @param {string} url
     * @param {!Object<string, *>=} opt_bindings
     * @return {!Promise<!Object<string, *>>}
     */
    ;

    _proto2.collectVars = function collectVars(url, opt_bindings) {
      var vars = Object.create(null);
      return new _expander.Expander(this.variableSource_, opt_bindings, vars).
      /*OK*/
      expand(url).then(function () {
        return vars;
      });
    }
    /**
     * Collects substitutions in the `src` attribute of the given element
     * that are _not_ whitelisted via `data-amp-replace` opt-in attribute.
     * @param {!Element} element
     * @return {!Array<string>}
     */
    ;

    _proto2.collectUnwhitelistedVarsSync = function collectUnwhitelistedVarsSync(element) {
      var url = element.getAttribute('src');
      var macroNames = new _expander.Expander(this.variableSource_).getMacroNames(url);
      var whitelist = this.getWhitelistForElement_(element);

      if (whitelist) {
        return macroNames.filter(function (v) {
          return !whitelist[v];
        });
      } else {
        // All vars are unwhitelisted if the element has no whitelist.
        return macroNames;
      }
    }
    /**
     * Ensures that the protocol of the original url matches the protocol of the
     * replacement url. Returns the replacement if they do, the original if they
     * do not.
     * @param {string} url
     * @param {string} replacement
     * @return {string}
     */
    ;

    _proto2.ensureProtocolMatches_ = function ensureProtocolMatches_(url, replacement) {
      var newProtocol = (0, _url.parseUrlDeprecated)(replacement,
      /* opt_nocache */
      true).protocol;
      var oldProtocol = (0, _url.parseUrlDeprecated)(url,
      /* opt_nocache */
      true).protocol;

      if (newProtocol != oldProtocol) {
        (0, _log.user)().error(TAG, 'Illegal replacement of the protocol: ', url);
        return url;
      }

      (0, _log.userAssert)((0, _url.isProtocolValid)(replacement), 'The replacement url has invalid protocol: %s', replacement);
      return replacement;
    }
    /**
     * @return {VariableSource}
     */
    ;

    _proto2.getVariableSource = function getVariableSource() {
      return this.variableSource_;
    };

    return UrlReplacements;
  }();
  /**
   * Extracts client ID from a _ga cookie.
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/cookies-user-id
   * @param {string} gaCookie
   * @return {string}
   */


  exports.UrlReplacements = UrlReplacements;

  function extractClientIdFromGaCookie(gaCookie) {
    return gaCookie.replace(/^(GA1|1)\.[\d-]+\./, '');
  }
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   */


  function installUrlReplacementsServiceForDoc(ampdoc) {
    (0, _service.registerServiceBuilderForDoc)(ampdoc, 'url-replace', function (doc) {
      return new UrlReplacements(doc, new GlobalVariableSource(doc));
    });
  }
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @param {!Window} embedWin
   * @param {!VariableSource} varSource
   */


  function installUrlReplacementsForEmbed(ampdoc, embedWin, varSource) {
    (0, _service.installServiceInEmbedScope)(embedWin, 'url-replace', new UrlReplacements(ampdoc, varSource));
  }
  /**
   * @typedef {{incomingFragment: string, outgoingFragment: string}}
   */


  var ShareTrackingFragmentsDef;

  },{"../impression.js":43,"../log":51,"../mode":53,"../service":71,"../services":112,"../url":124,"../utils/object":132,"../utils/promise":134,"../window-interface":141,"./url-expander/expander":99,"./variable-source":102}],102:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.getTimingDataAsync = getTimingDataAsync;
  exports.getTimingDataSync = getTimingDataSync;
  exports.getNavigationData = getNavigationData;
  exports.VariableSource = exports.AsyncResolverDef = exports.SyncResolverDef = void 0;

  var _log = require("../log");

  var _types = require("../types");

  var _eventHelper = require("../event-helper");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @typedef {string|number|boolean|undefined|null} */
  var ResolverReturnDef;
  /** @typedef {function(...*):ResolverReturnDef} */

  var SyncResolverDef;
  /** @typedef {function(...*):!Promise<ResolverReturnDef>} */

  exports.SyncResolverDef = SyncResolverDef;
  var AsyncResolverDef;
  /** @typedef {{sync: SyncResolverDef, async: AsyncResolverDef}} */

  exports.AsyncResolverDef = AsyncResolverDef;
  var ReplacementDef;
  /**
   * Returns navigation timing information based on the start and end events.
   * The data for the timing events is retrieved from performance.timing API.
   * If start and end events are both given, the result is the difference between
   * the two. If only start event is given, the result is the timing value at
   * start event.
   * @param {!Window} win
   * @param {string} startEvent
   * @param {string=} endEvent
   * @return {!Promise<ResolverReturnDef>}
   */

  function getTimingDataAsync(win, startEvent, endEvent) {
    return (0, _eventHelper.loadPromise)(win).then(function () {
      return getTimingDataSync(win, startEvent, endEvent);
    });
  }
  /**
   * Returns navigation timing information based on the start and end events.
   * The data for the timing events is retrieved from performance.timing API.
   * If start and end events are both given, the result is the difference between
   * the two. If only start event is given, the result is the timing value at
   * start event. Enforces synchronous evaluation.
   * @param {!Window} win
   * @param {string} startEvent
   * @param {string=} endEvent
   * @return {ResolverReturnDef} undefined if API is not available, empty string
   *    if it is not yet available, or value as string
   */


  function getTimingDataSync(win, startEvent, endEvent) {
    var timingInfo = win['performance'] && win['performance']['timing'];

    if (!timingInfo || timingInfo['navigationStart'] == 0) {
      // Navigation timing API is not supported.
      return;
    }

    var metric = endEvent === undefined ? timingInfo[startEvent] : timingInfo[endEvent] - timingInfo[startEvent];

    if (!(0, _types.isFiniteNumber)(metric) || metric < 0) {
      // The metric is not supported.
      return;
    } else {
      return metric;
    }
  }
  /**
   * Returns navigation information from the current browsing context.
   * @param {!Window} win
   * @param {string} attribute
   * @return {ResolverReturnDef}
   * @private
   */


  function getNavigationData(win, attribute) {
    var navigationInfo = win['performance'] && win['performance']['navigation'];

    if (!navigationInfo || navigationInfo[attribute] === undefined) {
      // PerformanceNavigation interface is not supported or attribute is not
      // implemented.
      return;
    }

    return navigationInfo[attribute];
  }
  /**
   * A class to provide variable substitution related features. Extend this class
   * and override initialize() to add more supported variables.
   */


  var VariableSource =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     */
    function VariableSource(ampdoc) {
      /** @protected @const {!./ampdoc-impl.AmpDoc} */
      this.ampdoc = ampdoc;
      /** @private @const {!Object<string, !ReplacementDef>} */

      this.replacements_ = Object.create(null);
      /** @private {boolean} */

      this.initialized_ = false;
      this.getUrlMacroWhitelist_();
    }
    /**
     * Lazily initialize the default replacements.
     * @private
     */


    var _proto = VariableSource.prototype;

    _proto.initialize_ = function initialize_() {
      this.initialize();
      this.initialized_ = true;
    }
    /**
     * Override this method to set all the variables supported by derived class.
     */
    ;

    _proto.initialize = function initialize() {} // Needs to be implemented by derived classes.

    /**
     * Method exists to assist stubbing in tests.
     * @param {string} name
     * @return {!ReplacementDef}
     */
    ;

    _proto.get = function get(name) {
      if (!this.initialized_) {
        this.initialize_();
      }

      return this.replacements_[name];
    }
    /**
     * Sets a synchronous value resolver for the variable with the specified name.
     * The value resolver may optionally take an extra parameter.
     * Can be called in conjunction with setAsync to allow for additional
     * asynchronous resolver where expand will use async and expandSync the sync
     * version.
     * @param {string} varName
     * @param {!SyncResolverDef} syncResolver
     * @return {!VariableSource}
     */
    ;

    _proto.set = function set(varName, syncResolver) {
      (0, _log.devAssert)(varName.indexOf('RETURN') == -1);
      this.replacements_[varName] = this.replacements_[varName] || {
        sync: undefined,
        async: undefined
      };
      this.replacements_[varName].sync = syncResolver;
      return this;
    }
    /**
     * Sets an async value resolver for the variable with the specified name.
     * The value resolver may optionally take an extra parameter.
     * Can be called in conjuction with setAsync to allow for additional
     * asynchronous resolver where expand will use async and expandSync the sync
     * version.
     * @param {string} varName
     * @param {!AsyncResolverDef} asyncResolver
     * @return {!VariableSource}
     */
    ;

    _proto.setAsync = function setAsync(varName, asyncResolver) {
      (0, _log.devAssert)(varName.indexOf('RETURN') == -1);
      this.replacements_[varName] = this.replacements_[varName] || {
        sync: undefined,
        async: undefined
      };
      this.replacements_[varName].async = asyncResolver;
      return this;
    }
    /**
     * Helper method to set both sync and async resolvers.
     * @param {string} varName
     * @param {!SyncResolverDef} syncResolver
     * @param {!AsyncResolverDef} asyncResolver
     * @return {!VariableSource}
     */
    ;

    _proto.setBoth = function setBoth(varName, syncResolver, asyncResolver) {
      return this.set(varName, syncResolver).setAsync(varName, asyncResolver);
    }
    /**
     * Returns a Regular expression that can be used to detect all the variables
     * in a template.
     * @param {!Object<string, *>=} opt_bindings
     * @param {!Object<string, boolean>=} opt_whiteList Optional white list of names
     *   that can be substituted.
     */
    ;

    _proto.getExpr = function getExpr(opt_bindings, opt_whiteList) {
      if (!this.initialized_) {
        this.initialize_();
      }

      var all = Object.assign({}, this.replacements_, opt_bindings);
      return this.buildExpr_(Object.keys(all), opt_whiteList);
    }
    /**
     * @param {!Array<string>} keys
     * @param {!Object<string, boolean>=} opt_whiteList Optional white list of names
     *   that can be substituted.
     * @return {!RegExp}
     * @private
     */
    ;

    _proto.buildExpr_ = function buildExpr_(keys, opt_whiteList) {
      var _this = this;

      // If a whitelist is present, the keys must belong to the whitelist.
      // We filter the keys one last time to ensure no unwhitelisted key is
      // allowed.
      if (this.getUrlMacroWhitelist_()) {
        keys = keys.filter(function (key) {
          return _this.getUrlMacroWhitelist_().includes(key);
        });
      } // If a whitelist is passed into the call to GlobalVariableSource.expand_
      // then we only resolve values contained in the whitelist.


      if (opt_whiteList) {
        keys = keys.filter(function (key) {
          return opt_whiteList[key];
        });
      }

      if (keys.length === 0) {
        var regexThatMatchesNothing = /_^/g; // lgtm [js/regex/unmatchable-caret]

        return regexThatMatchesNothing;
      } // The keys must be sorted to ensure that the longest keys are considered
      // first. This avoids a problem where a RANDOM conflicts with RANDOM_ONE.


      keys.sort(function (s1, s2) {
        return s2.length - s1.length;
      }); // Keys that start with a `$` need to be escaped so that they do not
      // interfere with the regex that is constructed.

      var escaped = keys.map(function (key) {
        if (key[0] === '$') {
          return '\\' + key;
        }

        return key;
      });
      var all = escaped.join('|'); // Match the given replacement patterns, as well as optionally
      // arguments to the replacement behind it in parentheses.
      // Example string that match
      // FOO_BAR
      // FOO_BAR(arg1)
      // FOO_BAR(arg1,arg2)
      // FOO_BAR(arg1, arg2)

      var regexStr = '\\$?(' + all + ')';
      return new RegExp(regexStr, 'g');
    }
    /**
     * @return {?Array<string>} The whitelist of allowed AMP variables. (if provided in
     *     a meta tag).
     * @private
     */
    ;

    _proto.getUrlMacroWhitelist_ = function getUrlMacroWhitelist_() {
      if (this.variableWhitelist_) {
        return this.variableWhitelist_;
      }

      var _this$ampdoc$getRootN = this.ampdoc.getRootNode(),
          head = _this$ampdoc$getRootN.head;

      if (!head) {
        return null;
      } // A meta[name="amp-allowed-url-macros"] tag, if present,
      // contains, in its content attribute, a whitelist of variable substitution.


      var meta = head.querySelector('meta[name="amp-allowed-url-macros"]');

      if (!meta) {
        return null;
      }
      /**
       * The whitelist of variables allowed for variable substitution.
       * @private {?Array<string>}
       */


      this.variableWhitelist_ = meta.getAttribute('content').split(',').map(function (variable) {
        return variable.trim();
      });
      return this.variableWhitelist_;
    };

    return VariableSource;
  }();

  exports.VariableSource = VariableSource;

  },{"../event-helper":31,"../log":51,"../types":121}],103:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.ViewerCidApi = void 0;

  var _services = require("../services");

  var _object = require("../utils/object");

  var _url = require("../url");

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Exposes CID API if provided by the Viewer.
   */
  var ViewerCidApi =
  /*#__PURE__*/
  function () {
    /**
     * Creates an instance of ViewerCidApi.
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     */
    function ViewerCidApi(ampdoc) {
      /** @private {!./ampdoc-impl.AmpDoc} */
      this.ampdoc_ = ampdoc;
      /** @private {!./viewer-impl.Viewer} */

      this.viewer_ = _services.Services.viewerForDoc(this.ampdoc_);

      var _Services$documentInf = _services.Services.documentInfoForDoc(this.ampdoc_),
          canonicalUrl = _Services$documentInf.canonicalUrl;
      /** @private {?string} */


      this.canonicalOrigin_ = canonicalUrl ? (0, _url.parseUrlDeprecated)(canonicalUrl).origin : null;
    }
    /**
     * Resolves to true if Viewer is trusted and supports CID API.
     * @return {!Promise<boolean>}
     */


    var _proto = ViewerCidApi.prototype;

    _proto.isSupported = function isSupported() {
      if (!this.viewer_.hasCapability('cid')) {
        return Promise.resolve(false);
      }

      return this.viewer_.isTrustedViewer();
    }
    /**
     * Returns scoped CID retrieved from the Viewer.
     * @param {string|undefined} apiKey
     * @param {string} scope
     * @return {!Promise<?JsonObject|string|undefined>}
     */
    ;

    _proto.getScopedCid = function getScopedCid(apiKey, scope) {
      var payload = (0, _object.dict)({
        'scope': scope,
        'clientIdApi': !!apiKey,
        'canonicalOrigin': this.canonicalOrigin_
      });

      if (apiKey) {
        payload['apiKey'] = apiKey;
      }

      return this.viewer_.sendMessageAwaitResponse('cid', payload);
    };

    return ViewerCidApi;
  }();

  exports.ViewerCidApi = ViewerCidApi;

  },{"../services":112,"../url":124,"../utils/object":132}],104:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.setViewerVisibilityState = setViewerVisibilityState;
  exports.installViewerServiceForDoc = installViewerServiceForDoc;
  exports.Viewer = exports.Capability = void 0;

  var _promise = require("../utils/promise");

  var _observable = require("../observable");

  var _services = require("../services");

  var _visibilityState = require("../visibility-state");

  var _log = require("../log");

  var _array = require("../utils/array");

  var _url = require("../url");

  var _dom = require("../dom");

  var _object = require("../utils/object");

  var _service = require("../service");

  var _error = require("../error");

  var _string = require("../string");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TAG_ = 'Viewer';
  var SENTINEL_ = '__AMP__';
  /** @enum {string} */

  var Capability = {
    VIEWER_RENDER_TEMPLATE: 'viewerRenderTemplate'
  };
  /**
   * Duration in milliseconds to wait for viewerOrigin to be set before an empty
   * string is returned.
   * @const
   * @private {number}
   */

  exports.Capability = Capability;
  var VIEWER_ORIGIN_TIMEOUT_ = 1000;
  /**
   * Prefixes to remove when trimming a hostname for comparison.
   * @const
   * @private {!RegExp}
   */

  var TRIM_ORIGIN_PATTERN_ = /^(https?:\/\/)((www[0-9]*|web|ftp|wap|home|mobile|amp|m)\.)+/i;
  /**
   * These domains are trusted with more sensitive viewer operations such as
   * propagating the referrer. If you believe your domain should be here,
   * file the issue on GitHub to discuss. The process will be similar
   * (but somewhat more stringent) to the one described in the [3p/README.md](
   * https://github.com/ampproject/amphtml/blob/master/3p/README.md)
   *
   * @export {!Array<!RegExp>}
   */

  var TRUSTED_VIEWER_HOSTS = [
  /**
   * Google domains, including country-codes and subdomains:
   * - google.com
   * - www.google.com
   * - google.co
   * - www.google.co
   * - google.az
   * - www.google.az
   * - google.com.az
   * - www.google.com.az
   * - google.co.az
   * - www.google.co.az
   * - google.cat
   * - www.google.cat
   */
  /(^|\.)google\.(com?|[a-z]{2}|com?\.[a-z]{2}|cat)$/];
  /**
   * @typedef {function(!JsonObject):(!Promise|undefined)}
   */

  var RequestResponderDef;
  /**
   * An AMP representation of the Viewer. This class doesn't do any work itself
   * but instead delegates everything to the actual viewer. This class and the
   * actual Viewer are connected via "AMP.viewer" using three methods:
   * {@link getParam}, {@link receiveMessage} and {@link setMessageDeliverer}.
   * @package Visible for type.
   */

  var Viewer =
  /*#__PURE__*/
  function () {
    /**
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {!Object<string, string>=} opt_initParams
     */
    function Viewer(ampdoc, opt_initParams) {
      var _this = this;

      /** @const {!./ampdoc-impl.AmpDoc} */
      this.ampdoc = ampdoc;
      /** @const {!Window} */

      this.win = ampdoc.win;
      /** @private @const {boolean} */

      this.isIframed_ = (0, _dom.isIframed)(this.win);
      /** @const {!./document-state.DocumentState} */

      this.docState_ = _services.Services.documentStateFor(this.win);
      /** @private {boolean} */

      this.isRuntimeOn_ = true;
      /** @private {boolean} */

      this.overtakeHistory_ = false;
      /** @private {!VisibilityState} */

      this.visibilityState_ = _visibilityState.VisibilityState.VISIBLE;
      /** @private {string} */

      this.viewerVisibilityState_ = this.visibilityState_;
      /** @private {number} */

      this.prerenderSize_ = 1;
      /** @private {!Object<string, !Observable<!JsonObject>>} */

      this.messageObservables_ = (0, _object.map)();
      /** @private {!Object<string, !RequestResponderDef>} */

      this.messageResponders_ = (0, _object.map)();
      /** @private {!Observable<boolean>} */

      this.runtimeOnObservable_ = new _observable.Observable();
      /** @private {!Observable} */

      this.visibilityObservable_ = new _observable.Observable();
      /** @private {!Observable<!JsonObject>} */

      this.broadcastObservable_ = new _observable.Observable();
      /**
       * @private {?function(string, (?JsonObject|string|undefined), boolean):
       *     (Promise<*>|undefined)}
       */

      this.messageDeliverer_ = null;
      /** @private {?string} */

      this.messagingOrigin_ = null;
      /**
       * @private {!Array<!{
       *   eventType: string,
       *   data: (?JsonObject|string|undefined),
       *   awaitResponse: boolean,
       *   responsePromise: (Promise<*>|undefined),
       *   responseResolver: function(*)
       * }>}
       */

      this.messageQueue_ = [];
      /** @const @private {!Object<string, string>} */

      this.params_ = {};
      /**
       * Subset of this.params_ that only contains parameters in the URL hash,
       * e.g. "#foo=bar".
       * @const @private {!Object<string, string>}
       */

      this.hashParams_ = {};
      /** @private {?Promise} */

      this.nextVisiblePromise_ = null;
      /** @private {?function()} */

      this.nextVisibleResolve_ = null;
      /** @private {?time} */

      this.firstVisibleTime_ = null;
      /** @private {?time} */

      this.lastVisibleTime_ = null;
      var deferred = new _promise.Deferred();
      /**
       * This promise might be resolved right away if the current
       * document is already visible. See end of this constructor where we call
       * `this.onVisibilityChange_()`.
       * @private @const {!Promise}
       */

      this.whenFirstVisiblePromise_ = deferred.promise;
      /** @private {?function()} */

      this.whenFirstVisibleResolve_ = deferred.resolve; // Params can be passed either directly in multi-doc environment or via
      // iframe hash/name with hash taking precedence.

      if (opt_initParams) {
        Object.assign(this.params_, opt_initParams);
      } else {
        if (this.win.name && this.win.name.indexOf(SENTINEL_) == 0) {
          parseParams_(this.win.name.substring(SENTINEL_.length), this.params_);
        }

        if (this.win.location.hash) {
          parseParams_(this.win.location.hash, this.hashParams_);
          Object.assign(this.params_, this.hashParams_);
        }
      }

      (0, _log.dev)().fine(TAG_, 'Viewer params:', this.params_);
      this.isRuntimeOn_ = !parseInt(this.params_['off'], 10);
      (0, _log.dev)().fine(TAG_, '- runtimeOn:', this.isRuntimeOn_);
      this.overtakeHistory_ = !!(parseInt(this.params_['history'], 10) || this.overtakeHistory_);
      (0, _log.dev)().fine(TAG_, '- history:', this.overtakeHistory_);
      this.setVisibilityState_(this.params_['visibilityState']);
      (0, _log.dev)().fine(TAG_, '- visibilityState:', this.getVisibilityState());
      this.prerenderSize_ = parseInt(this.params_['prerenderSize'], 10) || this.prerenderSize_;
      (0, _log.dev)().fine(TAG_, '- prerenderSize:', this.prerenderSize_);
      /**
       * Whether the AMP document is embedded in a Chrome Custom Tab.
       * @private {?boolean}
       */

      this.isCctEmbedded_ = null;
      /**
       * Whether the AMP document was served by a proxy.
       * @private @const {boolean}
       */

      this.isProxyOrigin_ = (0, _url.isProxyOrigin)((0, _url.parseUrlDeprecated)(this.ampdoc.win.location.href));
      /** @private {boolean} */

      this.hasBeenVisible_ = this.isVisible(); // Wait for document to become visible.

      this.docState_.onVisibilityChanged(this.recheckVisibilityState_.bind(this));
      var messagingDeferred = new _promise.Deferred();
      /** @const @private {!Function} */

      this.messagingReadyResolver_ = messagingDeferred.resolve;
      /** @const @private {?Promise} */

      this.messagingReadyPromise_ = this.initMessagingChannel_(messagingDeferred.promise);
      /** @private {?Promise<boolean>} */

      this.isTrustedViewer_ = null;
      /** @private {?Promise<string>} */

      this.viewerOrigin_ = null;
      /** @private {string} */

      this.unconfirmedReferrerUrl_ = this.isEmbedded() && 'referrer' in this.params_ && this.isTrustedAncestorOrigins_() !== false ? this.params_['referrer'] : this.win.document.referrer;
      /** @const @private {!Promise<string>} */

      this.referrerUrl_ = new Promise(function (resolve) {
        if (_this.isEmbedded() && 'referrer' in _this.params_) {
          // Viewer override, but only for whitelisted viewers. Only allowed for
          // iframed documents.
          _this.isTrustedViewer().then(function (isTrusted) {
            if (isTrusted) {
              resolve(_this.params_['referrer']);
            } else {
              resolve(_this.win.document.referrer);

              if (_this.unconfirmedReferrerUrl_ != _this.win.document.referrer) {
                (0, _log.dev)().expectedError(TAG_, 'Untrusted viewer referrer override: ' + _this.unconfirmedReferrerUrl_ + ' at ' + _this.messagingOrigin_);
                _this.unconfirmedReferrerUrl_ = _this.win.document.referrer;
              }
            }
          });
        } else {
          resolve(_this.win.document.referrer);
        }
      });
      /** @private {string} */

      this.resolvedViewerUrl_ = (0, _url.removeFragment)(this.win.location.href || '');
      /** @const @private {!Promise<string>} */

      this.viewerUrl_ = new Promise(function (resolve) {
        /** @const {string} */
        var viewerUrlOverride = _this.params_['viewerUrl'];

        if (_this.isEmbedded() && viewerUrlOverride) {
          // Viewer override, but only for whitelisted viewers. Only allowed for
          // iframed documents.
          _this.isTrustedViewer().then(function (isTrusted) {
            if (isTrusted) {
              _this.resolvedViewerUrl_ = viewerUrlOverride;
            } else {
              (0, _log.dev)().expectedError(TAG_, 'Untrusted viewer url override: ' + viewerUrlOverride + ' at ' + _this.messagingOrigin_);
            }

            resolve(_this.resolvedViewerUrl_);
          });
        } else {
          resolve(_this.resolvedViewerUrl_);
        }
      }); // Remove hash when we have an incoming click tracking string
      // (see impression.js).

      if (this.params_['click']) {
        var newUrl = (0, _url.removeFragment)(this.win.location.href);

        if (newUrl != this.win.location.href && this.win.history.replaceState) {
          // Persist the hash that we removed has location.originalHash.
          // This is currently used by mode.js to infer development mode.
          if (!this.win.location.originalHash) {
            this.win.location.originalHash = this.win.location.hash;
          }

          this.win.history.replaceState({}, '', newUrl);
          delete this.hashParams_['click'];
          (0, _log.dev)().fine(TAG_, 'replace fragment:' + this.win.location.href);
        }
      } // Check if by the time the `Viewer`
      // instance is constructed, the document is already `visible`.


      this.recheckVisibilityState_();
      this.onVisibilityChange_(); // This fragment may get cleared by impression tracking. If so, it will be
      // restored afterward.

      this.whenFirstVisible().then(function () {
        _this.maybeUpdateFragmentForCct();
      });
    }
    /**
     * Initialize messaging channel with Viewer host.
     * This promise will resolve when communications channel has been
     * established or timeout in 20 seconds. The timeout is needed to avoid
     * this promise becoming a memory leak with accumulating undelivered
     * messages. The promise is only available when the document is embedded.
     *
     * @param {!Promise} messagingPromise
     * @return {?Promise}
     * @private
     */


    var _proto = Viewer.prototype;

    _proto.initMessagingChannel_ = function initMessagingChannel_(messagingPromise) {
      var isEmbedded = !!(this.isIframed_ && !this.win.AMP_TEST_IFRAME // Checking param "origin", as we expect all viewers to provide it.
      // See https://github.com/ampproject/amphtml/issues/4183
      // There appears to be a bug under investigation where the
      // origin is sometimes failed to be detected. Since failure mode
      // if we fail to initialize communication is very bad, we also check
      // for visibilityState.
      // After https://github.com/ampproject/amphtml/issues/6070
      // is fixed we should probably only keep the amp_js_v check here.
      && (this.params_['origin'] || this.params_['visibilityState'] // Parent asked for viewer JS. We must be embedded.
      || this.win.location.search.indexOf('amp_js_v') != -1) || this.isWebviewEmbedded() || this.isCctEmbedded() || !this.ampdoc.isSingleDoc());

      if (!isEmbedded) {
        return null;
      }

      return _services.Services.timerFor(this.win).timeoutPromise(20000, messagingPromise).catch(function (reason) {
        var error = getChannelError(
        /** @type {!Error|string|undefined} */
        reason);
        (0, _error.reportError)(error);
        throw error;
      });
    }
    /**
     * Handler for visibility change.
     * @private
     */
    ;

    _proto.onVisibilityChange_ = function onVisibilityChange_() {
      if (this.isVisible()) {
        var now = Date.now();

        if (!this.firstVisibleTime_) {
          this.firstVisibleTime_ = now;
        }

        this.lastVisibleTime_ = now;
        this.hasBeenVisible_ = true;
        this.whenFirstVisibleResolve_();
        this.whenNextVisibleResolve_();
      }

      this.visibilityObservable_.fire();
    }
    /**
     * Returns the value of a viewer's startup parameter with the specified
     * name or "undefined" if the parameter wasn't defined at startup time.
     * @param {string} name
     * @return {string|undefined}
     * @export
     */
    ;

    _proto.getParam = function getParam(name) {
      return this.params_[name];
    }
    /**
     * Viewers can communicate their "capabilities" and this method allows
     * checking them.
     * @param {string} name Of the capability.
     * @return {boolean}
     */
    ;

    _proto.hasCapability = function hasCapability(name) {
      var capabilities = this.params_['cap'];

      if (!capabilities) {
        return false;
      } // TODO(@cramforce): Consider caching the split.


      return capabilities.split(',').indexOf(name) != -1;
    }
    /**
     * Whether the document is embedded in a viewer.
     * @return {boolean}
     */
    ;

    _proto.isEmbedded = function isEmbedded() {
      return !!this.messagingReadyPromise_;
    }
    /**
     * Whether the document is embedded in a webview.
     * @return {boolean}
     */
    ;

    _proto.isWebviewEmbedded = function isWebviewEmbedded() {
      return !this.isIframed_ && this.params_['webview'] == '1';
    }
    /**
     * Whether the document is embedded in a Chrome Custom Tab.
     * @return {boolean}
     */
    ;

    _proto.isCctEmbedded = function isCctEmbedded() {
      if (this.isCctEmbedded_ != null) {
        return this.isCctEmbedded_;
      }

      this.isCctEmbedded_ = false;

      if (!this.isIframed_) {
        var queryParams = (0, _url.parseQueryString)(this.win.location.search);
        this.isCctEmbedded_ = queryParams['amp_gsa'] === '1' && (0, _string.startsWith)(queryParams['amp_js_v'] || '', 'a');
      }

      return this.isCctEmbedded_;
    }
    /**
     * Whether the document was served by a proxy.
     * @return {boolean}
     */
    ;

    _proto.isProxyOrigin = function isProxyOrigin() {
      return this.isProxyOrigin_;
    }
    /**
     * Update the URL fragment with data needed to support custom tabs. This will
     * not clear query string parameters, but will clear the fragment.
     */
    ;

    _proto.maybeUpdateFragmentForCct = function maybeUpdateFragmentForCct() {
      if (!this.isCctEmbedded()) {
        return;
      } // CCT only works with versions of Chrome that support the history API.


      if (!this.win.history.replaceState) {
        return;
      }

      var sourceOrigin = (0, _url.getSourceOrigin)(this.win.location.href);

      var _Services$documentInf = _services.Services.documentInfoForDoc(this.ampdoc),
          canonicalUrl = _Services$documentInf.canonicalUrl;

      var canonicalSourceOrigin = (0, _url.getSourceOrigin)(canonicalUrl);

      if (this.hasRoughlySameOrigin_(sourceOrigin, canonicalSourceOrigin)) {
        this.hashParams_['ampshare'] = canonicalUrl;
        this.win.history.replaceState({}, '', '#' + (0, _url.serializeQueryString)(
        /** @type {!JsonObject} */
        this.hashParams_));
      }
    }
    /**
     * Compares URLs to determine if they match once common subdomains are
     * removed. Everything else must match.
     * @param {string} first Origin to compare.
     * @param {string} second Origin to compare.
     * @return {boolean} Whether the origins match without subdomains.
     * @private
     */
    ;

    _proto.hasRoughlySameOrigin_ = function hasRoughlySameOrigin_(first, second) {
      var trimOrigin = function trimOrigin(origin) {
        if (origin.split('.').length > 2) {
          return origin.replace(TRIM_ORIGIN_PATTERN_, '$1');
        }

        return origin;
      };

      return trimOrigin(first) == trimOrigin(second);
    }
    /**
     * @return {boolean}
     */
    ;

    _proto.isRuntimeOn = function isRuntimeOn() {
      return this.isRuntimeOn_;
    }
    /**
     */
    ;

    _proto.toggleRuntime = function toggleRuntime() {
      this.isRuntimeOn_ = !this.isRuntimeOn_;
      (0, _log.dev)().fine(TAG_, 'Runtime state:', this.isRuntimeOn_);
      this.runtimeOnObservable_.fire(this.isRuntimeOn_);
    }
    /**
     * @param {function(boolean)} handler
     * @return {!UnlistenDef}
     */
    ;

    _proto.onRuntimeState = function onRuntimeState(handler) {
      return this.runtimeOnObservable_.add(handler);
    }
    /**
     * Whether the viewer overtakes the history for AMP document. If yes,
     * the viewer must implement history messages "pushHistory" and "popHistory"
     * and emit message "historyPopped"
     * @return {boolean}
     */
    ;

    _proto.isOvertakeHistory = function isOvertakeHistory() {
      return this.overtakeHistory_;
    }
    /**
     * Returns visibility state configured by the viewer.
     * See {@link isVisible}.
     * @return {!VisibilityState}
     * TODO(dvoytenko, #5285): Move public API to AmpDoc.
     */
    ;

    _proto.getVisibilityState = function getVisibilityState() {
      return this.visibilityState_;
    }
    /** @private */
    ;

    _proto.recheckVisibilityState_ = function recheckVisibilityState_() {
      this.setVisibilityState_(this.viewerVisibilityState_);
    }
    /**
     * Sets the viewer defined visibility state.
     * @param {string|undefined} state
     * @private
     */
    ;

    _proto.setVisibilityState_ = function setVisibilityState_(state) {
      if (!state) {
        return;
      }

      var oldState = this.visibilityState_;
      state = (0, _log.dev)().assertEnumValue(_visibilityState.VisibilityState, state, 'VisibilityState'); // The viewer is informing us we are not currently active because we are
      // being pre-rendered, or the user swiped to another doc (or closed the
      // viewer). Unfortunately, the viewer sends HIDDEN instead of PRERENDER or
      // INACTIVE, though we know better.

      if (state === _visibilityState.VisibilityState.HIDDEN) {
        state = this.hasBeenVisible_ ? _visibilityState.VisibilityState.INACTIVE : _visibilityState.VisibilityState.PRERENDER;
      }

      this.viewerVisibilityState_ = state;

      if (this.docState_.isHidden() && (state === _visibilityState.VisibilityState.VISIBLE || state === _visibilityState.VisibilityState.PAUSED)) {
        state = _visibilityState.VisibilityState.HIDDEN;
      }

      this.visibilityState_ = state;
      (0, _log.dev)().fine(TAG_, 'visibilitychange event:', this.getVisibilityState());

      if (oldState !== state) {
        this.onVisibilityChange_();
      }
    }
    /**
     * Whether the AMP document currently visible. The reasons why it might not
     * be visible include user switching to another tab, browser running the
     * document in the prerender mode or viewer running the document in the
     * prerender mode.
     * @return {boolean}
     */
    ;

    _proto.isVisible = function isVisible() {
      return this.getVisibilityState() == _visibilityState.VisibilityState.VISIBLE;
    }
    /**
     * Whether the AMP document has been ever visible before. Since the visiblity
     * state of a document can be flipped back and forth we sometimes want to know
     * if a document has ever been visible.
     * @return {boolean}
     */
    ;

    _proto.hasBeenVisible = function hasBeenVisible() {
      return this.hasBeenVisible_;
    }
    /**
     * Returns a Promise that only ever resolved when the current
     * AMP document first becomes visible.
     * @return {!Promise}
     */
    ;

    _proto.whenFirstVisible = function whenFirstVisible() {
      return this.whenFirstVisiblePromise_;
    }
    /**
     * Returns a Promise that resolve when current doc becomes visible.
     * The promise resolves immediately if doc is already visible.
     * @return {!Promise}
     */
    ;

    _proto.whenNextVisible = function whenNextVisible() {
      if (this.isVisible()) {
        return Promise.resolve();
      }

      if (this.nextVisiblePromise_) {
        return this.nextVisiblePromise_;
      }

      var deferred = new _promise.Deferred();
      this.nextVisibleResolve_ = deferred.resolve;
      return this.nextVisiblePromise_ = deferred.promise;
    }
    /**
     * Helper method to be called on visiblity change
     * @private
     */
    ;

    _proto.whenNextVisibleResolve_ = function whenNextVisibleResolve_() {
      if (this.nextVisibleResolve_) {
        this.nextVisibleResolve_();
        this.nextVisibleResolve_ = null;
        this.nextVisiblePromise_ = null;
      }
    }
    /**
     * Returns the time when the document has become visible for the first time.
     * If document has not yet become visible, the returned value is `null`.
     * @return {?time}
     */
    ;

    _proto.getFirstVisibleTime = function getFirstVisibleTime() {
      return this.firstVisibleTime_;
    }
    /**
     * Returns the time when the document has become visible for the last time.
     * If document has not yet become visible, the returned value is `null`.
     * @return {?time}
     */
    ;

    _proto.getLastVisibleTime = function getLastVisibleTime() {
      return this.lastVisibleTime_;
    }
    /**
     * How much the viewer has requested the runtime to prerender the document.
     * The values are in number of screens.
     * @return {number}
     */
    ;

    _proto.getPrerenderSize = function getPrerenderSize() {
      return this.prerenderSize_;
    }
    /**
     * Returns the resolved viewer URL value. It's by default the current page's
     * URL. The trusted viewers are allowed to override this value.
     * @return {string}
     */
    ;

    _proto.getResolvedViewerUrl = function getResolvedViewerUrl() {
      return this.resolvedViewerUrl_;
    }
    /**
     * Returns the promise that will yield the viewer URL value. It's by default
     * the current page's URL. The trusted viewers are allowed to override this
     * value.
     * @return {!Promise<string>}
     * @visibleForTesting
     */
    ;

    _proto.getViewerUrl = function getViewerUrl() {
      return this.viewerUrl_;
    }
    /**
     * Possibly return the messaging origin if set. This would be the origin
     * of the parent viewer.
     * @return {?string}
     */
    ;

    _proto.maybeGetMessagingOrigin = function maybeGetMessagingOrigin() {
      return this.messagingOrigin_;
    }
    /**
     * Returns an unconfirmed "referrer" URL that can be optionally customized by
     * the viewer. Consider using `getReferrerUrl()` instead, which returns the
     * promise that will yield the confirmed "referrer" URL.
     * @return {string}
     */
    ;

    _proto.getUnconfirmedReferrerUrl = function getUnconfirmedReferrerUrl() {
      return this.unconfirmedReferrerUrl_;
    }
    /**
     * Returns the promise that will yield the confirmed "referrer" URL. This
     * URL can be optionally customized by the viewer, but viewer is required
     * to be a trusted viewer.
     * @return {!Promise<string>}
     */
    ;

    _proto.getReferrerUrl = function getReferrerUrl() {
      return this.referrerUrl_;
    }
    /**
     * Whether the viewer has been whitelisted for more sensitive operations
     * such as customizing referrer.
     * @return {!Promise<boolean>}
     */
    ;

    _proto.isTrustedViewer = function isTrustedViewer() {
      var _this2 = this;

      if (!this.isTrustedViewer_) {
        var isTrustedAncestorOrigins = this.isTrustedAncestorOrigins_();
        this.isTrustedViewer_ = isTrustedAncestorOrigins !== undefined ? Promise.resolve(isTrustedAncestorOrigins) : this.messagingReadyPromise_.then(function (origin) {
          return origin ? _this2.isTrustedViewerOrigin_(origin) : false;
        });
      }

      return (
        /** @type {!Promise<boolean>} */
        this.isTrustedViewer_
      );
    }
    /**
     * Whether the viewer is has been whitelisted for more sensitive operations
     * by looking at the ancestorOrigins.
     * @return {boolean|undefined}
     */
    ;

    _proto.isTrustedAncestorOrigins_ = function isTrustedAncestorOrigins_() {
      if (!this.isEmbedded()) {
        // Not embedded in IFrame - can't trust the viewer.
        return false;
      } else if (this.win.location.ancestorOrigins && !this.isWebviewEmbedded() && !this.isCctEmbedded()) {
        // Ancestors when available take precedence. This is the main API used
        // for this determination. Fallback is only done when this API is not
        // supported by the browser.
        return this.win.location.ancestorOrigins.length > 0 && this.isTrustedViewerOrigin_(this.win.location.ancestorOrigins[0]);
      }
    }
    /**
     * Returns the promise that resolves to URL representing the origin of the
     * viewer. If the document is not embedded or if a viewer origin can't be
     * found, empty string is returned.
     * @return {!Promise<string>}
     */
    ;

    _proto.getViewerOrigin = function getViewerOrigin() {
      if (!this.viewerOrigin_) {
        var origin;

        if (!this.isEmbedded()) {
          // Viewer is only determined for iframed documents at this time.
          origin = '';
        } else if (this.win.location.ancestorOrigins && this.win.location.ancestorOrigins.length > 0) {
          origin = this.win.location.ancestorOrigins[0];
        }

        this.viewerOrigin_ = origin !== undefined ? Promise.resolve(origin) : _services.Services.timerFor(this.win).timeoutPromise(VIEWER_ORIGIN_TIMEOUT_, this.messagingReadyPromise_).catch(function () {
          return '';
        });
      }

      return (
        /** @type {!Promise<string>} */
        this.viewerOrigin_
      );
    }
    /**
     * @param {string} urlString
     * @return {boolean}
     * @private
     */
    ;

    _proto.isTrustedViewerOrigin_ = function isTrustedViewerOrigin_(urlString) {
      /** @const {!Location} */
      var url = (0, _url.parseUrlDeprecated)(urlString);
      var protocol = url.protocol; // Mobile WebView x-thread is allowed.

      if (protocol == 'x-thread:') {
        return true;
      }

      if (protocol != 'https:') {
        // Non-https origins are never trusted.
        return false;
      }

      return TRUSTED_VIEWER_HOSTS.some(function (th) {
        return th.test(url.hostname);
      });
    }
    /**
     * Adds a "visibilitychange" event listener for viewer events. The
     * callback can check {@link isVisible} and {@link getPrefetchCount}
     * methods for more info.
     * @param {function()} handler
     * @return {!UnlistenDef}
     */
    ;

    _proto.onVisibilityChanged = function onVisibilityChanged(handler) {
      return this.visibilityObservable_.add(handler);
    }
    /**
     * Adds a eventType listener for viewer events.
     * @param {string} eventType
     * @param {function(!JsonObject)} handler
     * @return {!UnlistenDef}
     */
    ;

    _proto.onMessage = function onMessage(eventType, handler) {
      var observable = this.messageObservables_[eventType];

      if (!observable) {
        observable = new _observable.Observable();
        this.messageObservables_[eventType] = observable;
      }

      return observable.add(handler);
    }
    /**
     * Adds a eventType listener for viewer events.
     * @param {string} eventType
     * @param {!RequestResponderDef} responder
     * @return {!UnlistenDef}
     */
    ;

    _proto.onMessageRespond = function onMessageRespond(eventType, responder) {
      var _this3 = this;

      this.messageResponders_[eventType] = responder;
      return function () {
        if (_this3.messageResponders_[eventType] === responder) {
          delete _this3.messageResponders_[eventType];
        }
      };
    }
    /**
     * Requests AMP document to receive a message from Viewer.
     * @param {string} eventType
     * @param {!JsonObject} data
     * @param {boolean} unusedAwaitResponse
     * @return {(!Promise<*>|undefined)}
     * @export
     */
    ;

    _proto.receiveMessage = function receiveMessage(eventType, data, unusedAwaitResponse) {
      if (eventType == 'visibilitychange') {
        if (data['prerenderSize'] !== undefined) {
          this.prerenderSize_ = data['prerenderSize'];
          (0, _log.dev)().fine(TAG_, '- prerenderSize change:', this.prerenderSize_);
        }

        this.setVisibilityState_(data['state']);
        return Promise.resolve();
      }

      if (eventType == 'broadcast') {
        this.broadcastObservable_.fire(
        /** @type {!JsonObject|undefined} */
        data);
        return Promise.resolve();
      }

      var observable = this.messageObservables_[eventType];

      if (observable) {
        observable.fire(data);
      }

      var responder = this.messageResponders_[eventType];

      if (responder) {
        return responder(data);
      } else if (observable) {
        return Promise.resolve();
      }

      (0, _log.dev)().fine(TAG_, 'unknown message:', eventType);
      return undefined;
    }
    /**
     * Provides a message delivery mechanism by which AMP document can send
     * messages to the viewer.
     * @param {function(string, (?JsonObject|string|undefined), boolean):
     *     (!Promise<*>|undefined)} deliverer
     * @param {string} origin
     * @export
     */
    ;

    _proto.setMessageDeliverer = function setMessageDeliverer(deliverer, origin) {
      var _this4 = this;

      if (this.messageDeliverer_) {
        throw new Error('message channel can only be initialized once');
      }

      if (origin == null) {
        throw new Error('message channel must have an origin');
      }

      (0, _log.dev)().fine(TAG_, 'message channel established with origin: ', origin);
      this.messageDeliverer_ = deliverer;
      this.messagingOrigin_ = origin;
      this.messagingReadyResolver_(origin);

      if (this.messageQueue_.length > 0) {
        var queue = this.messageQueue_.slice(0);
        this.messageQueue_ = [];
        queue.forEach(function (message) {
          var responsePromise = _this4.messageDeliverer_(message.eventType, message.data, message.awaitResponse);

          if (message.awaitResponse) {
            message.responseResolver(responsePromise);
          }
        });
      }
    }
    /**
     * Sends the message to the viewer without waiting for any response.
     * If cancelUnsent is true, the previous message of the same message type will
     * be canceled.
     *
     * This is a restricted API.
     *
     * @param {string} eventType
     * @param {?JsonObject|string|undefined} data
     * @param {boolean=} cancelUnsent
     */
    ;

    _proto.sendMessage = function sendMessage(eventType, data, cancelUnsent) {
      if (cancelUnsent === void 0) {
        cancelUnsent = false;
      }

      this.sendMessageInternal_(eventType, data, cancelUnsent, false);
    }
    /**
     * Sends the message to the viewer and wait for response.
     * If cancelUnsent is true, the previous message of the same message type will
     * be canceled.
     *
     * This is a restricted API.
     *
     * @param {string} eventType
     * @param {?JsonObject|string|undefined} data
     * @param {boolean=} cancelUnsent
     * @return {!Promise<(?JsonObject|string|undefined)>} the response promise
     */
    ;

    _proto.sendMessageAwaitResponse = function sendMessageAwaitResponse(eventType, data, cancelUnsent) {
      if (cancelUnsent === void 0) {
        cancelUnsent = false;
      }

      return this.sendMessageInternal_(eventType, data, cancelUnsent, true);
    }
    /**
     * Sends the message to the viewer.
     *
     * @param {string} eventType
     * @param {?JsonObject|string|undefined} data
     * @param {boolean} cancelUnsent
     * @param {boolean} awaitResponse
     * @return {!Promise<(?JsonObject|string|undefined)>} the response promise
     */
    ;

    _proto.sendMessageInternal_ = function sendMessageInternal_(eventType, data, cancelUnsent, awaitResponse) {
      var _this5 = this;

      if (this.messageDeliverer_) {
        // Certain message deliverers return fake "Promise" instances called
        // "Thenables". Convert from these values into trusted Promise instances,
        // assimilating with the resolved (or rejected) internal value.
        return (
          /** @type {!Promise<?JsonObject|string|undefined>} */
          (0, _promise.tryResolve)(function () {
            return _this5.messageDeliverer_(eventType,
            /** @type {?JsonObject|string|undefined} */
            data, awaitResponse);
          })
        );
      }

      if (!this.messagingReadyPromise_) {
        if (awaitResponse) {
          return Promise.reject(getChannelError());
        } else {
          return Promise.resolve();
        }
      }

      if (!cancelUnsent) {
        return this.messagingReadyPromise_.then(function () {
          return _this5.messageDeliverer_(eventType, data, awaitResponse);
        });
      }

      var found = (0, _array.findIndex)(this.messageQueue_, function (m) {
        return m.eventType == eventType;
      });
      var message;

      if (found != -1) {
        message = this.messageQueue_.splice(found, 1)[0];
        message.data = data;
        message.awaitResponse = message.awaitResponse || awaitResponse;
      } else {
        var deferred = new _promise.Deferred();
        var responsePromise = deferred.promise,
            responseResolver = deferred.resolve;
        message = {
          eventType: eventType,
          data: data,
          awaitResponse: awaitResponse,
          responsePromise: responsePromise,
          responseResolver: responseResolver
        };
      }

      this.messageQueue_.push(message);
      return message.responsePromise;
    }
    /**
     * Broadcasts a message to all other AMP documents under the same viewer. It
     * will attempt to deliver messages when the messaging channel has been
     * established, but it will not fail if the channel is timed out.
     *
     * @param {!JsonObject} message
     * @return {!Promise<boolean>} a Promise of success or not
     */
    ;

    _proto.broadcast = function broadcast(message) {
      if (!this.messagingReadyPromise_) {
        // Messaging is not expected.
        return Promise.resolve(false);
      }

      return this.sendMessageInternal_('broadcast', message, false, false).then(function () {
        return true;
      }, function () {
        return false;
      });
    }
    /**
     * Registers receiver for the broadcast events.
     * @param {function(!JsonObject)} handler
     * @return {!UnlistenDef}
     */
    ;

    _proto.onBroadcast = function onBroadcast(handler) {
      return this.broadcastObservable_.add(handler);
    }
    /**
     * Resolves when there is a messaging channel established with the viewer.
     * Will be null if no messaging is needed like in an non-embedded document.
     * Deprecated: do not use. sendMessage and sendMessageAwaitResponse already
     *             wait for messaging channel ready.
     * @return {?Promise}
     */
    ;

    _proto.whenMessagingReady = function whenMessagingReady() {
      return this.messagingReadyPromise_;
    }
    /**
     * Replace the document url with the viewer provided new replaceUrl.
     * @param {?string} newUrl
     */
    ;

    _proto.replaceUrl = function replaceUrl(newUrl) {
      if (!newUrl || !this.ampdoc.isSingleDoc() || !this.win.history.replaceState) {
        return;
      }

      try {
        // The origin and source origin must match.
        var url = (0, _url.parseUrlDeprecated)(this.win.location.href);
        var replaceUrl = (0, _url.parseUrlDeprecated)((0, _url.removeFragment)(newUrl) + this.win.location.hash);

        if (url.origin == replaceUrl.origin && (0, _url.getSourceOrigin)(url) == (0, _url.getSourceOrigin)(replaceUrl)) {
          this.win.history.replaceState({}, '', replaceUrl.href);
          this.win.location.originalHref = url.href;
          (0, _log.dev)().fine(TAG_, 'replace url:' + replaceUrl.href);
        }
      } catch (e) {
        (0, _log.dev)().error(TAG_, 'replaceUrl failed', e);
      }
    };

    return Viewer;
  }();
  /**
   * Parses the viewer parameters as a string.
   *
   * Visible for testing only.
   *
   * @param {string} str
   * @param {!Object<string, string>} allParams
   * @private
   */


  exports.Viewer = Viewer;

  function parseParams_(str, allParams) {
    var params = (0, _url.parseQueryString)(str);

    for (var k in params) {
      allParams[k] = params[k];
    }
  }
  /**
   * Creates an error for the case where a channel cannot be established.
   * @param {*=} opt_reason
   * @return {!Error}
   */


  function getChannelError(opt_reason) {
    if (opt_reason instanceof Error) {
      opt_reason = (0, _log.duplicateErrorIfNecessary)(opt_reason);
      opt_reason.message = 'No messaging channel: ' + opt_reason.message;
      return opt_reason;
    }

    return new Error('No messaging channel: ' + opt_reason);
  }
  /**
   * Sets the viewer visibility state. This calls is restricted to runtime only.
   * @param {!Viewer} viewer
   * @param {!VisibilityState} state
   * @restricted
   */


  function setViewerVisibilityState(viewer, state) {
    viewer.setVisibilityState_(state);
  }
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @param {!Object<string, string>=} opt_initParams
   */


  function installViewerServiceForDoc(ampdoc, opt_initParams) {
    (0, _service.registerServiceBuilderForDoc)(ampdoc, 'viewer', function () {
      return new Viewer(ampdoc, opt_initParams);
    },
    /* opt_instantiate */
    true);
  }

  },{"../dom":26,"../error":29,"../log":51,"../observable":54,"../service":71,"../services":112,"../string":116,"../url":124,"../utils/array":125,"../utils/object":132,"../utils/promise":134,"../visibility-state":139}],105:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.ViewportBindingDef = void 0;

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * ViewportBindingDef is an interface that defines an underlying technology
   * behind the {@link Viewport}.
   * @interface
   */
  var ViewportBindingDef =
  /*#__PURE__*/
  function () {
    function ViewportBindingDef() {}

    var _proto = ViewportBindingDef.prototype;

    /**
     * Called before a first AMP element is added to resources. The final
     * preparations must be completed here. Called in the mutate context.
     */
    _proto.ensureReadyForElements = function ensureReadyForElements() {}
    /**
     * Add listeners for global resources.
     */
    ;

    _proto.connect = function connect() {}
    /**
     * Remove listeners for global resources.
     */
    ;

    _proto.disconnect = function disconnect() {}
    /**
     * Returns the width of top border if this type of viewport needs border
     * offsetting. This is currently only needed for iOS to avoid scroll freeze.
     * @return {number}
     */
    ;

    _proto.getBorderTop = function getBorderTop() {}
    /**
     * Whether the binding requires fixed elements to be transfered to a
     * independent fixed layer.
     * @return {boolean}
     */
    ;

    _proto.requiresFixedLayerTransfer = function requiresFixedLayerTransfer() {}
    /**
     * Whether the binding supports fix-positioned elements.
     * @return {boolean}
     */
    ;

    _proto.supportsPositionFixed = function supportsPositionFixed() {}
    /**
     * Register a callback for scroll events.
     * @param {function()} unusedCallback
     */
    ;

    _proto.onScroll = function onScroll(unusedCallback) {}
    /**
     * Register a callback for resize events.
     * @param {function()} unusedCallback
     */
    ;

    _proto.onResize = function onResize(unusedCallback) {}
    /**
     * Updates binding with the new padding.
     * @param {number} unusedPaddingTop
     */
    ;

    _proto.updatePaddingTop = function updatePaddingTop(unusedPaddingTop) {}
    /**
     * Updates binding with the new padding when hiding viewer header.
     * @param {boolean} unusedTransient
     * @param {number} unusedLastPaddingTop
     */
    ;

    _proto.hideViewerHeader = function hideViewerHeader(unusedTransient, unusedLastPaddingTop) {}
    /**
     * Updates binding with the new padding when showing viewer header.
     * @param {boolean} unusedTransient
     * @param {number} unusedPaddingTop
     */
    ;

    _proto.showViewerHeader = function showViewerHeader(unusedTransient, unusedPaddingTop) {}
    /**
     * Disable the scrolling by setting overflow: hidden.
     * Should only be used for temporarily disabling scroll.
     */
    ;

    _proto.disableScroll = function disableScroll() {}
    /**
     * Reset the scrolling by removing overflow: hidden.
     */
    ;

    _proto.resetScroll = function resetScroll() {}
    /**
     * Updates the viewport whether it's currently in the lightbox or a normal
     * mode.
     * @param {boolean} unusedLightboxMode
     * @return {!Promise}
     */
    ;

    _proto.updateLightboxMode = function updateLightboxMode(unusedLightboxMode) {}
    /**
     * Returns the size of the viewport.
     * @return {!{width: number, height: number}}
     */
    ;

    _proto.getSize = function getSize() {}
    /**
     * Returns the top scroll position for the viewport.
     * @return {number}
     */
    ;

    _proto.getScrollTop = function getScrollTop() {}
    /**
     * Sets scroll top position to the specified value or the nearest possible.
     * @param {number} unusedScrollTop
     */
    ;

    _proto.setScrollTop = function setScrollTop(unusedScrollTop) {}
    /**
     * Returns the left scroll position for the viewport.
     * @return {number}
     */
    ;

    _proto.getScrollLeft = function getScrollLeft() {}
    /**
     * Returns the scroll width of the content of the document.
     * @return {number}
     */
    ;

    _proto.getScrollWidth = function getScrollWidth() {}
    /**
     * Returns the scroll height of the content of the document, including the
     * padding top for the viewer header.
     * The scrollHeight will be the viewport height if there's not enough content
     * to fill up the viewport.
     * @return {number}
     */
    ;

    _proto.getScrollHeight = function getScrollHeight() {}
    /**
     * Returns the height of the content of the document, including the
     * padding top for the viewer header.
     * contentHeight will match scrollHeight in all cases unless the viewport is
     * taller than the content.
     * @return {number}
     */
    ;

    _proto.getContentHeight = function getContentHeight() {}
    /**
     * Resource manager signals to the viewport that content height is changed
     * and some action may need to be taken.
     * @restricted Use is restricted due to potentially very heavy performance
     *   impact. Can only be called when not actively scrolling.
     */
    ;

    _proto.contentHeightChanged = function contentHeightChanged() {}
    /**
     * Returns the rect of the element within the document.
     * @param {!Element} unusedEl
     * @param {number=} unusedScrollLeft Optional arguments that the caller may
     *     pass in, if they cached these values and would like to avoid
     *     remeasure. Requires appropriate updating the values on scroll.
     * @param {number=} unusedScrollTop Same comment as above.
     * @return {!../../layout-rect.LayoutRectDef}
     */
    ;

    _proto.getLayoutRect = function getLayoutRect(unusedEl, unusedScrollLeft, unusedScrollTop) {}
    /**
     * Returns the client rect of the current window.
     * @return {Promise<null>|Promise<!../../layout-rect.LayoutRectDef>}
     */
    ;

    _proto.getRootClientRectAsync = function getRootClientRectAsync() {}
    /**
     * Returns the element considered the root scroller for this binding.
     * @return {!Element}
     */
    ;

    _proto.getScrollingElement = function getScrollingElement() {}
    /**
     * Whether the root scroller is a native root scroller (behaves like a
     * viewport), or an overflow scroller (scrolls like an element).
     * @return {boolean}
     */
    ;

    _proto.getScrollingElementScrollsLikeViewport = function getScrollingElementScrollsLikeViewport() {};

    return ViewportBindingDef;
  }();

  exports.ViewportBindingDef = ViewportBindingDef;

  },{}],106:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.ViewportBindingIosEmbedShadowRoot_ = void 0;

  var _observable = require("../../observable");

  var _services = require("../../services");

  var _viewportBindingDef = require("./viewport-binding-def");

  var _style = require("../../style");

  var _log = require("../../log");

  var _staticTemplate = require("../../static-template");

  var _experiments = require("../../experiments");

  var _layoutRect = require("../../layout-rect");

  var _dom = require("../../dom");

  var _documentReady = require("../../document-ready");

  function _templateObject() {
    var data = _taggedTemplateLiteralLoose(["\n      <div id=\"i-amphtml-scroller\">\n        <div id=\"i-amphtml-body-wrapper\">\n          <slot></slot>\n        </div>\n      </div>"]);

    _templateObject = function _templateObject() {
      return data;
    };

    return data;
  }

  function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

  var TAG_ = 'Viewport';
  /**
   * This includes only styles that are necessary for layout, but not normally
   * inherited. The inherited styles, such as `font`, are inherited automatically.
   * The main styles that need to be additionally handled are `display`,
   * `padding`, etc.
   */

  var INHERIT_STYLES = ['align-content', 'align-items', 'align-self', 'alignment-baseline', 'backface-visibility', 'box-sizing', 'column-count', 'column-fill', 'column-gap', 'column-rule', 'column-span', 'column-width', 'columns', 'display', 'flex', 'flex-basis', 'flex-direction', 'flex-flow', 'flex-grow', 'flex-shrink', 'flex-wrap', 'gap', 'grid', 'grid-area', 'grid-auto-columns', 'grid-auto-flow', 'grid-auto-rows', 'grid-column', 'grid-gap', 'grid-row', 'grid-template', 'justify-content', 'justify-items', 'justify-self', 'margin', 'order', 'padding', 'perspective', 'perspective-origin', 'place-content', 'place-items', 'place-self', 'table-layout'];
  /**
   * Implementation of ViewportBindingDef based for iframed iOS case where iframes
   * are not scrollable. Scrolling accomplished here by attaching shadow root,
   * which distributes all body children inside a scrollable `<div>`.
   *
   * @implements {ViewportBindingDef}
   * @visibleForTesting
   */

  var ViewportBindingIosEmbedShadowRoot_ =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function ViewportBindingIosEmbedShadowRoot_(win) {
      var _this = this;

      /** @const {!Window} */
      this.win = win;
      /** @private {!../vsync-impl.Vsync} */

      this.vsync_ = _services.Services.vsyncFor(win);
      var doc = this.win.document;
      var documentElement = doc.documentElement;
      documentElement.classList.add('i-amphtml-ios-embed-sd');

      if ((0, _experiments.isExperimentOn)(win, 'scroll-height-minheight')) {
        documentElement.classList.add('i-amphtml-body-minheight');
      }

      var scroller = (0, _staticTemplate.htmlFor)(doc)(_templateObject());
      /** @private @const {!Element} */

      this.scroller_ = scroller; // Wrapper for the `<body>`.

      /** @private @const {!Element} */

      this.wrapper_ = (0, _log.dev)().assertElement(scroller.firstElementChild); // Notice that the -webkit-overflow-scrolling is set later.

      (0, _style.setInitialDisplay)(this.scroller_, 'block');
      (0, _style.setImportantStyles)(this.scroller_, {
        'overflow-x': 'hidden',
        'overflow-y': 'auto',
        'position': 'absolute',
        'top': '0',
        'left': '0',
        'right': '0',
        'bottom': '0',
        'margin': '0',
        'width': '100%',
        'box-sizing': 'border-box',
        'padding-top': '0px',
        // Will be updated for top offset.
        // The scroller must have a 1px transparent border for two purposes:
        // (1) to cancel out margin collapse in body's children so that position
        //     absolute element is positioned correctly.
        // (2) to offset scroll adjustment to 1 to avoid scroll freeze problem.
        'border-top': '1px solid transparent'
      });
      (0, _style.setImportantStyles)(this.wrapper_, {
        'overflow': 'visible',
        'position': 'relative',
        // Wrapper must additionally have `will-change: transform` to avoid iOS
        // rendering bug where contents inside the `-webkit-overflow-scrolling`
        // element would occasionally fail to paint. This bug appears to trigger
        // more often when Shadow DOM is involved. The cost of this is relatively
        // low since this only adds one additional layer for the body.
        'will-change': 'transform'
      }); // Other properties will be copied from the `<body>`.

      /** @private @const {!Observable} */

      this.scrollObservable_ = new _observable.Observable();
      /** @private @const {!Observable} */

      this.resizeObservable_ = new _observable.Observable();
      /** @const {function()} */

      this.boundScrollEventListener_ = this.onScrolled_.bind(this);
      /** @const {function()} */

      this.boundResizeEventListener_ = this.onResized_.bind(this);
      /** @private @const {boolean} */

      this.useLayers_ = (0, _experiments.isExperimentOn)(this.win, 'layers');
      /** @private {boolean} */

      this.bodySyncScheduled_ = false; // Setup UI.

      /** @private {boolean} */

      this.setupDone_ = false;
      (0, _dom.waitForBody)(doc, this.setup_.bind(this)); // Set overscroll (`-webkit-overflow-scrolling: touch`) later to avoid
      // iOS rendering bugs. See #8798 for details.

      (0, _documentReady.whenDocumentReady)(doc).then(function () {
        // There's no way to test `-webkit-overflow-scrolling` style on most of
        // browsers. Thus we'll use the `i-amphtml-ios-overscroll` class for
        // testing.
        _this.scroller_.classList.add('i-amphtml-ios-overscroll');

        (0, _style.setImportantStyles)(_this.scroller_, {
          '-webkit-overflow-scrolling': 'touch'
        });
      });
      (0, _log.dev)().fine(TAG_, 'initialized ios-embed-wrapper-sd viewport');
    }
    /** @override */


    var _proto = ViewportBindingIosEmbedShadowRoot_.prototype;

    _proto.ensureReadyForElements = function ensureReadyForElements() {
      this.setup_();
    }
    /** @private */
    ;

    _proto.setup_ = function setup_() {
      if (this.setupDone_) {
        return;
      }

      this.setupDone_ = true; // Embedded scrolling on iOS is rather complicated. IFrames cannot be sized
      // and be scrollable. Sizing iframe by scrolling height has a big negative
      // that "fixed" position is essentially impossible. The only option we
      // found is to reset scrolling on the AMP doc, which wraps the natural BODY
      // children inside the `overflow:auto` element inside the shadow root of the
      // body. For reference, here are related
      // iOS issues (Chrome issues are also listed for reference):
      // - https://code.google.com/p/chromium/issues/detail?id=2891
      // - https://code.google.com/p/chromium/issues/detail?id=157855
      // - https://bugs.webkit.org/show_bug.cgi?id=106133
      // - https://bugs.webkit.org/show_bug.cgi?id=149264

      var doc = this.win.document;
      var body = (0, _log.dev)().assertElement(doc.body, 'body is not available');
      var shadowRoot = body.attachShadow({
        mode: 'open'
      }); // Main slot contained within the wrapper will absorb all undistributed
      // children.

      shadowRoot.appendChild(this.scroller_); // Update body styles and monitor for further changes.

      this.updateBodyStyles_();

      if (this.win.MutationObserver) {
        var bodyObserver = new this.win.MutationObserver(this.updateBodyStyles_.bind(this));
        bodyObserver.observe(body, {
          attributes: true
        });
      } // Make sure the scroll position is adjusted correctly.


      this.onScrolled_();
    }
    /** @private */
    ;

    _proto.updateBodyStyles_ = function updateBodyStyles_() {
      var _this2 = this;

      if (this.bodySyncScheduled_) {
        return;
      }

      var body = this.win.document.body;

      if (!body) {
        return;
      } // Many `<body>` styles are inherited to ensure that layout is preserved.
      // The most important: `display` and related styles.


      var inheritStyles = {};
      this.bodySyncScheduled_ = true;
      this.vsync_.run({
        measure: function measure() {
          var bodyStyles = (0, _style.computedStyle)(_this2.win, body);
          INHERIT_STYLES.forEach(function (style) {
            inheritStyles[style] = bodyStyles[style] || '';
          });
        },
        mutate: function mutate() {
          _this2.bodySyncScheduled_ = false;
          (0, _style.setImportantStyles)(_this2.wrapper_, (0, _style.assertDoesNotContainDisplay)(inheritStyles));
        }
      });
    }
    /** @private */
    ;

    _proto.onResized_ = function onResized_() {
      this.resizeObservable_.fire();
      this.updateBodyStyles_();
    }
    /** @override */
    ;

    _proto.connect = function connect() {
      this.win.addEventListener('resize', this.boundResizeEventListener_);
      this.scroller_.addEventListener('scroll', this.boundScrollEventListener_);
    }
    /** @override */
    ;

    _proto.disconnect = function disconnect() {
      this.win.removeEventListener('resize', this.boundResizeEventListener_);
      this.scroller_.removeEventListener('scroll', this.boundScrollEventListener_);
    }
    /** @override */
    ;

    _proto.getBorderTop = function getBorderTop() {
      // iOS needs an extra pixel to avoid scroll freezing.
      return 1;
    }
    /** @override */
    ;

    _proto.requiresFixedLayerTransfer = function requiresFixedLayerTransfer() {
      return !(0, _experiments.isExperimentOn)(this.win, 'ios-embed-sd-notransfer');
    }
    /** @override */
    ;

    _proto.supportsPositionFixed = function supportsPositionFixed() {
      return true;
    }
    /** @override */
    ;

    _proto.onScroll = function onScroll(callback) {
      this.scrollObservable_.add(callback);
    }
    /** @override */
    ;

    _proto.onResize = function onResize(callback) {
      this.resizeObservable_.add(callback);
    }
    /** @override */
    ;

    _proto.updatePaddingTop = function updatePaddingTop(paddingTop) {
      (0, _style.setImportantStyles)(this.scroller_, {
        'padding-top': (0, _style.px)(paddingTop)
      });
    }
    /** @override */
    ;

    _proto.hideViewerHeader = function hideViewerHeader(transient, unusedLastPaddingTop) {
      if (!transient) {
        this.updatePaddingTop(0);
      }
    }
    /** @override */
    ;

    _proto.showViewerHeader = function showViewerHeader(transient, paddingTop) {
      if (!transient) {
        this.updatePaddingTop(paddingTop);
      }
    }
    /** @override */
    ;

    _proto.disableScroll = function disableScroll() {
      // TODO(jridgewell): Recursively disable scroll
      (0, _style.setImportantStyles)(this.scroller_, {
        'overflow-y': 'hidden',
        'position': 'fixed'
      });
    }
    /** @override */
    ;

    _proto.resetScroll = function resetScroll() {
      // TODO(jridgewell): Recursively disable scroll
      (0, _style.setImportantStyles)(this.scroller_, {
        'overflow-y': 'auto',
        'position': 'absolute'
      });
    }
    /** @override */
    ;

    _proto.updateLightboxMode = function updateLightboxMode(unusedLightboxMode) {
      // The layout is always accurate.
      return Promise.resolve();
    }
    /** @override */
    ;

    _proto.getSize = function getSize() {
      return {
        width: this.win.
        /*OK*/
        innerWidth,
        height: this.win.
        /*OK*/
        innerHeight
      };
    }
    /** @override */
    ;

    _proto.getScrollTop = function getScrollTop() {
      return this.scroller_.
      /*OK*/
      scrollTop;
    }
    /** @override */
    ;

    _proto.getScrollLeft = function getScrollLeft() {
      // The scroller is set to overflow-x: hidden so the document cannot be
      // scrolled horizontally. The scrollLeft will always be 0.
      return 0;
    }
    /** @override */
    ;

    _proto.getScrollWidth = function getScrollWidth() {
      return this.scroller_.
      /*OK*/
      scrollWidth;
    }
    /** @override */
    ;

    _proto.getScrollHeight = function getScrollHeight() {
      return this.scroller_.
      /*OK*/
      scrollHeight;
    }
    /** @override */
    ;

    _proto.getContentHeight = function getContentHeight() {
      // Don't use scrollHeight, since it returns `MAX(viewport_height,
      // document_height)` (we only want the latter), and it doesn't account
      // for margins.
      var bodyWrapper = this.wrapper_;
      var rect = bodyWrapper.
      /*OK*/
      getBoundingClientRect();
      var style = (0, _style.computedStyle)(this.win, bodyWrapper); // The Y-position of any element can be offset by the vertical margin
      // of its first child, and this is _not_ accounted for in `rect.height`.
      // This "top gap" causes smaller than expected contentHeight, so calculate
      // and add it manually. Note that the "top gap" includes any padding-top
      // on ancestor elements and the scroller's border-top. The "bottom gap"
      // remains unaddressed.

      var topGapPlusPaddingAndBorder = rect.top + this.getScrollTop();
      return rect.height + topGapPlusPaddingAndBorder + parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);
    }
    /** @override */
    ;

    _proto.contentHeightChanged = function contentHeightChanged() {
      var _this3 = this;

      if ((0, _experiments.isExperimentOn)(this.win, 'scroll-height-bounce')) {
        // Refresh the overscroll (`-webkit-overflow-scrolling: touch`) to avoid
        // iOS rendering bugs. See #8798 for details.
        this.vsync_.mutate(function () {
          (0, _style.setImportantStyles)(_this3.scroller_, {
            '-webkit-overflow-scrolling': 'auto'
          });

          _this3.vsync_.mutate(function () {
            (0, _style.setImportantStyles)(_this3.scroller_, {
              '-webkit-overflow-scrolling': 'touch'
            });
          });
        });
      }
    }
    /** @override */
    ;

    _proto.getLayoutRect = function getLayoutRect(el, opt_scrollLeft, opt_scrollTop) {
      var b = el.
      /*OK*/
      getBoundingClientRect();

      if (this.useLayers_) {
        return (0, _layoutRect.layoutRectLtwh)(b.left, b.top, b.width, b.height);
      }

      var scrollTop = opt_scrollTop != undefined ? opt_scrollTop : this.getScrollTop();
      var scrollLeft = opt_scrollLeft != undefined ? opt_scrollLeft : this.getScrollLeft();
      return (0, _layoutRect.layoutRectLtwh)(Math.round(b.left + scrollLeft), Math.round(b.top + scrollTop), Math.round(b.width), Math.round(b.height));
    }
    /** @override */
    ;

    _proto.getRootClientRectAsync = function getRootClientRectAsync() {
      return Promise.resolve(null);
    }
    /** @override */
    ;

    _proto.setScrollTop = function setScrollTop(scrollTop) {
      // If scroll top is 0, it's set to 1 to avoid scroll-freeze issue. See
      // `onScrolled_` for more details.
      this.scroller_.
      /*OK*/
      scrollTop = scrollTop || 1;
    }
    /**
     * @param {!Event=} opt_event
     * @private
     */
    ;

    _proto.onScrolled_ = function onScrolled_(opt_event) {
      // Scroll document into a safe position to avoid scroll freeze on iOS.
      // This means avoiding scrollTop to be minimum (0) or maximum value.
      // This is very sad but very necessary. See #330 for more details.
      // Unfortunately, the same is very expensive to do on the bottom, due to
      // costly scrollHeight.
      if (this.scroller_.
      /*OK*/
      scrollTop == 0) {
        this.scroller_.
        /*OK*/
        scrollTop = 1;

        if (opt_event) {
          opt_event.preventDefault();
        }
      }

      if (opt_event) {
        this.scrollObservable_.fire();
      }
    }
    /** @override */
    ;

    _proto.getScrollingElement = function getScrollingElement() {
      return this.scroller_;
    }
    /** @override */
    ;

    _proto.getScrollingElementScrollsLikeViewport = function getScrollingElementScrollsLikeViewport() {
      return false;
    };

    return ViewportBindingIosEmbedShadowRoot_;
  }();

  exports.ViewportBindingIosEmbedShadowRoot_ = ViewportBindingIosEmbedShadowRoot_;

  },{"../../document-ready":24,"../../dom":26,"../../experiments":32,"../../layout-rect":48,"../../log":51,"../../observable":54,"../../services":112,"../../static-template":115,"../../style":118,"./viewport-binding-def":105}],107:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.ViewportBindingIosEmbedWrapper_ = void 0;

  var _observable = require("../../observable");

  var _services = require("../../services");

  var _viewportBindingDef = require("./viewport-binding-def");

  var _style = require("../../style");

  var _log = require("../../log");

  var _experiments = require("../../experiments");

  var _layoutRect = require("../../layout-rect");

  var _dom = require("../../dom");

  var _documentReady = require("../../document-ready");

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TAG_ = 'Viewport';
  /**
   * Implementation of ViewportBindingDef based for iframed iOS case where iframes
   * are not scrollable. Scrolling accomplished here by inserting a scrollable
   * wrapper `<html id="i-amphtml-wrapper">` inside the `<html>` element and
   * reparenting the original `<body>` inside.
   *
   * @implements {ViewportBindingDef}
   * @visibleForTesting
   */

  var ViewportBindingIosEmbedWrapper_ =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function ViewportBindingIosEmbedWrapper_(win) {
      var _this = this;

      /** @const {!Window} */
      this.win = win;
      /** @private {!../vsync-impl.Vsync} */

      this.vsync_ = _services.Services.vsyncFor(win);
      var doc = this.win.document;
      var documentElement = doc.documentElement;
      var topClasses = documentElement.className;
      documentElement.classList.add('i-amphtml-ios-embed');
      var wrapper = doc.createElement('html');
      /** @private @const {!Element} */

      this.wrapper_ = wrapper;
      wrapper.id = 'i-amphtml-wrapper';
      wrapper.className = topClasses;

      if ((0, _experiments.isExperimentOn)(win, 'scroll-height-minheight')) {
        wrapper.classList.add('i-amphtml-body-minheight');
      }
      /** @private @const {!Observable} */


      this.scrollObservable_ = new _observable.Observable();
      /** @private @const {!Observable} */

      this.resizeObservable_ = new _observable.Observable();
      /** @const {function()} */

      this.boundScrollEventListener_ = this.onScrolled_.bind(this);
      /** @const {function()} */

      this.boundResizeEventListener_ = function () {
        return _this.resizeObservable_.fire();
      };
      /** @private @const {boolean} */


      this.useLayers_ = (0, _experiments.isExperimentOn)(this.win, 'layers');
      /** @private {number} */

      this.paddingTop_ = 0; // Setup UI.

      /** @private {boolean} */

      this.setupDone_ = false;
      (0, _dom.waitForBody)(doc, this.setup_.bind(this)); // Set overscroll (`-webkit-overflow-scrolling: touch`) later to avoid
      // iOS rendering bugs. See #8798 for details.

      (0, _documentReady.whenDocumentReady)(doc).then(function () {
        documentElement.classList.add('i-amphtml-ios-overscroll');
      });
      (0, _log.dev)().fine(TAG_, 'initialized ios-embed-wrapper viewport');
    }
    /** @override */


    var _proto = ViewportBindingIosEmbedWrapper_.prototype;

    _proto.ensureReadyForElements = function ensureReadyForElements() {
      this.setup_();
    }
    /** @private */
    ;

    _proto.setup_ = function setup_() {
      if (this.setupDone_) {
        return;
      }

      this.setupDone_ = true; // Embedded scrolling on iOS is rather complicated. IFrames cannot be sized
      // and be scrollable. Sizing iframe by scrolling height has a big negative
      // that "fixed" position is essentially impossible. The only option we
      // found is to reset scrolling on the AMP doc, which wraps the natural BODY
      // inside the `overflow:auto` element. For reference, here are related
      // iOS issues (Chrome issues are also listed for reference):
      // - https://code.google.com/p/chromium/issues/detail?id=2891
      // - https://code.google.com/p/chromium/issues/detail?id=157855
      // - https://bugs.webkit.org/show_bug.cgi?id=106133
      // - https://bugs.webkit.org/show_bug.cgi?id=149264

      var doc = this.win.document;
      var body = (0, _log.dev)().assertElement(doc.body, 'body is not available');
      doc.documentElement.appendChild(this.wrapper_);
      this.wrapper_.appendChild(body); // Redefine `document.body`, otherwise it'd be `null`.

      Object.defineProperty(doc, 'body', {
        get: function get() {
          return body;
        }
      }); // Make sure the scroll position is adjusted correctly.

      this.onScrolled_();
    }
    /** @override */
    ;

    _proto.connect = function connect() {
      this.win.addEventListener('resize', this.boundResizeEventListener_);
      this.wrapper_.addEventListener('scroll', this.boundScrollEventListener_);
    }
    /** @override */
    ;

    _proto.disconnect = function disconnect() {
      this.win.removeEventListener('resize', this.boundResizeEventListener_);
      this.wrapper_.removeEventListener('scroll', this.boundScrollEventListener_);
    }
    /** @override */
    ;

    _proto.getBorderTop = function getBorderTop() {
      // iOS needs an extra pixel to avoid scroll freezing.
      return 1;
    }
    /** @override */
    ;

    _proto.requiresFixedLayerTransfer = function requiresFixedLayerTransfer() {
      return true;
    }
    /** @override */
    ;

    _proto.supportsPositionFixed = function supportsPositionFixed() {
      return true;
    }
    /** @override */
    ;

    _proto.onScroll = function onScroll(callback) {
      this.scrollObservable_.add(callback);
    }
    /** @override */
    ;

    _proto.onResize = function onResize(callback) {
      this.resizeObservable_.add(callback);
    }
    /** @override */
    ;

    _proto.updatePaddingTop = function updatePaddingTop(paddingTop) {
      this.paddingTop_ = paddingTop;
      (0, _style.setImportantStyles)(this.wrapper_, {
        'padding-top': (0, _style.px)(paddingTop)
      });
    }
    /** @override */
    ;

    _proto.hideViewerHeader = function hideViewerHeader(transient, unusedLastPaddingTop) {
      if (!transient) {
        this.updatePaddingTop(0);
      }
    }
    /** @override */
    ;

    _proto.showViewerHeader = function showViewerHeader(transient, paddingTop) {
      if (!transient) {
        this.updatePaddingTop(paddingTop);
      }
    }
    /** @override */
    ;

    _proto.disableScroll = function disableScroll() {
      // TODO(jridgewell): Recursively disable scroll
      this.wrapper_.classList.add('i-amphtml-scroll-disabled');
    }
    /** @override */
    ;

    _proto.resetScroll = function resetScroll() {
      // TODO(jridgewell): Recursively disable scroll
      this.wrapper_.classList.remove('i-amphtml-scroll-disabled');
    }
    /** @override */
    ;

    _proto.updateLightboxMode = function updateLightboxMode(unusedLightboxMode) {
      // The layout is always accurate.
      return Promise.resolve();
    }
    /** @override */
    ;

    _proto.getSize = function getSize() {
      return {
        width: this.win.
        /*OK*/
        innerWidth,
        height: this.win.
        /*OK*/
        innerHeight
      };
    }
    /** @override */
    ;

    _proto.getScrollTop = function getScrollTop() {
      return this.wrapper_.
      /*OK*/
      scrollTop;
    }
    /** @override */
    ;

    _proto.getScrollLeft = function getScrollLeft() {
      // The wrapper is set to overflow-x: hidden so the document cannot be
      // scrolled horizontally. The scrollLeft will always be 0.
      return 0;
    }
    /** @override */
    ;

    _proto.getScrollWidth = function getScrollWidth() {
      return this.wrapper_.
      /*OK*/
      scrollWidth;
    }
    /** @override */
    ;

    _proto.getScrollHeight = function getScrollHeight() {
      return this.wrapper_.
      /*OK*/
      scrollHeight;
    }
    /** @override */
    ;

    _proto.getContentHeight = function getContentHeight() {
      // Don't use scrollHeight, since it returns `MAX(viewport_height,
      // document_height)` (we only want the latter), and it doesn't account
      // for margins.
      var scrollingElement = this.win.document.body;
      var rect = scrollingElement.
      /*OK*/
      getBoundingClientRect();
      var style = (0, _style.computedStyle)(this.win, scrollingElement); // Note: unlike viewport-binding-natural.js, there's no need to calculate
      // the "top gap" since the wrapped body _does_ account for child margins.
      // However, the parent's paddingTop still needs to be added.

      return rect.height + this.paddingTop_ + parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);
    }
    /** @override */
    ;

    _proto.contentHeightChanged = function contentHeightChanged() {
      var _this2 = this;

      if ((0, _experiments.isExperimentOn)(this.win, 'scroll-height-bounce')) {
        // Refresh the overscroll (`-webkit-overflow-scrolling: touch`) to avoid
        // iOS rendering bugs. See #8798 for details.
        var doc = this.win.document;
        var documentElement = doc.documentElement;
        this.vsync_.mutate(function () {
          documentElement.classList.remove('i-amphtml-ios-overscroll');

          _this2.vsync_.mutate(function () {
            documentElement.classList.add('i-amphtml-ios-overscroll');
          });
        });
      }
    }
    /** @override */
    ;

    _proto.getLayoutRect = function getLayoutRect(el, opt_scrollLeft, opt_scrollTop) {
      var b = el.
      /*OK*/
      getBoundingClientRect();

      if (this.useLayers_) {
        return (0, _layoutRect.layoutRectLtwh)(b.left, b.top, b.width, b.height);
      }

      var scrollTop = opt_scrollTop != undefined ? opt_scrollTop : this.getScrollTop();
      var scrollLeft = opt_scrollLeft != undefined ? opt_scrollLeft : this.getScrollLeft();
      return (0, _layoutRect.layoutRectLtwh)(Math.round(b.left + scrollLeft), Math.round(b.top + scrollTop), Math.round(b.width), Math.round(b.height));
    }
    /** @override */
    ;

    _proto.getRootClientRectAsync = function getRootClientRectAsync() {
      return Promise.resolve(null);
    }
    /** @override */
    ;

    _proto.setScrollTop = function setScrollTop(scrollTop) {
      // If scroll top is 0, it's set to 1 to avoid scroll-freeze issue. See
      // `onScrolled_` for more details.
      this.wrapper_.
      /*OK*/
      scrollTop = scrollTop || 1;
    }
    /**
     * @param {!Event=} opt_event
     * @private
     */
    ;

    _proto.onScrolled_ = function onScrolled_(opt_event) {
      // Scroll document into a safe position to avoid scroll freeze on iOS.
      // This means avoiding scrollTop to be minimum (0) or maximum value.
      // This is very sad but very necessary. See #330 for more details.
      // Unfortunately, the same is very expensive to do on the bottom, due to
      // costly scrollHeight.
      if (this.wrapper_.
      /*OK*/
      scrollTop == 0) {
        this.wrapper_.
        /*OK*/
        scrollTop = 1;

        if (opt_event) {
          opt_event.preventDefault();
        }
      }

      if (opt_event) {
        this.scrollObservable_.fire();
      }
    }
    /** @override */
    ;

    _proto.getScrollingElement = function getScrollingElement() {
      return this.wrapper_;
    }
    /** @override */
    ;

    _proto.getScrollingElementScrollsLikeViewport = function getScrollingElementScrollsLikeViewport() {
      return false;
    };

    return ViewportBindingIosEmbedWrapper_;
  }();

  exports.ViewportBindingIosEmbedWrapper_ = ViewportBindingIosEmbedWrapper_;

  },{"../../document-ready":24,"../../dom":26,"../../experiments":32,"../../layout-rect":48,"../../log":51,"../../observable":54,"../../services":112,"../../style":118,"./viewport-binding-def":105}],108:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.ViewportBindingNatural_ = void 0;

  var _observable = require("../../observable");

  var _services = require("../../services");

  var _viewportBindingDef = require("./viewport-binding-def");

  var _style = require("../../style");

  var _log = require("../../log");

  var _experiments = require("../../experiments");

  var _layoutRect = require("../../layout-rect");

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TAG_ = 'Viewport';
  /**
   * Implementation of ViewportBindingDef based on the native window. It assumes
   * that the native window is sized properly and events represent the actual
   * scroll/resize events. This mode is applicable to a standalone document
   * display or when an iframe has a fixed size.
   *
   * Visible for testing.
   *
   * @implements {ViewportBindingDef}
   */

  var ViewportBindingNatural_ =
  /*#__PURE__*/
  function () {
    /**
     * @param {!../ampdoc-impl.AmpDoc} ampdoc
     */
    function ViewportBindingNatural_(ampdoc) {
      var _this = this;

      /** @const {!../ampdoc-impl.AmpDoc} */
      this.ampdoc = ampdoc;
      /** @const {!Window} */

      this.win = ampdoc.win;
      /** @const {!../../service/platform-impl.Platform} */

      this.platform_ = _services.Services.platformFor(this.win);
      /** @private @const {!Observable} */

      this.scrollObservable_ = new _observable.Observable();
      /** @private @const {!Observable} */

      this.resizeObservable_ = new _observable.Observable();
      /** @const {function()} */

      this.boundScrollEventListener_ = function () {
        _this.scrollObservable_.fire();
      };
      /** @const {function()} */


      this.boundResizeEventListener_ = function () {
        return _this.resizeObservable_.fire();
      };
      /** @private @const {boolean} */


      this.useLayers_ = (0, _experiments.isExperimentOn)(this.win, 'layers');
      (0, _log.dev)().fine(TAG_, 'initialized natural viewport');
    }
    /** @override */


    var _proto = ViewportBindingNatural_.prototype;

    _proto.connect = function connect() {
      this.win.addEventListener('scroll', this.boundScrollEventListener_);
      this.win.addEventListener('resize', this.boundResizeEventListener_);
    }
    /** @override */
    ;

    _proto.disconnect = function disconnect() {
      this.win.removeEventListener('scroll', this.boundScrollEventListener_);
      this.win.removeEventListener('resize', this.boundResizeEventListener_);
    }
    /** @override */
    ;

    _proto.ensureReadyForElements = function ensureReadyForElements() {} // Nothing.

    /** @override */
    ;

    _proto.getBorderTop = function getBorderTop() {
      return 0;
    }
    /** @override */
    ;

    _proto.requiresFixedLayerTransfer = function requiresFixedLayerTransfer() {
      return false;
    }
    /** @override */
    ;

    _proto.supportsPositionFixed = function supportsPositionFixed() {
      return true;
    }
    /** @override */
    ;

    _proto.onScroll = function onScroll(callback) {
      this.scrollObservable_.add(callback);
    }
    /** @override */
    ;

    _proto.onResize = function onResize(callback) {
      this.resizeObservable_.add(callback);
    }
    /** @override */
    ;

    _proto.updatePaddingTop = function updatePaddingTop(paddingTop) {
      (0, _style.setImportantStyles)(this.win.document.documentElement, {
        'padding-top': (0, _style.px)(paddingTop)
      });
    }
    /** @override */
    ;

    _proto.hideViewerHeader = function hideViewerHeader(transient, unusedLastPaddingTop) {
      if (!transient) {
        this.updatePaddingTop(0);
      }
    }
    /** @override */
    ;

    _proto.showViewerHeader = function showViewerHeader(transient, paddingTop) {
      if (!transient) {
        this.updatePaddingTop(paddingTop);
      }
    }
    /** @override */
    ;

    _proto.disableScroll = function disableScroll() {
      // TODO(jridgewell): Recursively disable scroll
      this.win.document.documentElement.classList.add('i-amphtml-scroll-disabled');
    }
    /** @override */
    ;

    _proto.resetScroll = function resetScroll() {
      // TODO(jridgewell): Recursively disable scroll
      this.win.document.documentElement.classList.remove('i-amphtml-scroll-disabled');
    }
    /** @override */
    ;

    _proto.updateLightboxMode = function updateLightboxMode(unusedLightboxMode) {
      // The layout is always accurate.
      return Promise.resolve();
    }
    /** @override */
    ;

    _proto.getSize = function getSize() {
      // Prefer window innerWidth/innerHeight but fall back to
      // documentElement clientWidth/clientHeight.
      // documentElement./*OK*/clientHeight is buggy on iOS Safari
      // and thus cannot be used.
      var winWidth = this.win.
      /*OK*/
      innerWidth;
      var winHeight = this.win.
      /*OK*/
      innerHeight;

      if (winWidth && winHeight) {
        return {
          width: winWidth,
          height: winHeight
        };
      }

      var el = this.win.document.documentElement;
      return {
        width: el.
        /*OK*/
        clientWidth,
        height: el.
        /*OK*/
        clientHeight
      };
    }
    /** @override */
    ;

    _proto.getScrollTop = function getScrollTop() {
      var pageScrollTop = this.getScrollingElement().
      /*OK*/
      scrollTop || this.win.
      /*OK*/
      pageYOffset;

      var _this$ampdoc$getRootN = this.ampdoc.getRootNode(),
          host = _this$ampdoc$getRootN.host;

      return host ? pageScrollTop - host.
      /*OK*/
      offsetTop : pageScrollTop;
    }
    /** @override */
    ;

    _proto.getScrollLeft = function getScrollLeft() {
      // The html is set to overflow-x: hidden so the document cannot be
      // scrolled horizontally. The scrollLeft will always be 0.
      return 0;
    }
    /** @override */
    ;

    _proto.getScrollWidth = function getScrollWidth() {
      return this.getScrollingElement().
      /*OK*/
      scrollWidth;
    }
    /** @override */
    ;

    _proto.getScrollHeight = function getScrollHeight() {
      return this.getScrollingElement().
      /*OK*/
      scrollHeight;
    }
    /** @override */
    ;

    _proto.getContentHeight = function getContentHeight() {
      // Don't use scrollHeight, since it returns `MAX(viewport_height,
      // document_height)` (we only want the latter), and it doesn't account
      // for margins. Also, don't use documentElement's rect height because
      // there's no workable analog for either ios-embed-* modes.
      var scrollingElement = this.getScrollingElement();
      var rect = scrollingElement.
      /*OK*/
      getBoundingClientRect();
      var style = (0, _style.computedStyle)(this.win, scrollingElement); // The Y-position of any element can be offset by the vertical margin
      // of its first child, and this is _not_ accounted for in `rect.height`.
      // This "top gap" causes smaller than expected contentHeight, so calculate
      // and add it manually. Note that the "top gap" includes any padding-top
      // on ancestor elements, and the "bottom gap" remains unaddressed.

      var topGapPlusPadding = rect.top + this.getScrollTop();
      return rect.height + topGapPlusPadding + parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);
    }
    /** @override */
    ;

    _proto.contentHeightChanged = function contentHeightChanged() {} // Nothing to do here.

    /** @override */
    ;

    _proto.getLayoutRect = function getLayoutRect(el, opt_scrollLeft, opt_scrollTop) {
      var b = el.
      /*OK*/
      getBoundingClientRect();

      if (this.useLayers_) {
        return (0, _layoutRect.layoutRectLtwh)(b.left, b.top, b.width, b.height);
      }

      var scrollTop = opt_scrollTop != undefined ? opt_scrollTop : this.getScrollTop();
      var scrollLeft = opt_scrollLeft != undefined ? opt_scrollLeft : this.getScrollLeft();
      return (0, _layoutRect.layoutRectLtwh)(Math.round(b.left + scrollLeft), Math.round(b.top + scrollTop), Math.round(b.width), Math.round(b.height));
    }
    /** @override */
    ;

    _proto.getRootClientRectAsync = function getRootClientRectAsync() {
      return Promise.resolve(null);
    }
    /** @override */
    ;

    _proto.setScrollTop = function setScrollTop(scrollTop) {
      this.getScrollingElement().
      /*OK*/
      scrollTop = scrollTop;
    }
    /** @override */
    ;

    _proto.getScrollingElement = function getScrollingElement() {
      var doc = this.win.document;

      if (doc.
      /*OK*/
      scrollingElement) {
        return doc.
        /*OK*/
        scrollingElement;
      }

      if (doc.body // Due to https://bugs.webkit.org/show_bug.cgi?id=106133, WebKit
      // browsers have to use `body` and NOT `documentElement` for
      // scrolling purposes. This has mostly being resolved via
      // `scrollingElement` property, but this branch is still necessary
      // for backward compatibility purposes.
      && this.platform_.isWebKit()) {
        return doc.body;
      }

      return doc.documentElement;
    }
    /** @override */
    ;

    _proto.getScrollingElementScrollsLikeViewport = function getScrollingElementScrollsLikeViewport() {
      return true;
    };

    return ViewportBindingNatural_;
  }();

  exports.ViewportBindingNatural_ = ViewportBindingNatural_;

  },{"../../experiments":32,"../../layout-rect":48,"../../log":51,"../../observable":54,"../../services":112,"../../style":118,"./viewport-binding-def":105}],109:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.parseViewportMeta = parseViewportMeta;
  exports.stringifyViewportMeta = stringifyViewportMeta;
  exports.updateViewportMetaString = updateViewportMetaString;
  exports.installViewportServiceForDoc = installViewportServiceForDoc;
  exports.Viewport = exports.ViewportResizedEventDef = exports.ViewportChangedEventDef = void 0;

  var _animation = require("../../animation");

  var _fixedLayer = require("./../fixed-layer");

  var _observable = require("../../observable");

  var _services = require("../../services");

  var _viewportBindingDef = require("./viewport-binding-def");

  var _viewportBindingIosEmbedSd = require("./viewport-binding-ios-embed-sd");

  var _viewportBindingIosEmbedWrapper = require("./viewport-binding-ios-embed-wrapper");

  var _viewportBindingNatural = require("./viewport-binding-natural");

  var _visibilityState = require("../../visibility-state");

  var _math = require("../../utils/math");

  var _dom = require("../../dom");

  var _log = require("../../log");

  var _object = require("../../utils/object");

  var _friendlyIframeEmbed = require("../../friendly-iframe-embed");

  var _mode = require("../../mode");

  var _service = require("../../service");

  var _layersImpl = require("../layers-impl");

  var _experiments = require("../../experiments");

  var _layoutRect = require("../../layout-rect");

  var _transition = require("../../transition");

  var _style = require("../../style");

  var _promise = require("../../utils/promise");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TAG_ = 'Viewport';
  /**
   * @typedef {{
   *   relayoutAll: boolean,
   *   top: number,
   *   left: number,
   *   width: number,
   *   height: number,
   *   velocity: number
   * }}
   */

  var ViewportChangedEventDef;
  /**
   * @typedef {{
   *   relayoutAll: boolean,
   *   width: number,
   *   height: number
   * }}
   */

  exports.ViewportChangedEventDef = ViewportChangedEventDef;
  var ViewportResizedEventDef;
  /**
   * This object represents the viewport. It tracks scroll position, resize
   * and other events and notifies interesting parties when viewport has changed
   * and how.
   * @implements {../../service.Disposable}
   */

  exports.ViewportResizedEventDef = ViewportResizedEventDef;

  var Viewport =
  /*#__PURE__*/
  function () {
    /**
     * @param {!../ampdoc-impl.AmpDoc} ampdoc
     * @param {!ViewportBindingDef} binding
     * @param {!../viewer-impl.Viewer} viewer
     */
    function Viewport(ampdoc, binding, viewer) {
      var _this = this;

      var win = ampdoc.win;
      /** @const {!../ampdoc-impl.AmpDoc} */

      this.ampdoc = ampdoc;
      /**
       * Some viewport operations require the global document.
       * @private @const {!Document}
       */

      this.globalDoc_ = this.ampdoc.win.document;
      /** @const {!ViewportBindingDef} */

      this.binding_ = binding;
      /** @const {!../viewer-impl.Viewer} */

      this.viewer_ = viewer;
      /**
       * Used to cache the rect of the viewport.
       * @private {?../../layout-rect.LayoutRectDef}
       */

      this.rect_ = null;
      /**
       * Used to cache the size of the viewport. Also used as last known size,
       * so users should call getSize early on to get a value. The timing should
       * be chosen to avoid extra style recalcs.
       * @private {{width: number, height: number}|null}
       */

      this.size_ = null;
      /** @private {?number} */

      this.
      /*OK*/
      scrollTop_ = null;
      /** @private {boolean} */

      this.scrollAnimationFrameThrottled_ = false;
      /** @private {?number} */

      this.
      /*OK*/
      scrollLeft_ = null;
      /** @private {number} */

      this.paddingTop_ = Number(viewer.getParam('paddingTop') || 0);
      /** @private {number} */

      this.lastPaddingTop_ = 0;
      /** @private {!../timer-impl.Timer} */

      this.timer_ = _services.Services.timerFor(win);
      /** @private {!../vsync-impl.Vsync} */

      this.vsync_ = _services.Services.vsyncFor(win);
      /** @private {boolean} */

      this.scrollTracking_ = false;
      /** @private {number} */

      this.scrollCount_ = 0;
      /** @private @const {!Observable<!ViewportChangedEventDef>} */

      this.changeObservable_ = new _observable.Observable();
      /** @private @const {!Observable} */

      this.scrollObservable_ = new _observable.Observable();
      /** @private @const {!Observable} */

      this.resizeObservable_ = new _observable.Observable();
      /** @private {?Element|undefined} */

      this.viewportMeta_ = undefined;
      /** @private {string|undefined} */

      this.originalViewportMetaString_ = undefined;
      /** @private @const {boolean} */

      this.useLayers_ = (0, _experiments.isExperimentOn)(win, 'layers');

      if (this.useLayers_) {
        (0, _layersImpl.installLayersServiceForDoc)(ampdoc, this.binding_.getScrollingElement(), this.binding_.getScrollingElementScrollsLikeViewport());
      }
      /** @private @const {!FixedLayer} */


      this.fixedLayer_ = new _fixedLayer.FixedLayer(ampdoc, this.vsync_, this.binding_.getBorderTop(), this.paddingTop_, this.binding_.requiresFixedLayerTransfer());
      ampdoc.whenReady().then(function () {
        return _this.fixedLayer_.setup();
      });
      this.viewer_.onMessage('viewport', this.updateOnViewportEvent_.bind(this));
      this.viewer_.onMessage('scroll', this.viewerSetScrollTop_.bind(this));
      this.viewer_.onMessage('disableScroll', this.disableScrollEventHandler_.bind(this));
      this.binding_.updatePaddingTop(this.paddingTop_);
      this.binding_.onScroll(this.scroll_.bind(this));
      this.binding_.onResize(this.resize_.bind(this));
      this.onScroll(this.sendScrollMessage_.bind(this));
      /** @private {boolean} */

      this.visible_ = false;
      this.viewer_.onVisibilityChanged(this.updateVisibility_.bind(this));
      this.updateVisibility_(); // Top-level mode classes.

      var globalDocElement = this.globalDoc_.documentElement;

      if (ampdoc.isSingleDoc()) {
        globalDocElement.classList.add('i-amphtml-singledoc');
      }

      if (viewer.isEmbedded()) {
        globalDocElement.classList.add('i-amphtml-embedded');
      } else {
        globalDocElement.classList.add('i-amphtml-standalone');
      }

      if ((0, _dom.isIframed)(win)) {
        globalDocElement.classList.add('i-amphtml-iframed');
      }

      if (viewer.getParam('webview') === '1') {
        globalDocElement.classList.add('i-amphtml-webview');
      } // To avoid browser restore scroll position when traverse history


      if ((0, _dom.isIframed)(win) && 'scrollRestoration' in win.history) {
        win.history.scrollRestoration = 'manual';
      }
    }
    /** @override */


    var _proto = Viewport.prototype;

    _proto.dispose = function dispose() {
      this.binding_.disconnect();
    }
    /**
     * Called before a first AMP element is added to resources. Called in the
     * mutate context.
     */
    ;

    _proto.ensureReadyForElements = function ensureReadyForElements() {
      this.binding_.ensureReadyForElements();
    }
    /** @private */
    ;

    _proto.updateVisibility_ = function updateVisibility_() {
      var visible = this.viewer_.isVisible();

      if (visible != this.visible_) {
        this.visible_ = visible;

        if (visible) {
          this.binding_.connect();

          if (this.size_) {
            // If the size has already been intialized, check it again in case
            // the size has changed between `disconnect` and `connect`.
            this.resize_();
          }
        } else {
          this.binding_.disconnect();
        }
      }
    }
    /**
     * Returns the top padding mandated by the viewer.
     * @return {number}
     */
    ;

    _proto.getPaddingTop = function getPaddingTop() {
      return this.paddingTop_;
    }
    /**
     * Returns the viewport's top position in the document. This is essentially
     * the scroll position.
     * @return {number}
     * @deprecated Use {@link getScrollTop}
     */
    ;

    _proto.getTop = function getTop() {
      return this.getScrollTop();
    }
    /**
     * Returns the viewport's vertical scroll position.
     * @return {number}
     */
    ;

    _proto.getScrollTop = function getScrollTop() {
      if (this.
      /*OK*/
      scrollTop_ == null) {
        this.
        /*OK*/
        scrollTop_ = this.binding_.getScrollTop();
      }

      return this.
      /*OK*/
      scrollTop_;
    }
    /**
     * Returns the viewport's horizontal scroll position.
     * @return {number}
     */
    ;

    _proto.getScrollLeft = function getScrollLeft() {
      if (this.
      /*OK*/
      scrollLeft_ == null) {
        this.
        /*OK*/
        scrollLeft_ = this.binding_.getScrollLeft();
      }

      return this.
      /*OK*/
      scrollLeft_;
    }
    /**
     * Sets the desired scroll position on the viewport.
     * @param {number} scrollPos
     */
    ;

    _proto.setScrollTop = function setScrollTop(scrollPos) {
      this.
      /*OK*/
      scrollTop_ = null;
      this.binding_.setScrollTop(scrollPos);
    }
    /**
     * Sets the body padding bottom to the specified value.
     * @param {number} paddingBottom
     */
    ;

    _proto.updatePaddingBottom = function updatePaddingBottom(paddingBottom) {
      this.ampdoc.whenBodyAvailable().then(function (body) {
        (0, _style.setStyle)(body, 'borderBottom', paddingBottom + "px solid transparent");
      });
    }
    /**
     * Returns the size of the viewport.
     * @return {!{width: number, height: number}}
     */
    ;

    _proto.getSize = function getSize() {
      if (this.size_) {
        return this.size_;
      }

      this.size_ = this.binding_.getSize();

      if (this.size_.width == 0 || this.size_.height == 0) {
        // Only report when the visibility is "visible" or "prerender".
        var visibilityState = this.viewer_.getVisibilityState();

        if (visibilityState == _visibilityState.VisibilityState.PRERENDER || visibilityState == _visibilityState.VisibilityState.VISIBLE) {
          if (Math.random() < 0.01) {
            (0, _log.dev)().error(TAG_, 'viewport has zero dimensions');
          }
        }
      }

      return this.size_;
    }
    /**
     * Returns the height of the viewport.
     * @return {number}
     */
    ;

    _proto.getHeight = function getHeight() {
      return this.getSize().height;
    }
    /**
     * Returns the width of the viewport.
     * @return {number}
     */
    ;

    _proto.getWidth = function getWidth() {
      return this.getSize().width;
    }
    /**
     * Returns the scroll width of the content of the document. Note that this
     * method is not cached since we there's no indication when it might change.
     * @return {number}
     */
    ;

    _proto.getScrollWidth = function getScrollWidth() {
      return this.binding_.getScrollWidth();
    }
    /**
     * Returns the scroll height of the content of the document, including the
     * padding top for the viewer header.
     * The scrollHeight will be the viewport height if there's not enough content
     * to fill up the viewport.
     * Note that this method is not cached since we there's no indication when
     * it might change.
     * @return {number}
     */
    ;

    _proto.getScrollHeight = function getScrollHeight() {
      return this.binding_.getScrollHeight();
    }
    /**
     * Returns the height of the content of the document, including the
     * padding top for the viewer header.
     * contentHeight will match scrollHeight in all cases unless the viewport is
     * taller than the content.
     * Note that this method is not cached since we there's no indication when
     * it might change.
     * @return {number}
     */
    ;

    _proto.getContentHeight = function getContentHeight() {
      return this.binding_.getContentHeight();
    }
    /**
     * Resource manager signals to the viewport that content height is changed
     * and some action may need to be taken.
     * @restricted Use is restricted due to potentially very heavy performance
     *   impact. Can only be called when not actively scrolling.
     */
    ;

    _proto.contentHeightChanged = function contentHeightChanged() {
      this.binding_.contentHeightChanged();
    }
    /**
     * Returns the rect of the viewport which includes scroll positions and size.
     * @return {!../../layout-rect.LayoutRectDef}}
     */
    ;

    _proto.getRect = function getRect() {
      if (this.rect_ == null) {
        var scrollTop = 0;
        var scrollLeft = 0;

        if (!this.useLayers_) {
          scrollTop = this.getScrollTop();
          scrollLeft = this.getScrollLeft();
        }

        var size = this.getSize();
        this.rect_ = (0, _layoutRect.layoutRectLtwh)(scrollLeft, scrollTop, size.width, size.height);
      }

      return this.rect_;
    }
    /**
     * Returns the rect of the element within the document.
     * Note that this function should be called in vsync measure. Please consider
     * using `getLayoutRectAsync` instead.
     * @param {!Element} el
     * @return {!../../layout-rect.LayoutRectDef}
     */
    ;

    _proto.getLayoutRect = function getLayoutRect(el) {
      var scrollLeft = this.getScrollLeft();
      var scrollTop = this.getScrollTop(); // Go up the window hierarchy through friendly iframes.

      var frameElement = (0, _service.getParentWindowFrameElement)(el, this.ampdoc.win);

      if (frameElement) {
        var b = this.binding_.getLayoutRect(el, 0, 0);
        var c = this.binding_.getLayoutRect(frameElement, scrollLeft, scrollTop);
        return (0, _layoutRect.layoutRectLtwh)(Math.round(b.left + c.left), Math.round(b.top + c.top), Math.round(b.width), Math.round(b.height));
      }

      return this.binding_.getLayoutRect(el, scrollLeft, scrollTop);
    }
    /**
     * Returns the clientRect of the element.
     * Note: This method does not taking intersection into account.
     * TODO(@zhouyx): We may need to return info on the intersectionRect.
     * @param {!Element} el
     * @return {!Promise<!../../layout-rect.LayoutRectDef>}
     */
    ;

    _proto.getClientRectAsync = function getClientRectAsync(el) {
      var _this2 = this;

      if (this.useLayers_) {
        return this.vsync_.measurePromise(function () {
          return _this2.getLayoutRect(el);
        });
      }

      var local = this.vsync_.measurePromise(function () {
        return el.
        /*OK*/
        getBoundingClientRect();
      });
      var root = this.binding_.getRootClientRectAsync();
      var frameElement = (0, _service.getParentWindowFrameElement)(el, this.ampdoc.win);

      if (frameElement) {
        root = this.vsync_.measurePromise(function () {
          return frameElement.
          /*OK*/
          getBoundingClientRect();
        });
      }

      return Promise.all([local, root]).then(function (values) {
        var l = values[0];
        var r = values[1];

        if (!r) {
          return (0, _layoutRect.layoutRectFromDomRect)(l);
        }

        return (0, _layoutRect.moveLayoutRect)(l, r.left, r.top);
      });
    }
    /**
     * Whether the binding supports fix-positioned elements.
     * @return {boolean}
     */
    ;

    _proto.supportsPositionFixed = function supportsPositionFixed() {
      return this.binding_.supportsPositionFixed();
    }
    /**
     * Whether the element is declared as fixed in any of the user's stylesheets.
     * Will include any matches, not necessarily currently fixed elements.
     * @param {!Element} element
     * @return {boolean}
     */
    ;

    _proto.isDeclaredFixed = function isDeclaredFixed(element) {
      return this.fixedLayer_.isDeclaredFixed(element);
    }
    /**
     * Scrolls element into view much like Element. scrollIntoView does but
     * in the AMP/Viewer environment.
     * @param {!Element} element
     * @return {!Promise}
     */
    ;

    _proto.scrollIntoView = function scrollIntoView(element) {
      var _this3 = this;

      return this.getScrollingContainerFor_(element).then(function (parent) {
        return _this3.scrollIntoViewInternal_(element, parent);
      });
    }
    /**
     * @param {!Element} element
     * @param {!Element} parent
     */
    ;

    _proto.scrollIntoViewInternal_ = function scrollIntoViewInternal_(element, parent) {
      var _this4 = this;

      var elementTop = this.binding_.getLayoutRect(element).top;
      var newScrollTopPromise = this.useLayers_ ? this.getElementScrollTop_(parent).then(function (scrollTop) {
        return elementTop + scrollTop;
      }) : (0, _promise.tryResolve)(function () {
        return Math.max(0, elementTop - _this4.paddingTop_);
      });
      newScrollTopPromise.then(function (newScrollTop) {
        return _this4.setElementScrollTop_(parent, newScrollTop);
      });
    }
    /**
     * Scrolls element into view much like Element. scrollIntoView does but
     * in the AMP/Viewer environment. Adds animation for the sccrollIntoView
     * transition.
     *
     * @param {!Element} element
     * @param {string=} pos (takes one of 'top', 'bottom', 'center')
     * @param {number=} opt_duration
     * @param {string=} opt_curve
     * @return {!Promise}
     */
    ;

    _proto.animateScrollIntoView = function animateScrollIntoView(element, pos, opt_duration, opt_curve) {
      var _this5 = this;

      if (pos === void 0) {
        pos = 'top';
      }

      (0, _log.devAssert)(!opt_curve || opt_duration !== undefined, 'Curve without duration doesn\'t make sense.');
      return this.getScrollingContainerFor_(element).then(function (parent) {
        return _this5.animateScrollWithinParent(element, parent, (0, _log.dev)().assertString(pos), opt_duration, opt_curve);
      });
    }
    /**
     * @param {!Element} element
     * @param {!Element} parent Should be scrollable.
     * @param {string} pos (takes one of 'top', 'bottom', 'center')
     * @param {number=} opt_duration
     * @param {string=} opt_curve
     * @return {!Promise}
     */
    ;

    _proto.animateScrollWithinParent = function animateScrollWithinParent(element, parent, pos, opt_duration, opt_curve) {
      var _this6 = this;

      (0, _log.devAssert)(!opt_curve || opt_duration !== undefined, 'Curve without duration doesn\'t make sense.');
      var elementRect = this.binding_.getLayoutRect(element);

      var _ref = this.isScrollingElement_(parent) ? this.getSize() : this.getLayoutRect(parent),
          parentHeight = _ref.height;

      var offset;

      switch (pos) {
        case 'bottom':
          offset = -parentHeight + elementRect.height;
          break;

        case 'center':
          offset = -parentHeight / 2 + elementRect.height / 2;
          break;

        default:
          offset = 0;
          break;
      }

      return this.getElementScrollTop_(parent).then(function (curScrollTop) {
        var newScrollTop;

        if (_this6.useLayers_) {
          newScrollTop = Math.max(0, elementRect.top + offset + curScrollTop);
        } else {
          var calculatedScrollTop = elementRect.top - _this6.paddingTop_ + offset;
          newScrollTop = Math.max(0, calculatedScrollTop);
        }

        if (newScrollTop == curScrollTop) {
          return;
        }

        return _this6.interpolateScrollIntoView_(parent, curScrollTop, newScrollTop, opt_duration, opt_curve);
      });
    }
    /**
     * @param {!Element} parent
     * @param {number} curScrollTop
     * @param {number} newScrollTop
     * @param {number=} opt_duration
     * @param {string=} curve
     * @private
     */
    ;

    _proto.interpolateScrollIntoView_ = function interpolateScrollIntoView_(parent, curScrollTop, newScrollTop, opt_duration, curve) {
      var _this7 = this;

      if (curve === void 0) {
        curve = 'ease-in';
      }

      var duration = opt_duration !== undefined ? (0, _log.dev)().assertNumber(opt_duration) : getDefaultScrollAnimationDuration(curScrollTop, newScrollTop);
      /** @const {!TransitionDef<number>} */

      var interpolate = (0, _transition.numeric)(curScrollTop, newScrollTop);
      return _animation.Animation.animate(parent, function (position) {
        _this7.setElementScrollTop_(parent, interpolate(position));
      }, duration, curve).thenAlways(function () {
        _this7.setElementScrollTop_(parent, newScrollTop);
      });
    }
    /**
     * @param {!Element} element
     * @return {!Promise<!Element>}
     */
    ;

    _proto.getScrollingContainerFor_ = function getScrollingContainerFor_(element) {
      var _this8 = this;

      return this.vsync_.measurePromise(function () {
        return (0, _dom.closestAncestorElementBySelector)(element, '.i-amphtml-scrollable') || _this8.binding_.getScrollingElement();
      });
    }
    /**
     * @param {!Element} element
     * @param {number} scrollTop
     */
    ;

    _proto.setElementScrollTop_ = function setElementScrollTop_(element, scrollTop) {
      if (this.isScrollingElement_(element)) {
        this.binding_.setScrollTop(scrollTop);
        return;
      }

      this.vsync_.mutate(function () {
        element.
        /*OK*/
        scrollTop = scrollTop;
      });
    }
    /**
     * @param {!Element} element
     * @return {!Promise<number>}
     */
    ;

    _proto.getElementScrollTop_ = function getElementScrollTop_(element) {
      var _this9 = this;

      if (this.isScrollingElement_(element)) {
        return (0, _promise.tryResolve)(function () {
          return _this9.getScrollTop();
        });
      }

      return this.vsync_.measurePromise(function () {
        return element.
        /*OK*/
        scrollTop;
      });
    }
    /**
     * @param {!Element} element
     * @return {boolean}
     */
    ;

    _proto.isScrollingElement_ = function isScrollingElement_(element) {
      return element == this.binding_.getScrollingElement();
    }
    /**
     * @return {!Element}
     */
    ;

    _proto.getScrollingElement = function getScrollingElement() {
      return this.binding_.getScrollingElement();
    }
    /**
     * Registers the handler for ViewportChangedEventDef events.
     * @param {function(!ViewportChangedEventDef)} handler
     * @return {!UnlistenDef}
     */
    ;

    _proto.onChanged = function onChanged(handler) {
      return this.changeObservable_.add(handler);
    }
    /**
     * Registers the handler for scroll events. These events DO NOT contain
     * scrolling offset and it's discouraged to read scrolling offset in the
     * event handler. The primary use case for this handler is to inform that
     * scrolling might be going on. To get more information {@link onChanged}
     * handler should be used.
     * @param {function()} handler
     * @return {!UnlistenDef}
     */
    ;

    _proto.onScroll = function onScroll(handler) {
      return this.scrollObservable_.add(handler);
    }
    /**
     * Registers the handler for ViewportResizedEventDef events.
     *
     * Note that there is a known bug in Webkit that causes window.innerWidth
     * and window.innerHeight values to be incorrect after resize. A temporary
     * fix is to add a 500 ms delay before computing these values.
     * Link: https://bugs.webkit.org/show_bug.cgi?id=170595
     *
     * @param {function(!ViewportResizedEventDef)} handler
     * @return {!UnlistenDef}
     */
    ;

    _proto.onResize = function onResize(handler) {
      return this.resizeObservable_.add(handler);
    }
    /**
     * Instruct the viewport to enter lightbox mode.
     * @param {!Element=} opt_requestingElement Must be provided to be able to
     *     enter lightbox mode under FIE cases.
     * @param {!Promise=} opt_onComplete Optional promise that's resolved when
     *     the caller finishes opening the lightbox e.g. transition animations.
     * @return {!Promise}
     */
    ;

    _proto.enterLightboxMode = function enterLightboxMode(opt_requestingElement, opt_onComplete) {
      this.viewer_.sendMessage('requestFullOverlay', (0, _object.dict)(),
      /* cancelUnsent */
      true);
      this.enterOverlayMode();
      this.fixedLayer_.enterLightbox(opt_requestingElement, opt_onComplete);

      if (opt_requestingElement) {
        this.maybeEnterFieLightboxMode((0, _log.dev)().assertElement(opt_requestingElement));
      }

      return this.binding_.updateLightboxMode(true);
    }
    /**
     * Instruct the viewport to leave lightbox mode.
     * @param {!Element=} opt_requestingElement Must be provided to be able to
     *     enter lightbox mode under FIE cases.
     * @return {!Promise}
     */
    ;

    _proto.leaveLightboxMode = function leaveLightboxMode(opt_requestingElement) {
      this.viewer_.sendMessage('cancelFullOverlay', (0, _object.dict)(),
      /* cancelUnsent */
      true);
      this.fixedLayer_.leaveLightbox();
      this.leaveOverlayMode();

      if (opt_requestingElement) {
        this.maybeLeaveFieLightboxMode((0, _log.dev)().assertElement(opt_requestingElement));
      }

      return this.binding_.updateLightboxMode(false);
    }
    /**
     * @return {boolean}
     * @visibleForTesting
     */
    ;

    _proto.isLightboxExperimentOn = function isLightboxExperimentOn() {
      return (0, _experiments.isExperimentOn)(this.ampdoc.win, 'amp-lightbox-a4a-proto');
    }
    /**
     * Enters frame lightbox mode if under a Friendly Iframe Embed.
     * @param {!Element} requestingElement
     * @visibleForTesting
     */
    ;

    _proto.maybeEnterFieLightboxMode = function maybeEnterFieLightboxMode(requestingElement) {
      var fieOptional = this.getFriendlyIframeEmbed_(requestingElement);

      if (fieOptional) {
        (0, _log.devAssert)(this.isLightboxExperimentOn(), 'Lightbox mode for A4A is only available when ' + "'amp-lightbox-a4a-proto' experiment is on");
        fieOptional.enterFullOverlayMode();
      }
    }
    /**
     * Leaves frame lightbox mode if under a Friendly Iframe Embed.
     * @param {!Element} requestingElement
     * @visibleForTesting
     */
    ;

    _proto.maybeLeaveFieLightboxMode = function maybeLeaveFieLightboxMode(requestingElement) {
      var fieOptional = this.getFriendlyIframeEmbed_(requestingElement);

      if (fieOptional) {
        (0, _log.devAssert)(fieOptional).leaveFullOverlayMode();
      }
    }
    /**
     * Get FriendlyIframeEmbed if available.
     * @param {!Element} element Element supposedly inside the FIE.
     * @return {?../../friendly-iframe-embed.FriendlyIframeEmbed}
     * @private
     */
    ;

    _proto.getFriendlyIframeEmbed_ = function getFriendlyIframeEmbed_(element) {
      var iframeOptional = (0, _service.getParentWindowFrameElement)(element, this.ampdoc.win);
      return iframeOptional && (0, _friendlyIframeEmbed.getFriendlyIframeEmbedOptional)(
      /** @type {!HTMLIFrameElement} */
      (0, _log.dev)().assertElement(iframeOptional));
    }
    /**
     * Instruct the viewport to enter overlay mode.
     */
    ;

    _proto.enterOverlayMode = function enterOverlayMode() {
      this.disableTouchZoom();
      this.disableScroll();
    }
    /**
     * Instruct the viewport to leave overlay mode.
     */
    ;

    _proto.leaveOverlayMode = function leaveOverlayMode() {
      this.resetScroll();
      this.restoreOriginalTouchZoom();
    }
    /**
     * Disable the scrolling by setting overflow: hidden.
     * Should only be used for temporarily disabling scroll.
     */
    ;

    _proto.disableScroll = function disableScroll() {
      var _this10 = this;

      this.vsync_.mutate(function () {
        _this10.binding_.disableScroll();
      });
    }
    /**
     * Reset the scrolling by removing overflow: hidden.
     */
    ;

    _proto.resetScroll = function resetScroll() {
      var _this11 = this;

      this.vsync_.mutate(function () {
        _this11.binding_.resetScroll();
      });
    }
    /**
     * Resets touch zoom to initial scale of 1.
     */
    ;

    _proto.resetTouchZoom = function resetTouchZoom() {
      var _this12 = this;

      var windowHeight = this.ampdoc.win.
      /*OK*/
      innerHeight;
      var documentHeight = this.globalDoc_.documentElement.
      /*OK*/
      clientHeight;

      if (windowHeight && documentHeight && windowHeight === documentHeight) {
        // This code only works when scrollbar overlay content and take no space,
        // which is fine on mobile. For non-mobile devices this code is
        // irrelevant.
        return;
      }

      if (this.disableTouchZoom()) {
        this.timer_.delay(function () {
          _this12.restoreOriginalTouchZoom();
        }, 50);
      }
    }
    /**
     * Disables touch zoom on this viewport. Returns `true` if any actual
     * changes have been done.
     * @return {boolean}
     */
    ;

    _proto.disableTouchZoom = function disableTouchZoom() {
      var viewportMeta = this.getViewportMeta_();

      if (!viewportMeta) {
        // This should never happen in a valid AMP document, thus shortcircuit.
        return false;
      } // Setting maximum-scale=1 and user-scalable=no zooms page back to normal
      // and prohibit further default zooming.


      var newValue = updateViewportMetaString(viewportMeta.content, {
        'maximum-scale': '1',
        'user-scalable': 'no'
      });
      return this.setViewportMetaString_(newValue);
    }
    /**
     * Restores original touch zoom parameters. Returns `true` if any actual
     * changes have been done.
     * @return {boolean}
     */
    ;

    _proto.restoreOriginalTouchZoom = function restoreOriginalTouchZoom() {
      if (this.originalViewportMetaString_ !== undefined) {
        return this.setViewportMetaString_(this.originalViewportMetaString_);
      }

      return false;
    }
    /**
     * Returns whether the user has scrolled yet.
     * @return {boolean}
     */
    ;

    _proto.hasScrolled = function hasScrolled() {
      return this.scrollCount_ > 0;
    }
    /**
     * Updates the fixed layer.
     */
    ;

    _proto.updateFixedLayer = function updateFixedLayer() {
      this.fixedLayer_.update();
    }
    /**
     * Adds the element to the fixed layer.
     * @param {!Element} element
     * @param {boolean=} opt_forceTransfer If set to true , then the element needs
     *    to be forcefully transferred to the fixed layer.
     * @return {!Promise}
     */
    ;

    _proto.addToFixedLayer = function addToFixedLayer(element, opt_forceTransfer) {
      return this.fixedLayer_.addElement(element, opt_forceTransfer);
    }
    /**
     * Removes the element from the fixed layer.
     * @param {!Element} element
     */
    ;

    _proto.removeFromFixedLayer = function removeFromFixedLayer(element) {
      this.fixedLayer_.removeElement(element);
    }
    /**
     * Updates touch zoom meta data. Returns `true` if any actual
     * changes have been done.
     * @param {string} viewportMetaString
     * @return {boolean}
     */
    ;

    _proto.setViewportMetaString_ = function setViewportMetaString_(viewportMetaString) {
      var viewportMeta = this.getViewportMeta_();

      if (viewportMeta && viewportMeta.content != viewportMetaString) {
        (0, _log.dev)().fine(TAG_, 'changed viewport meta to:', viewportMetaString);
        viewportMeta.content = viewportMetaString;
        return true;
      }

      return false;
    }
    /**
     * @return {?Element}
     * @private
     */
    ;

    _proto.getViewportMeta_ = function getViewportMeta_() {
      if ((0, _dom.isIframed)(this.ampdoc.win)) {
        // An embedded document does not control its viewport meta tag.
        return null;
      }

      if (this.viewportMeta_ === undefined) {
        this.viewportMeta_ =
        /** @type {?HTMLMetaElement} */
        this.globalDoc_.querySelector('meta[name=viewport]');

        if (this.viewportMeta_) {
          this.originalViewportMetaString_ = this.viewportMeta_.content;
        }
      }

      return this.viewportMeta_;
    }
    /**
     * @param {!JsonObject} data
     * @private
     */
    ;

    _proto.viewerSetScrollTop_ = function viewerSetScrollTop_(data) {
      var targetScrollTop = data['scrollTop'];
      this.setScrollTop(targetScrollTop);
    }
    /**
     * @param {!JsonObject} data
     * @private
     */
    ;

    _proto.updateOnViewportEvent_ = function updateOnViewportEvent_(data) {
      var _this13 = this;

      var paddingTop = data['paddingTop'];
      var duration = data['duration'] || 0;
      var curve = data['curve'];
      /** @const {boolean} */

      var transient = data['transient'];

      if (paddingTop == undefined || paddingTop == this.paddingTop_) {
        return;
      }

      this.lastPaddingTop_ = this.paddingTop_;
      this.paddingTop_ = paddingTop;
      var animPromise = this.animateFixedElements_(duration, curve, transient);

      if (paddingTop < this.lastPaddingTop_) {
        this.binding_.hideViewerHeader(transient, this.lastPaddingTop_);
        return;
      }

      animPromise.then(function () {
        _this13.binding_.showViewerHeader(transient, paddingTop);
      });
    }
    /**
     * @param {!JsonObject} data
     * @private
     */
    ;

    _proto.disableScrollEventHandler_ = function disableScrollEventHandler_(data) {
      if (!!data) {
        this.disableScroll();
      } else {
        this.resetScroll();
      }
    }
    /**
     * @param {number} duration
     * @param {string} curve
     * @param {boolean} transient
     * @return {!Promise}
     * @private
     */
    ;

    _proto.animateFixedElements_ = function animateFixedElements_(duration, curve, transient) {
      var _this14 = this;

      this.fixedLayer_.updatePaddingTop(this.paddingTop_, transient);

      if (duration <= 0) {
        return Promise.resolve();
      } // Add transit effect on position fixed element


      var tr = (0, _transition.numeric)(this.lastPaddingTop_ - this.paddingTop_, 0);
      return _animation.Animation.animate(this.ampdoc.getRootNode(), function (time) {
        var p = tr(time);

        _this14.fixedLayer_.transformMutate("translateY(" + p + "px)");
      }, duration, curve).thenAlways(function () {
        _this14.fixedLayer_.transformMutate(null);
      });
    }
    /**
     * @param {boolean} relayoutAll
     * @param {number} velocity
     * @private
     */
    ;

    _proto.changed_ = function changed_(relayoutAll, velocity) {
      var size = this.getSize();
      var scrollTop = this.getScrollTop();
      var scrollLeft = this.getScrollLeft();
      (0, _log.dev)().fine(TAG_, 'changed event:', 'relayoutAll=', relayoutAll, 'top=', scrollTop, 'left=', scrollLeft, 'bottom=', scrollTop + size.height, 'velocity=', velocity);
      this.changeObservable_.fire({
        relayoutAll: relayoutAll,
        top: scrollTop,
        left: scrollLeft,
        width: size.width,
        height: size.height,
        velocity: velocity
      });
    }
    /** @private */
    ;

    _proto.scroll_ = function scroll_() {
      var _this15 = this;

      this.rect_ = null;
      this.scrollCount_++;
      this.scrollLeft_ = this.binding_.getScrollLeft();
      var newScrollTop = this.binding_.getScrollTop();

      if (newScrollTop < 0) {
        // iOS and some other browsers use negative values of scrollTop for
        // overscroll. Overscroll does not affect the viewport and thus should
        // be ignored here.
        return;
      }

      this.scrollTop_ = newScrollTop;

      if (!this.scrollTracking_) {
        this.scrollTracking_ = true;
        var now = Date.now(); // Wait 2 frames and then request an animation frame.

        this.timer_.delay(function () {
          _this15.vsync_.measure(function () {
            _this15.throttledScroll_(now, newScrollTop);
          });
        }, 36);
      }

      this.scrollObservable_.fire();
    }
    /**
     * This method is called about every 3 frames (assuming 60hz) and it
     * is called in a vsync measure task.
     * @param {number} referenceTime Time when the scroll measurement, that
     *     triggered this call made, was made.
     * @param {number} referenceTop Scrolltop at that time.
     * @private
     */
    ;

    _proto.throttledScroll_ = function throttledScroll_(referenceTime, referenceTop) {
      var _this16 = this;

      this.scrollTop_ = this.binding_.getScrollTop();
      /**  @const {number} */

      var newScrollTop = this.scrollTop_;
      var now = Date.now();
      var velocity = 0;

      if (now != referenceTime) {
        velocity = (newScrollTop - referenceTop) / (now - referenceTime);
      }

      (0, _log.dev)().fine(TAG_, 'scroll: ' + 'scrollTop=' + newScrollTop + '; ' + 'velocity=' + velocity);

      if (Math.abs(velocity) < 0.03) {
        this.changed_(
        /* relayoutAll */
        false, velocity);
        this.scrollTracking_ = false;
      } else {
        this.timer_.delay(function () {
          return _this16.vsync_.measure(_this16.throttledScroll_.bind(_this16, now, newScrollTop));
        }, 20);
      }
    }
    /**
     * Send scroll message via the viewer per animation frame
     * @private
     */
    ;

    _proto.sendScrollMessage_ = function sendScrollMessage_() {
      var _this17 = this;

      if (!this.scrollAnimationFrameThrottled_) {
        this.scrollAnimationFrameThrottled_ = true;
        this.vsync_.measure(function () {
          _this17.scrollAnimationFrameThrottled_ = false;

          _this17.viewer_.sendMessage('scroll', (0, _object.dict)({
            'scrollTop': _this17.getScrollTop()
          }),
          /* cancelUnsent */
          true);
        });
      }
    }
    /** @private */
    ;

    _proto.resize_ = function resize_() {
      var _this18 = this;

      this.rect_ = null;
      var oldSize = this.size_;
      this.size_ = null; // Need to recalc.

      var newSize = this.getSize();
      this.fixedLayer_.update().then(function () {
        var widthChanged = !oldSize || oldSize.width != newSize.width;

        _this18.changed_(
        /*relayoutAll*/
        widthChanged, 0);

        var sizeChanged = widthChanged || oldSize.height != newSize.height;

        if (sizeChanged) {
          _this18.resizeObservable_.fire({
            relayoutAll: widthChanged,
            width: newSize.width,
            height: newSize.height
          });
        }
      });
    };

    return Viewport;
  }();
  /**
   * Parses viewport meta value. It usually looks like:
   * ```
   * width=device-width,initial-scale=1,minimum-scale=1
   * ```
   * @param {string} content
   * @return {!Object<string, (string|undefined)>}
   * @private Visible for testing only.
   */


  exports.Viewport = Viewport;

  function parseViewportMeta(content) {
    // Ex: width=device-width,initial-scale=1,minimal-ui
    var params = Object.create(null);

    if (!content) {
      return params;
    }

    var pairs = content.split(/,|;/);

    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i];
      var split = pair.split('=');
      var name = split[0].trim();
      var value = split[1];
      value = (value || '').trim();

      if (name) {
        params[name] = value;
      }
    }

    return params;
  }
  /**
   * Stringifies viewport meta value based on the provided map. It usually looks
   * like:
   * ```
   * width=device-width,initial-scale=1,minimum-scale=1
   * ```
   * @param {!Object<string, string>} params
   * @return {string}
   * @private Visible for testing only.
   */


  function stringifyViewportMeta(params) {
    // Ex: width=device-width,initial-scale=1,minimal-ui
    var content = '';

    for (var k in params) {
      if (content.length > 0) {
        content += ',';
      }

      if (params[k]) {
        content += k + '=' + params[k];
      } else {
        content += k;
      }
    }

    return content;
  }
  /**
   * This method makes a minimal effort to keep the original viewport string
   * unchanged if in fact none of the values have been updated. Returns the
   * updated string or the `currentValue` if no changes were necessary.
   *
   * @param {string} currentValue
   * @param {!Object<string, string|undefined>} updateParams
   * @return {string}
   * @private Visible for testing only.
   */


  function updateViewportMetaString(currentValue, updateParams) {
    var params = parseViewportMeta(currentValue);
    var changed = false;

    for (var k in updateParams) {
      if (params[k] !== updateParams[k]) {
        changed = true;

        if (updateParams[k] !== undefined) {
          params[k] =
          /** @type {string} */
          updateParams[k];
        } else {
          delete params[k];
        }
      }
    }

    if (!changed) {
      return currentValue;
    }

    return stringifyViewportMeta(params);
  }
  /**
   * Calculates a default duration for a scrollTop animation.
   * @param {number} scrollTopA commutative with b.
   * @param {number} scrollTopB commutative with a.
   * @param {number=} max in ms. default 500ms.
   * @return {number}
   */


  function getDefaultScrollAnimationDuration(scrollTopA, scrollTopB, max) {
    if (max === void 0) {
      max = 500;
    }

    // 65% of scroll Δ to ms, eg 1000px -> 650ms, integer between 0 and max
    return Math.floor((0, _math.clamp)(0.65 * Math.abs(scrollTopA - scrollTopB), 0, max));
  }
  /**
   * @param {!../ampdoc-impl.AmpDoc} ampdoc
   * @return {!Viewport}
   * @private
   */


  function createViewport(ampdoc) {
    var viewer = _services.Services.viewerForDoc(ampdoc);

    var win = ampdoc.win;
    var binding;

    if (ampdoc.isSingleDoc() && getViewportType(win, viewer) == ViewportType.NATURAL_IOS_EMBED) {
      if ((0, _experiments.isExperimentOn)(win, 'ios-embed-sd') && win.Element.prototype.attachShadow && // Even though iOS 10 supports Shadow DOM, the support is buggy.
      _services.Services.platformFor(win).getMajorVersion() >= 11) {
        binding = new _viewportBindingIosEmbedSd.ViewportBindingIosEmbedShadowRoot_(win);
      } else {
        binding = new _viewportBindingIosEmbedWrapper.ViewportBindingIosEmbedWrapper_(win);
      }
    } else {
      binding = new _viewportBindingNatural.ViewportBindingNatural_(ampdoc);
    }

    return new Viewport(ampdoc, binding, viewer);
  }
  /**
   * The type of the viewport.
   * @enum {string}
   */


  var ViewportType = {
    /**
     * Viewer leaves sizing and scrolling up to the AMP document's window.
     */
    NATURAL: 'natural',

    /**
     * This is AMP-specific type and doesn't come from viewer. This is the type
     * that AMP sets when Viewer has requested "natural" viewport on a iOS
     * device.
     * See:
     * https://github.com/ampproject/amphtml/blob/master/spec/amp-html-layout.md
     */
    NATURAL_IOS_EMBED: 'natural-ios-embed'
  };
  /**
   * @param {!Window} win
   * @param {!../viewer-impl.Viewer} viewer
   * @return {string}
   */

  function getViewportType(win, viewer) {
    var viewportType = viewer.getParam('viewportType') || ViewportType.NATURAL;

    if (!_services.Services.platformFor(win).isIos() || viewportType != ViewportType.NATURAL) {
      return viewportType;
    } // Enable iOS Embedded mode so that it's easy to test against a more
    // realistic iOS environment w/o an iframe.


    if (!(0, _dom.isIframed)(win) && ((0, _mode.getMode)(win).localDev || (0, _mode.getMode)(win).development)) {
      return ViewportType.NATURAL_IOS_EMBED;
    } // Enable iOS Embedded mode for iframed tests (e.g. integration tests).


    if ((0, _dom.isIframed)(win) && (0, _mode.getMode)(win).test) {
      return ViewportType.NATURAL_IOS_EMBED;
    } // Override to ios-embed for iframe-viewer mode.


    if ((0, _dom.isIframed)(win) && viewer.isEmbedded()) {
      return ViewportType.NATURAL_IOS_EMBED;
    }

    return viewportType;
  }
  /**
   * @param {!../ampdoc-impl.AmpDoc} ampdoc
   */


  function installViewportServiceForDoc(ampdoc) {
    (0, _service.registerServiceBuilderForDoc)(ampdoc, 'viewport', createViewport,
    /* opt_instantiate */
    true);
  }

  },{"../../animation":12,"../../dom":26,"../../experiments":32,"../../friendly-iframe-embed":39,"../../layout-rect":48,"../../log":51,"../../mode":53,"../../observable":54,"../../service":71,"../../services":112,"../../style":118,"../../transition":120,"../../utils/math":131,"../../utils/object":132,"../../utils/promise":134,"../../visibility-state":139,"../layers-impl":88,"./../fixed-layer":84,"./viewport-binding-def":105,"./viewport-binding-ios-embed-sd":106,"./viewport-binding-ios-embed-wrapper":107,"./viewport-binding-natural":108}],110:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.vsyncForTesting = vsyncForTesting;
  exports.installVsyncService = installVsyncService;
  exports.Vsync = void 0;

  var _promise = require("../utils/promise");

  var _jankMeter = require("./jank-meter");

  var _pass = require("../pass");

  var _services = require("../services");

  var _error = require("../error");

  var _log = require("../log");

  var _service = require("../service");

  var _timerImpl = require("./timer-impl");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @const {time} */
  var FRAME_TIME = 16;
  /**
   * @typedef {!Object<string, *>}
   */

  var VsyncStateDef;
  /**
   * @typedef {{
   *   measure: (function(!VsyncStateDef):undefined|undefined),
   *   mutate: (function(!VsyncStateDef):undefined|undefined)
   * }}
   */

  var VsyncTaskSpecDef;
  /**
   * Abstraction over requestAnimationFrame (rAF) that batches DOM read (measure)
   * and write (mutate) tasks in a single frame, to eliminate layout thrashing.
   *
   * NOTE: If the document is invisible due to prerendering (this includes
   * application-level prerendering where the doc is rendered in a hidden
   * iframe or webview), then no frame will be scheduled.
   * @package Visible for type.
   */

  var Vsync =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function Vsync(win) {
      var _this = this;

      /** @const {!Window} */
      this.win = win;
      /** @private @const {!./ampdoc-impl.AmpDocService} */

      this.ampdocService_ = _services.Services.ampdocServiceFor(this.win);
      /** @private @const {!./document-state.DocumentState} */

      this.docState_ = _services.Services.documentStateFor(this.win);
      /** @private @const {function(function())}  */

      this.raf_ = this.getRaf_();
      /**
       * Tasks to run in the next frame.
       * @private {!Array<!VsyncTaskSpecDef>}
       */

      this.tasks_ = [];
      /**
       * Double buffer for tasks.
       * @private {!Array<!VsyncTaskSpecDef>}
       */

      this.nextTasks_ = [];
      /**
       * States for tasks in the next frame in the same order.
       * @private {!Array<!VsyncStateDef>}
       */

      this.states_ = [];
      /**
       * Double buffer for states.
       * @private {!Array<!VsyncStateDef>}
       */

      this.nextStates_ = [];
      /**
       * Whether a new animation frame has been scheduled.
       * @private {boolean}
       */

      this.scheduled_ = false;
      /** @private {?Promise} */

      this.nextFramePromise_ = null;
      /** @private {?function()} */

      this.nextFrameResolver_ = null;
      /** @const {!Function} */

      this.boundRunScheduledTasks_ = this.runScheduledTasks_.bind(this);
      /**
       * If the doc is invisible we use this instead of rAF because rAF
       * does not run in that scenario.
       * However, we only do this for non-animation tasks as running
       * animations doesn't make sense when not visible.
       * @const {!Pass}
       */

      this.invisiblePass_ = new _pass.Pass(this.win, this.boundRunScheduledTasks_, FRAME_TIME);
      /**
       * Similar to this.invisiblePass_, but backing up a real rAF call. If we
       * somehow failed to know that we are throttled we use a timer (which
       * may also be throttled but at least runs eventually) to make sure
       * we continue to get work done.
       * @const {!Pass}
       */

      this.backupPass_ = new _pass.Pass(this.win, this.boundRunScheduledTasks_, // We cancel this when rAF fires and really only want it to fire
      // if rAF doesn't work at all.
      FRAME_TIME * 2.5);
      /** @private {?./viewer-impl.Viewer} */

      this.singleDocViewer_ = null; // When the document changes visibility, vsync has to reschedule the queue
      // processing.

      var boundOnVisibilityChanged = this.onVisibilityChanged_.bind(this);

      if (this.ampdocService_.isSingleDoc()) {
        // In a single-doc mode, the visibility of the doc == global visibility.
        // Thus, it's more efficient to only listen to it once.
        _services.Services.viewerPromiseForDoc(this.ampdocService_.getAmpDoc()).then(function (viewer) {
          _this.singleDocViewer_ = viewer;
          viewer.onVisibilityChanged(boundOnVisibilityChanged);
        });
      } else {
        // In multi-doc mode, we track separately the global visibility and
        // per-doc visibility when necessary.
        this.docState_.onVisibilityChanged(boundOnVisibilityChanged);
      }
      /** @private {!JankMeter} */


      this.jankMeter_ = new _jankMeter.JankMeter(this.win);
    }
    /** @private */


    var _proto = Vsync.prototype;

    _proto.onVisibilityChanged_ = function onVisibilityChanged_() {
      if (this.scheduled_) {
        this.forceSchedule_();
      }
    }
    /**
     * Runs vsync task: measure followed by mutate.
     *
     * If state is not provided, the value passed to the measure and mutate
     * will be undefined.
     *
     * @param {!VsyncTaskSpecDef} task
     * @param {!VsyncStateDef=} opt_state
     */
    ;

    _proto.run = function run(task, opt_state) {
      this.tasks_.push(task);
      this.states_.push(opt_state || undefined);
      this.schedule_();
    }
    /**
     * Runs vsync task: measure followed by mutate. Returns the promise that
     * will be resolved as soon as the task has been completed.
     *
     * If state is not provided, the value passed to the measure and mutate
     * will be undefined.
     *
     * @param {!VsyncTaskSpecDef} task
     * @param {!VsyncStateDef=} opt_state
     * @return {!Promise}
     */
    ;

    _proto.runPromise = function runPromise(task, opt_state) {
      this.run(task, opt_state);

      if (this.nextFramePromise_) {
        return this.nextFramePromise_;
      }

      var deferred = new _promise.Deferred();
      this.nextFrameResolver_ = deferred.resolve;
      return this.nextFramePromise_ = deferred.promise;
    }
    /**
     * Creates a function that will call {@link run} method.
     * @param {!VsyncTaskSpecDef} task
     * @return {function(!VsyncStateDef=)}
     */
    ;

    _proto.createTask = function createTask(task) {
      var _this2 = this;

      return (
        /** @type {function(!VsyncStateDef=)} */
        function (opt_state) {
          _this2.run(task, opt_state);
        }
      );
    }
    /**
     * Runs the mutate operation via vsync.
     * @param {function():undefined} mutator
     */
    ;

    _proto.mutate = function mutate(mutator) {
      this.run({
        measure: undefined,
        // For uniform hidden class.
        mutate: mutator
      });
    }
    /**
     * Runs `mutate` wrapped in a promise.
     * @param {function():undefined} mutator
     * @return {!Promise}
     */
    ;

    _proto.mutatePromise = function mutatePromise(mutator) {
      return this.runPromise({
        measure: undefined,
        mutate: mutator
      });
    }
    /**
     * Runs the measure operation via vsync.
     * @param {function():undefined} measurer
     */
    ;

    _proto.measure = function measure(measurer) {
      this.run({
        measure: measurer,
        mutate: undefined // For uniform hidden class.

      });
    }
    /**
     * Runs `measure` wrapped in a promise.
     * @param {function():TYPE} measurer
     * @return {!Promise<TYPE>}
     * @template TYPE
     */
    ;

    _proto.measurePromise = function measurePromise(measurer) {
      var _this3 = this;

      return new Promise(function (resolve) {
        _this3.measure(function () {
          resolve(measurer());
        });
      });
    }
    /**
     * Whether the runtime is allowed to animate at this time.
     * @param {!Node} contextNode
     * @return {boolean}
     */
    ;

    _proto.canAnimate = function canAnimate(contextNode) {
      return this.canAnimate_((0, _log.devAssert)(contextNode));
    }
    /**
     * @param {!Node=} opt_contextNode
     * @return {boolean}
     * @private
     */
    ;

    _proto.canAnimate_ = function canAnimate_(opt_contextNode) {
      // Window level: animations allowed only when global window is visible.
      if (this.docState_.isHidden()) {
        return false;
      } // Single doc: animations allowed when single doc is visible.


      if (this.singleDocViewer_) {
        return this.singleDocViewer_.isVisible();
      } // Multi-doc: animations depend on the state of the relevant doc.


      if (opt_contextNode) {
        var ampdoc = this.ampdocService_.getAmpDocIfAvailable(opt_contextNode);
        return !ampdoc || _services.Services.viewerForDoc(ampdoc).isVisible();
      }

      return true;
    }
    /**
     * Runs the animation vsync task. This operation can only run when animations
     * are allowed. Otherwise, this method returns `false` and exits.
     * @param {!Node} contextNode
     * @param {!VsyncTaskSpecDef} task
     * @param {!VsyncStateDef=} opt_state
     * @return {boolean}
     */
    ;

    _proto.runAnim = function runAnim(contextNode, task, opt_state) {
      // Do not request animation frames when the document is not visible.
      if (!this.canAnimate_(contextNode)) {
        (0, _log.dev)().warn('VSYNC', 'Did not schedule a vsync request, because' + ' document was invisible');
        return false;
      }

      this.run(task, opt_state);
      return true;
    }
    /**
     * Creates an animation vsync task. This operation can only run when
     * animations are allowed. Otherwise, this closure returns `false` and exits.
     * @param {!Node} contextNode
     * @param {!VsyncTaskSpecDef} task
     * @return {function(!VsyncStateDef=):boolean}
     */
    ;

    _proto.createAnimTask = function createAnimTask(contextNode, task) {
      var _this4 = this;

      return (
        /** @type {function(!VsyncStateDef=):boolean} */
        function (opt_state) {
          return _this4.runAnim(contextNode, task, opt_state);
        }
      );
    }
    /**
     * Runs the series of mutates until the mutator returns a false value.
     * @param {!Node} contextNode
     * @param {function(time, time, !VsyncStateDef):boolean} mutator The
     *   mutator callback. Only expected to do DOM writes, not reads. If the
     *   returned value is true, the vsync task will be repeated, otherwise it
     *   will be completed. The arguments are: timeSinceStart:time,
     *   timeSincePrev:time and state:VsyncStateDef.
     * @param {number=} opt_timeout Optional timeout that will force the series
     *   to complete and reject the promise.
     * @return {!Promise} Returns the promise that will either resolve on when
     *   the vsync series are completed or reject in case of failure, such as
     *   timeout.
     */
    ;

    _proto.runAnimMutateSeries = function runAnimMutateSeries(contextNode, mutator, opt_timeout) {
      var _this5 = this;

      if (!this.canAnimate_(contextNode)) {
        return Promise.reject((0, _error.cancellation)());
      }

      return new Promise(function (resolve, reject) {
        var startTime = Date.now();
        var prevTime = 0;

        var task = _this5.createAnimTask(contextNode, {
          mutate: function mutate(state) {
            var timeSinceStart = Date.now() - startTime;
            var res = mutator(timeSinceStart, timeSinceStart - prevTime, state);

            if (!res) {
              resolve();
            } else if (opt_timeout && timeSinceStart > opt_timeout) {
              reject(new Error('timeout'));
            } else {
              prevTime = timeSinceStart;
              task(state);
            }
          }
        });

        task({});
      });
    }
    /** @private */
    ;

    _proto.schedule_ = function schedule_() {
      if (this.scheduled_) {
        return;
      } // Schedule actual animation frame and then run tasks.


      this.scheduled_ = true;
      this.jankMeter_.onScheduled();
      this.forceSchedule_();
    }
    /** @private */
    ;

    _proto.forceSchedule_ = function forceSchedule_() {
      if (this.canAnimate_()) {
        this.raf_(this.boundRunScheduledTasks_);
        this.backupPass_.schedule();
      } else {
        this.invisiblePass_.schedule();
      }
    }
    /**
     * Runs all scheduled tasks. This is typically called in an RAF
     * callback. Tests may call this method to force execution of
     * tasks without waiting.
     * @private
     */
    ;

    _proto.runScheduledTasks_ = function runScheduledTasks_() {
      this.backupPass_.cancel();
      this.scheduled_ = false;
      this.jankMeter_.onRun();
      var tasks = this.tasks_,
          states = this.states_,
          resolver = this.nextFrameResolver_;
      this.nextFrameResolver_ = null;
      this.nextFramePromise_ = null; // Double buffering

      this.tasks_ = this.nextTasks_;
      this.states_ = this.nextStates_;

      for (var i = 0; i < tasks.length; i++) {
        if (tasks[i].measure) {
          if (!callTaskNoInline(tasks[i].measure, states[i])) {
            // Ensure that the mutate is not executed when measure fails.
            tasks[i].mutate = undefined;
          }
        }
      }

      for (var _i = 0; _i < tasks.length; _i++) {
        if (tasks[_i].mutate) {
          callTaskNoInline(tasks[_i].mutate, states[_i]);
        }
      } // Swap last arrays into double buffer.


      this.nextTasks_ = tasks;
      this.nextStates_ = states;
      this.nextTasks_.length = 0;
      this.nextStates_.length = 0;

      if (resolver) {
        resolver();
      }
    }
    /**
     * @return {function(function())} requestAnimationFrame or polyfill.
     */
    ;

    _proto.getRaf_ = function getRaf_() {
      var _this6 = this;

      var raf = this.win.requestAnimationFrame || this.win.webkitRequestAnimationFrame;

      if (raf) {
        return raf.bind(this.win);
      }

      var lastTime = 0;
      return function (fn) {
        var now = Date.now(); // By default we take 16ms between frames, but if the last frame is say
        // 10ms ago, we only want to wait 6ms.

        var timeToCall = Math.max(0, FRAME_TIME - (now - lastTime));
        lastTime = now + timeToCall;

        _this6.win.setTimeout(fn, timeToCall);
      };
    };

    return Vsync;
  }();
  /**
   * For optimization reasons to stop try/catch from blocking optimization.
   * @param {function(!VsyncStateDef):undefined|undefined} callback
   * @param {!VsyncStateDef} state
   */


  exports.Vsync = Vsync;

  function callTaskNoInline(callback, state) {
    (0, _log.devAssert)(callback);

    try {
      var ret = callback(state);

      if (ret !== undefined) {
        (0, _log.dev)().error('VSYNC', 'callback returned a value but vsync cannot ' + 'propogate it: %s', callback.toString());
      }
    } catch (e) {
      (0, _log.rethrowAsync)(e);
      return false;
    }

    return true;
  }
  /**
   * @param {!Window} window
   * @return {!Vsync}
   */


  function vsyncForTesting(window) {
    installVsyncService(window);
    return (0, _service.getService)(window, 'vsync');
  }
  /**
   * @param {!Window} window
   */


  function installVsyncService(window) {
    (0, _timerImpl.installTimerService)(window);
    (0, _service.registerServiceBuilder)(window, 'vsync', Vsync);
  }

  },{"../error":29,"../log":51,"../pass":55,"../service":71,"../services":112,"../utils/promise":134,"./jank-meter":87,"./timer-impl":98}],111:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.xhrServiceForTesting = xhrServiceForTesting;
  exports.installXhrService = installXhrService;
  exports.Xhr = void 0;

  var _services = require("../services");

  var _xhrUtils = require("../utils/xhr-utils");

  var _url = require("../url");

  var _service = require("../service");

  var _formDataWrapper = require("../form-data-wrapper");

  var _log = require("../log");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * A service that polyfills Fetch API for use within AMP.
   *
   * @package Visible for type.
   * @visibleForTesting
   */
  var Xhr =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function Xhr(win) {
      /** @const {!Window} */
      this.win = win;

      var ampdocService = _services.Services.ampdocServiceFor(win); // The isSingleDoc check is required because if in shadow mode, this will
      // throw a console error because the shellShadowDoc_ is not set when
      // fetching the amp doc. So either the test-bind-impl or test pre setup in
      // shadow mode tests needs to be fixed or there is a bug in ampdoc impl
      // getAmpDoc.
      // TODO(alabiaga): This should be investigated and fixed

      /** @private {?./ampdoc-impl.AmpDoc} */


      this.ampdocSingle_ = ampdocService.isSingleDoc() ? ampdocService.getAmpDoc() : null;
    }
    /**
     * We want to call `fetch_` unbound from any context since it could
     * be either the native fetch or our polyfill.
     *
     * @param {string} input
     * @param {!FetchInitDef} init
     * @return {!Promise<!Response>|!Promise<!Response>}
     * @private
     */


    var _proto = Xhr.prototype;

    _proto.fetch_ = function fetch_(input, init) {
      var _this = this,
          _arguments = arguments;

      return (0, _xhrUtils.getViewerInterceptResponse)(this.win, this.ampdocSingle_, input, init).then(function (interceptorResponse) {
        if (interceptorResponse) {
          return interceptorResponse;
        } // After this point, both the native `fetch` and the `fetch` polyfill
        // will expect a native `FormData` object in the `body` property, so
        // the native `FormData` object needs to be unwrapped.


        if ((0, _formDataWrapper.isFormDataWrapper)(init.body)) {
          var formDataWrapper =
          /** @type {!FormDataWrapperInterface} */
          init.body;
          init.body = formDataWrapper.getFormData();
        }

        return _this.win.fetch.apply(null, _arguments);
      });
    }
    /**
     * Performs the final initialization and requests the fetch. It does two
     * main things:
     * - It adds "__amp_source_origin" URL parameter with source origin
     * - It verifies "AMP-Access-Control-Allow-Source-Origin" in the response
     * USE WITH CAUTION: setting ampCors to false disables AMP source origin check
     * but allows for caching resources cross pages.
     *
     * Note: requireAmpResponseSourceOrigin is deprecated. It defaults to
     *   true. Use "ampCors: false" to disable AMP source origin check.
     *
     * @param {string} input
     * @param {!FetchInitDef=} init
     * @return {!Promise<!Response>}
     * @private
     */
    ;

    _proto.fetchAmpCors_ = function fetchAmpCors_(input, init) {
      var _this2 = this;

      if (init === void 0) {
        init = {};
      }

      input = (0, _xhrUtils.setupInput)(this.win, input, init);
      init = (0, _xhrUtils.setupAMPCors)(this.win, input, init);
      return this.fetch_(input, init).then(function (response) {
        return (0, _xhrUtils.verifyAmpCORSHeaders)(_this2.win, response, init);
      }, function (reason) {
        var targetOrigin = (0, _url.parseUrlDeprecated)(input).origin;
        throw (0, _log.user)().createExpectedError('XHR', 'Failed fetching' + (" (" + targetOrigin + "/...):"), reason && reason.message);
      });
    }
    /**
     * Fetches a JSON response. Note this returns the response object, not the
     * response's JSON. #fetchJson merely sets up the request to accept JSON.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch
     *
     * See `fetchAmpCors_` for more detail.
     *
     * @param {string} input
     * @param {?FetchInitDef=} opt_init
     * @param {boolean=} opt_allowFailure Allows non-2XX status codes to fulfill.
     * @return {!Promise<!Response>}
     */
    ;

    _proto.fetchJson = function fetchJson(input, opt_init, opt_allowFailure) {
      return this.fetch(input, (0, _xhrUtils.setupJsonFetchInit)(opt_init));
    }
    /**
     * Fetches a text response. Note this returns the response object, not the
     * response's text. #fetchText merely sets up the request to accept text.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch
     *
     * See `fetchAmpCors_` for more detail.
     *
     * @param {string} input
     * @param {?FetchInitDef=} opt_init
     * @return {!Promise<!Response>}
     */
    ;

    _proto.fetchText = function fetchText(input, opt_init) {
      return this.fetch(input, (0, _xhrUtils.setupInit)(opt_init, 'text/plain'));
    }
    /**
     * @param {string} input URL
     * @param {?FetchInitDef=} opt_init Fetch options object.
     * @return {!Promise<!Response>}
     */
    ;

    _proto.fetch = function fetch(input, opt_init) {
      var init = (0, _xhrUtils.setupInit)(opt_init);
      return this.fetchAmpCors_(input, init).then(function (response) {
        return (0, _xhrUtils.assertSuccess)(response);
      });
    }
    /**
     * Sends the request, awaits result and confirms that it was successful.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch
     *
     * See `fetchAmpCors_` for more detail.
     *
     * @param {string} input
     * @param {!FetchInitDef=} opt_init
     * @return {!Promise}
     */
    ;

    _proto.sendSignal = function sendSignal(input, opt_init) {
      return this.fetchAmpCors_(input, opt_init).then(function (response) {
        return (0, _xhrUtils.assertSuccess)(response);
      });
    }
    /**
     * Add "__amp_source_origin" query parameter to the URL. Ideally, we'd be
     * able to set a header (e.g. AMP-Source-Origin), but this will force
     * preflight request on all CORS request.
     * @param {!Window} win
     * @param {string} url
     * @return {string}
     */
    ;

    _proto.getCorsUrl = function getCorsUrl(win, url) {
      return (0, _url.getCorsUrl)(win, url);
    };

    return Xhr;
  }();
  /**
   * @param {!Window} window
   * @return {!Xhr}
   */


  exports.Xhr = Xhr;

  function xhrServiceForTesting(window) {
    installXhrService(window);
    return (0, _service.getService)(window, 'xhr');
  }
  /**
   * @param {!Window} window
   */


  function installXhrService(window) {
    (0, _service.registerServiceBuilder)(window, 'xhr', Xhr);
  }

  },{"../form-data-wrapper":37,"../log":51,"../service":71,"../services":112,"../url":124,"../utils/xhr-utils":137}],112:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.Services = exports.SubscriptionService = void 0;

  var _service = require("./service");

  var _elementService = require("./element-service");

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @typedef {!../extensions/amp-subscriptions/0.1/amp-subscriptions.SubscriptionService} */
  var SubscriptionService;
  exports.SubscriptionService = SubscriptionService;

  var Services =
  /*#__PURE__*/
  function () {
    function Services() {}

    /**
     * Hint: Add extensions folder path to compile.js with
     * warnings cannot find modules.
     */

    /**
     * Returns a promise for the Access service.
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>}
     */
    Services.accessServiceForDoc = function accessServiceForDoc(element) {
      return (
        /** @type {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>} */
        (0, _elementService.getElementServiceForDoc)(element, 'access', 'amp-access')
      );
    }
    /**
     * Returns a promise for the Access service or a promise for null if the
     * service is not available on the current page.
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>}
     */
    ;

    Services.accessServiceForDocOrNull = function accessServiceForDocOrNull(element) {
      return (
        /** @type {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>} */
        (0, _elementService.getElementServiceIfAvailableForDoc)(element, 'access', 'amp-access')
      );
    }
    /**
     * Returns a promise for the Subscriptions service.
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<!SubscriptionService>}
     */
    ;

    Services.subscriptionsServiceForDoc = function subscriptionsServiceForDoc(element) {
      return (
        /** @type {!Promise<!SubscriptionService>} */
        (0, _elementService.getElementServiceForDoc)(element, 'subscriptions', 'amp-subscriptions')
      );
    }
    /**
     * Returns a promise for the Subscriptions service.
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<?SubscriptionService>}
     */
    ;

    Services.subscriptionsServiceForDocOrNull = function subscriptionsServiceForDocOrNull(element) {
      return (
        /** @type {!Promise<?SubscriptionService>} */
        (0, _elementService.getElementServiceIfAvailableForDoc)(element, 'subscriptions', 'amp-subscriptions')
      );
    }
    /**
     * @param {!Element|!ShadowRoot} element
     * @return {!./service/action-impl.ActionService}
     */
    ;

    Services.actionServiceForDoc = function actionServiceForDoc(element) {
      return (
        /** @type {!./service/action-impl.ActionService} */
        (0, _service.getExistingServiceForDocInEmbedScope)(element, 'action')
      );
    }
    /**
     * @param {!Element|!ShadowRoot} element
     * @return {!./service/standard-actions-impl.StandardActions}
     */
    ;

    Services.standardActionsForDoc = function standardActionsForDoc(element) {
      return (
        /** @type {!./service/standard-actions-impl.StandardActions} */
        (0, _service.getExistingServiceForDocInEmbedScope)(element, 'standard-actions')
      );
    }
    /**
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<!../extensions/amp-analytics/0.1/activity-impl.Activity>}
     */
    ;

    Services.activityForDoc = function activityForDoc(element) {
      return (
        /** @type {!Promise<!../extensions/amp-analytics/0.1/activity-impl.Activity>} */
        (0, _elementService.getElementServiceForDoc)(element, 'activity', 'amp-analytics')
      );
    }
    /**
     * Returns the global instance of the `AmpDocService` service that can be
     * used to resolve an ampdoc for any node: either in the single-doc or
     * shadow-doc environment.
     * @param {!Window} window
     * @return {!./service/ampdoc-impl.AmpDocService}
     */
    ;

    Services.ampdocServiceFor = function ampdocServiceFor(window) {
      return (
        /** @type {!./service/ampdoc-impl.AmpDocService} */
        (0, _service.getService)(window, 'ampdoc')
      );
    }
    /**
     * Returns the AmpDoc for the specified context node.
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!./service/ampdoc-impl.AmpDoc}
     */
    ;

    Services.ampdoc = function ampdoc(elementOrAmpDoc) {
      return (0, _service.getAmpdoc)(elementOrAmpDoc);
    }
    /**
     * @param {!Element|!ShadowRoot} element
     * @param {boolean=} loadAnalytics
     * @return {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}
     */
    ;

    Services.analyticsForDoc = function analyticsForDoc(element, loadAnalytics) {
      if (loadAnalytics === void 0) {
        loadAnalytics = false;
      }

      if (loadAnalytics) {
        // Get Extensions service and force load analytics extension.
        var ampdoc = (0, _service.getAmpdoc)(element);
        Services.extensionsFor(ampdoc.win).
        /*OK*/
        installExtensionForDoc(ampdoc, 'amp-analytics');
      }

      return (
        /** @type {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */
        (0, _elementService.getElementServiceForDoc)(element, 'amp-analytics-instrumentation', 'amp-analytics')
      );
    }
    /**
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}
     */
    ;

    Services.analyticsForDocOrNull = function analyticsForDocOrNull(element) {
      return (
        /** @type {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */
        (0, _elementService.getElementServiceIfAvailableForDoc)(element, 'amp-analytics-instrumentation', 'amp-analytics')
      );
    }
    /**
     * @param {!Window} window
     * @return {!./service/batched-xhr-impl.BatchedXhr}
     */
    ;

    Services.batchedXhrFor = function batchedXhrFor(window) {
      return (
        /** @type {!./service/batched-xhr-impl.BatchedXhr} */
        (0, _service.getService)(window, 'batched-xhr')
      );
    }
    /**
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>}
     */
    ;

    Services.bindForDocOrNull = function bindForDocOrNull(element) {
      return (
        /** @type {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>} */
        (0, _elementService.getElementServiceIfAvailableForDocInEmbedScope)(element, 'bind', 'amp-bind')
      );
    }
    /**
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!Promise<!./service/cid-impl.Cid>}
     */
    ;

    Services.cidForDoc = function cidForDoc(elementOrAmpDoc) {
      return (
        /** @type {!Promise<!./service/cid-impl.Cid>} */
        (0, _service.getServicePromiseForDoc)(elementOrAmpDoc, 'cid')
      );
    }
    /**
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!./service/navigation.Navigation}
     */
    ;

    Services.navigationForDoc = function navigationForDoc(elementOrAmpDoc) {
      return (
        /** @type {!./service/navigation.Navigation} */
        (0, _service.getServiceForDoc)(elementOrAmpDoc, 'navigation')
      );
    }
    /**
     * @param {!Window} window
     * @return {!./service/crypto-impl.Crypto}
     */
    ;

    Services.cryptoFor = function cryptoFor(window) {
      return (
        /** @type {!./service/crypto-impl.Crypto} */
        (0, _service.getService)(window, 'crypto')
      );
    }
    /**
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!./service/document-info-impl.DocumentInfoDef} Info about the doc
     */
    ;

    Services.documentInfoForDoc = function documentInfoForDoc(elementOrAmpDoc) {
      return (
        /** @type {!./service/document-info-impl.DocInfo} */
        (0, _service.getServiceForDoc)(elementOrAmpDoc, 'documentInfo').get()
      );
    }
    /**
     * @param {!Window} window
     * @return {!./service/document-state.DocumentState}
     */
    ;

    Services.documentStateFor = function documentStateFor(window) {
      return (0, _service.getService)(window, 'documentState');
    }
    /**
     * @param {!Window} window
     * @return {!./service/extensions-impl.Extensions}
     */
    ;

    Services.extensionsFor = function extensionsFor(window) {
      return (
        /** @type {!./service/extensions-impl.Extensions} */
        (0, _service.getService)(window, 'extensions')
      );
    }
    /**
     * Returns a service to register callbacks we wish to execute when an
     * amp-form is submitted. This is the sync version used by amp-form only, all
     * other extensions should use `formSubmitPromiseForDoc` below.
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {../extensions/amp-form/0.1/form-submit-service.FormSubmitService}
     */
    ;

    Services.formSubmitForDoc = function formSubmitForDoc(elementOrAmpDoc) {
      return (
        /** @type {!../extensions/amp-form/0.1/form-submit-service.FormSubmitService} */
        (0, _service.getServiceForDoc)(elementOrAmpDoc, 'form-submit-service')
      );
    }
    /**
     * Returns a service to register callbacks we wish to execute when an
     * amp-form is submitted.
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!Promise<../extensions/amp-form/0.1/form-submit-service.FormSubmitService>}
     */
    ;

    Services.formSubmitPromiseForDoc = function formSubmitPromiseForDoc(elementOrAmpDoc) {
      return (
        /** @type {!Promise<../extensions/amp-form/0.1/form-submit-service.FormSubmitService>} */
        (0, _service.getServicePromiseForDoc)(elementOrAmpDoc, 'form-submit-service')
      );
    }
    /**
     * Returns service implemented in service/history-impl.
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!./service/history-impl.History}
     */
    ;

    Services.historyForDoc = function historyForDoc(elementOrAmpDoc) {
      return (
        /** @type {!./service/history-impl.History} */
        (0, _service.getServiceForDoc)(elementOrAmpDoc, 'history')
      );
    }
    /**
     * @param {!Window} win
     * @return {!./input.Input}
     */
    ;

    Services.inputFor = function inputFor(win) {
      return (0, _service.getService)(win, 'input');
    }
    /**s
     * Returns a promise for the Inputmask service.
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<?../extensions/amp-inputmask/0.1/amp-inputmask.AmpInputmaskService>}
     */
    ;

    Services.inputmaskServiceForDocOrNull = function inputmaskServiceForDocOrNull(element) {
      return (
        /** @type {!Promise<?../extensions/amp-inputmask/0.1/amp-inputmask.AmpInputmaskService>} */
        (0, _elementService.getElementServiceIfAvailableForDoc)(element, 'inputmask', 'amp-inputmask')
      );
    }
    /**
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!./service/layers-impl.LayoutLayers}
     */
    ;

    Services.layersForDoc = function layersForDoc(elementOrAmpDoc) {
      return (
        /** @type {!./service/layers-impl.LayoutLayers} */
        (0, _service.getServiceForDoc)(elementOrAmpDoc, 'layers')
      );
    }
    /**
     * @param {!Window} window
     * @return {!./service/performance-impl.Performance}
     */
    ;

    Services.performanceFor = function performanceFor(window) {
      return (
        /** @type {!./service/performance-impl.Performance}*/
        (0, _service.getService)(window, 'performance')
      );
    }
    /**
     * @param {!Window} window
     * @return {!./service/performance-impl.Performance}
     */
    ;

    Services.performanceForOrNull = function performanceForOrNull(window) {
      return (
        /** @type {!./service/performance-impl.Performance}*/
        (0, _service.getExistingServiceOrNull)(window, 'performance')
      );
    }
    /**
     * @param {!Window} window
     * @return {!./service/platform-impl.Platform}
     */
    ;

    Services.platformFor = function platformFor(window) {
      return (
        /** @type {!./service/platform-impl.Platform} */
        (0, _service.getService)(window, 'platform')
      );
    }
    /**
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!./service/resources-impl.Resources}
     */
    ;

    Services.resourcesForDoc = function resourcesForDoc(elementOrAmpDoc) {
      return (
        /** @type {!./service/resources-impl.Resources} */
        (0, _service.getServiceForDoc)(elementOrAmpDoc, 'resources')
      );
    }
    /**
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!Promise<!./service/resources-impl.Resources>}
     */
    ;

    Services.resourcesPromiseForDoc = function resourcesPromiseForDoc(elementOrAmpDoc) {
      return (
        /** @type {!Promise<!./service/resources-impl.Resources>} */
        (0, _service.getServicePromiseForDoc)(elementOrAmpDoc, 'resources')
      );
    }
    /**
     * @param {!Window} win
     * @return {?Promise<?{incomingFragment: string, outgoingFragment: string}>}
     */
    ;

    Services.shareTrackingForOrNull = function shareTrackingForOrNull(win) {
      return (
        /** @type {!Promise<?{incomingFragment: string, outgoingFragment: string}>} */
        (0, _elementService.getElementServiceIfAvailable)(win, 'share-tracking', 'amp-share-tracking', true)
      );
    }
    /**
     * @param {!Window} win
     * @return {?Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>}
     */
    ;

    Services.storyVariableServiceForOrNull = function storyVariableServiceForOrNull(win) {
      return (
        /** @type {!Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>} */
        (0, _elementService.getElementServiceIfAvailable)(win, 'story-variable', 'amp-story', true)
      );
    }
    /**
     * Version of the story store service depends on which version of amp-story
     * the publisher is loading. They all have the same implementation.
     * @param {!Window} win
     * @return {?Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>}
     */
    ;

    Services.storyStoreServiceForOrNull = function storyStoreServiceForOrNull(win) {
      return (
        /** @type {!Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>} */
        (0, _elementService.getElementServiceIfAvailable)(win, 'story-store', 'amp-story')
      );
    }
    /**
     * @param {!Window} win
     * @return {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService}
     */
    ;

    Services.storyStoreService = function storyStoreService(win) {
      return (
        /** @type {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService} */
        (0, _service.getExistingServiceOrNull)(win, 'story-store')
      );
    }
    /**
     * @param {!Window} win
     * @return {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService}
     */
    ;

    Services.storyRequestService = function storyRequestService(win) {
      return (
        /** @type {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService} */
        (0, _service.getExistingServiceOrNull)(win, 'story-request')
      );
    }
    /**
     * @param {!Window} win
     * @return {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>}
     */
    ;

    Services.localizationServiceForOrNull = function localizationServiceForOrNull(win) {
      return (
        /** @type {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>} */
        (0, _elementService.getElementServiceIfAvailable)(win, 'localization', 'amp-story', true)
      );
    }
    /**
     * @param {!Window} win
     * @return {!../extensions/amp-story/1.0/localization.LocalizationService}
     */
    ;

    Services.localizationService = function localizationService(win) {
      return (0, _service.getService)(win, 'localization');
    }
    /**
     * @param {!Window} win
     * @return {!Promise<?../extensions/amp-story/1.0/story-analytics.StoryAnalyticsService>}
     */
    ;

    Services.storyAnalyticsServiceForOrNull = function storyAnalyticsServiceForOrNull(win) {
      return (
        /** @type {!Promise<?../extensions/amp-story/1.0/story-analytics.StoryAnalyticsService>} */
        (0, _elementService.getElementServiceIfAvailable)(win, 'story-analytics', 'amp-story', true)
      );
    }
    /**
     * @param {!Window} win
     * @return {?../extensions/amp-story/1.0/story-analytics.StoryAnalyticsService}
     */
    ;

    Services.storyAnalyticsService = function storyAnalyticsService(win) {
      return (
        /** @type {?../extensions/amp-story/1.0/story-analytics.StoryAnalyticsService} */
        (0, _service.getExistingServiceOrNull)(win, 'story-analytics')
      );
    }
    /**
     * TODO(#14357): Remove this when amp-story:0.1 is deprecated.
     * @param {!Window} win
     * @return {!../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService}
     */
    ;

    Services.storyStoreServiceV01 = function storyStoreServiceV01(win) {
      return (0, _service.getService)(win, 'story-store');
    }
    /**
     * TODO(#14357): Remove this when amp-story:0.1 is deprecated.
     * @param {!Window} win
     * @return {!../extensions/amp-story/0.1/amp-story-request-service.AmpStoryRequestService}
     */
    ;

    Services.storyRequestServiceV01 = function storyRequestServiceV01(win) {
      return (0, _service.getService)(win, 'story-request-v01');
    }
    /**
     * TODO(#14357): Remove this when amp-story:0.1 is deprecated.
     * @param {!Window} win
     * @return {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>}
     */
    ;

    Services.localizationServiceForOrNullV01 = function localizationServiceForOrNullV01(win) {
      return (
        /** @type {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>} */
        (0, _elementService.getElementServiceIfAvailable)(win, 'localization-v01', 'amp-story', true)
      );
    }
    /**
     * TODO(#14357): Remove this when amp-story:0.1 is deprecated.
     * @param {!Window} win
     * @return {!../extensions/amp-story/0.1/localization.LocalizationService}
     */
    ;

    Services.localizationServiceV01 = function localizationServiceV01(win) {
      return (0, _service.getService)(win, 'localization-v01');
    }
    /**
     * @param {!Window} win
     * @return {?Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>}
     */
    ;

    Services.viewerIntegrationVariableServiceForOrNull = function viewerIntegrationVariableServiceForOrNull(win) {
      return (
        /** @type {!Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>} */
        (0, _elementService.getElementServiceIfAvailable)(win, 'viewer-integration-variable', 'amp-viewer-integration', true)
      );
    }
    /**
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>}
     */
    ;

    Services.webAnimationServiceFor = function webAnimationServiceFor(element) {
      return (
        /** @type {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>} */
        (0, _elementService.getElementServiceForDoc)(element, 'web-animation', 'amp-animation')
      );
    }
    /**
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!Promise<!./service/storage-impl.Storage>}
     */
    ;

    Services.storageForDoc = function storageForDoc(elementOrAmpDoc) {
      return (
        /** @type {!Promise<!./service/storage-impl.Storage>} */
        (0, _service.getServicePromiseForDoc)(elementOrAmpDoc, 'storage')
      );
    }
    /**
     * @param {!Window} window
     * @return {!./service/template-impl.Templates}
     */
    ;

    Services.templatesFor = function templatesFor(window) {
      return (
        /** @type {!./service/template-impl.Templates} */
        (0, _service.getService)(window, 'templates')
      );
    }
    /**
     * @param {!Window} window
     * @return {!./service/timer-impl.Timer}
     */
    ;

    Services.timerFor = function timerFor(window) {
      // TODO(alabiaga): This will always return the top window's Timer service.
      return (
        /** @type {!./service/timer-impl.Timer} */
        (0, _service.getService)(window, 'timer')
      );
    }
    /**
     * @param {!Element|!ShadowRoot} element
     * @return {!./service/url-replacements-impl.UrlReplacements}
     */
    ;

    Services.urlReplacementsForDoc = function urlReplacementsForDoc(element) {
      return (
        /** @type {!./service/url-replacements-impl.UrlReplacements} */
        (0, _service.getExistingServiceForDocInEmbedScope)(element, 'url-replace')
      );
    }
    /**
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>}
     */
    ;

    Services.userNotificationManagerForDoc = function userNotificationManagerForDoc(element) {
      return (
        /** @type {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>} */
        (0, _elementService.getElementServiceForDoc)(element, 'userNotificationManager', 'amp-user-notification')
      );
    }
    /**
     * Returns a promise for the consentPolicy Service or a promise for null if
     * the service is not available on the current page.
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>}
     */
    ;

    Services.consentPolicyServiceForDocOrNull = function consentPolicyServiceForDocOrNull(element) {
      return (
        /** @type {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>} */
        (0, _elementService.getElementServiceIfAvailableForDoc)(element, 'consentPolicyManager', 'amp-consent')
      );
    }
    /**
     * Returns a promise for the geo service or a promise for null if
     * the service is not available on the current page.
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>}
     */
    ;

    Services.geoForDocOrNull = function geoForDocOrNull(element) {
      return (
        /** @type {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>} */
        (0, _elementService.getElementServiceIfAvailableForDoc)(element, 'geo', 'amp-geo', true)
      );
    }
    /**
     * Unlike most service getters, passing `Node` is necessary for some FIE-scope
     * services since sometimes we only have the FIE Document for context.
     * @param {!Element|!ShadowRoot} element
     * @return {!./service/url-impl.Url}
     */
    ;

    Services.urlForDoc = function urlForDoc(element) {
      return (
        /** @type {!./service/url-impl.Url} */
        (0, _service.getExistingServiceForDocInEmbedScope)(element, 'url')
      );
    }
    /**
     * Returns a promise for the experiment variants or a promise for null if it
     * is not available on the current page.
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<?../extensions/amp-experiment/0.1/variant.Variants>}
     */
    ;

    Services.variantsForDocOrNull = function variantsForDocOrNull(element) {
      return (
        /** @type {!Promise<?../extensions/amp-experiment/0.1/variant.Variants>} */
        (0, _elementService.getElementServiceIfAvailableForDoc)(element, 'variant', 'amp-experiment', true)
      );
    }
    /**
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!./service/video-manager-impl.VideoManager}
     */
    ;

    Services.videoManagerForDoc = function videoManagerForDoc(elementOrAmpDoc) {
      return (
        /** @type {!./service/video-manager-impl.VideoManager} */
        (0, _service.getServiceForDoc)(elementOrAmpDoc, 'video-manager')
      );
    }
    /**
     * @param {!Element|!ShadowRoot} element
     * @return {!Promise<?../extensions/amp-viewer-assistance/0.1/amp-viewer-assistance.AmpViewerAssistance>}
     */
    ;

    Services.viewerAssistanceForDocOrNull = function viewerAssistanceForDocOrNull(element) {
      return (
        /** @type {!Promise<?../extensions/amp-viewer-assistance/0.1/amp-viewer-assistance.AmpViewerAssistance>} */
        (0, _elementService.getElementServiceIfAvailableForDoc)(element, 'amp-viewer-assistance', 'amp-viewer-assistance')
      );
    }
    /**
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!./service/viewer-impl.Viewer}
     */
    ;

    Services.viewerForDoc = function viewerForDoc(elementOrAmpDoc) {
      return (
        /** @type {!./service/viewer-impl.Viewer} */
        (0, _service.getServiceForDoc)(elementOrAmpDoc, 'viewer')
      );
    }
    /**
     * Returns promise for the viewer. This is an unusual case and necessary only
     * for services that need reference to the viewer before it has been
     * initialized. Most of the code, however, just should use `viewerForDoc`.
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!Promise<!./service/viewer-impl.Viewer>}
     */
    ;

    Services.viewerPromiseForDoc = function viewerPromiseForDoc(elementOrAmpDoc) {
      return (
        /** @type {!Promise<!./service/viewer-impl.Viewer>} */
        (0, _service.getServicePromiseForDoc)(elementOrAmpDoc, 'viewer')
      );
    }
    /**
     * @param {!Window} window
     * @return {!./service/vsync-impl.Vsync}
     */
    ;

    Services.vsyncFor = function vsyncFor(window) {
      return (
        /** @type {!./service/vsync-impl.Vsync} */
        (0, _service.getService)(window, 'vsync')
      );
    }
    /**
     * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
     * @return {!./service/viewport/viewport-impl.Viewport}
     */
    ;

    Services.viewportForDoc = function viewportForDoc(elementOrAmpDoc) {
      return (
        /** @type {!./service/viewport/viewport-impl.Viewport} */
        (0, _service.getServiceForDoc)(elementOrAmpDoc, 'viewport')
      );
    }
    /**
     * @param {!Window} window
     * @return {!./service/xhr-impl.Xhr}
     */
    ;

    Services.xhrFor = function xhrFor(window) {
      return (
        /** @type {!./service/xhr-impl.Xhr} */
        (0, _service.getService)(window, 'xhr')
      );
    };

    return Services;
  }();

  exports.Services = Services;

  },{"./element-service":27,"./service":71}],113:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.createShadowRoot = createShadowRoot;
  exports.isShadowRoot = isShadowRoot;
  exports.getShadowRootNode = getShadowRootNode;
  exports.importShadowBody = importShadowBody;
  exports.transformShadowCss = transformShadowCss;
  exports.scopeShadowCss = scopeShadowCss;
  exports.setShadowDomStreamingSupportedForTesting = setShadowDomStreamingSupportedForTesting;
  exports.isShadowDomStreamingSupported = isShadowDomStreamingSupported;
  exports.createShadowDomWriter = createShadowDomWriter;
  exports.ShadowDomWriterBulk = exports.ShadowDomWriterStreamer = exports.ShadowDomWriter = void 0;

  var _services = require("./services");

  var _ShadowCSS = require("../third_party/webcomponentsjs/ShadowCSS");

  var _webComponents = require("./web-components");

  var _dom = require("./dom");

  var _log = require("./log");

  var _css = require("./css");

  var _styleInstaller = require("./style-installer");

  var _style = require("./style");

  var _types = require("./types");

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  /**
   * Used for non-composed root-node search. See `getRootNode`.
   * @const {!GetRootNodeOptions}
   */
  var UNCOMPOSED_SEARCH = {
    composed: false
  };
  /** @const {!RegExp} */

  var CSS_SELECTOR_BEG_REGEX = /[^\.\-\_0-9a-zA-Z]/;
  /** @const {!RegExp} */

  var CSS_SELECTOR_END_REGEX = /[^\-\_0-9a-zA-Z]/;
  /**
   * @type {boolean|undefined}
   */

  var shadowDomStreamingSupported;
  /**
   * Creates a shadow root for the specified host and returns it. Polyfills
   * shadow root creation if necessary.
   * @param {!Element} hostElement
   * @return {!ShadowRoot}
   */

  function createShadowRoot(hostElement) {
    var win = (0, _types.toWin)(hostElement.ownerDocument.defaultView);
    var existingRoot = hostElement.shadowRoot || hostElement.__AMP_SHADOW_ROOT;

    if (existingRoot) {
      existingRoot.
      /*OK*/
      innerHTML = '';
      return existingRoot;
    }

    var shadowRoot;
    var shadowDomSupported = (0, _webComponents.getShadowDomSupportedVersion)();

    if (shadowDomSupported == _webComponents.ShadowDomVersion.V1) {
      shadowRoot = hostElement.attachShadow({
        mode: 'open'
      });

      if (!shadowRoot.styleSheets) {
        Object.defineProperty(shadowRoot, 'styleSheets', {
          get: function get() {
            var items = [];
            (0, _dom.iterateCursor)(shadowRoot.childNodes, function (child) {
              if (child.tagName === 'STYLE') {
                items.push(child.sheet);
              }
            });
            return items;
          }
        });
      }
    } else if (shadowDomSupported == _webComponents.ShadowDomVersion.V0) {
      shadowRoot = hostElement.createShadowRoot();
    } else {
      shadowRoot = createShadowRootPolyfill(hostElement);
    }

    if (!(0, _webComponents.isShadowCssSupported)()) {
      var rootId = "i-amphtml-sd-" + win.Math.floor(win.Math.random() * 10000);
      shadowRoot.id = rootId;
      shadowRoot.host.classList.add(rootId); // CSS isolation.

      (0, _styleInstaller.installCssTransformer)(shadowRoot, function (css) {
        return transformShadowCss(shadowRoot, css);
      });
    }

    return shadowRoot;
  }
  /**
   * Shadow root polyfill.
   * @param {!Element} hostElement
   * @return {!ShadowRoot}
   */


  function createShadowRootPolyfill(hostElement) {
    var doc = hostElement.ownerDocument; // Host CSS polyfill.

    hostElement.classList.add('i-amphtml-shadow-host-polyfill');
    var hostStyle = doc.createElement('style');
    hostStyle.textContent = '.i-amphtml-shadow-host-polyfill>:not(i-amphtml-shadow-root)' + '{display:none!important}';
    hostElement.appendChild(hostStyle); // Shadow root.

    var shadowRoot =
    /** @type {!ShadowRoot} */
    // Cast to ShadowRoot even though it is an Element
    // TODO(@dvoytenko) Consider to switch to a type union instead.

    /** @type {?}  */
    doc.createElement('i-amphtml-shadow-root');
    hostElement.appendChild(shadowRoot);
    hostElement.__AMP_SHADOW_ROOT = shadowRoot;
    Object.defineProperty(hostElement, 'shadowRoot', {
      enumerable: true,
      configurable: true,
      value: shadowRoot
    }); // API: https://www.w3.org/TR/shadow-dom/#the-shadowroot-interface

    shadowRoot.host = hostElement; // `getElementById` is resolved via `querySelector('#id')`.

    shadowRoot.getElementById = function (id) {
      var escapedId = (0, _css.escapeCssSelectorIdent)(id);
      return (
        /** @type {HTMLElement|null} */
        shadowRoot.
        /*OK*/
        querySelector("#" + escapedId)
      );
    }; // The styleSheets property should have a list of local styles.


    Object.defineProperty(shadowRoot, 'styleSheets', {
      get: function get() {
        if (!doc.styleSheets) {
          return [];
        }

        return (0, _types.toArray)(doc.styleSheets).filter(function (styleSheet) {
          return shadowRoot.contains(styleSheet.ownerNode);
        });
      }
    });
    return shadowRoot;
  }
  /**
   * Determines if value is actually a `ShadowRoot` node.
   * @param {*} value
   * @return {boolean}
   */


  function isShadowRoot(value) {
    if (!value) {
      return false;
    } // Node.nodeType == DOCUMENT_FRAGMENT to speed up the tests. Unfortunately,
    // nodeType of DOCUMENT_FRAGMENT is used currently for ShadowRoot nodes.


    if (value.tagName == 'I-AMPHTML-SHADOW-ROOT') {
      return true;
    }

    return value.nodeType ==
    /* DOCUMENT_FRAGMENT */
    11 && Object.prototype.toString.call(value) === '[object ShadowRoot]';
  }
  /**
   * Return shadow root for the specified node.
   * @param {!Node} node
   * @return {?ShadowRoot}
   */


  function getShadowRootNode(node) {
    if ((0, _webComponents.isShadowDomSupported)() && Node.prototype.getRootNode) {
      return (
        /** @type {?ShadowRoot} */
        node.getRootNode(UNCOMPOSED_SEARCH)
      );
    } // Polyfill shadow root lookup.


    return (
      /** @type {?ShadowRoot} */
      (0, _dom.closestNode)(node, function (n) {
        return isShadowRoot(n);
      })
    );
  }
  /**
   * Imports a body into a shadow root with the workaround for a polyfill case.
   * @param {!ShadowRoot} shadowRoot
   * @param {!Element} body
   * @param {boolean} deep
   * @return {!Element}
   */


  function importShadowBody(shadowRoot, body, deep) {
    var doc = shadowRoot.ownerDocument;
    var resultBody;

    if ((0, _webComponents.isShadowCssSupported)()) {
      resultBody = (0, _log.dev)().assertElement(doc.importNode(body, deep));
    } else {
      resultBody = doc.createElement('amp-body');
      (0, _style.setInitialDisplay)(resultBody, 'block');

      for (var i = 0; i < body.attributes.length; i++) {
        resultBody.setAttribute(body.attributes[0].name, body.attributes[0].value);
      }

      if (deep) {
        for (var n = body.firstChild; !!n; n = n.nextSibling) {
          resultBody.appendChild(doc.importNode(n, true));
        }
      }
    }

    (0, _style.setStyle)(resultBody, 'position', 'relative');
    shadowRoot.appendChild(resultBody);
    Object.defineProperty(shadowRoot, 'body', {
      value: resultBody
    });
    return resultBody;
  }
  /**
   * If necessary, transforms CSS to isolate AMP CSS within the shaodw root and
   * reduce the possibility of high-level conflicts.
   * @param {!ShadowRoot} shadowRoot
   * @param {string} css
   * @return {string}
   */


  function transformShadowCss(shadowRoot, css) {
    return scopeShadowCss(shadowRoot, css);
  }
  /**
   * Transforms CSS to isolate AMP CSS within the shadow root and reduce the
   * possibility of high-level conflicts. There are two types of transformations:
   * 1. Root transformation: `body` -> `amp-body`, etc.
   * 2. Scoping: `a {}` -> `.i-amphtml-sd-123 a {}`.
   *
   * @param {!ShadowRoot} shadowRoot
   * @param {string} css
   * @return {string}
   * @visibleForTesting
   */


  function scopeShadowCss(shadowRoot, css) {
    var id = (0, _log.devAssert)(shadowRoot.id);
    var doc = shadowRoot.ownerDocument;
    var rules = null; // Try to use a separate document.

    try {
      rules = getStylesheetRules(doc.implementation.createHTMLDocument(''), css);
    } catch (e) {} // Ignore.
    // Try to use the current document.


    if (!rules) {
      try {
        rules = getStylesheetRules(doc, css);
      } catch (e) {// Ignore.
      }
    } // No rules could be parsed - return css as is.


    if (!rules) {
      return css;
    } // Patch selectors.
    // Invoke `ShadowCSS.scopeRules` via `call` because the way it uses `this`
    // internally conflicts with Closure compiler's advanced optimizations.


    var scopeRules = _ShadowCSS.ShadowCSS.scopeRules;
    return scopeRules.call(_ShadowCSS.ShadowCSS, rules, "." + id, transformRootSelectors);
  }
  /**
   * Replaces top-level selectors such as `html` and `body` with their polyfill
   * counterparts: `amp-html` and `amp-body`.
   * @param {string} selector
   * @return {string}
   */


  function transformRootSelectors(selector) {
    return selector.replace(/(html|body)/g, rootSelectorPrefixer);
  }
  /**
   * See `transformRootSelectors`.
   * @param {string} match
   * @param {string} name
   * @param {number} pos
   * @param {string} selector
   * @return {string}
   * @private
   */


  function rootSelectorPrefixer(match, name, pos, selector) {
    var prev = selector.charAt(pos - 1);
    var next = selector.charAt(pos + match.length);

    if ((!prev || CSS_SELECTOR_BEG_REGEX.test(prev)) && (!next || CSS_SELECTOR_END_REGEX.test(next))) {
      return 'amp-' + match;
    }

    return match;
  }
  /**
   * @param {!Document} doc
   * @param {string} css
   * @return {?CSSRuleList}
   */


  function getStylesheetRules(doc, css) {
    var style = doc.createElement('style');
    style.
    /*OK*/
    textContent = css;

    try {
      (doc.head || doc.documentElement).appendChild(style);

      if (style.sheet) {
        return style.sheet.cssRules;
      }

      return null;
    } finally {
      if (style.parentNode) {
        style.parentNode.removeChild(style);
      }
    }
  }
  /**
   * @param {boolean|undefined} val
   * @visibleForTesting
   */


  function setShadowDomStreamingSupportedForTesting(val) {
    shadowDomStreamingSupported = val;
  }
  /**
   * Returns `true` if the Shadow DOM streaming is supported.
   * @param {!Window} win
   * @return {boolean}
   */


  function isShadowDomStreamingSupported(win) {
    if (shadowDomStreamingSupported === undefined) {
      shadowDomStreamingSupported = calcShadowDomStreamingSupported(win);
    }

    return shadowDomStreamingSupported;
  }
  /**
   * @param {!Window} win
   * @return {boolean}
   */


  function calcShadowDomStreamingSupported(win) {
    // API must be supported.
    if (!win.document.implementation || typeof win.document.implementation.createHTMLDocument != 'function') {
      return false;
    } // Firefox does not support DOM streaming.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=867102


    if (_services.Services.platformFor(win).isFirefox()) {
      return false;
    } // Assume full streaming support.


    return true;
  }
  /**
   * Creates the Shadow DOM writer available on this platform.
   * @param {!Window} win
   * @return {!ShadowDomWriter}
   */


  function createShadowDomWriter(win) {
    if (isShadowDomStreamingSupported(win)) {
      return new ShadowDomWriterStreamer(win);
    }

    return new ShadowDomWriterBulk(win);
  }
  /**
   * Takes as an input a text stream, parses it and incrementally reconstructs
   * it in the shadow root.
   *
   * See https://jakearchibald.com/2016/fun-hacks-faster-content/ for more
   * details.
   *
   * @interface
   * @extends {WritableStreamDefaultWriter}
   * @visibleForTesting
   */


  var ShadowDomWriter =
  /*#__PURE__*/
  function () {
    function ShadowDomWriter() {}

    var _proto = ShadowDomWriter.prototype;

    /**
     * Sets the callback that will be called when body has been parsed.
     *
     * Unlike most of other nodes, `<body>` cannot be simply merged to support
     * SD polyfill where the use of `<body>` element is not possible. The
     * callback will be given the parsed document and it must return back
     * the reconstructed `<body>` node in the target DOM where all children
     * will be streamed into.
     *
     * @param {function(!Document):!Element} unusedCallback
     */
    _proto.onBody = function onBody(unusedCallback) {}
    /**
     * Sets the callback that will be called when new nodes have been merged
     * into the target DOM.
     * @param {function()} unusedCallback
     */
    ;

    _proto.onBodyChunk = function onBodyChunk(unusedCallback) {}
    /**
     * Sets the callback that will be called when the DOM has been fully
     * constructed.
     * @param {function()} unusedCallback
     */
    ;

    _proto.onEnd = function onEnd(unusedCallback) {};

    return ShadowDomWriter;
  }();
  /**
   * Takes as an input a text stream, parses it and incrementally reconstructs
   * it in the shadow root.
   *
   * See https://jakearchibald.com/2016/fun-hacks-faster-content/ for more
   * details.
   *
   * @implements {ShadowDomWriter}
   * @visibleForTesting
   */


  exports.ShadowDomWriter = ShadowDomWriter;

  var ShadowDomWriterStreamer =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function ShadowDomWriterStreamer(win) {
      /** @const @private {!Document} */
      this.parser_ = win.document.implementation.createHTMLDocument('');
      this.parser_.open();
      /** @const @private */

      this.vsync_ = _services.Services.vsyncFor(win);
      /** @private @const */

      this.boundMerge_ = this.merge_.bind(this);
      /** @private {?function(!Document):!Element} */

      this.onBody_ = null;
      /** @private {?function()} */

      this.onBodyChunk_ = null;
      /** @private {?function()} */

      this.onEnd_ = null;
      /** @private {boolean} */

      this.mergeScheduled_ = false;
      /** @const @private {!Promise} */

      this.success_ = Promise.resolve();
      /** @private {boolean} */

      this.eof_ = false;
      /** @private {?Element} */

      this.targetBody_ = null;
    }
    /** @override */


    var _proto2 = ShadowDomWriterStreamer.prototype;

    _proto2.onBody = function onBody(callback) {
      this.onBody_ = callback;
    }
    /** @override */
    ;

    _proto2.onBodyChunk = function onBodyChunk(callback) {
      this.onBodyChunk_ = callback;
    }
    /** @override */
    ;

    _proto2.onEnd = function onEnd(callback) {
      this.onEnd_ = callback;
    }
    /** @override */
    ;

    _proto2.write = function write(chunk) {
      if (this.eof_) {
        throw new Error('closed already');
      }

      if (chunk) {
        this.parser_.write(
        /** @type {string} */
        chunk);
      }

      this.schedule_();
      return this.success_;
    }
    /** @override */
    ;

    _proto2.close = function close() {
      this.parser_.close();
      this.eof_ = true;
      this.schedule_();
      return this.success_;
    }
    /** @override */
    ;

    _proto2.abort = function abort(unusedReason) {
      throw new Error('Not implemented');
    }
    /** @override */
    ;

    _proto2.releaseLock = function releaseLock() {
      throw new Error('Not implemented');
    }
    /** @override */
    ;

    /** @private */
    _proto2.schedule_ = function schedule_() {
      (0, _log.devAssert)(this.onBody_ && this.onBodyChunk_ && this.onEnd_);

      if (!this.mergeScheduled_) {
        this.mergeScheduled_ = true;
        this.vsync_.mutate(this.boundMerge_);
      }
    }
    /** @private */
    ;

    _proto2.merge_ = function merge_() {
      this.mergeScheduled_ = false; // Body has been newly parsed.

      if (!this.targetBody_ && this.parser_.body) {
        this.targetBody_ = this.onBody_(this.parser_);
      } // Merge body children.


      if (this.targetBody_) {
        var inputBody =
        /** @type !Element */
        (0, _log.devAssert)(this.parser_.body);
        var targetBody = (0, _log.devAssert)(this.targetBody_);
        var transferCount = 0;
        removeNoScriptElements(inputBody);

        while (inputBody.firstChild) {
          transferCount++;
          targetBody.appendChild(inputBody.firstChild);
        }

        if (transferCount > 0) {
          this.onBodyChunk_();
        }
      } // EOF.


      if (this.eof_) {
        this.onEnd_();
      }
    };

    _createClass(ShadowDomWriterStreamer, [{
      key: "closed",
      get: function get() {
        throw new Error('Not implemented');
      }
      /** @override */

    }, {
      key: "desiredSize",
      get: function get() {
        throw new Error('Not implemented');
      }
      /** @override */

    }, {
      key: "ready",
      get: function get() {
        throw new Error('Not implemented');
      }
    }]);

    return ShadowDomWriterStreamer;
  }();
  /**
   * Takes as an input a text stream, aggregates it and parses it in one bulk.
   * This is a workaround against the browsers that do not support streaming DOM
   * parsing. Mainly currently Firefox.
   *
   * See https://github.com/whatwg/html/issues/2827 and
   * https://bugzilla.mozilla.org/show_bug.cgi?id=867102
   *
   * @implements {ShadowDomWriter}
   * @visibleForTesting
   */


  exports.ShadowDomWriterStreamer = ShadowDomWriterStreamer;

  var ShadowDomWriterBulk =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Window} win
     */
    function ShadowDomWriterBulk(win) {
      /** @private {!Array<string>} */
      this.fullHtml_ = [];
      /** @const @private */

      this.vsync_ = _services.Services.vsyncFor(win);
      /** @private {?function(!Document):!Element} */

      this.onBody_ = null;
      /** @private {?function()} */

      this.onBodyChunk_ = null;
      /** @private {?function()} */

      this.onEnd_ = null;
      /** @const @private {!Promise} */

      this.success_ = Promise.resolve();
      /** @private {boolean} */

      this.eof_ = false;
    }
    /** @override */


    var _proto3 = ShadowDomWriterBulk.prototype;

    _proto3.onBody = function onBody(callback) {
      this.onBody_ = callback;
    }
    /** @override */
    ;

    _proto3.onBodyChunk = function onBodyChunk(callback) {
      this.onBodyChunk_ = callback;
    }
    /** @override */
    ;

    _proto3.onEnd = function onEnd(callback) {
      this.onEnd_ = callback;
    }
    /** @override */
    ;

    _proto3.write = function write(chunk) {
      (0, _log.devAssert)(this.onBody_ && this.onBodyChunk_ && this.onEnd_);

      if (this.eof_) {
        throw new Error('closed already');
      }

      if (chunk) {
        this.fullHtml_.push((0, _log.dev)().assertString(chunk));
      }

      return this.success_;
    }
    /** @override */
    ;

    _proto3.close = function close() {
      var _this = this;

      (0, _log.devAssert)(this.onBody_ && this.onBodyChunk_ && this.onEnd_);
      this.eof_ = true;
      this.vsync_.mutate(function () {
        return _this.complete_();
      });
      return this.success_;
    }
    /** @override */
    ;

    _proto3.abort = function abort(unusedReason) {
      throw new Error('Not implemented');
    }
    /** @override */
    ;

    _proto3.releaseLock = function releaseLock() {
      throw new Error('Not implemented');
    }
    /** @override */
    ;

    /** @private */
    _proto3.complete_ = function complete_() {
      var fullHtml = this.fullHtml_.join('');
      var doc = new DOMParser().parseFromString(fullHtml, 'text/html'); // Merge body.

      if (doc.body) {
        var inputBody = doc.body;
        var targetBody = this.onBody_(doc);
        var transferCount = 0;
        removeNoScriptElements(inputBody);

        while (inputBody.firstChild) {
          transferCount++;
          targetBody.appendChild(inputBody.firstChild);
        }

        if (transferCount > 0) {
          this.onBodyChunk_();
        }
      } // EOF.


      this.onEnd_();
    };

    _createClass(ShadowDomWriterBulk, [{
      key: "closed",
      get: function get() {
        throw new Error('Not implemented');
      }
      /** @override */

    }, {
      key: "desiredSize",
      get: function get() {
        throw new Error('Not implemented');
      }
      /** @override */

    }, {
      key: "ready",
      get: function get() {
        throw new Error('Not implemented');
      }
    }]);

    return ShadowDomWriterBulk;
  }();
  /**
   * Remove any noscript elements.
   *
   * According to the spec
   * (https://w3c.github.io/DOM-Parsing/#the-domparser-interface), with
   * `DOMParser().parseFromString`, contents of `noscript` get parsed as markup,
   * so we need to remove them manually. Why? ¯\_(ツ)_/¯ `createHTMLDocument()`
   * seems to behave the same way.
   *
   * @param {!Element} parent
   */


  exports.ShadowDomWriterBulk = ShadowDomWriterBulk;

  function removeNoScriptElements(parent) {
    var noscriptElements = (0, _dom.childElementsByTag)(parent, 'noscript');
    (0, _dom.iterateCursor)(noscriptElements, function (element) {
      (0, _dom.removeElement)(element);
    });
  }

  },{"../third_party/webcomponentsjs/ShadowCSS":143,"./css":21,"./dom":26,"./log":51,"./services":112,"./style":118,"./style-installer":117,"./types":121,"./web-components":140}],114:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.parseSizeList = parseSizeList;
  exports.SizeList = void 0;

  var _layout = require("./layout");

  var _log = require("./log");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * A single option within a SizeList.
   * @typedef {{
   *   mediaQuery: (string|undefined),
   *   size: (!./layout.LengthDef)
   * }}
   */
  var SizeListOptionDef;
  /**
   * Parses the text representation of "sizes" into SizeList object.
   *
   * There could be any number of size options within the SizeList. They are tried
   * in the order they were defined. The final size option must not have "media"
   * condition specified. All other size options must have "media" condition
   * specified.
   *
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes
   * See http://www.w3.org/html/wg/drafts/html/master/semantics.html#attr-img-sizes
   * @param {string} s
   * @param {boolean=} opt_allowPercentAsLength when parsing heights
   * @return {!SizeList}
   */

  function parseSizeList(s, opt_allowPercentAsLength) {
    var sSizes = s.split(',');
    (0, _log.userAssert)(sSizes.length > 0, 'sizes has to have at least one size');
    var sizes = [];
    sSizes.forEach(function (sSize) {
      sSize = sSize.replace(/\s+/g, ' ').trim();

      if (sSize.length == 0) {
        return;
      }

      var mediaStr;
      var sizeStr; // Process the expression from the end.

      var lastChar = sSize.charAt(sSize.length - 1);
      var div;
      var func = false;

      if (lastChar == ')') {
        // Value is the CSS function, e.g. `calc(50vw + 10px)`.
        func = true; // First, skip to the opening paren.

        var parens = 1;
        div = sSize.length - 2;

        for (; div >= 0; div--) {
          var c = sSize.charAt(div);

          if (c == '(') {
            parens--;
          } else if (c == ')') {
            parens++;
          }

          if (parens == 0) {
            break;
          }
        } // Then, skip to the begining to the function's name.


        var funcEnd = div - 1;

        if (div > 0) {
          div--;

          for (; div >= 0; div--) {
            var _c = sSize.charAt(div);

            if (!(_c == '%' || _c == '-' || _c == '_' || _c >= 'a' && _c <= 'z' || _c >= 'A' && _c <= 'Z' || _c >= '0' && _c <= '9')) {
              break;
            }
          }
        }

        (0, _log.userAssert)(div < funcEnd, 'Invalid CSS function in "%s"', sSize);
      } else {
        // Value is the length or a percent: accept a wide range of values,
        // including invalid values - they will be later asserted to conform
        // to exact CSS length or percent value.
        div = sSize.length - 2;

        for (; div >= 0; div--) {
          var _c2 = sSize.charAt(div);

          if (!(_c2 == '%' || _c2 == '.' || _c2 >= 'a' && _c2 <= 'z' || _c2 >= 'A' && _c2 <= 'Z' || _c2 >= '0' && _c2 <= '9')) {
            break;
          }
        }
      }

      if (div >= 0) {
        mediaStr = sSize.substring(0, div + 1).trim();
        sizeStr = sSize.substring(div + 1).trim();
      } else {
        sizeStr = sSize;
        mediaStr = undefined;
      }

      sizes.push({
        mediaQuery: mediaStr,
        size: func ? sizeStr : opt_allowPercentAsLength ? (0, _layout.assertLengthOrPercent)(sizeStr) : (0, _layout.assertLength)(sizeStr)
      });
    });
    return new SizeList(sizes);
  }
  /**
   * A SizeList object contains one or more sizes as typically seen in "sizes"
   * attribute.
   *
   * See "select" method for details on how the size selection is performed.
   *
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes
   * See http://www.w3.org/html/wg/drafts/html/master/semantics.html#attr-img-sizes
   */


  var SizeList =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Array<!SizeListOptionDef>} sizes
     */
    function SizeList(sizes) {
      (0, _log.userAssert)(sizes.length > 0, 'SizeList must have at least one option');
      /** @private @const {!Array<!SizeListOptionDef>} */

      this.sizes_ = sizes; // All sources except for last must have a media query. The last one must
      // not.

      for (var i = 0; i < sizes.length; i++) {
        var option = sizes[i];

        if (i < sizes.length - 1) {
          (0, _log.userAssert)(option.mediaQuery, 'All options except for the last must have a media condition');
        } else {
          (0, _log.userAssert)(!option.mediaQuery, 'The last option must not have a media condition');
        }
      }
    }
    /**
     * Selects the first size that matches media conditions. If no options match,
     * the last option is returned.
     *
     * See http://www.w3.org/html/wg/drafts/html/master/semantics.html#attr-img-sizes
     * @param {!Window} win
     * @return {!./layout.LengthDef|string}
     */


    var _proto = SizeList.prototype;

    _proto.select = function select(win) {
      var sizes = this.sizes_;
      var length = sizes.length - 1; // Iterate all but the last size

      for (var i = 0; i < length; i++) {
        var option = sizes[i]; // Only the last item (which we don't iterate) has an undefined
        // mediaQuery.

        var query =
        /** @type {string} */
        option.mediaQuery;

        if (win.matchMedia(query).matches) {
          return option.size;
        }
      } // Returns the last size in the SizeList, which is the default.


      return sizes[length].size;
    };

    return SizeList;
  }();

  exports.SizeList = SizeList;

  },{"./layout":49,"./log":51}],115:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.htmlFor = htmlFor;
  exports.htmlRefs = htmlRefs;

  var _log = require("./log");

  var _object = require("./utils/object.js");

  /**
   * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var container;
  /**
   * Creates the html helper for the doc.
   *
   * @param {!Element|!Document} nodeOrDoc
   * @return {function(!Array<string>):!Element}
   */

  function htmlFor(nodeOrDoc) {
    var doc = nodeOrDoc.ownerDocument || nodeOrDoc;

    if (!container || container.ownerDocument !== doc) {
      container = doc.createElement('div');
    }

    return html;
  }
  /**
   * A tagged template literal helper to generate static DOM trees.
   * This must be used as a tagged template, ie
   *
   * ```
   * const div = html`<div><span></span></div>`;
   * ```
   *
   * Only the root element and its subtree will be returned. DO NOT use this to
   * render subtree's with dynamic content, it WILL result in an error!
   *
   * @param {!Array<string>} strings
   * @return {!Element}
   */


  function html(strings) {
    (0, _log.devAssert)(strings.length === 1, 'Improper html template tag usage.');
    container.
    /*OK*/
    innerHTML = strings[0];
    var el = container.firstElementChild;
    (0, _log.devAssert)(el, 'No elements in template');
    (0, _log.devAssert)(!el.nextElementSibling, 'Too many root elements in template'); // Clear to free memory.

    container.removeChild(el);
    return el;
  }
  /**
   * Queries an element for all elements with a "ref" attribute, removing
   * the attribute afterwards.
   * Returns a named map of all ref elements.
   *
   * @param {!Element} root
   * @return {!Object<string, !Element>}
   */


  function htmlRefs(root) {
    var elements = root.querySelectorAll('[ref]');
    var refs = (0, _object.map)();

    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      var ref = (0, _log.devAssert)(element.getAttribute('ref'), 'Empty ref attr');
      element.removeAttribute('ref');
      (0, _log.devAssert)(refs[ref] === undefined, 'Duplicate ref');
      refs[ref] = element;
    }

    return refs;
  }

  },{"./log":51,"./utils/object.js":132}],116:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.dashToCamelCase = dashToCamelCase;
  exports.camelCaseToDash = camelCaseToDash;
  exports.dashToUnderline = dashToUnderline;
  exports.endsWith = endsWith;
  exports.startsWith = startsWith;
  exports.includes = includes;
  exports.expandTemplate = expandTemplate;
  exports.stringHash32 = stringHash32;

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @param {string} _match
   * @param {string} character
   * @return {string}
   */
  function toUpperCase(_match, character) {
    return character.toUpperCase();
  }
  /**
   * @param {string} match
   * @return {string}
   */


  function prependDashAndToLowerCase(match) {
    return '-' + match.toLowerCase();
  }
  /**
   * @param {string} name Attribute name containing dashes.
   * @return {string} Dashes removed and successive character sent to upper case.
   * visibleForTesting
   */


  function dashToCamelCase(name) {
    return name.replace(/-([a-z])/g, toUpperCase);
  }
  /**
   * Converts a string that is in camelCase to one that is in dash-case.
   *
   * @param {string} string The string to convert.
   * @return {string} The string in dash-case.
   */


  function camelCaseToDash(string) {
    return string.replace(/(?!^)[A-Z]/g, prependDashAndToLowerCase);
  }
  /**
   * @param {string} name Attribute name with dashes
   * @return {string} Dashes replaced by underlines.
   */


  function dashToUnderline(name) {
    return name.replace('-', '_');
  }
  /**
   * Polyfill for String.prototype.endsWith.
   * @param {string} string
   * @param {string} suffix
   * @return {boolean}
   */


  function endsWith(string, suffix) {
    var index = string.length - suffix.length;
    return index >= 0 && string.indexOf(suffix, index) == index;
  }
  /**
   * Polyfill for String.prototype.startsWith.
   * @param {string} string
   * @param {string} prefix
   * @return {boolean}
   */


  function startsWith(string, prefix) {
    if (prefix.length > string.length) {
      return false;
    }

    return string.lastIndexOf(prefix, 0) == 0;
  }
  /**
   * Polyfill for String.prototype.includes.
   * @param {string} string
   * @param {string} substring
   * @param {number=} start
   * @return {boolean}
   */


  function includes(string, substring, start) {
    if (typeof start !== 'number') {
      start = 0;
    }

    if (start + substring.length > string.length) {
      return false;
    }

    return string.indexOf(substring, start) !== -1;
  }
  /**
   * Expands placeholders in a given template string with values.
   *
   * Placeholders use ${key-name} syntax and are replaced with the value
   * returned from the given getter function.
   *
   * @param {string} template The template string to expand.
   * @param {function(string):*} getter Function used to retrieve a value for a
   *   placeholder. Returns values will be coerced into strings.
   * @param {number=} opt_maxIterations Number of times to expand the template.
   *   Defaults to 1, but should be set to a larger value your placeholder tokens
   *   can be expanded to other placeholder tokens. Take caution with large values
   *   as recursively expanding a string can be exponentially expensive.
   */


  function expandTemplate(template, getter, opt_maxIterations) {
    var maxIterations = opt_maxIterations || 1;

    var _loop = function _loop(i) {
      var matches = 0;
      template = template.replace(/\${([^}]*)}/g, function (_a, b) {
        matches++;
        return getter(b);
      });

      if (!matches) {
        return "break";
      }
    };

    for (var i = 0; i < maxIterations; i++) {
      var _ret = _loop(i);

      if (_ret === "break") break;
    }

    return template;
  }
  /**
   * Hash function djb2a
   * This is intended to be a simple, fast hashing function using minimal code.
   * It does *not* have good cryptographic properties.
   * @param {string} str
   * @return {string} 32-bit unsigned hash of the string
   */


  function stringHash32(str) {
    var length = str.length;
    var hash = 5381;

    for (var i = 0; i < length; i++) {
      hash = hash * 33 ^ str.charCodeAt(i);
    } // Convert from 32-bit signed to unsigned.


    return String(hash >>> 0);
  }

  },{}],117:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.installStylesForDoc = installStylesForDoc;
  exports.installStylesLegacy = installStylesLegacy;
  exports.installCssTransformer = installCssTransformer;
  exports.setBodyMadeVisibleForTesting = setBodyMadeVisibleForTesting;
  exports.makeBodyVisible = makeBodyVisible;
  exports.makeBodyVisibleRecovery = makeBodyVisibleRecovery;
  exports.bodyAlwaysVisible = bodyAlwaysVisible;

  var _services = require("./services");

  var _log = require("./log");

  var _dom = require("./dom");

  var _object = require("./utils/object");

  var _style = require("./style");

  var _renderDelayingServices = require("./render-delaying-services");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TRANSFORMER_PROP = '__AMP_CSS_TR';
  var STYLE_MAP_PROP = '__AMP_CSS_SM';
  /**
   * Adds the given css text to the given ampdoc.
   *
   * The style tags will be at the beginning of the head before all author
   * styles. One element can be the main runtime CSS. This is guaranteed
   * to always be the first stylesheet in the doc.
   *
   * @param {!./service/ampdoc-impl.AmpDoc} ampdoc The ampdoc that should get the new styles.
   * @param {string} cssText
   * @param {?function(!Element)|undefined} cb Called when the new styles are available.
   *     Not using a promise, because this is synchronous when possible.
   *     for better performance.
   * @param {boolean=} opt_isRuntimeCss If true, this style tag will be inserted
   *     as the first element in head and all style elements will be positioned
   *     after.
   * @param {string=} opt_ext
   * @return {!Element}
   */

  function installStylesForDoc(ampdoc, cssText, cb, opt_isRuntimeCss, opt_ext) {
    var cssRoot = ampdoc.getHeadNode();
    var style = insertStyleElement(cssRoot, maybeTransform(cssRoot, cssText), opt_isRuntimeCss || false, opt_ext || null);

    if (cb) {
      var rootNode = ampdoc.getRootNode(); // Styles aren't always available synchronously. E.g. if there is a
      // pending style download, it will have to finish before the new
      // style is visible.
      // For this reason we poll until the style becomes available.
      // Sync case.

      if (styleLoaded(rootNode, style)) {
        cb(style);
        return style;
      } // Poll until styles are available.


      var interval = setInterval(function () {
        if (styleLoaded(rootNode, style)) {
          clearInterval(interval);
          cb(style);
        }
      }, 4);
    }

    return style;
  }
  /**
   * Adds the given css text to the given document.
   * TODO(dvoytenko, #10705): Remove this method once FIE/ampdoc migration is
   * done.
   *
   * @param {!Document} doc The document that should get the new styles.
   * @param {string} cssText
   * @param {?function(!Element)|undefined} cb Called when the new styles are
   *     available. Not using a promise, because this is synchronous when
   *     possible. for better performance.
   * @param {boolean=} opt_isRuntimeCss If true, this style tag will be inserted
   *     as the first element in head and all style elements will be positioned
   *     after.
   * @param {string=} opt_ext
   * @return {!Element}
   */


  function installStylesLegacy(doc, cssText, cb, opt_isRuntimeCss, opt_ext) {
    var style = insertStyleElement((0, _log.dev)().assertElement(doc.head), cssText, opt_isRuntimeCss || false, opt_ext || null);

    if (cb) {
      // Styles aren't always available synchronously. E.g. if there is a
      // pending style download, it will have to finish before the new
      // style is visible.
      // For this reason we poll until the style becomes available.
      // Sync case.
      if (styleLoaded(doc, style)) {
        cb(style);
        return style;
      } // Poll until styles are available.


      var interval = setInterval(function () {
        if (styleLoaded(doc, style)) {
          clearInterval(interval);
          cb(style);
        }
      }, 4);
    }

    return style;
  }
  /**
   * Creates the properly configured style element.
   * @param {!Element|!ShadowRoot} cssRoot
   * @param {string} cssText
   * @param {boolean} isRuntimeCss
   * @param {?string} ext
   * @return {!Element}
   */


  function insertStyleElement(cssRoot, cssText, isRuntimeCss, ext) {
    var styleMap = cssRoot[STYLE_MAP_PROP];

    if (!styleMap) {
      styleMap = cssRoot[STYLE_MAP_PROP] = (0, _object.map)();
    }

    var isExtCss = !isRuntimeCss && ext && ext != 'amp-custom' && ext != 'amp-keyframes';
    var key = isRuntimeCss ? 'amp-runtime' : isExtCss ? "amp-extension=" + ext : null; // Check if it has already been created or discovered.

    if (key) {
      var existing = getExistingStyleElement(cssRoot, styleMap, key);

      if (existing) {
        if (existing.textContent !== cssText) {
          existing.textContent = cssText;
        }

        return existing;
      }
    } // Create the new style element and append to cssRoot.


    var doc = cssRoot.ownerDocument || cssRoot;
    var style = doc.createElement('style');
    style.
    /*OK*/
    textContent = cssText;
    var afterElement = null; // Make sure that we place style tags after the main runtime CSS. Otherwise
    // the order is random.

    if (isRuntimeCss) {
      style.setAttribute('amp-runtime', '');
    } else if (isExtCss) {
      style.setAttribute('amp-extension', ext || '');
      afterElement = (0, _log.dev)().assertElement(getExistingStyleElement(cssRoot, styleMap, 'amp-runtime'));
    } else {
      if (ext) {
        style.setAttribute(ext, '');
      }

      afterElement = cssRoot.lastChild;
    }

    (0, _dom.insertAfterOrAtStart)(cssRoot, style, afterElement);

    if (key) {
      styleMap[key] = style;
    }

    return style;
  }
  /**
   * @param {!Element|!ShadowRoot} cssRoot
   * @param {!Object<string, !Element>} styleMap
   * @param {string} key
   * @return {?Element}
   */


  function getExistingStyleElement(cssRoot, styleMap, key) {
    // Already cached.
    if (styleMap[key]) {
      return styleMap[key];
    } // Check if the style has already been added by the server layout.


    var existing = cssRoot.
    /*OK*/
    querySelector("style[" + key + "]");

    if (existing) {
      styleMap[key] = existing;
      return existing;
    } // Nothing found.


    return null;
  }
  /**
   * Applies a transformer to the CSS text if it has been registered.
   * @param {!Element|!ShadowRoot} cssRoot
   * @param {function(string):string} transformer
   */


  function installCssTransformer(cssRoot, transformer) {
    cssRoot[TRANSFORMER_PROP] = transformer;
  }
  /**
   * Applies a transformer to the CSS text if it has been registered.
   * @param {!Element|!ShadowRoot} cssRoot
   * @param {string} cssText
   * @return {string}
   */


  function maybeTransform(cssRoot, cssText) {
    var transformer = cssRoot[TRANSFORMER_PROP];
    return transformer ? transformer(cssText) : cssText;
  }
  /** @private {boolean} */


  var bodyMadeVisible = false;
  /**
   * @param {boolean} value
   * @visibleForTesting
   */

  function setBodyMadeVisibleForTesting(value) {
    bodyMadeVisible = value;
  }
  /**
   * Sets the document's body opacity to 1.
   * If the body is not yet available (because our script was loaded
   * synchronously), polls until it is.
   * @param {!Document} doc The document who's body we should make visible.
   */


  function makeBodyVisible(doc) {
    (0, _log.devAssert)(doc.defaultView, 'Passed in document must have a defaultView');
    var win =
    /** @type {!Window} */
    doc.defaultView;

    var set = function set() {
      bodyMadeVisible = true;
      setBodyVisibleStyles(doc);
      renderStartedNoInline(doc);
    };

    (0, _dom.waitForBodyPromise)(doc).then(function () {
      return (0, _renderDelayingServices.waitForServices)(win);
    }).catch(function (reason) {
      (0, _log.rethrowAsync)(reason);
      return [];
    }).then(function (services) {
      set();

      if (services.length > 0) {
        var resources = _services.Services.resourcesForDoc(doc.documentElement);

        resources.
        /*OK*/
        schedulePass(1,
        /* relayoutAll */
        true);
      }

      try {
        var perf = _services.Services.performanceFor(win);

        perf.tick('mbv');
        perf.flush();
      } catch (e) {}
    });
  }
  /**
   * Set the document's body opacity to 1. Called in error cases.
   * @param {!Document} doc The document who's body we should make visible.
   */


  function makeBodyVisibleRecovery(doc) {
    (0, _log.devAssert)(doc.defaultView, 'Passed in document must have a defaultView');

    if (bodyMadeVisible) {
      return;
    }

    bodyMadeVisible = true;
    setBodyVisibleStyles(doc);
  }
  /**
   * Make sure that body exists, and make it visible.
   * @param {!Document} doc
   */


  function setBodyVisibleStyles(doc) {
    (0, _style.setStyles)((0, _log.dev)().assertElement(doc.body), {
      opacity: 1,
      visibility: 'visible',
      'animation': 'none'
    });
  }
  /**
   * @param {!Document} doc
   */


  function renderStartedNoInline(doc) {
    try {
      _services.Services.resourcesForDoc(doc.documentElement).renderStarted();
    } catch (e) {// `makeBodyVisible` is called in the error-processing cycle and thus
      // could be triggered when runtime's initialization is incomplete which
      // would cause unrelated errors to be thrown here.
    }
  }
  /**
   * Indicates that the body is always visible. For instance, in case of PWA.
   * This check is on a module level variable, and could be problematic if you are
   * relying on this function across different binaries.
   * @param {!Window} unusedWin
   */


  function bodyAlwaysVisible(unusedWin) {
    bodyMadeVisible = true;
  }
  /**
   * Checks whether a style element was registered in the DOM.
   * @param {!Document|!ShadowRoot} doc
   * @param {!Element} style
   * @return {boolean}
   */


  function styleLoaded(doc, style) {
    var sheets = doc.styleSheets;

    for (var i = 0; i < sheets.length; i++) {
      var sheet = sheets[i];

      if (sheet.ownerNode == style) {
        return true;
      }
    }

    return false;
  }

  },{"./dom":26,"./log":51,"./render-delaying-services":69,"./services":112,"./style":118,"./utils/object":132}],118:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.camelCaseToTitleCase = camelCaseToTitleCase;
  exports.getVendorJsPropertyName = getVendorJsPropertyName;
  exports.setImportantStyles = setImportantStyles;
  exports.setStyle = setStyle;
  exports.getStyle = getStyle;
  exports.setStyles = setStyles;
  exports.assertNotDisplay = assertNotDisplay;
  exports.assertDoesNotContainDisplay = assertDoesNotContainDisplay;
  exports.setInitialDisplay = setInitialDisplay;
  exports.toggle = toggle;
  exports.px = px;
  exports.deg = deg;
  exports.translateX = translateX;
  exports.translate = translate;
  exports.scale = scale;
  exports.rotate = rotate;
  exports.removeAlphaFromColor = removeAlphaFromColor;
  exports.computedStyle = computedStyle;
  exports.resetStyles = resetStyles;

  var _log = require("./log");

  var _object = require("./utils/object.js");

  var _string = require("./string");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Note: loaded by 3p system. Cannot rely on babel polyfills.

  /** @type {Object<string, string>} */
  var propertyNameCache;
  /** @const {!Array<string>} */

  var vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];
  /**
   * @export
   * @param {string} camelCase camel cased string
   * @return {string} title cased string
   */

  function camelCaseToTitleCase(camelCase) {
    return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);
  }
  /**
    Checks the style if a prefixed version of a property exists and returns
   * it or returns an empty string.
   * @private
   * @param {!Object} style
   * @param {string} titleCase the title case version of a css property name
   * @return {string} the prefixed property name or null.
   */


  function getVendorJsPropertyName_(style, titleCase) {
    for (var i = 0; i < vendorPrefixes.length; i++) {
      var propertyName = vendorPrefixes[i] + titleCase;

      if (style[propertyName] !== undefined) {
        return propertyName;
      }
    }

    return '';
  }
  /**
   * Returns the possibly prefixed JavaScript property name of a style property
   * (ex. WebkitTransitionDuration) given a camelCase'd version of the property
   * (ex. transitionDuration).
   * @export
   * @param {!Object} style
   * @param {string} camelCase the camel cased version of a css property name
   * @param {boolean=} opt_bypassCache bypass the memoized cache of property
   *   mapping
   * @return {string}
   */


  function getVendorJsPropertyName(style, camelCase, opt_bypassCache) {
    if ((0, _string.startsWith)(camelCase, '--')) {
      // CSS vars are returned as is.
      return camelCase;
    }

    if (!propertyNameCache) {
      propertyNameCache = (0, _object.map)();
    }

    var propertyName = propertyNameCache[camelCase];

    if (!propertyName || opt_bypassCache) {
      propertyName = camelCase;

      if (style[camelCase] === undefined) {
        var titleCase = camelCaseToTitleCase(camelCase);
        var prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);

        if (style[prefixedPropertyName] !== undefined) {
          propertyName = prefixedPropertyName;
        }
      }

      if (!opt_bypassCache) {
        propertyNameCache[camelCase] = propertyName;
      }
    }

    return propertyName;
  }
  /**
   * Sets the CSS styles of the specified element with !important. The styles
   * are specified as a map from CSS property names to their values.
   * @param {!Element} element
   * @param {!Object<string, *>} styles
   */


  function setImportantStyles(element, styles) {
    var style = element.style;

    for (var k in styles) {
      style.setProperty(getVendorJsPropertyName(style, k), styles[k].toString(), 'important');
    }
  }
  /**
   * Sets the CSS style of the specified element with optional units, e.g. "px".
   * @param {?Element} element
   * @param {string} property
   * @param {*} value
   * @param {string=} opt_units
   * @param {boolean=} opt_bypassCache
   */


  function setStyle(element, property, value, opt_units, opt_bypassCache) {
    var propertyName = getVendorJsPropertyName(element.style, property, opt_bypassCache);

    if (propertyName) {
      element.style[propertyName] =
      /** @type {string} */
      opt_units ? value + opt_units : value;
    }
  }
  /**
   * Returns the value of the CSS style of the specified element.
   * @param {!Element} element
   * @param {string} property
   * @param {boolean=} opt_bypassCache
   * @return {*}
   */


  function getStyle(element, property, opt_bypassCache) {
    var propertyName = getVendorJsPropertyName(element.style, property, opt_bypassCache);

    if (!propertyName) {
      return undefined;
    }

    return element.style[propertyName];
  }
  /**
   * Sets the CSS styles of the specified element. The styles
   * a specified as a map from CSS property names to their values.
   * @param {!Element} element
   * @param {!Object<string, *>} styles
   */


  function setStyles(element, styles) {
    for (var k in styles) {
      setStyle(element, k, styles[k]);
    }
  }
  /**
   * Asserts that the style is not the `display` style.
   * This is the only possible way to pass a dynamic style to setStyle.
   *
   * If you wish to set `display`, use the `toggle` helper instead. This is so
   * changes to display can trigger necessary updates. See #17475.
   *
   * @param {string} style
   * @return {string}
   */


  function assertNotDisplay(style) {
    if (style === 'display') {
      (0, _log.dev)().error('STYLE', '`display` style detected. You must use toggle ' + 'instead.');
    }

    return style;
  }
  /**
   * Asserts that the styles does not contain the `display` style.
   * This is the only possible way to pass a dynamic styles object to setStyles
   * and setImportantStyles.
   *
   * If you wish to set `display`, use the `toggle` helper instead. This is so
   * changes to display can trigger necessary updates. See #17475.
   *
   * @param {!Object<string, *>} styles
   * @return {!Object<string, *>}
   */


  function assertDoesNotContainDisplay(styles) {
    if ('display' in styles) {
      (0, _log.dev)().error('STYLE', '`display` style detected in styles. You must use ' + 'toggle instead.');
    }

    return styles;
  }
  /**
   * Sets the initial display style of an element. This is a last resort. If you
   * can set the initial display using CSS, YOU MUST.
   * DO NOT USE THIS TO ARBITRARILY SET THE DISPLAY STYLE AFTER INITIAL SETUP.
   *
   * @param {!Element} el
   * @param {string} value
   */


  function setInitialDisplay(el, value) {
    var style = el.style;
    (0, _log.devAssert)(value !== '' && value !== 'none', 'Initial display value must ' + 'not be "none". Use toggle instead.');
    (0, _log.devAssert)(!style['display'], 'setInitialDisplay MUST NOT be used for ' + 'resetting the display style. If you are looking for display:none ' + 'toggling, use toggle instead.');
    style['display'] = value;
  }
  /**
   * Shows or hides the specified element.
   * @param {!Element} element
   * @param {boolean=} opt_display
   */


  function toggle(element, opt_display) {
    if (opt_display === undefined) {
      opt_display = element.hasAttribute('hidden');
    }

    if (opt_display) {
      element.removeAttribute('hidden');
    } else {
      element.setAttribute('hidden', '');
    }
  }
  /**
   * Returns a pixel value.
   * @param {number} value
   * @return {string}
   */


  function px(value) {
    return value + "px";
  }
  /**
   * Returns a degree value.
   * @param {number} value
   * @return {string}
   */


  function deg(value) {
    return value + "deg";
  }
  /**
   * Returns a "translateX" for CSS "transform" property.
   * @param {number|string} value
   * @return {string}
   */


  function translateX(value) {
    if (typeof value == 'string') {
      return "translateX(" + value + ")";
    }

    return "translateX(" + px(value) + ")";
  }
  /**
   * Returns a "translateX" for CSS "transform" property.
   * @param {number|string} x
   * @param {(number|string)=} opt_y
   * @return {string}
   */


  function translate(x, opt_y) {
    if (typeof x == 'number') {
      x = px(x);
    }

    if (opt_y === undefined) {
      return "translate(" + x + ")";
    }

    if (typeof opt_y == 'number') {
      opt_y = px(opt_y);
    }

    return "translate(" + x + ", " + opt_y + ")";
  }
  /**
   * Returns a "scale" for CSS "transform" property.
   * @param {number|string} value
   * @return {string}
   */


  function scale(value) {
    return "scale(" + value + ")";
  }
  /**
   * Returns a "rotate" for CSS "transform" property.
   * @param {number|string} value
   * @return {string}
   */


  function rotate(value) {
    if (typeof value == 'number') {
      value = deg(value);
    }

    return "rotate(" + value + ")";
  }
  /**
   * Remove alpha value from a rgba color value.
   * Return the new color property with alpha equals if has the alpha value.
   * Caller needs to make sure the input color value is a valid rgba/rgb value
   * @param {string} rgbaColor
   * @return {string}
   */


  function removeAlphaFromColor(rgbaColor) {
    return rgbaColor.replace(/\(([^,]+),([^,]+),([^,)]+),[^)]+\)/g, '($1,$2,$3, 1)');
  }
  /**
   * Gets the computed style of the element. The helper is necessary to enforce
   * the possible `null` value returned by a buggy Firefox.
   *
   * @param {!Window} win
   * @param {!Element} el
   * @return {!Object<string, string>}
   */


  function computedStyle(win, el) {
    var style =
    /** @type {?CSSStyleDeclaration} */
    win.getComputedStyle(el);
    return (
      /** @type {!Object<string, string>} */
      style || (0, _object.map)()
    );
  }
  /**
   * Resets styles that were set dynamically (i.e. inline)
   * @param {!Element} element
   * @param {!Array<string>} properties
   */


  function resetStyles(element, properties) {
    for (var i = 0; i < properties.length; i++) {
      setStyle(element, properties[i], null);
    }
  }

  },{"./log":51,"./string":116,"./utils/object.js":132}],119:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.normtimeDef = exports.timeDef = void 0;

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Absolute time in milliseconds.
   * @typedef {number}
   */
  var timeDef;
  /**
   * Number between 0 and 1 that designates normalized time, as in "from start to
   * end".
   * @typedef {number}
   */

  exports.timeDef = timeDef;
  var normtimeDef;
  exports.normtimeDef = normtimeDef;

  },{}],120:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.all = all;
  exports.concat = concat;
  exports.withCurve = withCurve;
  exports.setStyles = setStyles;
  exports.numeric = numeric;
  exports.spring = spring;
  exports.px = px;
  exports.translateX = translateX;
  exports.translateY = translateY;
  exports.translate = translate;
  exports.scale = scale;
  exports.NOOP = void 0;

  var st = _interopRequireWildcard(require("./style"));

  var _curve = require("./curve");

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var NOOP = function NOOP(unusedTime) {
    return null;
  };
  /**
   * Returns a transition that combines a number of other transitions and
   * invokes them all in parallel.
   * @param {!Array<!TransitionDef>} transitions
   * @return {!TransitionDef<void>}
   */


  exports.NOOP = NOOP;

  function all(transitions) {
    return function (time, complete) {
      for (var i = 0; i < transitions.length; i++) {
        var tr = transitions[i];
        tr(time, complete);
      }
    };
  }
  /**
   * Returns a transition that combines the string result of other string-based
   * transitions such as transform and scale using the given opt_delimiter.
   * @param {!Array<!TransitionDef<string>>} transitions
   * @param {string=} opt_delimiter Defaults to a single whitespace.
   * @return {!TransitionDef<string>}
   */


  function concat(transitions, opt_delimiter) {
    if (opt_delimiter === void 0) {
      opt_delimiter = ' ';
    }

    return function (time, complete) {
      var results = [];

      for (var i = 0; i < transitions.length; i++) {
        var tr = transitions[i];
        var result = tr(time, complete);

        if (typeof result == 'string') {
          results.push(result);
        }
      }

      return results.join(opt_delimiter);
    };
  }
  /**
   * Returns the specified transition with the time curved via specified curve
   * function.
   * @param {!TransitionDef<RESULT>} transition
   * @param {!./curve.CurveDef|string} curve
   * @return {!TransitionDef<RESULT>}
   * @template RESULT
   */


  function withCurve(transition, curve) {
    /** @const {?./curve.CurveDef} */
    var curveFn = (0, _curve.getCurve)(curve);
    return function (time, complete) {
      return transition(complete ? 1 : curveFn(time), complete);
    };
  }
  /**
   * A transition that sets the CSS style of the specified element. The styles
   * a specified as a map from CSS property names to transition functions for
   * each of these properties.
   * @param {!Element} element
   * @param {!Object<string, !TransitionDef>} styles
   * @return {!TransitionDef<void>}
   */


  function setStyles(element, styles) {
    return function (time, complete) {
      for (var k in styles) {
        (0, st.setStyle)(element, (0, st.assertNotDisplay)(k), styles[k](time, complete));
      }
    };
  }
  /**
   * A basic numeric interpolation.
   * @param {number} start
   * @param {number} end
   * @return {!TransitionDef<number>}
   */


  function numeric(start, end) {
    return function (time) {
      return start + (end - start) * time;
    };
  }
  /**
   * Spring numeric interpolation.
   * @param {number} start
   * @param {number} end
   * @param {number} extended
   * @param {number} threshold
   * @return {!TransitionDef<number>}
   */


  function spring(start, end, extended, threshold) {
    if (end == extended) {
      return function (time) {
        return numeric(start, end)(time);
      };
    }

    return function (time) {
      if (time < threshold) {
        return start + (extended - start) * (time / threshold);
      }

      return extended + (end - extended) * ((time - threshold) / (1 - threshold));
    };
  }
  /**
   * Adds "px" units.
   * @param {!TransitionDef<number>} transition
   * @return {!TransitionDef<string>}
   */


  function px(transition) {
    return function (time) {
      return transition(time) + 'px';
    };
  }
  /**
   * A transition for "translateX" of CSS "transform" property.
   * @param {!TransitionDef<number|string>} transition
   * @return {!TransitionDef<string>}
   */


  function translateX(transition) {
    return function (time) {
      var res = transition(time);

      if (typeof res == 'string') {
        return "translateX(" + res + ")";
      }

      return "translateX(" + res + "px)";
    };
  }
  /**
   * A transition for "translateY" of CSS "transform" property.
   * @param {!TransitionDef<number|string>} transition
   * @return {!TransitionDef<string>}
   */


  function translateY(transition) {
    return function (time) {
      var res = transition(time);

      if (typeof res == 'string') {
        return "translateY(" + res + ")";
      }

      return "translateY(" + res + "px)";
    };
  }
  /**
   * A transition for "translate(x, y)" of CSS "transform" property.
   * @param {!TransitionDef<number|string>} transitionX
   * @param {!TransitionDef<number|string>|undefined} opt_transitionY
   * @return {!TransitionDef<string>}
   */


  function translate(transitionX, opt_transitionY) {
    return function (time) {
      var x = transitionX(time);

      if (typeof x == 'number') {
        x = st.px(x);
      }

      if (!opt_transitionY) {
        return "translate(" + x + ")";
      }

      var y = opt_transitionY(time);

      if (typeof y == 'number') {
        y = st.px(y);
      }

      return "translate(" + x + "," + y + ")";
    };
  }
  /**
   * A transition for "scale" of CSS "transform" property.
   * @param {!TransitionDef<number|string>} transition
   * @return {!TransitionDef<string>}
   */


  function scale(transition) {
    return function (time) {
      return "scale(" + transition(time) + ")";
    };
  }

  },{"./curve":22,"./style":118}],121:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.isArray = isArray;
  exports.toArray = toArray;
  exports.isObject = isObject;
  exports.isFiniteNumber = isFiniteNumber;
  exports.isEnumValue = isEnumValue;
  exports.toWin = toWin;

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /* @const */
  var toString_ = Object.prototype.toString;
  /**
   * Returns the ECMA [[Class]] of a value
   * @param {*} value
   * @return {string}
   */

  function toString(value) {
    return toString_.call(value);
  }
  /**
   * Determines if value is actually an Array.
   * @param {*} value
   * @return {boolean}
   */


  function isArray(value) {
    return Array.isArray(value);
  }
  /**
   * Converts an array-like object to an array.
   * @param {?IArrayLike<T>|string} arrayLike
   * @return {!Array<T>}
   * @template T
   */


  function toArray(arrayLike) {
    return arrayLike ? Array.prototype.slice.call(arrayLike) : [];
  }
  /**
   * Determines if value is actually an Object.
   * @param {*} value
   * @return {boolean}
   */


  function isObject(value) {
    return toString(value) === '[object Object]';
  }
  /**
   * Determines if value is of number type and finite.
   * NaN and Infinity are not considered a finite number.
   * String numbers are not considered numbers.
   * @param {*} value
   * @return {boolean}
   */


  function isFiniteNumber(value) {
    return typeof value === 'number' && isFinite(value);
  }
  /**
   * Checks whether `s` is a valid value of `enumObj`.
   *
   * @param {!Object<T>} enumObj
   * @param {T} s
   * @return {boolean}
   * @template T
   */


  function isEnumValue(enumObj, s) {
    for (var k in enumObj) {
      if (enumObj[k] === s) {
        return true;
      }
    }

    return false;
  }
  /**
   * Externs declare that access `defaultView` from `document` or
   * `ownerDocument` is of type `(Window|null)` but most of our parameter types
   * assume that it is never null. This is OK in practice as we ever only get
   * null on disconnected documents or old IE.
   * This helper function casts it into just a simple Window return type.
   *
   * @param {!Window|null} winOrNull
   * @return {!Window}
   */


  function toWin(winOrNull) {
    return (
      /** @type {!Window} */
      winOrNull
    );
  }

  },{}],122:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.parseQueryString_ = parseQueryString_;

  var _urlTryDecodeUriComponent = require("./url-try-decode-uri-component");

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var regex = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;
  /**
   * Parses the query string of an URL. This method returns a simple key/value
   * map. If there are duplicate keys the latest value is returned.
   *
   * DO NOT import the function from this file. Instead, import parseQueryString
   * from `src/url.js`.
   *
   * @param {string} queryString
   * @return {!JsonObject}
   */

  function parseQueryString_(queryString) {
    var params =
    /** @type {!JsonObject} */
    Object.create(null);

    if (!queryString) {
      return params;
    }

    var match;

    while (match = regex.exec(queryString)) {
      var name = (0, _urlTryDecodeUriComponent.tryDecodeUriComponent_)(match[1], match[1]);
      var value = match[2] ? (0, _urlTryDecodeUriComponent.tryDecodeUriComponent_)(match[2], match[2]) : '';
      params[name] = value;
    }

    return params;
  }

  },{"./url-try-decode-uri-component":123}],123:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.tryDecodeUriComponent_ = tryDecodeUriComponent_;

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Tries to decode a URI component, falling back to opt_fallback (or an empty
   * string)
   *
   * DO NOT import the function from this file. Instead, import
   * tryDecodeUriComponent from `src/url.js`.
   *
   * @param {string} component
   * @param {string=} fallback
   * @return {string}
   */
  function tryDecodeUriComponent_(component, fallback) {
    if (fallback === void 0) {
      fallback = '';
    }

    try {
      return decodeURIComponent(component);
    } catch (e) {
      return fallback;
    }
  }

  },{}],124:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.getWinOrigin = getWinOrigin;
  exports.parseUrlDeprecated = parseUrlDeprecated;
  exports.parseUrlWithA = parseUrlWithA;
  exports.appendEncodedParamStringToUrl = appendEncodedParamStringToUrl;
  exports.addParamToUrl = addParamToUrl;
  exports.addParamsToUrl = addParamsToUrl;
  exports.addMissingParamsToUrl = addMissingParamsToUrl;
  exports.serializeQueryString = serializeQueryString;
  exports.isSecureUrlDeprecated = isSecureUrlDeprecated;
  exports.assertHttpsUrl = assertHttpsUrl;
  exports.assertAbsoluteHttpOrHttpsUrl = assertAbsoluteHttpOrHttpsUrl;
  exports.parseQueryString = parseQueryString;
  exports.removeFragment = removeFragment;
  exports.getFragment = getFragment;
  exports.isProxyOrigin = isProxyOrigin;
  exports.getProxyServingType = getProxyServingType;
  exports.isLocalhostOrigin = isLocalhostOrigin;
  exports.isProtocolValid = isProtocolValid;
  exports.removeAmpJsParamsFromUrl = removeAmpJsParamsFromUrl;
  exports.removeSearch = removeSearch;
  exports.removeParamsFromSearch = removeParamsFromSearch;
  exports.getSourceUrl = getSourceUrl;
  exports.getSourceOrigin = getSourceOrigin;
  exports.resolveRelativeUrl = resolveRelativeUrl;
  exports.resolveRelativeUrlFallback_ = resolveRelativeUrlFallback_;
  exports.getCorsUrl = getCorsUrl;
  exports.checkCorsUrl = checkCorsUrl;
  exports.tryDecodeUriComponent = tryDecodeUriComponent;
  exports.SOURCE_ORIGIN_PARAM = void 0;

  var _lruCache = require("./utils/lru-cache");

  var _object = require("./utils/object");

  var _string = require("./string");

  var _mode = require("./mode");

  var _types = require("./types");

  var _urlParseQueryString = require("./url-parse-query-string");

  var _urlTryDecodeUriComponent = require("./url-try-decode-uri-component");

  var _config = require("./config");

  var _log = require("./log");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @type {!JsonObject}
   */
  var SERVING_TYPE_PREFIX = (0, _object.dict)({
    // No viewer
    'c': true,
    // In viewer
    'v': true,
    // Ad landing page
    'a': true,
    // Ad
    'ad': true,
    // Actions viewer
    'action': true
  });
  /**
   * Cached a-tag to avoid memory allocation during URL parsing.
   * @type {HTMLAnchorElement}
   */

  var a;
  /**
   * We cached all parsed URLs. As of now there are no use cases
   * of AMP docs that would ever parse an actual large number of URLs,
   * but we often parse the same one over and over again.
   * @type {LruCache}
   */

  var cache;
  /** @private @const Matches amp_js_* parameters in query string. */

  var AMP_JS_PARAMS_REGEX = /[?&]amp_js[^&]*/;
  /** @private @const Matches amp_gsa parameters in query string. */

  var AMP_GSA_PARAMS_REGEX = /[?&]amp_gsa[^&]*/;
  /** @private @const Matches amp_r parameters in query string. */

  var AMP_R_PARAMS_REGEX = /[?&]amp_r[^&]*/;
  /** @private @const Matches amp_kit parameters in query string. */

  var AMP_KIT_PARAMS_REGEX = /[?&]amp_kit[^&]*/;
  /** @private @const Matches usqp parameters from goog experiment in query string. */

  var GOOGLE_EXPERIMENT_PARAMS_REGEX = /[?&]usqp[^&]*/;
  var INVALID_PROTOCOLS = [
  /*eslint no-script-url: 0*/
  'javascript:',
  /*eslint no-script-url: 0*/
  'data:',
  /*eslint no-script-url: 0*/
  'vbscript:'];
  /** @const {string} */

  var SOURCE_ORIGIN_PARAM = '__amp_source_origin';
  /**
   * Returns the correct origin for a given window.
   * @param {!Window} win
   * @return {string} origin
   */

  exports.SOURCE_ORIGIN_PARAM = SOURCE_ORIGIN_PARAM;

  function getWinOrigin(win) {
    return win.origin || parseUrlDeprecated(win.location.href).origin;
  }
  /**
   * Returns a Location-like object for the given URL. If it is relative,
   * the URL gets resolved.
   * Consider the returned object immutable. This is enforced during
   * testing by freezing the object.
   * @param {string} url
   * @param {boolean=} opt_nocache
   * @return {!Location}
   */


  function parseUrlDeprecated(url, opt_nocache) {
    if (!a) {
      a =
      /** @type {!HTMLAnchorElement} */
      self.document.createElement('a');
      cache = self.UrlCache || (self.UrlCache = new _lruCache.LruCache(100));
    }

    return parseUrlWithA(a, url, opt_nocache ? null : cache);
  }
  /**
   * Returns a Location-like object for the given URL. If it is relative,
   * the URL gets resolved.
   * Consider the returned object immutable. This is enforced during
   * testing by freezing the object.
   * @param {!HTMLAnchorElement} a
   * @param {string} url
   * @param {LruCache=} opt_cache
   * @return {!Location}
   * @restricted
   */


  function parseUrlWithA(a, url, opt_cache) {
    if (opt_cache && opt_cache.has(url)) {
      return opt_cache.get(url);
    }

    a.href = url; // IE11 doesn't provide full URL components when parsing relative URLs.
    // Assigning to itself again does the trick #3449.

    if (!a.protocol) {
      a.href = a.href;
    }

    var info =
    /** @type {!Location} */
    {
      href: a.href,
      protocol: a.protocol,
      host: a.host,
      hostname: a.hostname,
      port: a.port == '0' ? '' : a.port,
      pathname: a.pathname,
      search: a.search,
      hash: a.hash,
      origin: null // Set below.

    }; // Some IE11 specific polyfills.
    // 1) IE11 strips out the leading '/' in the pathname.

    if (info.pathname[0] !== '/') {
      info.pathname = '/' + info.pathname;
    } // 2) For URLs with implicit ports, IE11 parses to default ports while
    // other browsers leave the port field empty.


    if (info.protocol == 'http:' && info.port == 80 || info.protocol == 'https:' && info.port == 443) {
      info.port = '';
      info.host = info.hostname;
    } // For data URI a.origin is equal to the string 'null' which is not useful.
    // We instead return the actual origin which is the full URL.


    if (a.origin && a.origin != 'null') {
      info.origin = a.origin;
    } else if (info.protocol == 'data:' || !info.host) {
      info.origin = info.href;
    } else {
      info.origin = info.protocol + '//' + info.host;
    } // Freeze during testing to avoid accidental mutation.


    var frozen = (0, _mode.getMode)().test && Object.freeze ? Object.freeze(info) : info;

    if (opt_cache) {
      opt_cache.put(url, frozen);
    }

    return frozen;
  }
  /**
   * Appends the string just before the fragment part (or optionally
   * to the front of the query string) of the URL.
   * @param {string} url
   * @param {string} paramString
   * @param {boolean=} opt_addToFront
   * @return {string}
   */


  function appendEncodedParamStringToUrl(url, paramString, opt_addToFront) {
    if (!paramString) {
      return url;
    }

    var mainAndFragment = url.split('#', 2);
    var mainAndQuery = mainAndFragment[0].split('?', 2);
    var newUrl = mainAndQuery[0] + (mainAndQuery[1] ? opt_addToFront ? "?" + paramString + "&" + mainAndQuery[1] : "?" + mainAndQuery[1] + "&" + paramString : "?" + paramString);
    newUrl += mainAndFragment[1] ? "#" + mainAndFragment[1] : '';
    return newUrl;
  }
  /**
   * Appends a query string field and value to a url. `key` and `value`
   * will be ran through `encodeURIComponent` before appending.
   * @param {string} url
   * @param {string} key
   * @param {string} value
   * @param {boolean=} opt_addToFront
   * @return {string}
   */


  function addParamToUrl(url, key, value, opt_addToFront) {
    var field = encodeURIComponent(key) + "=" + encodeURIComponent(value);
    return appendEncodedParamStringToUrl(url, field, opt_addToFront);
  }
  /**
   * Appends query string fields and values to a url. The `params` objects'
   * `key`s and `value`s will be transformed into query string keys/values.
   * @param {string} url
   * @param {!JsonObject<string, string|!Array<string>>} params
   * @return {string}
   */


  function addParamsToUrl(url, params) {
    return appendEncodedParamStringToUrl(url, serializeQueryString(params));
  }
  /**
   * Append query string fields and values to a url, only if the key does not
   * exist in current query string.
   * @param {string} url
   * @param {!JsonObject<string, string|!Array<string>>} params
   */


  function addMissingParamsToUrl(url, params) {
    var location = parseUrlDeprecated(url);
    var existingParams = parseQueryString(location.search);
    var paramsToAdd = (0, _object.dict)({});
    var keys = Object.keys(params);

    for (var i = 0; i < keys.length; i++) {
      if (!(0, _object.hasOwn)(existingParams, keys[i])) {
        paramsToAdd[keys[i]] = params[keys[i]];
      }
    }

    return addParamsToUrl(url, paramsToAdd);
  }
  /**
   * Serializes the passed parameter map into a query string with both keys
   * and values encoded.
   * @param {!JsonObject<string, string|!Array<string>>} params
   * @return {string}
   */


  function serializeQueryString(params) {
    var s = [];

    for (var k in params) {
      var v = params[k];

      if (v == null) {
        continue;
      } else if ((0, _types.isArray)(v)) {
        for (var i = 0; i < v.length; i++) {
          var sv =
          /** @type {string} */
          v[i];
          s.push(encodeURIComponent(k) + "=" + encodeURIComponent(sv));
        }
      } else {
        var _sv =
        /** @type {string} */
        v;
        s.push(encodeURIComponent(k) + "=" + encodeURIComponent(_sv));
      }
    }

    return s.join('&');
  }
  /**
   * Returns `true` if the URL is secure: either HTTPS or localhost (for testing).
   * @param {string|!Location} url
   * @return {boolean}
   */


  function isSecureUrlDeprecated(url) {
    if (typeof url == 'string') {
      url = parseUrlDeprecated(url);
    }

    return url.protocol == 'https:' || url.hostname == 'localhost' || (0, _string.endsWith)(url.hostname, '.localhost');
  }
  /**
   * Asserts that a given url is HTTPS or protocol relative. It's a user-level
   * assert.
   *
   * Provides an exception for localhost.
   *
   * @param {?string|undefined} urlString
   * @param {!Element|string} elementContext Element where the url was found.
   * @param {string=} sourceName Used for error messages.
   * @return {string}
   */


  function assertHttpsUrl(urlString, elementContext, sourceName) {
    if (sourceName === void 0) {
      sourceName = 'source';
    }

    (0, _log.userAssert)(urlString != null, '%s %s must be available', elementContext, sourceName); // (erwinm, #4560): type cast necessary until #4560 is fixed.

    var theUrlString =
    /** @type {string} */
    urlString;
    (0, _log.userAssert)(isSecureUrlDeprecated(theUrlString) || /^(\/\/)/.test(theUrlString), '%s %s must start with ' + '"https://" or "//" or be relative and served from ' + 'either https or from localhost. Invalid value: %s', elementContext, sourceName, theUrlString);
    return theUrlString;
  }
  /**
   * Asserts that a given url is an absolute HTTP or HTTPS URL.
   * @param {string} urlString
   * @return {string}
   */


  function assertAbsoluteHttpOrHttpsUrl(urlString) {
    (0, _log.userAssert)(/^https?\:/i.test(urlString), 'URL must start with "http://" or "https://". Invalid value: %s', urlString);
    return parseUrlDeprecated(urlString).href;
  }
  /**
   * Parses the query string of an URL. This method returns a simple key/value
   * map. If there are duplicate keys the latest value is returned.
   *
   * This function is implemented in a separate file to avoid a circular
   * dependency.
   *
   * @param {string} queryString
   * @return {!JsonObject}
   */


  function parseQueryString(queryString) {
    return (0, _urlParseQueryString.parseQueryString_)(queryString);
  }
  /**
   * Returns the URL without fragment. If URL doesn't contain fragment, the same
   * string is returned.
   * @param {string} url
   * @return {string}
   */


  function removeFragment(url) {
    var index = url.indexOf('#');

    if (index == -1) {
      return url;
    }

    return url.substring(0, index);
  }
  /**
   * Returns the fragment from the URL. If the URL doesn't contain fragment,
   * the empty string is returned.
   * @param {string} url
   * @return {string}
   */


  function getFragment(url) {
    var index = url.indexOf('#');

    if (index == -1) {
      return '';
    }

    return url.substring(index);
  }
  /**
   * Returns whether the URL has the origin of a proxy.
   * @param {string|!Location} url URL of an AMP document.
   * @return {boolean}
   */


  function isProxyOrigin(url) {
    if (typeof url == 'string') {
      url = parseUrlDeprecated(url);
    }

    return _config.urls.cdnProxyRegex.test(url.origin);
  }
  /**
   * For proxy-origin URLs, returns the serving type. Otherwise, returns null.
   * E.g., 'https://amp-com.cdn.ampproject.org/a/s/amp.com/amp_document.html'
   * returns 'a'.
   * @param {string|!Location} url URL of an AMP document.
   * @return {?string}
   */


  function getProxyServingType(url) {
    if (typeof url == 'string') {
      url = parseUrlDeprecated(url);
    }

    if (!isProxyOrigin(url)) {
      return null;
    }

    var path = url.pathname.split('/', 2);
    return path[1];
  }
  /**
   * Returns whether the URL origin is localhost.
   * @param {string|!Location} url URL of an AMP document.
   * @return {boolean}
   */


  function isLocalhostOrigin(url) {
    if (typeof url == 'string') {
      url = parseUrlDeprecated(url);
    }

    return _config.urls.localhostRegex.test(url.origin);
  }
  /**
   * Returns whether the URL has valid protocol.
   * Deep link protocol is valid, but not javascript etc.
   * @param {string|!Location} url
   * @return {boolean}
   */


  function isProtocolValid(url) {
    if (!url) {
      return true;
    }

    if (typeof url == 'string') {
      url = parseUrlDeprecated(url);
    }

    return !INVALID_PROTOCOLS.includes(url.protocol);
  }
  /**
   * Returns a URL without AMP JS parameters.
   * @param {string} url
   * @return {string}
   */


  function removeAmpJsParamsFromUrl(url) {
    var parsed = parseUrlDeprecated(url);
    var search = removeAmpJsParamsFromSearch(parsed.search);
    return parsed.origin + parsed.pathname + search + parsed.hash;
  }
  /**
   * Returns a URL without a query string.
   * @param {string} url
   * @return {string}
   */


  function removeSearch(url) {
    var index = url.indexOf('?');

    if (index == -1) {
      return url;
    }

    var fragment = getFragment(url);
    return url.substring(0, index) + fragment;
  }
  /**
   * Removes parameters that start with amp js parameter pattern and returns the
   * new search string.
   * @param {string} urlSearch
   * @return {string}
   */


  function removeAmpJsParamsFromSearch(urlSearch) {
    if (!urlSearch || urlSearch == '?') {
      return '';
    }

    var search = urlSearch.replace(AMP_JS_PARAMS_REGEX, '').replace(AMP_GSA_PARAMS_REGEX, '').replace(AMP_R_PARAMS_REGEX, '').replace(AMP_KIT_PARAMS_REGEX, '').replace(GOOGLE_EXPERIMENT_PARAMS_REGEX, '').replace(/^[?&]/, ''); // Removes first ? or &.

    return search ? '?' + search : '';
  }
  /**
   * Removes parameters with param name and returns the new search string.
   * @param {string} urlSearch
   * @param {string} paramName
   * @return {string}
   */


  function removeParamsFromSearch(urlSearch, paramName) {
    // TODO: reuse the function in removeAmpJsParamsFromSearch. Accept paramNames
    // as an array.
    if (!urlSearch || urlSearch == '?') {
      return '';
    }

    var paramRegex = new RegExp("[?&]" + paramName + "=[^&]*", 'g');
    var search = urlSearch.replace(paramRegex, '').replace(/^[?&]/, '');
    return search ? '?' + search : '';
  }
  /**
   * Returns the source URL of an AMP document for documents served
   * on a proxy origin or directly.
   * @param {string|!Location} url URL of an AMP document.
   * @return {string}
   */


  function getSourceUrl(url) {
    if (typeof url == 'string') {
      url = parseUrlDeprecated(url);
    } // Not a proxy URL - return the URL itself.


    if (!isProxyOrigin(url)) {
      return url.href;
    } // A proxy URL.
    // Example path that is being matched here.
    // https://cdn.ampproject.org/c/s/www.origin.com/foo/
    // The /s/ is optional and signals a secure origin.


    var path = url.pathname.split('/');
    var prefix = path[1];
    (0, _log.userAssert)(SERVING_TYPE_PREFIX[prefix], 'Unknown path prefix in url %s', url.href);
    var domainOrHttpsSignal = path[2];
    var origin = domainOrHttpsSignal == 's' ? 'https://' + decodeURIComponent(path[3]) : 'http://' + decodeURIComponent(domainOrHttpsSignal); // Sanity test that what we found looks like a domain.

    (0, _log.userAssert)(origin.indexOf('.') > 0, 'Expected a . in origin %s', origin);
    path.splice(1, domainOrHttpsSignal == 's' ? 3 : 2);
    return origin + path.join('/') + removeAmpJsParamsFromSearch(url.search) + (url.hash || '');
  }
  /**
   * Returns the source origin of an AMP document for documents served
   * on a proxy origin or directly.
   * @param {string|!Location} url URL of an AMP document.
   * @return {string} The source origin of the URL.
   */


  function getSourceOrigin(url) {
    return parseUrlDeprecated(getSourceUrl(url)).origin;
  }
  /**
   * Returns absolute URL resolved based on the relative URL and the base.
   * @param {string} relativeUrlString
   * @param {string|!Location} baseUrl
   * @return {string}
   */


  function resolveRelativeUrl(relativeUrlString, baseUrl) {
    if (typeof baseUrl == 'string') {
      baseUrl = parseUrlDeprecated(baseUrl);
    }

    if (typeof URL == 'function') {
      return new URL(relativeUrlString, baseUrl.href).toString();
    }

    return resolveRelativeUrlFallback_(relativeUrlString, baseUrl);
  }
  /**
   * Fallback for URL resolver when URL class is not available.
   * @param {string} relativeUrlString
   * @param {string|!Location} baseUrl
   * @return {string}
   * @private Visible for testing.
   */


  function resolveRelativeUrlFallback_(relativeUrlString, baseUrl) {
    if (typeof baseUrl == 'string') {
      baseUrl = parseUrlDeprecated(baseUrl);
    }

    relativeUrlString = relativeUrlString.replace(/\\/g, '/');
    var relativeUrl = parseUrlDeprecated(relativeUrlString); // Absolute URL.

    if ((0, _string.startsWith)(relativeUrlString.toLowerCase(), relativeUrl.protocol)) {
      return relativeUrl.href;
    } // Protocol-relative URL.


    if ((0, _string.startsWith)(relativeUrlString, '//')) {
      return baseUrl.protocol + relativeUrlString;
    } // Absolute path.


    if ((0, _string.startsWith)(relativeUrlString, '/')) {
      return baseUrl.origin + relativeUrlString;
    } // Relative path.


    return baseUrl.origin + baseUrl.pathname.replace(/\/[^/]*$/, '/') + relativeUrlString;
  }
  /**
   * Add "__amp_source_origin" query parameter to the URL.
   * @param {!Window} win
   * @param {string} url
   * @return {string}
   */


  function getCorsUrl(win, url) {
    checkCorsUrl(url);
    var sourceOrigin = getSourceOrigin(win.location.href);
    return addParamToUrl(url, SOURCE_ORIGIN_PARAM, sourceOrigin);
  }
  /**
   * Checks if the url has __amp_source_origin and throws if it does.
   * @param {string} url
   */


  function checkCorsUrl(url) {
    var parsedUrl = parseUrlDeprecated(url);
    var query = parseQueryString(parsedUrl.search);
    (0, _log.userAssert)(!(SOURCE_ORIGIN_PARAM in query), 'Source origin is not allowed in %s', url);
  }
  /**
   * Tries to decode a URI component, falling back to opt_fallback (or an empty
   * string)
   *
   * @param {string} component
   * @param {string=} opt_fallback
   * @return {string}
   */


  function tryDecodeUriComponent(component, opt_fallback) {
    return (0, _urlTryDecodeUriComponent.tryDecodeUriComponent_)(component, opt_fallback);
  }

  },{"./config":17,"./log":51,"./mode":53,"./string":116,"./types":121,"./url-parse-query-string":122,"./url-try-decode-uri-component":123,"./utils/lru-cache":130,"./utils/object":132}],125:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.areEqualOrdered = areEqualOrdered;
  exports.remove = remove;
  exports.findIndex = findIndex;
  exports.fromIterator = fromIterator;
  exports.pushIfNotExist = pushIfNotExist;

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Compares if two arrays contains exactly same elements of same number
   * of same order. Note that it does NOT handle NaN case as expected.
   *
   * @param {!Array<T>} arr1
   * @param {!Array<T>} arr2
   * @return {boolean}
   * @template T
   */
  function areEqualOrdered(arr1, arr2) {
    if (arr1.length !== arr2.length) {
      return false;
    }

    for (var i = 0; i < arr1.length; i++) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }

    return true;
  }
  /**
   * Removes elements that shouldRemove returns true for from the array.
   *
   * @param {!Array<T>} array
   * @param {function(T, number, !Array<T>):boolean} shouldRemove
   * @return {!Array<T>}
   * @template T
   */


  function remove(array, shouldRemove) {
    var removed = [];
    var index = 0;

    for (var i = 0; i < array.length; i++) {
      var item = array[i];

      if (shouldRemove(item, i, array)) {
        removed.push(item);
      } else {
        if (index < i) {
          array[index] = item;
        }

        index++;
      }
    }

    if (index < array.length) {
      array.length = index;
    }

    return removed;
  }
  /**
   * Returns the index of the first element matching the predicate.
   * Like Array#findIndex.
   *
   * @param {!Array<T>} array
   * @param {function(T, number, !Array<T>):boolean} predicate
   * @return {number}
   * @template T
   */


  function findIndex(array, predicate) {
    for (var i = 0; i < array.length; i++) {
      if (predicate(array[i], i, array)) {
        return i;
      }
    }

    return -1;
  }
  /**
   * Converts the given iterator to an array.
   *
   * @param {!Iterator<T>} iterator
   * @return {Array<T>}
   * @template T
   */


  function fromIterator(iterator) {
    var array = [];

    for (var e = iterator.next(); !e.done; e = iterator.next()) {
      array.push(e.value);
    }

    return array;
  }
  /**
   * Adds item to array if it is not already present.
   *
   * @param {Array<T>} array
   * @param {T} item
   * @template T
   */


  function pushIfNotExist(array, item) {
    if (array.indexOf(item) < 0) {
      array.push(item);
    }
  }

  },{}],126:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.base64UrlDecodeToBytes = base64UrlDecodeToBytes;
  exports.base64DecodeToBytes = base64DecodeToBytes;
  exports.base64UrlEncodeFromBytes = base64UrlEncodeFromBytes;
  exports.base64UrlEncodeFromString = base64UrlEncodeFromString;
  exports.base64UrlDecodeFromString = base64UrlDecodeFromString;
  exports.base64EncodeFromBytes = base64EncodeFromBytes;

  var _bytes = require("./bytes");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Character mapping from base64url to base64.
   * @const {!Object<string, string>}
   */
  var base64UrlDecodeSubs = {
    '-': '+',
    '_': '/',
    '.': '='
  };
  /**
   * Character mapping from base64 to base64url.
   * @const {!Object<string, string>}
   */

  var base64UrlEncodeSubs = {
    '+': '-',
    '/': '_',
    '=': '.'
  };
  /**
   * Converts a string which is in base64url encoding into a Uint8Array
   * containing the decoded value.
   * @param {string} str
   * @return {!Uint8Array}
   */

  function base64UrlDecodeToBytes(str) {
    var encoded = atob(str.replace(/[-_.]/g, function (ch) {
      return base64UrlDecodeSubs[ch];
    }));
    return (0, _bytes.stringToBytes)(encoded);
  }
  /**
   * Converts a string which is in base64 encoding into a Uint8Array
   * containing the decoded value.
   * @param {string} str
   * @return {!Uint8Array}
   */


  function base64DecodeToBytes(str) {
    return (0, _bytes.stringToBytes)(atob(str));
  }
  /**
   * Converts a bytes array into base64url encoded string.
   * base64url is defined in RFC 4648. It is sometimes referred to as "web safe".
   * @param {!Uint8Array} bytes
   * @return {string}
   */


  function base64UrlEncodeFromBytes(bytes) {
    var str = (0, _bytes.bytesToString)(bytes);
    return btoa(str).replace(/[+/=]/g, function (ch) {
      return base64UrlEncodeSubs[ch];
    });
  }
  /**
   * Converts a string into base64url encoded string.
   * base64url is defined in RFC 4648. It is sometimes referred to as "web safe".
   * @param {string} str
   * @return {string}
   */


  function base64UrlEncodeFromString(str) {
    var bytes = (0, _bytes.utf8Encode)(str);
    return base64UrlEncodeFromBytes(bytes);
  }
  /**
   * Decode a base64url encoded string by `base64UrlEncodeFromString`
   * @param {string} str
   * @return {string}
   */


  function base64UrlDecodeFromString(str) {
    var bytes = base64UrlDecodeToBytes(str);
    return (0, _bytes.utf8Decode)(bytes);
  }
  /**
   * Converts a bytes array into base64 encoded string.
   * @param {!Uint8Array} bytes
   * @return {string}
   */


  function base64EncodeFromBytes(bytes) {
    return btoa((0, _bytes.bytesToString)(bytes));
  }

  },{"./bytes":127}],127:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.utf8Decode = utf8Decode;
  exports.utf8Encode = utf8Encode;
  exports.stringToBytes = stringToBytes;
  exports.bytesToString = bytesToString;
  exports.bytesToUInt32 = bytesToUInt32;
  exports.getCryptoRandomBytesArray = getCryptoRandomBytesArray;

  var _log = require("../log");

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Interpret a byte array as a UTF-8 string.
   * @param {!BufferSource} bytes
   * @return {string}
   */
  function utf8Decode(bytes) {
    if (typeof TextDecoder !== 'undefined') {
      return new TextDecoder('utf-8').decode(bytes);
    }

    var asciiString = bytesToString(new Uint8Array(bytes.buffer || bytes));
    return decodeURIComponent(escape(asciiString));
  }
  /**
   * Turn a string into UTF-8 bytes.
   * @param {string} string
   * @return {!Uint8Array}
   */


  function utf8Encode(string) {
    if (typeof TextEncoder !== 'undefined') {
      return new TextEncoder('utf-8').encode(string);
    }

    return stringToBytes(unescape(encodeURIComponent(string)));
  }
  /**
   * Converts a string which holds 8-bit code points, such as the result of atob,
   * into a Uint8Array with the corresponding bytes.
   * If you have a string of characters, you probably want to be using utf8Encode.
   * @param {string} str
   * @return {!Uint8Array}
   */


  function stringToBytes(str) {
    var bytes = new Uint8Array(str.length);

    for (var i = 0; i < str.length; i++) {
      var charCode = str.charCodeAt(i);
      (0, _log.devAssert)(charCode <= 255, 'Characters must be in range [0,255]');
      bytes[i] = charCode;
    }

    return bytes;
  }
  /**
   * Converts a 8-bit bytes array into a string
   * @param {!Uint8Array} bytes
   * @return {string}
   */


  function bytesToString(bytes) {
    // Intentionally avoids String.fromCharCode.apply so we don't suffer a
    // stack overflow. #10495, https://jsperf.com/bytesToString-2
    var array = new Array(bytes.length);

    for (var i = 0; i < bytes.length; i++) {
      array[i] = String.fromCharCode(bytes[i]);
    }

    return array.join('');
  }
  /**
   * Converts a 4-item byte array to an unsigned integer.
   * Assumes bytes are big endian.
   * @param {!Uint8Array} bytes
   * @return {number}
   */


  function bytesToUInt32(bytes) {
    if (bytes.length != 4) {
      throw new Error('Received byte array with length != 4');
    }

    var val = (bytes[0] & 0xFF) << 24 | (bytes[1] & 0xFF) << 16 | (bytes[2] & 0xFF) << 8 | bytes[3] & 0xFF; // Convert to unsigned.

    return val >>> 0;
  }
  /**
   * Generate a random bytes array with specific length using
   * win.crypto.getRandomValues. Return null if it is not available.
   * @param {!Window} win
   * @param {number} length
   * @return {?Uint8Array}
   */


  function getCryptoRandomBytesArray(win, length) {
    if (!win.crypto || !win.crypto.getRandomValues) {
      return null;
    } // Widely available in browsers we support:
    // http://caniuse.com/#search=getRandomValues


    var uint8array = new Uint8Array(length);
    win.crypto.getRandomValues(uint8array);
    return uint8array;
  }

  },{"../log":51}],128:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.guaranteeSrcForSrcsetUnsupportedBrowsers = guaranteeSrcForSrcsetUnsupportedBrowsers;

  /**
   * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Sets the img src to the first url in the srcset if srcset is defined but
   * src is not for browsers that do not support srcset.
   * @param {!Element} img
   */
  function guaranteeSrcForSrcsetUnsupportedBrowsers(img) {
    // The <img> tag does not have a src and does not support srcset
    if (!img.hasAttribute('src') && 'srcset' in img == false) {
      var srcset = img.getAttribute('srcset');
      var matches = /\S+/.exec(srcset);

      if (matches == null) {
        return;
      }

      var srcseturl = matches[0];
      img.setAttribute('src', srcseturl);
    }
  }

  },{}],129:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.Keys = exports.KeyCodes = void 0;

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * @enum {number}
   */
  var KeyCodes = {
    ENTER: 13,
    ESCAPE: 27,
    SPACE: 32,
    LEFT_ARROW: 37,
    UP_ARROW: 38,
    RIGHT_ARROW: 39,
    DOWN_ARROW: 40
  };
  /**
   * @enum {string}
   */

  exports.KeyCodes = KeyCodes;
  var Keys = {
    ENTER: 'Enter',
    ESCAPE: 'Escape',
    SPACE: ' ',
    LEFT_ARROW: 'ArrowLeft',
    UP_ARROW: 'ArrowUp',
    RIGHT_ARROW: 'ArrowRight',
    DOWN_ARROW: 'ArrowDown'
  };
  exports.Keys = Keys;

  },{}],130:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.LruCache = void 0;

  var _log = require("../log");

  /**
   * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @const {string} */
  var TAG = 'lru-cache';
  /**
   * @template T
   */

  var LruCache =
  /*#__PURE__*/
  function () {
    /**
     * @param {number} capacity
     */
    function LruCache(capacity) {
      /** @private @const {number} */
      this.capacity_ = capacity;
      /** @private {number} */

      this.size_ = 0;
      /**
       * An incrementing counter to define the last access.
       * @private {number}
       */

      this.access_ = 0;
      /** @private {!Object<(number|string), {payload: T, access: number}>} */

      this.cache_ = Object.create(null);
    }
    /**
     * Returns whether key is cached.
     *
     * @param {number|string} key
     * @return {boolean}
     */


    var _proto = LruCache.prototype;

    _proto.has = function has(key) {
      return !!this.cache_[key];
    }
    /**
     * @param {number|string} key
     * @return {T} The cached payload.
     */
    ;

    _proto.get = function get(key) {
      var cacheable = this.cache_[key];

      if (cacheable) {
        cacheable.access = ++this.access_;
        return cacheable.payload;
      }

      return undefined;
    }
    /**
     * @param {number|string} key
     * @param {T} payload The payload to cache.
     */
    ;

    _proto.put = function put(key, payload) {
      if (!this.has(key)) {
        this.size_++;
      }

      this.cache_[key] = {
        payload: payload,
        access: this.access_
      };
      this.evict_();
    }
    /**
     * Evicts the oldest cache entry, if we've exceeded capacity.
     */
    ;

    _proto.evict_ = function evict_() {
      if (this.size_ <= this.capacity_) {
        return;
      }

      (0, _log.dev)().warn(TAG, 'Trimming LRU cache');
      var cache = this.cache_;
      var oldest = this.access_ + 1;
      var oldestKey;

      for (var key in cache) {
        var access = cache[key].access;

        if (access < oldest) {
          oldest = access;
          oldestKey = key;
        }
      }

      if (oldestKey !== undefined) {
        delete cache[oldestKey];
        this.size_--;
      }
    };

    return LruCache;
  }();

  exports.LruCache = LruCache;

  },{"../log":51}],131:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.mapRange = mapRange;
  exports.mod = mod;
  exports.clamp = clamp;

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Maps a value in a first range to its equivalent in a second range
   * Ex.: 5 in the range [0,10] gives 60 in the range[40,80]
   *
   * NOTE: lower/upper bounds on the source range are detected automatically,
   * however the bounds on the target range are not altered (thus the target
   * range could be decreasing).
   * Ex1: 8 in the range [0, 10] gives 2 in the range [10, 0]
   * Ex2: also, 8 in the range [10, 0] gives 2 in the range [10, 0]
   *
   * NOTE: Input value is enforced to be bounded inside the source range
   * Ex1: -2 in the range [0, 10] is interpreted as 0 and thus gives 40 in [40,80]
   * Ex2: 19 in the range [0, 5] is interpreted as 5 and thus gives 80 in [40,80]
   *
   * @param {number} val the value in the source range
   * @param {number} min1 the lower bound of the source range
   * @param {number} max1 the upper bound of the source range
   * @param {number} min2 the lower bound of the target range
   * @param {number} max2 the upper bound of the target range
   * @return {number} the equivalent value in the target range
   */
  function mapRange(val, min1, max1, min2, max2) {
    var max1Bound = max1;
    var min1Bound = min1;

    if (min1 > max1) {
      max1Bound = min1;
      min1Bound = max1;
    }

    if (val < min1Bound) {
      val = min1Bound;
    } else if (val > max1Bound) {
      val = max1Bound;
    }

    return (val - min1) * (max2 - min2) / (max1 - min1) + min2;
  }
  /**
   * Computes the modulus of values `a` and `b`.
   *
   * This is needed because the % operator in JavaScript doesn't implement
   * modulus behavior as can be seen by the spec here:
   * http://www.ecma-international.org/ecma-262/5.1/#sec-11.5.3.
   * It instead is used to obtain the remainder of a division.
   * This function uses the remainder (%) operator to determine the modulus.
   * Derived from here:
   * https://stackoverflow.com/questions/25726760/javascript-modular-arithmetic/47354356#47354356
   *
   * @param {number} a
   * @param {number} b
   * @return {number} returns the modulus of the two numbers.
   * @example
   *
   * _.min(10, 5);
   * // => 0
   *
   * _.mod(-1, 5);
   * // => 4
   */


  function mod(a, b) {
    return a > 0 && b > 0 ? a % b : (a % b + b) % b;
  }
  /**
   * Restricts a number to be in the given min/max range.
   *
   * Examples:
   * clamp(0.5, 0, 1) -> 0.5
   * clamp(1.5, 0, 1) -> 1
   * clamp(-0.5, 0, 1) -> 0
   *
   * @param {number} val the value to clamp.
   * @param {number} min the lower bound.
   * @param {number} max the upper bound.
   * @return {number} the clamped value.
   */


  function clamp(val, min, max) {
    return Math.min(Math.max(val, min), max);
  }

  },{}],132:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.map = map;
  exports.dict = dict;
  exports.hasOwn = hasOwn;
  exports.ownProperty = ownProperty;
  exports.deepMerge = deepMerge;
  exports.omit = omit;

  var _types = require("../types");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /* @const */
  var hasOwn_ = Object.prototype.hasOwnProperty;
  /**
   * Returns a map-like object.
   * If opt_initial is provided, copies its own properties into the
   * newly created object.
   * @param {T=} opt_initial This should typically be an object literal.
   * @return {T}
   * @template T
   */

  function map(opt_initial) {
    var obj = Object.create(null);

    if (opt_initial) {
      Object.assign(obj, opt_initial);
    }

    return obj;
  }
  /**
   * Return an empty JsonObject or makes the passed in object literal
   * an JsonObject.
   * The JsonObject type is just a simple object that is at-dict.
   * See
   * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations
   * for what a dict is type-wise.
   * The linter enforces that the argument is, in fact, at-dict like.
   * @param {!Object=} opt_initial
   * @return {!JsonObject}
   */


  function dict(opt_initial) {
    // We do not copy. The linter enforces that the passed in object is a literal
    // and thus the caller cannot have a reference to it.
    return (
      /** @type {!JsonObject} */
      opt_initial || {}
    );
  }
  /**
   * Checks if the given key is a property in the map.
   *
   * @param {T}  obj a map like property.
   * @param {string}  key
   * @return {boolean}
   * @template T
   */


  function hasOwn(obj, key) {
    return hasOwn_.call(obj, key);
  }
  /**
   * Returns obj[key] iff key is obj's own property (is not inherited).
   * Otherwise, returns undefined.
   *
   * @param {Object} obj
   * @param {string} key
   * @return {*}
   */


  function ownProperty(obj, key) {
    if (hasOwn(obj, key)) {
      return obj[key];
    } else {
      return undefined;
    }
  }
  /**
   * Deep merges source into target.
   *
   * @param {!Object} target
   * @param {!Object} source
   * @param {number} depth The maximum merge depth. If exceeded, Object.assign
   *                       will be used instead.
   * @return {!Object}
   * @throws {Error} If source contains a circular reference.
   * Note: Only nested objects are deep-merged, primitives and arrays are not.
   */


  function deepMerge(target, source, depth) {
    if (depth === void 0) {
      depth = 10;
    }

    // Keep track of seen objects to detect recursive references.
    var seen = [];
    /** @type {!Array<{t: !Object, s: !Object, d: number}>} */

    var queue = [];
    queue.push({
      t: target,
      s: source,
      d: 0
    }); // BFS to ensure objects don't have recursive references at shallower depths.

    var _loop = function _loop() {
      var _queue$shift = queue.shift(),
          t = _queue$shift.t,
          s = _queue$shift.s,
          d = _queue$shift.d;

      if (seen.includes(s)) {
        throw new Error('Source object has a circular reference.');
      }

      seen.push(s);

      if (t === s) {
        return "continue";
      }

      if (d > depth) {
        Object.assign(t, s);
        return "continue";
      }

      Object.keys(s).forEach(function (key) {
        var newValue = s[key]; // Perform a deep merge IFF both target and source have the same key
        // whose corresponding values are objects.

        if (hasOwn(t, key)) {
          var oldValue = t[key];

          if ((0, _types.isObject)(newValue) && (0, _types.isObject)(oldValue)) {
            queue.push({
              t: oldValue,
              s: newValue,
              d: d + 1
            });
            return;
          }
        }

        t[key] = newValue;
      });
    };

    while (queue.length > 0) {
      var _ret = _loop();

      if (_ret === "continue") continue;
    }

    return target;
  }
  /**
   * @param {!Object} o An object to remove properties from
   * @param {!Array<string>} props A list of properties to remove from the Object
   * @return {!Object} An object with the given properties removed
   */


  function omit(o, props) {
    return Object.keys(o).reduce(function (acc, key) {
      if (!props.includes(key)) {
        acc[key] = o[key];
      }

      return acc;
    }, {});
  }

  },{"../types":121}],133:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.default = void 0;

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * A priority queue backed with sorted array.
   * @template T
   */
  var PriorityQueue =
  /*#__PURE__*/
  function () {
    /**
     * Creates an instance of PriorityQueue.
     */
    function PriorityQueue() {
      /** @private @const {Array<{item: T, priority: number}>} */
      this.queue_ = [];
    }
    /**
     * Returns the max priority item without dequeueing it.
     * @return {T}
     */


    var _proto = PriorityQueue.prototype;

    _proto.peek = function peek() {
      var l = this.queue_.length;

      if (!l) {
        return null;
      }

      return this.queue_[l - 1].item;
    }
    /**
     * Enqueues an item with the given priority.
     * @param {T} item
     * @param {number} priority
     */
    ;

    _proto.enqueue = function enqueue(item, priority) {
      if (isNaN(priority)) {
        throw new Error('Priority must not be NaN.');
      }

      var i = this.binarySearch_(priority);
      this.queue_.splice(i, 0, {
        item: item,
        priority: priority
      });
    }
    /**
     * Returns index at which item with `target` priority should be inserted.
     * @param {number} target
     * @return {number}
     * @private
     */
    ;

    _proto.binarySearch_ = function binarySearch_(target) {
      var i = -1;
      var lo = 0;
      var hi = this.queue_.length;

      while (lo <= hi) {
        i = Math.floor((lo + hi) / 2); // This means `target` is the new max priority in the queue.

        if (i === this.queue_.length) {
          break;
        } // Stop searching once p[i] >= target AND p[i-1] < target.
        // This way, we'll return the index of the first occurence of `target`
        // priority (if any), which preserves FIFO order of same-priority items.


        if (this.queue_[i].priority < target) {
          lo = i + 1;
        } else if (i > 0 && this.queue_[i - 1].priority >= target) {
          hi = i - 1;
        } else {
          break;
        }
      }

      return i;
    }
    /**
     * @param {function(T)} callback
     */
    ;

    _proto.forEach = function forEach(callback) {
      var index = this.queue_.length;

      while (index--) {
        callback(this.queue_[index].item);
      }
    }
    /**
     * Dequeues the max priority item.
     * Items with the same priority are dequeued in FIFO order.
     * @return {T}
     */
    ;

    _proto.dequeue = function dequeue() {
      if (!this.queue_.length) {
        return null;
      }

      return this.queue_.pop().item;
    }
    /**
     * The number of items in the queue.
     * @return {number}
     */
    ;

    _createClass(PriorityQueue, [{
      key: "length",
      get: function get() {
        return this.queue_.length;
      }
    }]);

    return PriorityQueue;
  }();

  exports.default = PriorityQueue;

  },{}],134:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.tryResolve = tryResolve;
  exports.some = some;
  exports.LastAddedResolver = exports.Deferred = void 0;

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Returns a Deferred struct, which holds a pending promise and its associated
   * resolve and reject functions.
   *
   * This is preferred instead of creating a Promise instance to extract the
   * resolve/reject functions yourself:
   *
   * ```
   * // Avoid doing
   * let resolve;
   * const promise = new Promise(res => {
   *   resolve = res;
   * });
   *
   * // Good
   * const deferred = new Deferred();
   * const { promise, resolve } = deferred;
   * ```
   *
   * @template T
   */
  var Deferred =
  /**
   * Creates an instance of Deferred.
   */
  function Deferred() {
    var resolve, reject;
    /**
     * @const {!Promise<T>}
     */

    this.promise = new
    /*OK*/
    Promise(function (res, rej) {
      resolve = res;
      reject = rej;
    });
    /**
     * @const {function(T=)}
     */

    this.resolve = resolve;
    /**
     * @const {function(*=)}
     */

    this.reject = reject;
  };
  /**
   * Creates a promise resolved to the return value of fn.
   * If fn sync throws, it will cause the promise to reject.
   *
   * @param {function():T} fn
   * @return {!Promise<T>}
   * @template T
   */


  exports.Deferred = Deferred;

  function tryResolve(fn) {
    return new Promise(function (resolve) {
      resolve(fn());
    });
  }
  /**
   * Returns a promise which resolves if a threshold amount of the given promises
   * resolve, and rejects otherwise.
   * @param {!Array<!Promise>} promises The array of promises to test.
   * @param {number} count The number of promises that must resolve for the
   *     returned promise to resolve.
   * @return {!Promise} A promise that resolves if any of the given promises
   *     resolve, and which rejects otherwise.
   */


  function some(promises, count) {
    if (count === void 0) {
      count = 1;
    }

    return new Promise(function (resolve, reject) {
      count = Math.max(count, 0);
      var extra = promises.length - count;

      if (extra < 0) {
        reject(new Error('not enough promises to resolve'));
      }

      if (promises.length == 0) {
        resolve([]);
      }

      var values = [];
      var reasons = [];

      var onFulfilled = function onFulfilled(value) {
        if (values.length < count) {
          values.push(value);
        }

        if (values.length == count) {
          resolve(values);
        }
      };

      var onRejected = function onRejected(reason) {
        if (reasons.length <= extra) {
          reasons.push(reason);
        }

        if (reasons.length > extra) {
          reject(reasons);
        }
      };

      for (var i = 0; i < promises.length; i++) {
        Promise.resolve(promises[i]).then(onFulfilled, onRejected);
      }
    });
  }
  /**
   * Resolves with the result of the last promise added.
   * @implements {IThenable}
   */


  var LastAddedResolver =
  /*#__PURE__*/
  function () {
    /**
     * @param {!Array<!Promise>=} opt_promises
     */
    function LastAddedResolver(opt_promises) {
      var resolve_, reject_;
      /** @private @const {!Promise} */

      this.promise_ = new Promise(function (resolve, reject) {
        resolve_ = resolve;
        reject_ = reject;
      });
      /** @private */

      this.resolve_ = resolve_;
      /** @private */

      this.reject_ = reject_;
      /** @private */

      this.count_ = 0;

      if (opt_promises) {
        for (var i = 0; i < opt_promises.length; i++) {
          this.add(opt_promises[i]);
        }
      }
    }
    /**
     * Add a promise to possibly be resolved.
     * @param {!Promise} promise
     * @return {!Promise}
     */


    var _proto = LastAddedResolver.prototype;

    _proto.add = function add(promise) {
      var _this = this;

      var countAtAdd = ++this.count_;
      Promise.resolve(promise).then(function (result) {
        if (_this.count_ === countAtAdd) {
          _this.resolve_(result);
        }
      }, function (error) {
        // Don't follow behavior of Promise.all and Promise.race error so that
        // this will only reject when most recently added promise fails.
        if (_this.count_ === countAtAdd) {
          _this.reject_(error);
        }
      });
      return this.promise_;
    }
    /** @override */
    ;

    _proto.then = function then(opt_resolve, opt_reject) {
      return this.promise_.then(opt_resolve, opt_reject);
    };

    return LastAddedResolver;
  }();

  exports.LastAddedResolver = LastAddedResolver;

  },{}],135:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.throttle = throttle;
  exports.debounce = debounce;

  /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Wraps a given callback and applies a rate limit.
   * It throttles the calls so that no consequent calls have time interval
   * smaller than the given minimal interval.
   *
   * @param {!Window} win
   * @param {function(...*)} callback
   * @param {number} minInterval the minimum time interval in millisecond
   * @return {function(...*)}
   */
  function throttle(win, callback, minInterval) {
    var locker = 0;
    var nextCallArgs = null;
    /**
     * @param {!Object} args
     */

    function fire(args) {
      nextCallArgs = null; // Lock the fire for minInterval milliseconds

      locker = win.setTimeout(waiter, minInterval);
      callback.apply(null, args);
    }
    /**
     * Waiter function
     */


    function waiter() {
      locker = 0; // If during the period there're invocations queued up, fire once.

      if (nextCallArgs) {
        fire(nextCallArgs);
      }
    }

    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (locker) {
        nextCallArgs = args;
      } else {
        fire(args);
      }
    };
  }
  /**
   * Wraps a given callback and applies a wait timer, so that minInterval
   * milliseconds must pass since the last call before the callback is actually
   * invoked.
   *
   * @param {!Window} win
   * @param {function(...*)} callback
   * @param {number} minInterval the minimum time interval in millisecond
   * @return {function(...*)}
   */


  function debounce(win, callback, minInterval) {
    var locker = 0;
    var timestamp = 0;
    var nextCallArgs = null;
    /**
     * @param {?Array} args
     */

    function fire(args) {
      nextCallArgs = null;
      callback.apply(null, args);
    }
    /**
     * Wait function for debounce
     */


    function waiter() {
      locker = 0;
      var remaining = minInterval - (win.Date.now() - timestamp);

      if (remaining > 0) {
        locker = win.setTimeout(waiter, remaining);
      } else {
        fire(nextCallArgs);
      }
    }

    return function () {
      timestamp = win.Date.now();

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      nextCallArgs = args;

      if (!locker) {
        locker = win.setTimeout(waiter, minInterval);
      }
    };
  }

  },{}],136:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.Signals = void 0;

  var _promise2 = require("./promise");

  var _object = require("./object");

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * This object tracts signals and allows blocking until a signal has been
   * received.
   */
  var Signals =
  /*#__PURE__*/
  function () {
    /**
     * Creates an instance of Signals.
     */
    function Signals() {
      /**
       * A mapping from a signal name to the signal response: either time or
       * an error.
       * @private @const {!Object<string, (time|!Error)>}
       */
      this.map_ = (0, _object.map)();
      /**
       * A mapping from a signal name to the signal promise, resolve and reject.
       * Only allocated when promise has been requested.
       * @private {?Object<string, {
       *   promise: !Promise,
       *   resolve: (function(time)|undefined),
       *   reject: (function(!Error)|undefined)
       * }>}
       */

      this.promiseMap_ = null;
    }
    /**
     * Returns the current known value of the signal. If signal is not yet
     * available, `null` is returned.
     * @param {string} name
     * @return {number|!Error|null}
     */


    var _proto = Signals.prototype;

    _proto.get = function get(name) {
      return this.map_[name] || null;
    }
    /**
     * Returns the promise that's resolved when the signal is triggered. The
     * resolved value is the time of the signal.
     * @param {string} name
     * @return {!Promise<time>}
     */
    ;

    _proto.whenSignal = function whenSignal(name) {
      var promiseStruct = this.promiseMap_ && this.promiseMap_[name];

      if (!promiseStruct) {
        var result = this.map_[name];

        if (result != null) {
          // Immediately resolve signal.
          var promise = typeof result == 'number' ? Promise.resolve(result) : Promise.reject(result);
          promiseStruct = {
            promise: promise
          };
        } else {
          // Allocate the promise/resolver for when the signal arrives in the
          // future.
          var deferred = new _promise2.Deferred();
          var _promise = deferred.promise,
              resolve = deferred.resolve,
              reject = deferred.reject;
          promiseStruct = {
            promise: _promise,
            resolve: resolve,
            reject: reject
          };
        }

        if (!this.promiseMap_) {
          this.promiseMap_ = (0, _object.map)();
        }

        this.promiseMap_[name] = promiseStruct;
      }

      return promiseStruct.promise;
    }
    /**
     * Triggers the signal with the specified name on the element. The time is
     * optional; if not provided, the current time is used. The associated
     * promise is resolved with the resulting time.
     * @param {string} name
     * @param {time=} opt_time
     */
    ;

    _proto.signal = function signal(name, opt_time) {
      if (this.map_[name] != null) {
        // Do not duplicate signals.
        return;
      }

      var time = opt_time || Date.now();
      this.map_[name] = time;
      var promiseStruct = this.promiseMap_ && this.promiseMap_[name];

      if (promiseStruct && promiseStruct.resolve) {
        promiseStruct.resolve(time);
        promiseStruct.resolve = undefined;
        promiseStruct.reject = undefined;
      }
    }
    /**
     * Rejects the signal. Indicates that the signal will never succeed. The
     * associated signal is rejected.
     * @param {string} name
     * @param {!Error} error
     */
    ;

    _proto.rejectSignal = function rejectSignal(name, error) {
      if (this.map_[name] != null) {
        // Do not duplicate signals.
        return;
      }

      this.map_[name] = error;
      var promiseStruct = this.promiseMap_ && this.promiseMap_[name];

      if (promiseStruct && promiseStruct.reject) {
        promiseStruct.reject(error);
        promiseStruct.resolve = undefined;
        promiseStruct.reject = undefined;
      }
    }
    /**
     * Resets all signals.
     * @param {string} name
     */
    ;

    _proto.reset = function reset(name) {
      if (this.map_[name]) {
        delete this.map_[name];
      } // Reset promise it has already been resolved.


      var promiseStruct = this.promiseMap_ && this.promiseMap_[name];

      if (promiseStruct && !promiseStruct.resolve) {
        delete this.promiseMap_[name];
      }
    };

    return Signals;
  }();

  exports.Signals = Signals;

  },{"./object":132,"./promise":134}],137:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.toStructuredCloneable = toStructuredCloneable;
  exports.fromStructuredCloneable = fromStructuredCloneable;
  exports.getViewerInterceptResponse = getViewerInterceptResponse;
  exports.setupInput = setupInput;
  exports.setupInit = setupInit;
  exports.setupAMPCors = setupAMPCors;
  exports.setupJsonFetchInit = setupJsonFetchInit;
  exports.verifyAmpCORSHeaders = verifyAmpCORSHeaders;
  exports.assertSuccess = assertSuccess;
  exports.getViewerAuthTokenIfAvailable = getViewerAuthTokenIfAvailable;
  exports.ALLOW_SOURCE_ORIGIN_HEADER = void 0;

  var _services = require("../services");

  var _log = require("../log");

  var _object = require("./object");

  var _array = require("./array");

  var _url = require("../url");

  var _mode = require("../mode");

  var _types = require("../types");

  var _formDataWrapper = require("../form-data-wrapper");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /** @private @const {!Array<string>} */
  var allowedMethods_ = ['GET', 'POST'];
  /** @private @const {string} */

  var ALLOW_SOURCE_ORIGIN_HEADER = 'AMP-Access-Control-Allow-Source-Origin';
  /** @private @const {!Array<function(*):boolean>} */

  exports.ALLOW_SOURCE_ORIGIN_HEADER = ALLOW_SOURCE_ORIGIN_HEADER;
  var allowedJsonBodyTypes_ = [_types.isArray, _types.isObject];
  /**
   * Serializes a fetch request so that it can be passed to `postMessage()`,
   * i.e., can be cloned using the
   * [structured clone algorithm](http://mdn.io/Structured_clone_algorithm).
   *
   * The request is serialized in the following way:
   *
   * 1. If the `init.body` is a `FormData`, set content-type header to
   * `multipart/form-data` and transform `init.body` into an
   * `!Array<!Array<string>>` holding the list of form entries, where each
   * element in the array is a form entry (key-value pair) represented as a
   * 2-element array.
   *
   * 2. Return a new object having properties `input` and the transformed
   * `init`.
   *
   * The serialized request is assumed to be de-serialized in the following way:
   *
   * 1.If content-type header starts with `multipart/form-data`
   * (case-insensitive), transform the entry array in `init.body` into a
   * `FormData` object.
   *
   * 2. Pass `input` and transformed `init` to `fetch` (or the constructor of
   * `Request`).
   *
   * Currently only `FormData` used in `init.body` is handled as it's the only
   * type being used in AMP runtime that needs serialization. The `Headers` type
   * also needs serialization, but callers should not be passing `Headers`
   * object in `init`, as that fails `fetchPolyfill` on browsers that don't
   * support fetch. Some serialization-needing types for `init.body` such as
   * `ArrayBuffer` and `Blob` are already supported by the structured clone
   * algorithm. Other serialization-needing types such as `URLSearchParams`
   * (which is not supported in IE and Safari) and `FederatedCredentials` are
   * not used in AMP runtime.
   *
   * @param {string} input The URL of the XHR to convert to structured
   *     cloneable.
   * @param {!FetchInitDef} init The options of the XHR to convert to structured
   *     cloneable.
   * @return {{input: string, init: !FetchInitDef}} The serialized structurally-
   *     cloneable request.
   * @private
   */

  function toStructuredCloneable(input, init) {
    var newInit = Object.assign({}, init);

    if ((0, _formDataWrapper.isFormDataWrapper)(init.body)) {
      var wrapper =
      /** @type {!FormDataWrapperInterface} **/
      init.body;
      newInit.headers['Content-Type'] = 'multipart/form-data;charset=utf-8';
      newInit.body = (0, _array.fromIterator)(wrapper.entries());
    }

    return {
      input: input,
      init: newInit
    };
  }
  /**
   * De-serializes a fetch response that was made possible to be passed to
   * `postMessage()`, i.e., can be cloned using the
   * [structured clone algorithm](http://mdn.io/Structured_clone_algorithm).
   *
   * The response is assumed to be serialized in the following way:
   *
   * 1. Transform the entries in the headers of the response into an
   * `!Array<!Array<string>>` holding the list of header entries, where each
   * element in the array is a header entry (key-value pair) represented as a
   * 2-element array. The header key is case-insensitive.
   *
   * 2. Include the header entry list and `status` and `statusText` properties
   * of the response in as `headers`, `status` and `statusText` properties of
   * `init`.
   *
   * 3. Include the body of the response serialized as string in `body`.
   *
   * 4. Return a new object having properties `body` and `init`.
   *
   * The response is de-serialized in the following way:
   *
   * 1. If the `Response` type is supported and `responseType` is not
   * document, pass `body` and `init` directly to the constructor of `Response`.
   *
   * 2. Otherwise, populate a fake XHR object to pass to `FetchResponse` as if
   * the response is returned by the fetch polyfill.
   *
   * 3. If `responseType` is `document`, also parse the body and populate
   * `responseXML` as a `Document` type.
   *
   * @param {JsonObject|string|undefined} response The structurally-cloneable
   *     response to convert back to a regular Response.
   * @param {string|undefined} responseType The original response type used to
   *     initiate the XHR.
   * @return {!Response} The deserialized regular response.
   * @private
   */


  function fromStructuredCloneable(response, responseType) {
    (0, _log.userAssert)((0, _types.isObject)(response), 'Object expected: %s', response);
    var isDocumentType = responseType == 'document';

    if (!isDocumentType) {
      // Use native `Response` type if available for performance. If response
      // type is `document`, we must fall back to `FetchResponse` polyfill
      // because callers would then rely on the `responseXML` property being
      // present, which is not supported by the Response type.
      return new Response(response['body'], response['init']);
    }

    var lowercasedHeaders = (0, _object.map)();
    var data = {
      status: 200,
      statusText: 'OK',

      /**
       * @param {string} name
       * @return {string}
       */
      getResponseHeader: function getResponseHeader(name) {
        return lowercasedHeaders[String(name).toLowerCase()] || null;
      }
    };

    if (response['init']) {
      var init = response['init'];

      if ((0, _types.isArray)(init.headers)) {
        init.headers.forEach(function (entry) {
          var headerName = entry[0];
          var headerValue = entry[1];
          lowercasedHeaders[String(headerName).toLowerCase()] = String(headerValue);
        });
      }

      if (init.status) {
        data.status = parseInt(init.status, 10);
      }

      if (init.statusText) {
        data.statusText = String(init.statusText);
      }
    }

    return new Response(response['body'] ? String(response['body']) : '', data);
  }
  /**
   * Intercepts the XHR and proxies it through the viewer if necessary.
   *
   * XHRs are intercepted if all of the following are true:
   * - The AMP doc is in single doc mode
   * - The requested resource is not a 1p request.
   * - The viewer has the `xhrInterceptor` capability
   * - The Viewer is a trusted viewer or AMP is currently in developement mode
   * - The AMP doc is opted-in for XHR interception (`<html>` tag has
   *   `allow-xhr-interception` attribute)
   *
   * @param {!Window} win
   * @param {?../service/ampdoc-impl.AmpDoc} ampdocSingle
   * @param {string} input The URL of the XHR which may get intercepted.
   * @param {!FetchInitDef} init The options of the XHR which may get
   *     intercepted.
   * @return {!Promise<!Response|undefined>}
   *     A response returned by the interceptor if XHR is intercepted or
   *     `Promise<undefined>` otherwise.
   * @private
   */


  function getViewerInterceptResponse(win, ampdocSingle, input, init) {
    if (!ampdocSingle) {
      return Promise.resolve();
    }

    var viewer = _services.Services.viewerForDoc(ampdocSingle);

    var whenFirstVisible = viewer.whenFirstVisible();

    if ((0, _url.isProxyOrigin)(input) || !viewer.hasCapability('xhrInterceptor')) {
      return whenFirstVisible;
    }

    var htmlElement = ampdocSingle.getRootNode().documentElement;
    var docOptedIn = htmlElement.hasAttribute('allow-xhr-interception');

    if (!docOptedIn) {
      return whenFirstVisible;
    }

    return whenFirstVisible.then(function () {
      return viewer.isTrustedViewer();
    }).then(function (viewerTrusted) {
      var isDevMode = (0, _mode.getMode)(win).development;

      if (!viewerTrusted && !isDevMode) {
        return;
      }

      var messagePayload = (0, _object.dict)({
        'originalRequest': toStructuredCloneable(input, init)
      });
      return viewer.sendMessageAwaitResponse('xhr', messagePayload).then(function (response) {
        return fromStructuredCloneable(response, init.responseType);
      });
    });
  }
  /**
   * Sets up URL based on ampCors
   * @param {!Window} win
   * @param {string} input
   * @param {!FetchInitDef} init The options of the XHR which may get
   * intercepted.
   */


  function setupInput(win, input, init) {
    (0, _log.devAssert)(typeof input == 'string', 'Only URL supported: %s', input);

    if (init.ampCors !== false) {
      input = (0, _url.getCorsUrl)(win, input);
    }

    return input;
  }
  /**
   * Sets up and normalizes the FetchInitDef
   *
   * @param {?FetchInitDef=} opt_init Fetch options object.
   * @param {string=} opt_accept The HTTP Accept header value.
   * @return {!FetchInitDef}
   */


  function setupInit(opt_init, opt_accept) {
    var init = opt_init || {}; // In particular, Firefox does not tolerate `null` values for
    // `credentials`.

    var creds = init.credentials;
    (0, _log.devAssert)(creds === undefined || creds == 'include' || creds == 'omit', 'Only credentials=include|omit support: %s', creds);
    init.method = normalizeMethod_(init.method);
    init.headers = init.headers || (0, _object.dict)({});

    if (opt_accept) {
      init.headers['Accept'] = opt_accept;
    } // In edge a `TypeMismatchError` is thrown when body is set to null.


    (0, _log.devAssert)(init.body !== null, 'fetch `body` can not be `null`');
    return init;
  }
  /**
   *
   * Sets up AMPSpecific CORS headers.
   * @param {!Window} win
   * @param {string} input
   * @param {?FetchInitDef=} init
   * @return {!FetchInitDef}
   */


  function setupAMPCors(win, input, init) {
    // Do not append __amp_source_origin if explicitly disabled.
    if (init.ampCors === false) {
      init.requireAmpResponseSourceOrigin = false;
    }

    if (init.requireAmpResponseSourceOrigin === true) {
      (0, _log.dev)().error('XHR', 'requireAmpResponseSourceOrigin is deprecated, use ampCors instead');
    }

    if (init.requireAmpResponseSourceOrigin === undefined) {
      init.requireAmpResponseSourceOrigin = true;
    } // For some same origin requests, add AMP-Same-Origin: true header to allow
    // publishers to validate that this request came from their own origin.


    var currentOrigin = (0, _url.getWinOrigin)(win);
    var targetOrigin = (0, _url.parseUrlDeprecated)(input).origin;

    if (currentOrigin == targetOrigin) {
      init['headers'] = init['headers'] || {};
      init['headers']['AMP-Same-Origin'] = 'true';
    }

    return init;
  }
  /**
   * @param {?FetchInitDef=} init
   * @return {!FetchInitDef}
   */


  function setupJsonFetchInit(init) {
    var fetchInit = setupInit(init, 'application/json');

    if (fetchInit.method == 'POST' && !(0, _formDataWrapper.isFormDataWrapper)(fetchInit.body)) {
      // Assume JSON strict mode where only objects or arrays are allowed
      // as body.
      (0, _log.devAssert)(allowedJsonBodyTypes_.some(function (test) {
        return test(fetchInit.body);
      }), 'body must be of type object or array. %s', fetchInit.body); // Content should be 'text/plain' to avoid CORS preflight.

      fetchInit.headers['Content-Type'] = fetchInit.headers['Content-Type'] || 'text/plain;charset=utf-8';
      var headerContentType = fetchInit.headers['Content-Type']; // Cast is valid, because we checked that it is not form data above.

      if (headerContentType === 'application/x-www-form-urlencoded') {
        fetchInit.body = (0, _url.serializeQueryString)(
        /** @type {!JsonObject} */
        fetchInit.body);
      } else {
        fetchInit.body = JSON.stringify(
        /** @type {!JsonObject} */
        fetchInit.body);
      }
    }

    return fetchInit;
  }
  /**
   * Normalized method name by uppercasing.
   * @param {string|undefined} method
   * @return {string}
   * @private
   */


  function normalizeMethod_(method) {
    if (method === undefined) {
      return 'GET';
    }

    method = method.toUpperCase();
    (0, _log.devAssert)(allowedMethods_.includes(method), 'Only one of %s is currently allowed. Got %s', allowedMethods_.join(', '), method);
    return method;
  }
  /**
   * Verifies if response has the correct headers
   * @param {!Window} win
   * @param {!Response} response
   * @param {!FetchInitDef=} init
   * @return {!Response}
   */


  function verifyAmpCORSHeaders(win, response, init) {
    var allowSourceOriginHeader = response.headers.get(ALLOW_SOURCE_ORIGIN_HEADER);

    if (allowSourceOriginHeader) {
      var sourceOrigin = (0, _url.getSourceOrigin)(win.location.href); // If the `AMP-Access-Control-Allow-Source-Origin` header is returned,
      // ensure that it's equal to the current source origin.

      (0, _log.userAssert)(allowSourceOriginHeader == sourceOrigin, "Returned " + ALLOW_SOURCE_ORIGIN_HEADER + " is not" + (" equal to the current: " + allowSourceOriginHeader) + (" vs " + sourceOrigin));
    } else if (init.requireAmpResponseSourceOrigin) {
      // If the `AMP-Access-Control-Allow-Source-Origin` header is not
      // returned but required, return error.
      (0, _log.userAssert)(false, 'Response must contain the' + (" " + ALLOW_SOURCE_ORIGIN_HEADER + " header"));
    }

    return response;
  }
  /**
   * If 415 or in the 5xx range.
   * @param {number} status
   */


  function isRetriable(status) {
    return status == 415 || status >= 500 && status < 600;
  }
  /**
   * Returns the response if successful or otherwise throws an error.
   * @param {!Response} response
   * @return {!Promise<!Response>}
   * @private Visible for testing
   */


  function assertSuccess(response) {
    return new Promise(function (resolve) {
      if (response.ok) {
        return resolve(response);
      }

      var status = response.status;
      var err = (0, _log.user)().createError("HTTP error " + status);
      err.retriable = isRetriable(status); // TODO(@jridgewell, #9448): Callers who need the response should
      // skip processing.

      err.response = response;
      throw err;
    });
  }
  /**
   * Returns a promise resolving to a string identity token if the element
   * contains the 'crossorigin' attribute and the amp-viewer-assistance extension
   * is present. Resolves to undefined otherwise.
   * @param {!Window} win
   * @param {!Element} element
   * @return {!Promise<string|undefined>}
   */


  function getViewerAuthTokenIfAvailable(win, element) {
    var crossOriginAttr = element.getAttribute('cross-origin') || element.getAttribute('crossorigin');

    if (crossOriginAttr && crossOriginAttr.trim() === 'amp-viewer-auth-token-via-post') {
      return _services.Services.viewerAssistanceForDocOrNull(element).then(function (viewerAssistance) {
        (0, _log.userAssert)(viewerAssistance, 'crossorigin="amp-viewer-auth-token-post" ' + 'requires amp-viewer-assistance extension.');
        return viewerAssistance.getIdTokenPromise();
      });
    }

    return Promise.resolve();
  }

  },{"../form-data-wrapper":37,"../log":51,"../mode":53,"../services":112,"../types":121,"../url":124,"./array":125,"./object":132}],138:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.maybeValidate = maybeValidate;

  var _mode = require("./mode");

  var _eventHelper = require("./event-helper");

  var _url = require("./url");

  var _string = require("./string");

  var _config = require("./config");

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Triggers validation for the current document if there is a script in the
   * page that has a "development" attribute and the bypass validation via
   * #validate=0 is absent.
   *
   * @param {!Window} win Destination window for the new element.
   */
  function maybeValidate(win) {
    var filename = win.location.href;

    if ((0, _string.startsWith)(filename, 'about:')) {
      // Should only happen in tests.
      return;
    }

    var validator = false;

    if ((0, _mode.getMode)().development) {
      var hash = (0, _url.parseQueryString)(win.location.originalHash || win.location.hash);
      validator = hash['validate'] !== '0';
    }

    if (validator) {
      loadScript(win.document, _config.urls.cdn + "/v0/validator.js").then(function () {
        /* global amp: false */
        amp.validator.validateUrlAndLog(filename, win.document, (0, _mode.getMode)().filter);
      });
    } else if ((0, _mode.getMode)().examiner) {
      loadScript(win.document, _config.urls.cdn + "/examiner.js");
    }
  }
  /**
   * Loads script
   *
   * @param {Document} doc
   * @param {string} url
   * @return {!Promise}
   */


  function loadScript(doc, url) {
    var script = doc.createElement('script');
    script.src = url;
    var promise = (0, _eventHelper.loadPromise)(script).then(function () {
      doc.head.removeChild(script);
    }, function () {});
    doc.head.appendChild(script);
    return promise;
  }

  },{"./config":17,"./event-helper":31,"./mode":53,"./string":116,"./url":124}],139:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.VisibilityState = void 0;

  /**
   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Visibility state of the AMP document.
   * @enum {string}
   */
  var VisibilityState = {
    /**
     * The AMP document is being pre-rendered before being shown.
     */
    PRERENDER: 'prerender',

    /**
     * The AMP document is currently active and visible.
     */
    VISIBLE: 'visible',

    /**
     * The AMP document is active but the browser tab or AMP app is not.
     */
    HIDDEN: 'hidden',

    /**
     * The AMP document is visible, but the user has started swiping away from
     * it. The runtime may stop active playback.
     */
    PAUSED: 'paused',

    /**
     * The AMP document is no longer active because the user swiped away or
     * closed the viewer. The document may become visible again later.
     */
    INACTIVE: 'inactive'
  };
  exports.VisibilityState = VisibilityState;

  },{}],140:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.setShadowDomSupportedVersionForTesting = setShadowDomSupportedVersionForTesting;
  exports.setShadowCssSupportedForTesting = setShadowCssSupportedForTesting;
  exports.isShadowDomSupported = isShadowDomSupported;
  exports.isShadowCssSupported = isShadowCssSupported;
  exports.getShadowDomSupportedVersion = getShadowDomSupportedVersion;
  exports.ShadowDomVersion = void 0;

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Possible versions of Shadow DOM spec
   * @const
   * @enum {string}
   */
  var ShadowDomVersion = {
    NONE: 'none',
    V0: 'v0',
    V1: 'v1'
  };
  /**
   * @type {ShadowDomVersion|undefined}
   * @visibleForTesting
   */

  exports.ShadowDomVersion = ShadowDomVersion;
  var shadowDomSupportedVersion;
  /**
   * @type {boolean|undefined}
   * @visibleForTesting
   */

  var shadowCssSupported;
  /**
   * @param {ShadowDomVersion|undefined} val
   * @visibleForTesting
   */

  function setShadowDomSupportedVersionForTesting(val) {
    shadowDomSupportedVersion = val;
  }
  /**
   * @param {boolean|undefined} val
   * @visibleForTesting
   */


  function setShadowCssSupportedForTesting(val) {
    shadowCssSupported = val;
  }
  /**
   * Returns `true` if the Shadow DOM is supported.
   * @return {boolean}
   */


  function isShadowDomSupported() {
    return getShadowDomSupportedVersion() != ShadowDomVersion.NONE;
  }
  /**
   * Returns `true` if Shadow CSS encapsulation is supported.
   * @return {boolean}
   */


  function isShadowCssSupported() {
    if (shadowCssSupported === undefined) {
      shadowCssSupported = isShadowDomSupported() && (isNative(Element.prototype.attachShadow) || isNative(Element.prototype.createShadowRoot));
    }

    return shadowCssSupported;
  }
  /**
   * Returns `true` if the passed function is native to the browser, and is not
   * polyfilled
   * @param {Function|undefined} func A function that is attatched to a JS
   * object.
   * @return {boolean}
   */


  function isNative(func) {
    return !!func && func.toString().indexOf('[native code]') != -1;
  }
  /**
   * Returns the supported version of Shadow DOM spec.
   * @param {?function(new:Element)=} opt_elementClass optional for testing
   * @return {ShadowDomVersion}
   */


  function getShadowDomSupportedVersion(opt_elementClass) {
    if (shadowDomSupportedVersion === undefined) {
      shadowDomSupportedVersion = getShadowDomVersion(opt_elementClass || Element);
    }

    return shadowDomSupportedVersion;
  }
  /**
   * Returns shadow dom version.
   *
   * @param {?function(new:Element)=} element
   * @return {ShadowDomVersion}
   */


  function getShadowDomVersion(element) {
    if (!!element.prototype.attachShadow) {
      return ShadowDomVersion.V1;
    } else if (!!element.prototype.createShadowRoot) {
      return ShadowDomVersion.V0;
    }

    return ShadowDomVersion.NONE;
  }

  },{}],141:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.WindowInterface = void 0;

  /**
   * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * An interface to interact with browser window object.
   * Mainly used to mock out read only APIs in test.
   * See test-helper.js#mockWindowInterface
   */
  var WindowInterface =
  /*#__PURE__*/
  function () {
    function WindowInterface() {}

    /**
     * @static
     * @param {!Window} win
     * @return {!Location}
     */
    WindowInterface.getLocation = function getLocation(win) {
      return win.location;
    }
    /**
     * @static
     * @param {!Window} win
     * @return {string}
     */
    ;

    WindowInterface.getDocumentReferrer = function getDocumentReferrer(win) {
      return win.document.referrer;
    }
    /**
     * @static
     * @param {!Window} win
     * @return {string}
     */
    ;

    WindowInterface.getHostname = function getHostname(win) {
      return win.location.hostname;
    }
    /**
     * @static
     * @param {!Window} win
     * @return {string}
     */
    ;

    WindowInterface.getUserAgent = function getUserAgent(win) {
      return win.navigator.userAgent;
    }
    /**
     * @static
     * @param {!Window} win
     * @return {string}
     */
    ;

    WindowInterface.getUserLanguage = function getUserLanguage(win) {
      return win.navigator.userLanguage || win.navigator.language;
    }
    /**
     * @static
     * @param {!Window} win
     * @return {function(string,(ArrayBufferView|Blob|FormData|null|string)=):boolean|undefined}
     */
    ;

    WindowInterface.getSendBeacon = function getSendBeacon(win) {
      if (!win.navigator.sendBeacon) {
        return undefined;
      }

      return win.navigator.sendBeacon.bind(win.navigator);
    }
    /**
     * @static
     * @param {!Window} win
     * @return {function(new:XMLHttpRequest)}
     */
    ;

    WindowInterface.getXMLHttpRequest = function getXMLHttpRequest(win) {
      return win.XMLHttpRequest;
    }
    /**
     * @static
     * @param {!Window} win
     * @return {function(new:Image)}
     */
    ;

    WindowInterface.getImage = function getImage(win) {
      return win.Image;
    };

    return WindowInterface;
  }();

  exports.WindowInterface = WindowInterface;

  },{}],142:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.cssEscape = cssEscape;

  /*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */

  /**
   * This regex consists of 4 matching capture groups and one (non-matching) fallback:
   *
   * - (\0), catch the null terminator character so it may be replaced by UTF
   *   Replacement Char
   * - ^(-)$, catch a solitary dash char, so that it may be backslash escaped.
   *   This is a separate capture group so that the legal-chars (group 4) doesn't
   *   capture it first, since that group doesn't need to escape its dash.
   * - ([\x01-\x1f\x7f]|^-?[0-9]), catch a UTF control char, or any leading
   *   number (with an optional leading dash). The control or the number (but not
   *   the leading dash) must be hex-escaped,.
   * - ([\x80-\uffff0-9a-zA-Z_-]+), catch legal-chars, with the exception of a
   *   solitary dash, which will already have matched in group 1.
   * - [^], finally, a catch-all that allows us to backslash escape the char.
   *
   * Together, this matches everything necessary for CSS.escape.
   */
  var regex = /(\0)|^(-)$|([\x01-\x1f\x7f]|^-?[0-9])|([\x80-\uffff0-9a-zA-Z_-]+)|[^]/g;

  function escaper(match, nil, dash, hexEscape, chars) {
    // Chars is the legal-chars (group 4) capture
    if (chars) {
      return chars;
    } // Nil is the null terminator (group 1) capture


    if (nil) {
      return "\uFFFD";
    } // Both UTF control chars, and leading numbers (with optional leading dash)
    // (group 3) must be backslash escaped with a trailing space.  Funnily, the
    // leading dash must not be escaped, but the number. :shrug:


    if (hexEscape) {
      return match.slice(0, -1) + '\\' + match.slice(-1).charCodeAt(0).toString(16) + ' ';
    } // Finally, the solitary dash and the catch-all chars require backslash
    // escaping.


    return '\\' + match;
  }
  /**
   * https://drafts.csswg.org/cssom/#serialize-an-identifier
   * @param {string} value
   * @return {string}
   */


  function cssEscape(value) {
    return String(value).replace(regex, escaper);
  }

  },{}],143:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports.ShadowCSS = void 0;

  /**
   * @license
   * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */

  /*
    This is a limited shim for ShadowDOM css styling.
    https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

    The intention here is to support only the styling features which can be
    relatively simply implemented. The goal is to allow users to avoid the
    most obvious pitfalls and do so without compromising performance significantly.
    For ShadowDOM styling that's not covered here, a set of best practices
    can be provided that should allow users to accomplish more complex styling.

    The following is a list of specific ShadowDOM styling features and a brief
    discussion of the approach used to shim.

    Shimmed features:

    * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
    element using the :host rule. To shim this feature, the :host styles are
    reformatted and prefixed with a given scope name and promoted to a
    document level stylesheet.
    For example, given a scope name of .foo, a rule like this:

      :host {
          background: red;
        }
      }

    becomes:

      .foo {
        background: red;
      }

    * encapsultion: Styles defined within ShadowDOM, apply only to
    dom inside the ShadowDOM. Polymer uses one of two techniques to imlement
    this feature.

    By default, rules are prefixed with the host element tag name
    as a descendant selector. This ensures styling does not leak out of the 'top'
    of the element's ShadowDOM. For example,

    div {
        font-weight: bold;
      }

    becomes:

    x-foo div {
        font-weight: bold;
      }

    becomes:


    Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
    selectors are scoped by adding an attribute selector suffix to each
    simple selector that contains the host element tag name. Each element
    in the element's ShadowDOM template is also given the scope attribute.
    Thus, these rules match only elements that have the scope attribute.
    For example, given a scope name of x-foo, a rule like this:

      div {
        font-weight: bold;
      }

    becomes:

      div[x-foo] {
        font-weight: bold;
      }

    Note that elements that are dynamically added to a scope must have the scope
    selector added to them manually.

    * upper/lower bound encapsulation: Styles which are defined outside a
    shadowRoot should not cross the ShadowDOM boundary and should not apply
    inside a shadowRoot.

    This styling behavior is not emulated. Some possible ways to do this that
    were rejected due to complexity and/or performance concerns include: (1) reset
    every possible property for every possible selector for a given scope name;
    (2) re-implement css in javascript.

    As an alternative, users should make sure to use selectors
    specific to the scope in which they are working.

    * ::distributed: This behavior is not emulated. It's often not necessary
    to style the contents of a specific insertion point and instead, descendants
    of the host element can be styled selectively. Users can also create an
    extra node around an insertion point and style that node's contents
    via descendent selectors. For example, with a shadowRoot like this:

      <style>
        ::content(div) {
          background: red;
        }
      </style>
      <content></content>

    could become:

      <style>
        / *@polyfill .content-container div * /
        ::content(div) {
          background: red;
        }
      </style>
      <div class="content-container">
        <content></content>
      </div>

    Note the use of @polyfill in the comment above a ShadowDOM specific style
    declaration. This is a directive to the styling shim to use the selector
    in comments in lieu of the next selector when running under polyfill.
  */
  var ShadowCSS = {
    strictStyling: false,
    // change a selector like 'div' to 'name div'

    /** @this {ShadowCSS} */
    scopeRules: function scopeRules(cssRules, scopeSelector, opt_transformer) {
      var cssText = '';

      if (cssRules) {
        Array.prototype.forEach.call(cssRules, function (rule) {
          if (rule.selectorText && rule.style && rule.style.cssText !== undefined) {
            cssText += this.scopeSelector(rule.selectorText, scopeSelector, this.strictStyling, opt_transformer) + ' {\n\t';
            cssText += this.propertiesFromRule(rule) + '\n}\n\n';
          } else if (rule.type === CSSRule.MEDIA_RULE) {
            cssText += '@media ' + rule.media.mediaText + ' {\n';
            cssText += this.scopeRules(rule.cssRules, scopeSelector);
            cssText += '\n}\n\n';
          } else {
            // KEYFRAMES_RULE in IE throws when we query cssText
            // when it contains a -webkit- property.
            // if this happens, we fallback to constructing the rule
            // from the CSSRuleSet
            // https://connect.microsoft.com/IE/feedbackdetail/view/955703/accessing-csstext-of-a-keyframe-rule-that-contains-a-webkit-property-via-cssom-generates-exception
            try {
              if (rule.cssText) {
                cssText += rule.cssText + '\n\n';
              }
            } catch (x) {
              if (rule.type === CSSRule.KEYFRAMES_RULE && rule.cssRules) {
                cssText += this.ieSafeCssTextFromKeyFrameRule(rule);
              }
            }
          }
        }, this);
      }

      return cssText;
    },

    /** @this {ShadowCSS} */
    ieSafeCssTextFromKeyFrameRule: function ieSafeCssTextFromKeyFrameRule(rule) {
      var cssText = '@keyframes ' + rule.name + ' {';
      Array.prototype.forEach.call(rule.cssRules, function (rule) {
        cssText += ' ' + rule.keyText + ' {' + rule.style.cssText + '}';
      });
      cssText += ' }';
      return cssText;
    },

    /** @this {ShadowCSS} */
    scopeSelector: function scopeSelector(selector, _scopeSelector, strict, opt_transformer) {
      var r = [],
          parts = selector.split(',');
      parts.forEach(function (p) {
        p = p.trim();

        if (opt_transformer) {
          p = opt_transformer(p);
        }

        if (this.selectorNeedsScoping(p, _scopeSelector)) {
          p = strict && !p.match(polyfillHostNoCombinator) ? this.applyStrictSelectorScope(p, _scopeSelector) : this.applySelectorScope(p, _scopeSelector);
        }

        r.push(p);
      }, this);
      return r.join(', ');
    },

    /** @this {ShadowCSS} */
    selectorNeedsScoping: function selectorNeedsScoping(selector, scopeSelector) {
      if (Array.isArray(scopeSelector)) {
        return true;
      }

      var re = this.makeScopeMatcher(scopeSelector);
      return !selector.match(re);
    },

    /** @this {ShadowCSS} */
    makeScopeMatcher: function makeScopeMatcher(scopeSelector) {
      scopeSelector = scopeSelector.replace(/\[/g, '\\[').replace(/\]/g, '\\]');
      return new RegExp('^(' + scopeSelector + ')' + selectorReSuffix, 'm');
    },

    /** @this {ShadowCSS} */
    applySelectorScope: function applySelectorScope(selector, selectorScope) {
      return Array.isArray(selectorScope) ? this.applySelectorScopeList(selector, selectorScope) : this.applySimpleSelectorScope(selector, selectorScope);
    },
    // apply an array of selectors

    /** @this {ShadowCSS} */
    applySelectorScopeList: function applySelectorScopeList(selector, scopeSelectorList) {
      var r = [];

      for (var i = 0, s; s = scopeSelectorList[i]; i++) {
        r.push(this.applySimpleSelectorScope(selector, s));
      }

      return r.join(', ');
    },
    // scope via name and [is=name]

    /** @this {ShadowCSS} */
    applySimpleSelectorScope: function applySimpleSelectorScope(selector, scopeSelector) {
      if (selector.match(polyfillHostRe)) {
        selector = selector.replace(polyfillHostNoCombinator, scopeSelector);
        return selector.replace(polyfillHostRe, scopeSelector + ' ');
      } else {
        return scopeSelector + ' ' + selector;
      }
    },
    // return a selector with [name] suffix on each simple selector
    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]

    /** @this {ShadowCSS} */
    applyStrictSelectorScope: function applyStrictSelectorScope(selector, scopeSelector) {
      scopeSelector = scopeSelector.replace(/\[is=([^\]]*)\]/g, '$1');
      var splits = [' ', '>', '+', '~'],
          scoped = selector,
          attrName = '[' + scopeSelector + ']';
      splits.forEach(function (sep) {
        var parts = scoped.split(sep);
        scoped = parts.map(function (p) {
          // remove :host since it should be unnecessary
          var t = p.trim().replace(polyfillHostRe, '');

          if (t && splits.indexOf(t) < 0 && t.indexOf(attrName) < 0) {
            p = t.replace(/([^:]*)(:*)(.*)/, '$1' + attrName + '$2$3');
          }

          return p;
        }).join(sep);
      });
      return scoped;
    },

    /** @this {ShadowCSS} */
    propertiesFromRule: function propertiesFromRule(rule) {
      var cssText = rule.style.cssText; // TODO(sorvell): Safari cssom incorrectly removes quotes from the content
      // property. (https://bugs.webkit.org/show_bug.cgi?id=118045)
      // don't replace attr rules

      if (rule.style.content && !rule.style.content.match(/['"]+|attr/)) {
        cssText = cssText.replace(/content:[^;]*;/g, 'content: \'' + rule.style.content + '\';');
      } // TODO(sorvell): we can workaround this issue here, but we need a list
      // of troublesome properties to fix https://github.com/Polymer/platform/issues/53
      //
      // inherit rules can be omitted from cssText
      // TODO(sorvell): remove when Blink bug is fixed:
      // https://code.google.com/p/chromium/issues/detail?id=358273


      var style = rule.style;

      for (var i in style) {
        if (style[i] === 'initial') {
          cssText += i + ': initial; ';
        }
      }

      return cssText;
    }
  };
  exports.ShadowCSS = ShadowCSS;
  var selectorRe = /([^{]*)({[\s\S]*?})/gim,
      cssCommentRe = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,
      // TODO(sorvell): remove either content or comment
  cssCommentNextSelectorRe = /\/\*\s*@polyfill ([^*]*\*+([^/*][^*]*\*+)*\/)([^{]*?){/gim,
      cssContentNextSelectorRe = /polyfill-next-selector[^}]*content\:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim,
      // TODO(sorvell): remove either content or comment
  cssCommentRuleRe = /\/\*\s@polyfill-rule([^*]*\*+([^/*][^*]*\*+)*)\//gim,
      cssContentRuleRe = /(polyfill-rule)[^}]*(content\:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim,
      // TODO(sorvell): remove either content or comment
  cssCommentUnscopedRuleRe = /\/\*\s@polyfill-unscoped-rule([^*]*\*+([^/*][^*]*\*+)*)\//gim,
      cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content\:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim,
      cssPseudoRe = /::(x-[^\s{,(]*)/gim,
      cssPartRe = /::part\(([^)]*)\)/gim,
      // note: :host pre-processed to -shadowcsshost.
  polyfillHost = '-shadowcsshost',
      // note: :host-context pre-processed to -shadowcsshostcontext.
  polyfillHostContext = '-shadowcsscontext',
      parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
  var cssColonHostRe = new RegExp('(' + polyfillHost + parenSuffix, 'gim'),
      cssColonHostContextRe = new RegExp('(' + polyfillHostContext + parenSuffix, 'gim'),
      selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$',
      colonHostRe = /\:host/gim,
      colonHostContextRe = /\:host-context/gim,

  /* host name without combinator */
  polyfillHostNoCombinator = polyfillHost + '-no-combinator',
      polyfillHostRe = new RegExp(polyfillHost, 'gim'),
      polyfillHostContextRe = new RegExp(polyfillHostContext, 'gim'),
      shadowDOMSelectorsRe = [/>>>/g, /::shadow/g, /::content/g, // Deprecated selectors
  /\/deep\//g, // former >>>
  /\/shadow\//g, // former ::shadow
  /\/shadow-deep\//g, // former /deep/
  /\^\^/g, // former /shadow/
  /\^(?!=)/g // former /shadow-deep/
  ];

  },{}]},{},[10])

  })(AMP._=AMP._||{})}catch(e){setTimeout(function(){var s=document.body.style;s.opacity=1;s.visibility="visible";s.animation="none";s.WebkitAnimation="none;"},1000);throw e};
  //# sourceMappingURL=amp.js.map

  console.log('AMP.js compiled', performance.now());
  document.body.innerHTML += `<p>AMP.js loaded</p> ${performance.now()}`;
